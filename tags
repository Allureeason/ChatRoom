!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(VERBOSE).SILENT	build/Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE).SILENT	build/sylar/Makefile	/^$(VERBOSE).SILENT:$/;"	t
%	Makefile	/^%:$/;"	t
%	sylar/Makefile	/^%:$/;"	t
A	sylar/tests/test_env.cc	/^    A() {$/;"	f	struct:A	file:	access:public	signature:()
A	sylar/tests/test_env.cc	/^struct A {$/;"	s	file:
A	sylar/tests/test_module.cc	/^    A() {$/;"	f	class:A	file:	access:public	signature:()
A	sylar/tests/test_module.cc	/^class A {$/;"	c	file:
A::A	sylar/tests/test_env.cc	/^    A() {$/;"	f	struct:A	file:	access:public	signature:()
A::A	sylar/tests/test_module.cc	/^    A() {$/;"	f	class:A	file:	access:public	signature:()
A::~A	sylar/tests/test_module.cc	/^    ~A() {$/;"	f	class:A	file:	access:public	signature:()
AES128Cbc	sylar/sylar/util/crypto_util.cc	/^int32_t CryptoUtil::AES128Cbc(const void* key, const void* iv$/;"	f	class:sylar::CryptoUtil	typeref:typename:int32_t	signature:(const void * key,const void * iv,const void * in,int32_t in_len,void * out,bool encode)
AES128Cbc	sylar/sylar/util/crypto_util.h	/^    static int32_t AES128Cbc(const void* key, const void* iv$/;"	p	class:sylar::CryptoUtil	typeref:typename:int32_t	access:public	signature:(const void * key,const void * iv,const void * in,int32_t in_len,void * out,bool encode)
AES128Ecb	sylar/sylar/util/crypto_util.cc	/^int32_t CryptoUtil::AES128Ecb(const void* key$/;"	f	class:sylar::CryptoUtil	typeref:typename:int32_t	signature:(const void * key,const void * in,int32_t in_len,void * out,bool encode)
AES128Ecb	sylar/sylar/util/crypto_util.h	/^    static int32_t AES128Ecb(const void* key$/;"	p	class:sylar::CryptoUtil	typeref:typename:int32_t	access:public	signature:(const void * key,const void * in,int32_t in_len,void * out,bool encode)
AES256Cbc	sylar/sylar/util/crypto_util.cc	/^int32_t CryptoUtil::AES256Cbc(const void* key, const void* iv$/;"	f	class:sylar::CryptoUtil	typeref:typename:int32_t	signature:(const void * key,const void * iv,const void * in,int32_t in_len,void * out,bool encode)
AES256Cbc	sylar/sylar/util/crypto_util.h	/^    static int32_t AES256Cbc(const void* key, const void* iv$/;"	p	class:sylar::CryptoUtil	typeref:typename:int32_t	access:public	signature:(const void * key,const void * iv,const void * in,int32_t in_len,void * out,bool encode)
AES256Ecb	sylar/sylar/util/crypto_util.cc	/^int32_t CryptoUtil::AES256Ecb(const void* key$/;"	f	class:sylar::CryptoUtil	typeref:typename:int32_t	signature:(const void * key,const void * in,int32_t in_len,void * out,bool encode)
AES256Ecb	sylar/sylar/util/crypto_util.h	/^    static int32_t AES256Ecb(const void* key$/;"	p	class:sylar::CryptoUtil	typeref:typename:int32_t	access:public	signature:(const void * key,const void * in,int32_t in_len,void * out,bool encode)
ALIGNED	sylar/sylar/ds/roaring.h	/^#define ALIGNED(/;"	d	signature:(x)
ALIGN_AVX	sylar/sylar/ds/roaring.h	/^#define ALIGN_AVX /;"	d
ALIGN_AVX	sylar/sylar/ds/roaring.h	/^#define ALIGN_AVX$/;"	d
ARCHITECTURE_ID	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARRAY_CONTAINER_TYPE_CODE	sylar/sylar/ds/roaring.h	/^#define ARRAY_CONTAINER_TYPE_CODE /;"	d
ARRAY_DEFAULT_INIT_SIZE	sylar/sylar/ds/roaring.h	/^enum { ARRAY_DEFAULT_INIT_SIZE = 0 };$/;"	e	enum:__anon10207c070403	access:public
ARRAY_LAZY_LOWERBOUND	sylar/sylar/ds/roaring.h	/^enum { ARRAY_LAZY_LOWERBOUND = 1024 };$/;"	e	enum:__anon10207c070203	access:public
ARRAY_UTIL_H	sylar/sylar/ds/roaring.h	/^#define ARRAY_UTIL_H$/;"	d
ASMBITMANIPOPTIMIZATION	sylar/sylar/ds/roaring.h	/^#define ASMBITMANIPOPTIMIZATION /;"	d
ASM_BT64	sylar/sylar/ds/roaring.h	/^#define ASM_BT64(/;"	d	signature:(testByte,testBit,count)
ASM_CLEAR_BIT_DEC_WAS_SET	sylar/sylar/ds/roaring.h	/^#define ASM_CLEAR_BIT_DEC_WAS_SET(/;"	d	signature:(testByte,testBit,count)
ASM_INPLACESHIFT_RIGHT	sylar/sylar/ds/roaring.h	/^#define ASM_INPLACESHIFT_RIGHT(/;"	d	signature:(srcReg,bitsReg)
ASM_SET_BIT_INC_WAS_CLEAR	sylar/sylar/ds/roaring.h	/^#define ASM_SET_BIT_INC_WAS_CLEAR(/;"	d	signature:(testByte,testBit,count)
ASM_SHIFT_LEFT	sylar/sylar/ds/roaring.h	/^#define ASM_SHIFT_LEFT(/;"	d	signature:(srcReg,bitsReg,destReg)
ASM_SHIFT_RIGHT	sylar/sylar/ds/roaring.h	/^#define ASM_SHIFT_RIGHT(/;"	d	signature:(srcReg,bitsReg,destReg)
ASSOCIATING	sylar/sylar/zk_client.cc	/^const int ZKClient::StateType::ASSOCIATING = ZOO_ASSOCIATING_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int
ASSOCIATING	sylar/sylar/zk_client.h	/^        static const int ASSOCIATING; \/\/ = ZOO_ASSOCIATING_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
AUTH_FAILED	sylar/sylar/zk_client.cc	/^const int ZKClient::StateType::AUTH_FAILED = ZOO_AUTH_FAILED_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int
AUTH_FAILED	sylar/sylar/zk_client.h	/^        static const int AUTH_FAILED; \/\/ = ZOO_AUTH_FAILED_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
AVXPOPCNTFNC	sylar/sylar/ds/roaring.h	/^#define AVXPOPCNTFNC(/;"	d	signature:(opname,avx_intrinsic)
Address	sylar/sylar/address.h	/^class Address {$/;"	c	namespace:sylar
Alloc	sylar/sylar/fiber.cc	/^    static void* Alloc(size_t size) {$/;"	f	class:sylar::MallocStackAllocator	typeref:typename:void *	file:	access:public	signature:(size_t size)
Application	sylar/sylar/application.cc	/^Application::Application() {$/;"	f	class:sylar::Application	signature:()
Application	sylar/sylar/application.h	/^    Application();$/;"	p	class:sylar::Application	access:public	signature:()
Application	sylar/sylar/application.h	/^class Application {$/;"	c	namespace:sylar
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(void * object)
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(void * object)
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(void * object)
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(void * object)
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(void * object)
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(void * object)
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(void * object)
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(void * object)
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:(void * object)
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:(void * object)
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:(void * object)
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:(void * object)
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:(void * object)
ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:(void * object)
Array	sylar/sylar/ds/array.h	/^    Array(const T* data, const uint64_t size, bool copy)$/;"	f	class:sylar::ds::Array	access:public	signature:(const T * data,const uint64_t size,bool copy)
Array	sylar/sylar/ds/array.h	/^    Array(const uint64_t size = 0)$/;"	f	class:sylar::ds::Array	access:public	signature:(const uint64_t size=0)
Array	sylar/sylar/ds/array.h	/^class Array {$/;"	c	namespace:sylar::ds
AsyncSocketStream	sylar/sylar/streams/async_socket_stream.cc	/^AsyncSocketStream::AsyncSocketStream(Socket::ptr sock, bool owner)$/;"	f	class:sylar::AsyncSocketStream	signature:(Socket::ptr sock,bool owner)
AsyncSocketStream	sylar/sylar/streams/async_socket_stream.h	/^    AsyncSocketStream(Socket::ptr sock, bool owner = true);$/;"	p	class:sylar::AsyncSocketStream	access:public	signature:(Socket::ptr sock,bool owner=true)
AsyncSocketStream	sylar/sylar/streams/async_socket_stream.h	/^class AsyncSocketStream : public SocketStream$/;"	c	namespace:sylar	inherits:SocketStream,std::enable_shared_from_this<AsyncSocketStream>
AsyncSocketStreamManager	sylar/sylar/streams/async_socket_stream.cc	/^AsyncSocketStreamManager::AsyncSocketStreamManager()$/;"	f	class:sylar::AsyncSocketStreamManager	signature:()
AsyncSocketStreamManager	sylar/sylar/streams/async_socket_stream.h	/^    AsyncSocketStreamManager();$/;"	p	class:sylar::AsyncSocketStreamManager	access:public	signature:()
AsyncSocketStreamManager	sylar/sylar/streams/async_socket_stream.h	/^class AsyncSocketStreamManager {$/;"	c	namespace:sylar
Atof	sylar/sylar/util.cc	/^double  TypeUtil::Atof(const char* str) {$/;"	f	class:sylar::TypeUtil	typeref:typename:double	signature:(const char * str)
Atof	sylar/sylar/util.cc	/^double  TypeUtil::Atof(const std::string& str) {$/;"	f	class:sylar::TypeUtil	typeref:typename:double	signature:(const std::string & str)
Atof	sylar/sylar/util.h	/^    static double Atof(const char* str);$/;"	p	class:sylar::TypeUtil	typeref:typename:double	access:public	signature:(const char * str)
Atof	sylar/sylar/util.h	/^    static double Atof(const std::string& str);$/;"	p	class:sylar::TypeUtil	typeref:typename:double	access:public	signature:(const std::string & str)
Atoi	sylar/sylar/util.cc	/^int64_t TypeUtil::Atoi(const char* str) {$/;"	f	class:sylar::TypeUtil	typeref:typename:int64_t	signature:(const char * str)
Atoi	sylar/sylar/util.cc	/^int64_t TypeUtil::Atoi(const std::string& str) {$/;"	f	class:sylar::TypeUtil	typeref:typename:int64_t	signature:(const std::string & str)
Atoi	sylar/sylar/util.h	/^    static int64_t Atoi(const char* str);$/;"	p	class:sylar::TypeUtil	typeref:typename:int64_t	access:public	signature:(const char * str)
Atoi	sylar/sylar/util.h	/^    static int64_t Atoi(const std::string& str);$/;"	p	class:sylar::TypeUtil	typeref:typename:int64_t	access:public	signature:(const std::string & str)
Atomic	sylar/sylar/util.h	/^class Atomic {$/;"	c	namespace:sylar
BEST_COMPRESSION	sylar/sylar/streams/zlib_stream.h	/^        BEST_COMPRESSION = Z_BEST_COMPRESSION,$/;"	e	enum:sylar::ZlibStream::CompressLevel	access:public
BEST_SPEED	sylar/sylar/streams/zlib_stream.h	/^        BEST_SPEED = Z_BEST_SPEED,$/;"	e	enum:sylar::ZlibStream::CompressLevel	access:public
BIND_COPY	sylar/sylar/db/mysql.cc	/^#define BIND_COPY(/;"	d	file:	signature:(ptr,size)
BIND_COPY_LEN	sylar/sylar/db/mysql.cc	/^#define BIND_COPY_LEN(/;"	d	file:	signature:(ptr,size)
BIN_FRAME	sylar/sylar/http/ws_session.h	/^        BIN_FRAME = 2,$/;"	e	enum:sylar::http::WSFrameHead::OPCODE	access:public
BITMAP_TYPE	sylar/sylar/ds/bitmap.h	/^#define BITMAP_TYPE /;"	d
BITMAP_TYPE_UINT16	sylar/sylar/ds/bitmap.h	/^#define BITMAP_TYPE_UINT16 /;"	d
BITMAP_TYPE_UINT32	sylar/sylar/ds/bitmap.h	/^#define BITMAP_TYPE_UINT32 /;"	d
BITMAP_TYPE_UINT64	sylar/sylar/ds/bitmap.h	/^#define BITMAP_TYPE_UINT64 /;"	d
BITMAP_TYPE_UINT8	sylar/sylar/ds/bitmap.h	/^#define BITMAP_TYPE_UINT8 /;"	d
BITSET_CONTAINER_FN	sylar/sylar/ds/roaring.c	/^#define BITSET_CONTAINER_FN(/;"	d	file:	signature:(opname,opsymbol,avx_intrinsic,neon_intrinsic)
BITSET_CONTAINER_FN_REPEAT	sylar/sylar/ds/roaring.c	/^#define BITSET_CONTAINER_FN_REPEAT /;"	d	file:
BITSET_CONTAINER_SIZE_IN_WORDS	sylar/sylar/ds/roaring.h	/^    BITSET_CONTAINER_SIZE_IN_WORDS = (1 << 16) \/ 64,$/;"	e	enum:__anon10207c070603	access:public
BITSET_CONTAINER_TYPE_CODE	sylar/sylar/ds/roaring.h	/^#define BITSET_CONTAINER_TYPE_CODE /;"	d
BITSET_UNKNOWN_CARDINALITY	sylar/sylar/ds/roaring.h	/^    BITSET_UNKNOWN_CARDINALITY = -1$/;"	e	enum:__anon10207c070603	access:public
BITSET_UTIL_H	sylar/sylar/ds/roaring.h	/^#define BITSET_UTIL_H$/;"	d
BUILD_TEST	sylar/CMakeLists.txt	/^option(BUILD_TEST "ON for complile test" OFF)$/;"	D
Backtrace	sylar/sylar/util.cc	/^void Backtrace(std::vector<std::string>& bt, int size, int skip) {$/;"	f	namespace:sylar	typeref:typename:void	signature:(std::vector<std::string> & bt,int size,int skip)
Backtrace	sylar/sylar/util.h	/^void Backtrace(std::vector<std::string>& bt, int size = 64, int skip = 1);$/;"	p	namespace:sylar	typeref:typename:void	signature:(std::vector<std::string> & bt,int size=64,int skip=1)
BacktraceToString	sylar/sylar/util.cc	/^std::string BacktraceToString(int size, int skip, const std::string& prefix) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(int size,int skip,const std::string & prefix)
BacktraceToString	sylar/sylar/util.h	/^std::string BacktraceToString(int size = 64, int skip = 2, const std::string& prefix = "");$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(int size=64,int skip=2,const std::string & prefix="")
Basename	sylar/sylar/util.cc	/^std::string FSUtil::Basename(const std::string& filename) {$/;"	f	class:sylar::FSUtil	typeref:typename:std::string	signature:(const std::string & filename)
Basename	sylar/sylar/util.h	/^    static std::string Basename(const std::string& filename);$/;"	p	class:sylar::FSUtil	typeref:typename:std::string	access:public	signature:(const std::string & filename)
BinarySearch	sylar/sylar/ds/util.h	/^T BinarySearch(const T& begin, const T& end, const V& v) {$/;"	f	namespace:sylar::ds	typeref:typename:T	signature:(const T & begin,const T & end,const V & v)
BinarySearch	sylar/sylar/util.h	/^int BinarySearch(const T* arr, int length, const T& v) {$/;"	f	namespace:sylar	typeref:typename:int	signature:(const T * arr,int length,const T & v)
Bind	sylar/sylar/db/mysql.h	/^    static int Bind(MySQLStmt::ptr stmt$/;"	f	struct:sylar::__anonb8e76c1a0210::MySQLBinder	typeref:typename:int	access:public	signature:(MySQLStmt::ptr stmt,const Head &,Tail &...)
Bind	sylar/sylar/db/mysql.h	/^    static int Bind(std::shared_ptr<MySQLStmt> stmt) { return 0; }$/;"	f	struct:sylar::__anonb8e76c1a0110::MySQLBinder	typeref:typename:int	access:public	signature:(std::shared_ptr<MySQLStmt> stmt)
Bind	sylar/sylar/db/sqlite3.h	/^    static int Bind(SQLite3Stmt::ptr stmt$/;"	f	struct:sylar::__anonbc7bfd090310::SQLite3Binder	typeref:typename:int	access:public	signature:(SQLite3Stmt::ptr stmt,const Head &,const Tail &...)
Bind	sylar/sylar/db/sqlite3.h	/^    static int Bind(std::shared_ptr<SQLite3Stmt> stmt) { return SQLITE_OK; }$/;"	f	struct:sylar::__anonbc7bfd090110::SQLite3Binder	typeref:typename:int	access:public	signature:(std::shared_ptr<SQLite3Stmt> stmt)
Bitmap	sylar/sylar/ds/bitmap.cc	/^Bitmap::Bitmap()$/;"	f	class:sylar::ds::Bitmap	signature:()
Bitmap	sylar/sylar/ds/bitmap.cc	/^Bitmap::Bitmap(const Bitmap& b) {$/;"	f	class:sylar::ds::Bitmap	signature:(const Bitmap & b)
Bitmap	sylar/sylar/ds/bitmap.cc	/^Bitmap::Bitmap(uint32_t size, uint8_t def)$/;"	f	class:sylar::ds::Bitmap	signature:(uint32_t size,uint8_t def)
Bitmap	sylar/sylar/ds/bitmap.h	/^    Bitmap();$/;"	p	class:sylar::ds::Bitmap	access:private	signature:()
Bitmap	sylar/sylar/ds/bitmap.h	/^    Bitmap(const Bitmap& b);$/;"	p	class:sylar::ds::Bitmap	access:public	signature:(const Bitmap & b)
Bitmap	sylar/sylar/ds/bitmap.h	/^    Bitmap(uint32_t size, uint8_t def = 0);$/;"	p	class:sylar::ds::Bitmap	access:public	signature:(uint32_t size,uint8_t def=0)
Bitmap	sylar/sylar/ds/bitmap.h	/^class Bitmap {$/;"	c	namespace:sylar::ds
ByteArray	sylar/sylar/bytearray.cc	/^ByteArray::ByteArray(size_t base_size)$/;"	f	class:sylar::ByteArray	signature:(size_t base_size)
ByteArray	sylar/sylar/bytearray.h	/^    ByteArray(size_t base_size = 4096);$/;"	p	class:sylar::ByteArray	access:public	signature:(size_t base_size=4096)
ByteArray	sylar/sylar/bytearray.h	/^class ByteArray {$/;"	c	namespace:sylar
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t Node::ByteSizeLong() const {$/;"	f	class:sylar::ns::Node	typeref:typename:size_t	signature:() const
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t NodeInfo::ByteSizeLong() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:size_t	signature:() const
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t NotifyMessage::ByteSizeLong() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:size_t	signature:() const
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t QueryRequest::ByteSizeLong() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:size_t	signature:() const
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t QueryResponse::ByteSizeLong() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:size_t	signature:() const
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t RegisterInfo::ByteSizeLong() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:size_t	signature:() const
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t RegisterRequest::ByteSizeLong() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:size_t	signature:() const
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::Node	typeref:typename:size_t	access:public	signature:() const
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:size_t	access:public	signature:() const
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:size_t	access:public	signature:() const
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:size_t	access:public	signature:() const
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:size_t	access:public	signature:() const
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:size_t	access:public	signature:() const
ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:size_t	access:public	signature:() const
CASLock	sylar/sylar/mutex.h	/^    CASLock() {$/;"	f	class:sylar::CASLock	access:public	signature:()
CASLock	sylar/sylar/mutex.h	/^class CASLock : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
CHANGED	sylar/sylar/zk_client.cc	/^const int ZKClient::EventType::CHANGED = ZOO_CHANGED_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int
CHANGED	sylar/sylar/zk_client.h	/^        static const int CHANGED; \/\/ = ZOO_CHANGED_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int	access:public
CHAR_IS_UNRESERVED	sylar/sylar/util.cc	/^#define CHAR_IS_UNRESERVED(/;"	d	file:	signature:(c)
CHECK_STMT	sylar/sylar/orm/table.cc	/^#define CHECK_STMT(/;"	d	file:	signature:(v)
CHILD	sylar/sylar/zk_client.cc	/^const int ZKClient::EventType::CHILD   = ZOO_CHILD_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int
CHILD	sylar/sylar/zk_client.h	/^        static const int CHILD  ; \/\/ = ZOO_CHILD_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int	access:public
CHK_	sylar/sylar/ns/ns_protobuf.pb.cc	/^#define CHK_(/;"	d	file:	signature:(x)
CLOSE	sylar/sylar/http/ws_session.h	/^        CLOSE = 8,$/;"	e	enum:sylar::http::WSFrameHead::OPCODE	access:public
CMAKE_AR	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v
CMAKE_AR	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/busy\/github\/chat_room\/build$/;"	m
CMAKE_BINARY_DIR	build/sylar/Makefile	/^CMAKE_BINARY_DIR = \/home\/busy\/github\/chat_room\/build$/;"	m
CMAKE_C11_COMPILE_FEATURES	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C11_COMPILE_FEATURES "c_std_11;c_static_assert")$/;"	v
CMAKE_C90_COMPILE_FEATURES	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C90_COMPILE_FEATURES "c_std_90;c_function_prototypes")$/;"	v
CMAKE_C99_COMPILE_FEATURES	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C99_COMPILE_FEATURES "c_std_99;c_restrict;c_variadic_macros")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_C_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/sylar/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMPILER_IS_CYGWIN	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_CYGWIN )$/;"	v
CMAKE_COMPILER_IS_CYGWIN	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_CYGWIN )$/;"	v
CMAKE_COMPILER_IS_GNUCC	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCC 1)$/;"	v
CMAKE_COMPILER_IS_GNUCXX	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCXX 1)$/;"	v
CMAKE_COMPILER_IS_MINGW	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_MINGW )$/;"	v
CMAKE_COMPILER_IS_MINGW	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_MINGW )$/;"	v
CMAKE_CROSSCOMPILING	build/CMakeFiles/3.16.3/CMakeSystem.cmake	/^set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	build/cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	build/sylar/cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CXX11_COMPILE_FEATURES	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_att/;"	v
CMAKE_CXX14_COMPILE_FEATURES	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_de/;"	v
CMAKE_CXX17_COMPILE_FEATURES	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")$/;"	v
CMAKE_CXX20_COMPILE_FEATURES	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX20_COMPILE_FEATURES "cxx_std_20")$/;"	v
CMAKE_CXX98_COMPILE_FEATURES	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters")$/;"	v
CMAKE_CXX_ABI_COMPILED	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_ABI_COMPILED TRUE)$/;"	v
CMAKE_CXX_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_CXX_COMPILER	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER "\/usr\/bin\/g++")$/;"	v
CMAKE_CXX_COMPILER_ABI	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ABI "ELF")$/;"	v
CMAKE_CXX_COMPILER_AR	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_AR "\/usr\/bin\/gcc-ar-9")$/;"	v
CMAKE_CXX_COMPILER_ARG1	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ARG1 "")$/;"	v
CMAKE_CXX_COMPILER_ENV_VAR	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")$/;"	v
CMAKE_CXX_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "")$/;"	v
CMAKE_CXX_COMPILER_ID	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/CMakeFiles/chat_room.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/bin_sylar.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/orm.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/sylar.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_array.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_bitmap.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_crypto.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_dict.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_email.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_hashmap.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_hashmultimap.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_module.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_mysql.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_nameserver.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_rock.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_service_discovery.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_sqlite3.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_util.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/sylar/CMakeFiles/test_zkclient.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID_RUN	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID_RUN 1)$/;"	v
CMAKE_CXX_COMPILER_LOADED	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LOADED 1)$/;"	v
CMAKE_CXX_COMPILER_RANLIB	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib-9")$/;"	v
CMAKE_CXX_COMPILER_VERSION	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION "9.4.0")$/;"	v
CMAKE_CXX_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_CXX_COMPILER_WORKS	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WORKS TRUE)$/;"	v
CMAKE_CXX_COMPILER_WRAPPER	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WRAPPER "")$/;"	v
CMAKE_CXX_COMPILE_FEATURES	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias/;"	v
CMAKE_CXX_FLAGS	CMakeLists.txt	/^set(CMAKE_CXX_FLAGS "$ENV{CXXFLAGS} -rdynamic -O0 -ggdb -std=c++11 -Wall -Wno-deprecated -Werror/;"	v
CMAKE_CXX_FLAGS	sylar/CMakeLists.txt	/^set(CMAKE_CXX_FLAGS "$ENV{CXXFLAGS} -rdynamic -O3 -fPIC -ggdb -std=c++11 -Wall -Wno-deprecated -/;"	v
CMAKE_CXX_FLAGS	sylar/template/CMakeLists.txt	/^set(CMAKE_CXX_FLAGS "$ENV{CXXFLAGS} -rdynamic -O0 -ggdb -std=c++11 -Wall -Wno-deprecated -Werror/;"	v
CMAKE_CXX_IGNORE_EXTENSIONS	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/include\/c++\/9;\/usr\/include\/x86_64-linux-/;"	v
CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-linux-gnu\/9;\/usr\/lib\/x86_64/;"	v
CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_CXX_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++;m;gcc_s;gcc;c;gcc_s;gcc")$/;"	v
CMAKE_CXX_INCLUDE_REGEX_COMPLAIN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})$/;"	v
CMAKE_CXX_INCLUDE_REGEX_COMPLAIN	build/sylar/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})$/;"	v
CMAKE_CXX_INCLUDE_REGEX_SCAN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})$/;"	v
CMAKE_CXX_INCLUDE_REGEX_SCAN	build/sylar/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})$/;"	v
CMAKE_CXX_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_CXX_LINKER_PREFERENCE	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE 30)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)$/;"	v
CMAKE_CXX_PLATFORM_ID	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_PLATFORM_ID "Linux")$/;"	v
CMAKE_CXX_SIMULATE_ID	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_ID "")$/;"	v
CMAKE_CXX_SIMULATE_VERSION	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_VERSION "")$/;"	v
CMAKE_CXX_SIZEOF_DATA_PTR	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_CXX_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;CPP)$/;"	v
CMAKE_CXX_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "14")$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/CMakeFiles/chat_room.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/bin_sylar.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/orm.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/sylar.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_array.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_bitmap.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_crypto.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_dict.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_email.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_hashmap.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_hashmultimap.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_module.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_mysql.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_nameserver.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_rock.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_service_discovery.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_sqlite3.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_util.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_CXX_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/test_zkclient.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v
CMAKE_C_ABI_COMPILED	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_ABI_COMPILED TRUE)$/;"	v
CMAKE_C_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_C_COMPILER	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER "\/usr\/bin\/gcc")$/;"	v
CMAKE_C_COMPILER_ABI	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ABI "ELF")$/;"	v
CMAKE_C_COMPILER_AR	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_AR "\/usr\/bin\/gcc-ar-9")$/;"	v
CMAKE_C_COMPILER_ARG1	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ARG1 "")$/;"	v
CMAKE_C_COMPILER_ENV_VAR	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ENV_VAR "CC")$/;"	v
CMAKE_C_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_FRONTEND_VARIANT "")$/;"	v
CMAKE_C_COMPILER_ID	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID "GNU")$/;"	v
CMAKE_C_COMPILER_ID	build/sylar/CMakeFiles/sylar.dir/DependInfo.cmake	/^set(CMAKE_C_COMPILER_ID "GNU")$/;"	v
CMAKE_C_COMPILER_ID_RUN	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID_RUN 1)$/;"	v
CMAKE_C_COMPILER_LOADED	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LOADED 1)$/;"	v
CMAKE_C_COMPILER_RANLIB	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib-9")$/;"	v
CMAKE_C_COMPILER_VERSION	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION "9.4.0")$/;"	v
CMAKE_C_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_C_COMPILER_WORKS	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WORKS TRUE)$/;"	v
CMAKE_C_COMPILER_WRAPPER	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WRAPPER "")$/;"	v
CMAKE_C_COMPILE_FEATURES	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILE_FEATURES "c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macr/;"	v
CMAKE_C_FLAGS	sylar/CMakeLists.txt	/^set(CMAKE_C_FLAGS "$ENV{CXXFLAGS} -rdynamic -O3 -fPIC -ggdb -std=c11 -Wall -Wno-deprecated -Werr/;"	v
CMAKE_C_IGNORE_EXTENSIONS	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-linux-gnu\/9\/include;\/usr\/l/;"	v
CMAKE_C_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-linux-gnu\/9;\/usr\/lib\/x86_64-l/;"	v
CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_C_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gcc;gcc_s;c;gcc;gcc_s")$/;"	v
CMAKE_C_INCLUDE_REGEX_COMPLAIN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_COMPLAIN "^$")$/;"	v
CMAKE_C_INCLUDE_REGEX_COMPLAIN	build/sylar/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_COMPLAIN "^$")$/;"	v
CMAKE_C_INCLUDE_REGEX_SCAN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_SCAN "^.*$")$/;"	v
CMAKE_C_INCLUDE_REGEX_SCAN	build/sylar/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_SCAN "^.*$")$/;"	v
CMAKE_C_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_C_LINKER_PREFERENCE	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_LINKER_PREFERENCE 10)$/;"	v
CMAKE_C_PLATFORM_ID	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_PLATFORM_ID "Linux")$/;"	v
CMAKE_C_SIMULATE_ID	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_ID "")$/;"	v
CMAKE_C_SIMULATE_VERSION	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_VERSION "")$/;"	v
CMAKE_C_SIZEOF_DATA_PTR	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_C_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)$/;"	v
CMAKE_C_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_C_STANDARD_COMPUTED_DEFAULT "11")$/;"	v
CMAKE_C_TARGET_INCLUDE_PATH	build/sylar/CMakeFiles/sylar.dir/DependInfo.cmake	/^set(CMAKE_C_TARGET_INCLUDE_PATH$/;"	v
CMAKE_DEPENDS_CHECK_C	build/sylar/CMakeFiles/sylar.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_C$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/CMakeFiles/chat_room.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/bin_sylar.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/orm.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/sylar.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_array.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_bitmap.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_crypto.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_dict.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_email.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_hashmap.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_hashmultimap.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_module.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_mysql.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_nameserver.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_rock.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_service_discovery.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_sqlite3.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_util.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_CHECK_CXX	build/sylar/CMakeFiles/test_zkclient.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v
CMAKE_DEPENDS_GENERATOR	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPENDS_GENERATOR "Unix Makefiles")$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/CMakeFiles/chat_room.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/bin_sylar.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/orm.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/sylar.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_array.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_bitmap.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_crypto.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_dict.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_email.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_hashmap.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_hashmultimap.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_module.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_mysql.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_nameserver.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_rock.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_service_discovery.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_sqlite3.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_util.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/sylar/CMakeFiles/test_zkclient.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPEND_INFO_FILES	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPEND_INFO_FILES$/;"	v
CMAKE_FORCE_UNIX_PATHS	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_FORCE_UNIX_PATHS 1)$/;"	v
CMAKE_FORCE_UNIX_PATHS	build/sylar/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_FORCE_UNIX_PATHS 1)$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/CMakeFiles/chat_room.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/bin_sylar.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/orm.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/sylar.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_array.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_bitmap.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_crypto.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_dict.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_email.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_hashmap.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_hashmultimap.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_module.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_mysql.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_nameserver.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_rock.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_service_discovery.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_sqlite3.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_util.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/sylar/CMakeFiles/test_zkclient.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_HOST_SYSTEM	build/CMakeFiles/3.16.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM "Linux-5.4.0-105-generic")$/;"	v
CMAKE_HOST_SYSTEM_NAME	build/CMakeFiles/3.16.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_NAME "Linux")$/;"	v
CMAKE_HOST_SYSTEM_PROCESSOR	build/CMakeFiles/3.16.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_HOST_SYSTEM_VERSION	build/CMakeFiles/3.16.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_VERSION "5.4.0-105-generic")$/;"	v
CMAKE_INSTALL_COMPONENT	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v
CMAKE_INSTALL_COMPONENT	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v
CMAKE_INSTALL_COMPONENT	build/sylar/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v
CMAKE_INSTALL_COMPONENT	build/sylar/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v
CMAKE_INSTALL_CONFIG_NAME	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "")$/;"	v
CMAKE_INSTALL_CONFIG_NAME	build/sylar/cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "")$/;"	v
CMAKE_INSTALL_MANIFEST	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")$/;"	v
CMAKE_INSTALL_PREFIX	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v
CMAKE_INSTALL_PREFIX	build/sylar/cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v
CMAKE_INSTALL_SO_NO_EXE	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_SO_NO_EXE "1")$/;"	v
CMAKE_INSTALL_SO_NO_EXE	build/sylar/cmake_install.cmake	/^  set(CMAKE_INSTALL_SO_NO_EXE "1")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_C_COMPILER_ABI}")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_LINKER	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v
CMAKE_LINKER	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v
CMAKE_MAKEFILE_DEPENDS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_DEPENDS$/;"	v
CMAKE_MAKEFILE_OUTPUTS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_OUTPUTS$/;"	v
CMAKE_MAKEFILE_PRODUCTS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_PRODUCTS$/;"	v
CMAKE_MODULE_PATH	sylar/CMakeLists.txt	/^set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}\/cmake)$/;"	v
CMAKE_MT	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_MT	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_RANLIB	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v
CMAKE_RANLIB	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v
CMAKE_RELATIVE_PATH_TOP_BINARY	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_BINARY "\/home\/busy\/github\/chat_room\/build")$/;"	v
CMAKE_RELATIVE_PATH_TOP_BINARY	build/sylar/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_BINARY "\/home\/busy\/github\/chat_room\/build")$/;"	v
CMAKE_RELATIVE_PATH_TOP_SOURCE	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_SOURCE "\/home\/busy\/github\/chat_room")$/;"	v
CMAKE_RELATIVE_PATH_TOP_SOURCE	build/sylar/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_SOURCE "\/home\/busy\/github\/chat_room")$/;"	v
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/busy\/github\/chat_room$/;"	m
CMAKE_SOURCE_DIR	build/sylar/Makefile	/^CMAKE_SOURCE_DIR = \/home\/busy\/github\/chat_room$/;"	m
CMAKE_SYSTEM	build/CMakeFiles/3.16.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM "Linux-5.4.0-105-generic")$/;"	v
CMAKE_SYSTEM_LOADED	build/CMakeFiles/3.16.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_LOADED 1)$/;"	v
CMAKE_SYSTEM_NAME	build/CMakeFiles/3.16.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_NAME "Linux")$/;"	v
CMAKE_SYSTEM_PROCESSOR	build/CMakeFiles/3.16.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_SYSTEM_VERSION	build/CMakeFiles/3.16.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_VERSION "5.4.0-105-generic")$/;"	v
CMAKE_TARGET_DEFINITIONS_C	build/sylar/CMakeFiles/sylar.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_C$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/CMakeFiles/chat_room.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/bin_sylar.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/orm.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/sylar.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_array.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_bitmap.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_crypto.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_dict.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_email.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_hashmap.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_hashmultimap.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_module.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_mysql.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_nameserver.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_rock.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_service_discovery.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_sqlite3.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_util.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_DEFINITIONS_CXX	build/sylar/CMakeFiles/test_zkclient.dir/DependInfo.cmake	/^set(CMAKE_TARGET_DEFINITIONS_CXX$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/CMakeFiles/chat_room.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/bin_sylar.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/orm.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/sylar.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_array.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_bitmap.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_crypto.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_dict.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_email.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_hashmap.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_hashmultimap.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_module.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_mysql.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_nameserver.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_rock.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_service_discovery.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_sqlite3.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_util.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_TARGET_LINKED_INFO_FILES	build/sylar/CMakeFiles/test_zkclient.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_VERBOSE_MAKEFILE	CMakeLists.txt	/^set(CMAKE_VERBOSE_MAKEFILE ON)$/;"	v
CMAKE_VERBOSE_MAKEFILE	sylar/CMakeLists.txt	/^set(CMAKE_VERBOSE_MAKEFILE ON)$/;"	v
CMAKE_VERBOSE_MAKEFILE	sylar/template/CMakeLists.txt	/^set(CMAKE_VERBOSE_MAKEFILE ON)$/;"	v
CMD_ERR	sylar/sylar/db/redis.h	/^        CMD_ERR = 3,$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
CMD_ERR	sylar/sylar/db/redis.h	/^        CMD_ERR = 3,$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
COMPILER_ID	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPRESS_MASK	sylar/sylar/ds/bitmap.h	/^    static const base_type COMPRESS_MASK = ((base_type)1 << (sizeof(base_type) * 8 - 1));$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const base_type	access:private
CONNECTED	sylar/sylar/db/redis.h	/^        CONNECTED = 2$/;"	e	enum:sylar::FoxRedis::STATUS	access:public
CONNECTED	sylar/sylar/db/redis.h	/^        CONNECTED = 2$/;"	e	enum:sylar::FoxRedisCluster::STATUS	access:public
CONNECTED	sylar/sylar/zk_client.cc	/^const int ZKClient::StateType::CONNECTED = ZOO_CONNECTED_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int
CONNECTED	sylar/sylar/zk_client.h	/^        static const int CONNECTED; \/\/ = ZOO_CONNECTED_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
CONNECTING	sylar/sylar/db/redis.h	/^        CONNECTING = 1,$/;"	e	enum:sylar::FoxRedis::STATUS	access:public
CONNECTING	sylar/sylar/db/redis.h	/^        CONNECTING = 1,$/;"	e	enum:sylar::FoxRedisCluster::STATUS	access:public
CONNECTING	sylar/sylar/zk_client.cc	/^const int ZKClient::StateType::CONNECTING = ZOO_CONNECTING_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int
CONNECTING	sylar/sylar/zk_client.h	/^        static const int CONNECTING; \/\/ = ZOO_CONNECTING_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
CONNECT_ERR	sylar/sylar/db/redis.h	/^        CONNECT_ERR = 2,$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
CONNECT_ERR	sylar/sylar/db/redis.h	/^        CONNECT_ERR = 2,$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
CONNECT_FAIL	sylar/sylar/http/http_connection.h	/^        CONNECT_FAIL = 3,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
CONTAINER	sylar/sylar/zk_client.h	/^        static const int CONTAINER; \/\/ = ZOO_CONTAINER;$/;"	m	class:sylar::ZKClient::FlagsType	typeref:typename:const int	access:public
CONTAINERS_CONTAINERS_H	sylar/sylar/ds/roaring.h	/^#define CONTAINERS_CONTAINERS_H$/;"	d
CONTAINERS_MIXED_EQUAL_H_	sylar/sylar/ds/roaring.h	/^#define CONTAINERS_MIXED_EQUAL_H_$/;"	d
CONTAINERS_MIXED_SUBSET_H_	sylar/sylar/ds/roaring.h	/^#define CONTAINERS_MIXED_SUBSET_H_$/;"	d
CONTAINER_PAIR	sylar/sylar/ds/roaring.h	/^#define CONTAINER_PAIR(/;"	d	signature:(c1,c2)
CONTINUE	sylar/sylar/http/ws_session.h	/^        CONTINUE = 0,$/;"	e	enum:sylar::http::WSFrameHead::OPCODE	access:public
COPY	sylar/sylar/db/sqlite3.h	/^        COPY = 1,$/;"	e	enum:sylar::SQLite3Stmt::Type	access:public
COUNT_MASK	sylar/sylar/ds/bitmap.h	/^    static const base_type COUNT_MASK = ((base_type)1 << (sizeof(base_type) * 8 - 2)) - 1;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const base_type	access:private
CREATE	sylar/sylar/db/sqlite3.h	/^        CREATE = SQLITE_OPEN_CREATE$/;"	e	enum:sylar::SQLite3::Flags	access:public
CREATED	sylar/sylar/zk_client.cc	/^const int ZKClient::EventType::CREATED = ZOO_CREATED_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int
CREATED	sylar/sylar/zk_client.h	/^        static const int CREATED; \/\/ = ZOO_CREATED_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int	access:public
CREATE_SOCKET_ERROR	sylar/sylar/http/http_connection.h	/^        CREATE_SOCKET_ERROR = 7,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
CSA	sylar/sylar/ds/roaring.h	/^static inline void CSA(__m256i *h, __m256i *l, __m256i a, __m256i b,$/;"	f	typeref:typename:void	signature:(__m256i * h,__m256i * l,__m256i a,__m256i b,__m256i c)
CXX_STD	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
CYGWIN	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^  set(CYGWIN 1)$/;"	v
CYGWIN	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^  set(CYGWIN 1)$/;"	v
C_DIALECT	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT /;"	d	file:
C_DIALECT	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT$/;"	d	file:
C_DIALECT	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^# define C_DIALECT /;"	d	file:
CacheStatus	sylar/sylar/ds/cache_status.h	/^    CacheStatus() {}$/;"	f	class:sylar::ds::CacheStatus	access:public	signature:()
CacheStatus	sylar/sylar/ds/cache_status.h	/^class CacheStatus {$/;"	c	namespace:sylar::ds
CallerMainFunc	sylar/sylar/fiber.cc	/^void Fiber::CallerMainFunc() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
CallerMainFunc	sylar/sylar/fiber.h	/^    static void CallerMainFunc();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
CaseInsensitiveLess	sylar/sylar/http/http.h	/^struct CaseInsensitiveLess {$/;"	s	namespace:sylar::http
CharsToHttpMethod	sylar/sylar/http/http.cc	/^HttpMethod CharsToHttpMethod(const char* m) {$/;"	f	namespace:sylar::http	typeref:typename:HttpMethod	signature:(const char * m)
CharsToHttpMethod	sylar/sylar/http/http.h	/^HttpMethod CharsToHttpMethod(const char* m);$/;"	p	namespace:sylar::http	typeref:typename:HttpMethod	signature:(const char * m)
CheckGetParamValue	sylar/sylar/util.h	/^bool CheckGetParamValue(const Map& m, const K& k, V& v) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(const Map & m,const K & k,V & v)
Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::Clear() {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:()
Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::Clear() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:()
Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::Clear() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:()
Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::Clear() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:()
Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::Clear() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:()
Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::Clear() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:()
Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::Clear() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:()
Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::Node	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
Cmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisUtil::Cmd(const std::string& name, const char* fmt, ...) {$/;"	f	class:sylar::RedisUtil	typeref:typename:ReplyPtr	signature:(const std::string & name,const char * fmt,...)
Cmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisUtil::Cmd(const std::string& name, const char* fmt, va_list ap) {$/;"	f	class:sylar::RedisUtil	typeref:typename:ReplyPtr	signature:(const std::string & name,const char * fmt,va_list ap)
Cmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisUtil::Cmd(const std::string& name, const std::vector<std::string>& args) {$/;"	f	class:sylar::RedisUtil	typeref:typename:ReplyPtr	signature:(const std::string & name,const std::vector<std::string> & args)
Cmd	sylar/sylar/db/redis.h	/^    static ReplyPtr Cmd(const std::string& name, const char* fmt, ...);$/;"	p	class:sylar::RedisUtil	typeref:typename:ReplyPtr	access:public	signature:(const std::string & name,const char * fmt,...)
Cmd	sylar/sylar/db/redis.h	/^    static ReplyPtr Cmd(const std::string& name, const char* fmt, va_list ap); $/;"	p	class:sylar::RedisUtil	typeref:typename:ReplyPtr	access:public	signature:(const std::string & name,const char * fmt,va_list ap)
Cmd	sylar/sylar/db/redis.h	/^    static ReplyPtr Cmd(const std::string& name, const std::vector<std::string>& args); $/;"	p	class:sylar::RedisUtil	typeref:typename:ReplyPtr	access:public	signature:(const std::string & name,const std::vector<std::string> & args)
CmdCb	sylar/sylar/db/redis.cc	/^void FoxRedis::CmdCb(redisAsyncContext *ac, void *r, void *privdata) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(redisAsyncContext * ac,void * r,void * privdata)
CmdCb	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::CmdCb(redisClusterAsyncContext *ac, void *r, void *privdata) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(redisClusterAsyncContext * ac,void * r,void * privdata)
CmdCb	sylar/sylar/db/redis.h	/^    static void CmdCb(redisAsyncContext *c, void *r, void *privdata);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(redisAsyncContext * c,void * r,void * privdata)
CmdCb	sylar/sylar/db/redis.h	/^    static void CmdCb(redisClusterAsyncContext*c, void *r, void *privdata);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(redisClusterAsyncContext * c,void * r,void * privdata)
Column	sylar/sylar/orm/column.h	/^class Column {$/;"	c	namespace:sylar::orm
Comparator	sylar/sylar/timer.h	/^    struct Comparator {$/;"	s	class:sylar::Timer	access:private
CompressLevel	sylar/sylar/streams/zlib_stream.h	/^    enum CompressLevel {$/;"	g	class:sylar::ZlibStream	access:public
Config	sylar/sylar/config.h	/^class Config {$/;"	c	namespace:sylar
ConfigServlet	sylar/sylar/http/servlets/config_servlet.cc	/^ConfigServlet::ConfigServlet()$/;"	f	class:sylar::http::ConfigServlet	signature:()
ConfigServlet	sylar/sylar/http/servlets/config_servlet.h	/^    ConfigServlet();$/;"	p	class:sylar::http::ConfigServlet	access:public	signature:()
ConfigServlet	sylar/sylar/http/servlets/config_servlet.h	/^class ConfigServlet : public Servlet {$/;"	c	namespace:sylar::http	inherits:Servlet
ConfigVar	sylar/sylar/config.h	/^    ConfigVar(const std::string& name$/;"	f	class:sylar::ConfigVar	access:public	signature:(const std::string & name,const T & default_value,const std::string & description="")
ConfigVar	sylar/sylar/config.h	/^class ConfigVar : public ConfigVarBase {$/;"	c	namespace:sylar	inherits:ConfigVarBase
ConfigVarBase	sylar/sylar/config.h	/^    ConfigVarBase(const std::string& name, const std::string& description = "")$/;"	f	class:sylar::ConfigVarBase	access:public	signature:(const std::string & name,const std::string & description="")
ConfigVarBase	sylar/sylar/config.h	/^class ConfigVarBase {$/;"	c	namespace:sylar
ConfigVarMap	sylar/sylar/config.h	/^    typedef std::unordered_map<std::string, ConfigVarBase::ptr> ConfigVarMap;$/;"	t	class:sylar::Config	typeref:typename:std::unordered_map<std::string,ConfigVarBase::ptr>	access:public
ConnectCb	sylar/sylar/db/redis.cc	/^void FoxRedis::ConnectCb(const redisAsyncContext* c, int status) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(const redisAsyncContext * c,int status)
ConnectCb	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::ConnectCb(const redisAsyncContext* c, int status) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(const redisAsyncContext * c,int status)
ConnectCb	sylar/sylar/db/redis.h	/^    static void ConnectCb(const redisAsyncContext* c, int status);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(const redisAsyncContext * c,int status)
ConnectCb	sylar/sylar/db/redis.h	/^    static void ConnectCb(const redisAsyncContext* c, int status);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(const redisAsyncContext * c,int status)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::CopyFrom(const Node& from) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(const Node & from)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::CopyFrom(const NodeInfo& from) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(const NodeInfo & from)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::CopyFrom(const NotifyMessage& from) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(const NotifyMessage & from)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::CopyFrom(const QueryRequest& from) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(const QueryRequest & from)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::CopyFrom(const QueryResponse& from) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(const QueryResponse & from)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::CopyFrom(const RegisterInfo& from) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(const RegisterInfo & from)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::CopyFrom(const RegisterRequest& from) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(const RegisterRequest & from)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const Node& from);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(const Node & from)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const NodeInfo& from);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(const NodeInfo & from)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const NotifyMessage& from);$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:public	signature:(const NotifyMessage & from)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const QueryRequest& from);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(const QueryRequest & from)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const QueryResponse& from);$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:public	signature:(const QueryResponse & from)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const RegisterInfo& from);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(const RegisterInfo & from)
CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const RegisterRequest& from);$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:public	signature:(const RegisterRequest & from)
CountBytes	sylar/sylar/address.cc	/^static uint32_t CountBytes(T value) {$/;"	f	namespace:sylar	typeref:typename:uint32_t	file:	signature:(T value)
Create	sylar/sylar/address.cc	/^Address::ptr Address::Create(const sockaddr* addr, socklen_t addrlen) {$/;"	f	class:sylar::Address	typeref:typename:Address::ptr	signature:(const sockaddr * addr,socklen_t addrlen)
Create	sylar/sylar/address.cc	/^IPAddress::ptr IPAddress::Create(const char* address, uint16_t port) {$/;"	f	class:sylar::IPAddress	typeref:typename:IPAddress::ptr	signature:(const char * address,uint16_t port)
Create	sylar/sylar/address.cc	/^IPv4Address::ptr IPv4Address::Create(const char* address, uint16_t port) {$/;"	f	class:sylar::IPv4Address	typeref:typename:IPv4Address::ptr	signature:(const char * address,uint16_t port)
Create	sylar/sylar/address.cc	/^IPv6Address::ptr IPv6Address::Create(const char* address, uint16_t port) {$/;"	f	class:sylar::IPv6Address	typeref:typename:IPv6Address::ptr	signature:(const char * address,uint16_t port)
Create	sylar/sylar/address.h	/^    static Address::ptr Create(const sockaddr* addr, socklen_t addrlen);$/;"	p	class:sylar::Address	typeref:typename:Address::ptr	access:public	signature:(const sockaddr * addr,socklen_t addrlen)
Create	sylar/sylar/address.h	/^    static IPAddress::ptr Create(const char* address, uint16_t port = 0);$/;"	p	class:sylar::IPAddress	typeref:typename:IPAddress::ptr	access:public	signature:(const char * address,uint16_t port=0)
Create	sylar/sylar/address.h	/^    static IPv4Address::ptr Create(const char* address, uint16_t port = 0);$/;"	p	class:sylar::IPv4Address	typeref:typename:IPv4Address::ptr	access:public	signature:(const char * address,uint16_t port=0)
Create	sylar/sylar/address.h	/^    static IPv6Address::ptr Create(const char* address, uint16_t port = 0);$/;"	p	class:sylar::IPv6Address	typeref:typename:IPv6Address::ptr	access:public	signature:(const char * address,uint16_t port=0)
Create	sylar/sylar/db/mysql.cc	/^MySQLStmt::ptr MySQLStmt::Create(MySQL::ptr db, const std::string& stmt) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:MySQLStmt::ptr	signature:(MySQL::ptr db,const std::string & stmt)
Create	sylar/sylar/db/mysql.cc	/^MySQLStmtRes::ptr MySQLStmtRes::Create(std::shared_ptr<MySQLStmt> stmt) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:MySQLStmtRes::ptr	signature:(std::shared_ptr<MySQLStmt> stmt)
Create	sylar/sylar/db/mysql.cc	/^MySQLTransaction::ptr MySQLTransaction::Create(MySQL::ptr mysql, bool auto_commit) {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:MySQLTransaction::ptr	signature:(MySQL::ptr mysql,bool auto_commit)
Create	sylar/sylar/db/mysql.h	/^    static MySQLStmt::ptr Create(MySQL::ptr db, const std::string& stmt);$/;"	p	class:sylar::MySQLStmt	typeref:typename:MySQLStmt::ptr	access:public	signature:(MySQL::ptr db,const std::string & stmt)
Create	sylar/sylar/db/mysql.h	/^    static MySQLStmtRes::ptr Create(std::shared_ptr<MySQLStmt> stmt);$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:MySQLStmtRes::ptr	access:public	signature:(std::shared_ptr<MySQLStmt> stmt)
Create	sylar/sylar/db/mysql.h	/^    static MySQLTransaction::ptr Create(MySQL::ptr mysql, bool auto_commit);$/;"	p	class:sylar::MySQLTransaction	typeref:typename:MySQLTransaction::ptr	access:public	signature:(MySQL::ptr mysql,bool auto_commit)
Create	sylar/sylar/db/sqlite3.cc	/^SQLite3::ptr SQLite3::Create(const std::string& dbname ,int flags) {$/;"	f	class:sylar::SQLite3	typeref:typename:SQLite3::ptr	signature:(const std::string & dbname,int flags)
Create	sylar/sylar/db/sqlite3.cc	/^SQLite3::ptr SQLite3::Create(sqlite3* db) {$/;"	f	class:sylar::SQLite3	typeref:typename:SQLite3::ptr	signature:(sqlite3 * db)
Create	sylar/sylar/db/sqlite3.cc	/^SQLite3Stmt::ptr SQLite3Stmt::Create(SQLite3::ptr db, const char* stmt) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:SQLite3Stmt::ptr	signature:(SQLite3::ptr db,const char * stmt)
Create	sylar/sylar/db/sqlite3.h	/^    static SQLite3::ptr Create(const std::string& dbname$/;"	p	class:sylar::SQLite3	typeref:typename:SQLite3::ptr	access:public	signature:(const std::string & dbname,int flags=READWRITE|CREATE)
Create	sylar/sylar/db/sqlite3.h	/^    static SQLite3::ptr Create(sqlite3* db);$/;"	p	class:sylar::SQLite3	typeref:typename:SQLite3::ptr	access:public	signature:(sqlite3 * db)
Create	sylar/sylar/db/sqlite3.h	/^    static SQLite3Stmt::ptr Create(SQLite3::ptr db, const char* stmt);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:SQLite3Stmt::ptr	access:public	signature:(SQLite3::ptr db,const char * stmt)
Create	sylar/sylar/email/email.cc	/^EMail::ptr EMail::Create(const std::string& from_address, const std::string& from_passwd$/;"	f	class:sylar::EMail	typeref:typename:EMail::ptr	signature:(const std::string & from_address,const std::string & from_passwd,const std::string & title,const std::string & body,const std::vector<std::string> & to_address,const std::vector<std::string> & cc_address,const std::vector<std::string> & bcc_address)
Create	sylar/sylar/email/email.h	/^    static EMail::ptr Create(const std::string& from_address, const std::string& from_passwd$/;"	p	class:sylar::EMail	typeref:typename:EMail::ptr	access:public	signature:(const std::string & from_address,const std::string & from_passwd,const std::string & title,const std::string & body,const std::vector<std::string> & to_address,const std::vector<std::string> & cc_address={} ,const std::vector<std::string> & bcc_address={})
Create	sylar/sylar/email/smtp.cc	/^SmtpClient::ptr SmtpClient::Create(const std::string& host, uint32_t port, bool ssl) {$/;"	f	class:sylar::SmtpClient	typeref:typename:SmtpClient::ptr	signature:(const std::string & host,uint32_t port,bool ssl)
Create	sylar/sylar/email/smtp.h	/^    static SmtpClient::ptr Create(const std::string& host, uint32_t port, bool ssl= false);$/;"	p	class:sylar::SmtpClient	typeref:typename:SmtpClient::ptr	access:public	signature:(const std::string & host,uint32_t port,bool ssl=false)
Create	sylar/sylar/http/http_connection.cc	/^HttpConnectionPool::ptr HttpConnectionPool::Create(const std::string& uri$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpConnectionPool::ptr	signature:(const std::string & uri,const std::string & vhost,uint32_t max_size,uint32_t max_alive_time,uint32_t max_request)
Create	sylar/sylar/http/http_connection.h	/^    static HttpConnectionPool::ptr Create(const std::string& uri$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpConnectionPool::ptr	access:public	signature:(const std::string & uri,const std::string & vhost,uint32_t max_size,uint32_t max_alive_time,uint32_t max_request)
Create	sylar/sylar/http/ws_connection.cc	/^std::pair<HttpResult::ptr, WSConnection::ptr> WSConnection::Create(Uri::ptr uri$/;"	f	class:sylar::http::WSConnection	typeref:typename:std::pair<HttpResult::ptr,WSConnection::ptr>	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers)
Create	sylar/sylar/http/ws_connection.cc	/^std::pair<HttpResult::ptr, WSConnection::ptr> WSConnection::Create(const std::string& url$/;"	f	class:sylar::http::WSConnection	typeref:typename:std::pair<HttpResult::ptr,WSConnection::ptr>	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers)
Create	sylar/sylar/http/ws_connection.h	/^    static std::pair<HttpResult::ptr, WSConnection::ptr> Create(Uri::ptr uri$/;"	p	class:sylar::http::WSConnection	typeref:typename:std::pair<HttpResult::ptr,WSConnection::ptr>	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={})
Create	sylar/sylar/http/ws_connection.h	/^    static std::pair<HttpResult::ptr, WSConnection::ptr> Create(const std::string& url$/;"	p	class:sylar::http::WSConnection	typeref:typename:std::pair<HttpResult::ptr,WSConnection::ptr>	access:public	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={})
Create	sylar/sylar/streams/service_discovery.cc	/^ServiceItemInfo::ptr ServiceItemInfo::Create(const std::string& ip_and_port, const std::string& /;"	f	class:sylar::ServiceItemInfo	typeref:typename:ServiceItemInfo::ptr	signature:(const std::string & ip_and_port,const std::string & data)
Create	sylar/sylar/streams/service_discovery.h	/^    static ServiceItemInfo::ptr Create(const std::string& ip_and_port, const std::string& data);$/;"	p	class:sylar::ServiceItemInfo	typeref:typename:ServiceItemInfo::ptr	access:public	signature:(const std::string & ip_and_port,const std::string & data)
Create	sylar/sylar/streams/zlib_stream.cc	/^ZlibStream::ptr ZlibStream::Create(bool encode, uint32_t buff_size,$/;"	f	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	signature:(bool encode,uint32_t buff_size,Type type,int level,int window_bits,int memlevel,Strategy strategy)
Create	sylar/sylar/streams/zlib_stream.h	/^    static ZlibStream::ptr Create(bool encode, uint32_t buff_size = 4096,$/;"	p	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	access:public	signature:(bool encode,uint32_t buff_size=4096,Type type=DEFLATE,int level=DEFAULT_COMPRESSION,int window_bits=15,int memlevel=8,Strategy strategy=DEFAULT)
Create	sylar/sylar/uri.h	/^    static Uri::ptr Create(const std::string& uri);$/;"	p	class:sylar::Uri	typeref:typename:Uri::ptr	access:public	signature:(const std::string & uri)
Create	sylar/sylar/uri.rl.cc	/^Uri::ptr Uri::Create(const std::string& uristr) {$/;"	f	class:sylar::Uri	typeref:typename:Uri::ptr	signature:(const std::string & uristr)
Create	sylar/sylar/util/crypto_util.cc	/^RSACipher::ptr RSACipher::Create(const std::string& pubkey_file$/;"	f	class:sylar::RSACipher	typeref:typename:RSACipher::ptr	signature:(const std::string & pubkey_file,const std::string & prikey_file)
Create	sylar/sylar/util/crypto_util.h	/^    static RSACipher::ptr Create(const std::string& pubkey_file$/;"	p	class:sylar::RSACipher	typeref:typename:RSACipher::ptr	access:public	signature:(const std::string & pubkey_file,const std::string & prikey_file)
Create	sylar/sylar/worker.h	/^    static WorkerGroup::ptr Create(uint32_t batch_size, sylar::Scheduler* s = sylar::Scheduler::/;"	f	class:sylar::WorkerGroup	typeref:typename:WorkerGroup::ptr	access:public	signature:(uint32_t batch_size,sylar::Scheduler * s=sylar::Scheduler::GetThis ())
CreateAttach	sylar/sylar/email/email.cc	/^EMailEntity::ptr EMailEntity::CreateAttach(const std::string& filename) {$/;"	f	class:sylar::EMailEntity	typeref:typename:EMailEntity::ptr	signature:(const std::string & filename)
CreateAttach	sylar/sylar/email/email.h	/^    static EMailEntity::ptr CreateAttach(const std::string& filename);$/;"	p	class:sylar::EMailEntity	typeref:typename:EMailEntity::ptr	access:public	signature:(const std::string & filename)
CreateDeflate	sylar/sylar/streams/zlib_stream.cc	/^ZlibStream::ptr ZlibStream::CreateDeflate(bool encode, uint32_t buff_size) {$/;"	f	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	signature:(bool encode,uint32_t buff_size)
CreateDeflate	sylar/sylar/streams/zlib_stream.h	/^    static ZlibStream::ptr CreateDeflate(bool encode, uint32_t buff_size = 4096);$/;"	p	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	access:public	signature:(bool encode,uint32_t buff_size=4096)
CreateGzip	sylar/sylar/streams/zlib_stream.cc	/^ZlibStream::ptr ZlibStream::CreateGzip(bool encode, uint32_t buff_size) {$/;"	f	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	signature:(bool encode,uint32_t buff_size)
CreateGzip	sylar/sylar/streams/zlib_stream.h	/^    static ZlibStream::ptr CreateGzip(bool encode, uint32_t buff_size = 4096);$/;"	p	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	access:public	signature:(bool encode,uint32_t buff_size=4096)
CreateMask	sylar/sylar/address.cc	/^static T CreateMask(uint32_t bits) {$/;"	f	namespace:sylar	typeref:typename:T	file:	signature:(uint32_t bits)
CreateModule	chat/my_module.cc	/^sylar::Module* CreateModule() {$/;"	f	typeref:typename:sylar::Module *	signature:()
CreateModule	sylar/template/template/my_module.cc	/^sylar::Module* CreateModule() {$/;"	f	typeref:typename:sylar::Module *	signature:()
CreateModule	sylar/tests/test_module.cc	/^sylar::Module* CreateModule() {$/;"	f	typeref:typename:sylar::Module *	signature:()
CreateTCP	sylar/sylar/socket.cc	/^SSLSocket::ptr SSLSocket::CreateTCP(sylar::Address::ptr address) {$/;"	f	class:sylar::SSLSocket	typeref:typename:SSLSocket::ptr	signature:(sylar::Address::ptr address)
CreateTCP	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateTCP(sylar::Address::ptr address) {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:(sylar::Address::ptr address)
CreateTCP	sylar/sylar/socket.h	/^    static SSLSocket::ptr CreateTCP(sylar::Address::ptr address);$/;"	p	class:sylar::SSLSocket	typeref:typename:SSLSocket::ptr	access:public	signature:(sylar::Address::ptr address)
CreateTCP	sylar/sylar/socket.h	/^    static Socket::ptr CreateTCP(sylar::Address::ptr address);$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:(sylar::Address::ptr address)
CreateTCPSocket	sylar/sylar/socket.cc	/^SSLSocket::ptr SSLSocket::CreateTCPSocket() {$/;"	f	class:sylar::SSLSocket	typeref:typename:SSLSocket::ptr	signature:()
CreateTCPSocket	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateTCPSocket() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
CreateTCPSocket	sylar/sylar/socket.h	/^    static SSLSocket::ptr CreateTCPSocket();$/;"	p	class:sylar::SSLSocket	typeref:typename:SSLSocket::ptr	access:public	signature:()
CreateTCPSocket	sylar/sylar/socket.h	/^    static Socket::ptr CreateTCPSocket();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
CreateTCPSocket6	sylar/sylar/socket.cc	/^SSLSocket::ptr SSLSocket::CreateTCPSocket6() {$/;"	f	class:sylar::SSLSocket	typeref:typename:SSLSocket::ptr	signature:()
CreateTCPSocket6	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateTCPSocket6() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
CreateTCPSocket6	sylar/sylar/socket.h	/^    static SSLSocket::ptr CreateTCPSocket6();$/;"	p	class:sylar::SSLSocket	typeref:typename:SSLSocket::ptr	access:public	signature:()
CreateTCPSocket6	sylar/sylar/socket.h	/^    static Socket::ptr CreateTCPSocket6();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
CreateUDP	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateUDP(sylar::Address::ptr address) {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:(sylar::Address::ptr address)
CreateUDP	sylar/sylar/socket.h	/^    static Socket::ptr CreateUDP(sylar::Address::ptr address);$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:(sylar::Address::ptr address)
CreateUDPSocket	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateUDPSocket() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
CreateUDPSocket	sylar/sylar/socket.h	/^    static Socket::ptr CreateUDPSocket();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
CreateUDPSocket6	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateUDPSocket6() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
CreateUDPSocket6	sylar/sylar/socket.h	/^    static Socket::ptr CreateUDPSocket6();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
CreateUnixTCPSocket	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateUnixTCPSocket() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
CreateUnixTCPSocket	sylar/sylar/socket.h	/^    static Socket::ptr CreateUnixTCPSocket();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
CreateUnixUDPSocket	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateUnixUDPSocket() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
CreateUnixUDPSocket	sylar/sylar/socket.h	/^    static Socket::ptr CreateUnixUDPSocket();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
CreateZlib	sylar/sylar/streams/zlib_stream.cc	/^ZlibStream::ptr ZlibStream::CreateZlib(bool encode, uint32_t buff_size) {$/;"	f	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	signature:(bool encode,uint32_t buff_size)
CreateZlib	sylar/sylar/streams/zlib_stream.h	/^    static ZlibStream::ptr CreateZlib(bool encode, uint32_t buff_size = 4096);$/;"	p	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	access:public	signature:(bool encode,uint32_t buff_size=4096)
Crypto	sylar/sylar/util/crypto_util.cc	/^int32_t CryptoUtil::Crypto(const EVP_CIPHER* cipher, bool enc$/;"	f	class:sylar::CryptoUtil	typeref:typename:int32_t	signature:(const EVP_CIPHER * cipher,bool enc,const void * key,const void * iv,const void * in,int32_t in_len,void * out,int32_t * out_len)
Crypto	sylar/sylar/util/crypto_util.h	/^    static int32_t Crypto(const EVP_CIPHER* cipher, bool enc$/;"	p	class:sylar::CryptoUtil	typeref:typename:int32_t	access:public	signature:(const EVP_CIPHER * cipher,bool enc,const void * key,const void * iv,const void * in,int32_t in_len,void * out,int32_t * out_len)
CryptoUtil	sylar/sylar/util/crypto_util.h	/^class CryptoUtil {$/;"	c	namespace:sylar
Ctx	sylar/sylar/db/redis.cc	/^FoxRedis::Ctx::Ctx(FoxRedis* r)$/;"	f	class:sylar::FoxRedis::Ctx	signature:(FoxRedis * r)
Ctx	sylar/sylar/db/redis.cc	/^FoxRedisCluster::Ctx::Ctx(FoxRedisCluster* r)$/;"	f	class:sylar::FoxRedisCluster::Ctx	signature:(FoxRedisCluster * r)
Ctx	sylar/sylar/db/redis.h	/^        Ctx(FoxRedis* rds);$/;"	p	struct:sylar::FoxRedis::Ctx	access:public	signature:(FoxRedis * rds)
Ctx	sylar/sylar/db/redis.h	/^        Ctx(FoxRedisCluster* rds);$/;"	p	struct:sylar::FoxRedisCluster::Ctx	access:public	signature:(FoxRedisCluster * rds)
Ctx	sylar/sylar/db/redis.h	/^    struct Ctx {$/;"	s	class:sylar::FoxRedis	access:private
Ctx	sylar/sylar/db/redis.h	/^    struct Ctx {$/;"	s	class:sylar::FoxRedisCluster	access:private
Ctx	sylar/sylar/streams/async_socket_stream.cc	/^AsyncSocketStream::Ctx::Ctx()$/;"	f	class:sylar::AsyncSocketStream::Ctx	signature:()
Ctx	sylar/sylar/streams/async_socket_stream.h	/^        Ctx();$/;"	p	struct:sylar::AsyncSocketStream::Ctx	access:public	signature:()
Ctx	sylar/sylar/streams/async_socket_stream.h	/^    struct Ctx : public SendCtx {$/;"	s	class:sylar::AsyncSocketStream	inherits:SendCtx	access:protected
DBType	sylar/sylar/orm/table.h	/^    enum DBType {$/;"	g	class:sylar::orm::Table	access:private
DEBUG	sylar/sylar/log.h	/^        DEBUG = 1,$/;"	e	enum:sylar::LogLevel::Level	access:public
DEC	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:	signature:(n)
DEC	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:	signature:(n)
DEFAULT	sylar/sylar/streams/zlib_stream.h	/^        DEFAULT = Z_DEFAULT_STRATEGY,$/;"	e	enum:sylar::ZlibStream::Strategy	access:public
DEFAULT_COMPRESSION	sylar/sylar/streams/zlib_stream.h	/^        DEFAULT_COMPRESSION = Z_DEFAULT_COMPRESSION$/;"	e	enum:sylar::ZlibStream::CompressLevel	access:public
DEFAULT_MAX_SIZE	sylar/sylar/ds/roaring.h	/^enum { DEFAULT_MAX_SIZE = 4096 };$/;"	e	enum:__anon10207c070503	access:public
DEFERRED	sylar/sylar/db/sqlite3.h	/^        DEFERRED = 0,$/;"	e	enum:sylar::SQLite3Transaction::Type	access:public
DEFLATE	sylar/sylar/streams/zlib_stream.h	/^        DEFLATE,$/;"	e	enum:sylar::ZlibStream::Type	access:public
DELETED	sylar/sylar/zk_client.cc	/^const int ZKClient::EventType::DELETED = ZOO_DELETED_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int
DELETED	sylar/sylar/zk_client.h	/^        static const int DELETED; \/\/ = ZOO_DELETED_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int	access:public
DO_CMD	sylar/sylar/email/smtp.cc	/^#define DO_CMD(/;"	d	file:	signature:()
Data	sylar/sylar/db/mysql.cc	/^MySQLStmtRes::Data::Data()$/;"	f	class:sylar::MySQLStmtRes::Data	signature:()
Data	sylar/sylar/db/mysql.h	/^        Data();$/;"	p	struct:sylar::MySQLStmtRes::Data	access:public	signature:()
Data	sylar/sylar/db/mysql.h	/^    struct Data {$/;"	s	class:sylar::MySQLStmtRes	access:private
DateTimeFormatItem	sylar/sylar/log.cc	/^    DateTimeFormatItem(const std::string& format = "%Y-%m-%d %H:%M:%S")$/;"	f	class:sylar::DateTimeFormatItem	file:	access:public	signature:(const std::string & format="")
DateTimeFormatItem	sylar/sylar/log.cc	/^class DateTimeFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
Dealloc	sylar/sylar/fiber.cc	/^    static void Dealloc(void* vp, size_t size) {$/;"	f	class:sylar::MallocStackAllocator	typeref:typename:void	file:	access:public	signature:(void * vp,size_t size)
DecodeZigzag32	sylar/sylar/bytearray.cc	/^static int32_t DecodeZigzag32(const uint32_t& v) {$/;"	f	namespace:sylar	typeref:typename:int32_t	file:	signature:(const uint32_t & v)
DecodeZigzag64	sylar/sylar/bytearray.cc	/^static int64_t DecodeZigzag64(const uint64_t& v) {$/;"	f	namespace:sylar	typeref:typename:int64_t	file:	signature:(const uint64_t & v)
DestoryModule	chat/my_module.cc	/^void DestoryModule(sylar::Module* module) {$/;"	f	typeref:typename:void	signature:(sylar::Module * module)
DestoryModule	sylar/template/template/my_module.cc	/^void DestoryModule(sylar::Module* module) {$/;"	f	typeref:typename:void	signature:(sylar::Module * module)
DestoryModule	sylar/tests/test_module.cc	/^void DestoryModule(sylar::Module* ptr) {$/;"	f	typeref:typename:void	signature:(sylar::Module * ptr)
DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::Node	typeref:typename:void	access:private
DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::NodeInfo	typeref:typename:void	access:private
DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private
DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::QueryRequest	typeref:typename:void	access:private
DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::QueryResponse	typeref:typename:void	access:private
DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private
DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private
Dict	sylar/sylar/ds/dict.h	/^    Dict(const uint32_t& size = 0)$/;"	f	class:sylar::ds::Dict	access:public	signature:(const uint32_t & size=0)
Dict	sylar/sylar/ds/dict.h	/^class Dict {$/;"	c	namespace:sylar::ds
Dirname	sylar/sylar/util.cc	/^std::string FSUtil::Dirname(const std::string& filename) {$/;"	f	class:sylar::FSUtil	typeref:typename:std::string	signature:(const std::string & filename)
Dirname	sylar/sylar/util.h	/^    static std::string Dirname(const std::string& filename);$/;"	p	class:sylar::FSUtil	typeref:typename:std::string	access:public	signature:(const std::string & filename)
DisconnectCb	sylar/sylar/db/redis.cc	/^void FoxRedis::DisconnectCb(const redisAsyncContext* c, int status) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(const redisAsyncContext * c,int status)
DisconnectCb	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::DisconnectCb(const redisAsyncContext* c, int status) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(const redisAsyncContext * c,int status)
DisconnectCb	sylar/sylar/db/redis.h	/^    static void DisconnectCb(const redisAsyncContext* c, int status);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(const redisAsyncContext * c,int status)
DisconnectCb	sylar/sylar/db/redis.h	/^    static void DisconnectCb(const redisAsyncContext* c, int status);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(const redisAsyncContext * c,int status)
DoGet	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoGet(Uri::ptr uri$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
DoGet	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoGet(const std::string& url$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
DoGet	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoGet(Uri::ptr uri$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
DoGet	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoGet(const std::string& url$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
DoPost	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoPost(Uri::ptr uri$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
DoPost	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoPost(const std::string& url$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
DoPost	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoPost(Uri::ptr uri$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
DoPost	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoPost(const std::string& url$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
DoRequest	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoRequest(HttpMethod method$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
DoRequest	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoRequest(HttpMethod method$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(HttpMethod method,const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
DoRequest	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoRequest(HttpRequest::ptr req$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(HttpRequest::ptr req,Uri::ptr uri,uint64_t timeout_ms)
DoRequest	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoRequest(HttpMethod method$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
DoRequest	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoRequest(HttpMethod method$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(HttpMethod method,const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
DoRequest	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoRequest(HttpRequest::ptr req$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(HttpRequest::ptr req,Uri::ptr uri,uint64_t timeout_ms)
EMail	sylar/sylar/email/email.h	/^class EMail {$/;"	c	namespace:sylar
EMailEntity	sylar/sylar/email/email.h	/^class EMailEntity {$/;"	c	namespace:sylar
ENV_OR_OPT_PATH_VARS	sylar/cmake/FindMySQL.cmake	/^set(ENV_OR_OPT_PATH_VARS$/;"	v
ENV_OR_OPT_VARS	sylar/cmake/FindMySQL.cmake	/^set(ENV_OR_OPT_VARS$/;"	v
EPHEMERAL	sylar/sylar/zk_client.cc	/^const int ZKClient::FlagsType::EPHEMERAL = ZOO_EPHEMERAL;$/;"	m	class:sylar::ZKClient::FlagsType	typeref:typename:const int
EPHEMERAL	sylar/sylar/zk_client.h	/^        static const int EPHEMERAL; \/\/ = ZOO_EPHEMERAL;$/;"	m	class:sylar::ZKClient::FlagsType	typeref:typename:const int	access:public
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/sylar/Makefile	/^EQUALS = =$/;"	m
ERROR	sylar/sylar/log.h	/^        ERROR = 4,$/;"	e	enum:sylar::LogLevel::Level	access:public
EXCEPT	sylar/sylar/fiber.h	/^        EXCEPT$/;"	e	enum:sylar::Fiber::State	access:public
EXCLUSIVE	sylar/sylar/db/sqlite3.h	/^        EXCLUSIVE = 2$/;"	e	enum:sylar::SQLite3Transaction::Type	access:public
EXEC	sylar/sylar/fiber.h	/^        EXEC,$/;"	e	enum:sylar::Fiber::State	access:public
EXECUTABLE_OUTPUT_PATH	CMakeLists.txt	/^SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}\/bin)$/;"	v
EXECUTABLE_OUTPUT_PATH	sylar/CMakeLists.txt	/^SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}\/bin)$/;"	v
EXECUTABLE_OUTPUT_PATH	sylar/template/CMakeLists.txt	/^SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}\/bin)$/;"	v
EXPIRED_SESSION	sylar/sylar/zk_client.cc	/^const int ZKClient::StateType::EXPIRED_SESSION = ZOO_EXPIRED_SESSION_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int
EXPIRED_SESSION	sylar/sylar/zk_client.h	/^        static const int EXPIRED_SESSION; \/\/ = ZOO_EXPIRED_SESSION_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
EchoServer	sylar/examples/echo_server.cc	/^    EchoServer(int type);$/;"	p	class:EchoServer	file:	access:public	signature:(int type)
EchoServer	sylar/examples/echo_server.cc	/^EchoServer::EchoServer(int type)$/;"	f	class:EchoServer	signature:(int type)
EchoServer	sylar/examples/echo_server.cc	/^class EchoServer : public sylar::TcpServer {$/;"	c	file:	inherits:sylar::TcpServer
EchoServer::EchoServer	sylar/examples/echo_server.cc	/^    EchoServer(int type);$/;"	p	class:EchoServer	file:	access:public	signature:(int type)
EchoServer::EchoServer	sylar/examples/echo_server.cc	/^EchoServer::EchoServer(int type)$/;"	f	class:EchoServer	signature:(int type)
EchoServer::handleClient	sylar/examples/echo_server.cc	/^    void handleClient(sylar::Socket::ptr client);$/;"	p	class:EchoServer	typeref:typename:void	file:	access:public	signature:(sylar::Socket::ptr client)
EchoServer::handleClient	sylar/examples/echo_server.cc	/^void EchoServer::handleClient(sylar::Socket::ptr client) {$/;"	f	class:EchoServer	typeref:typename:void	signature:(sylar::Socket::ptr client)
EchoServer::m_type	sylar/examples/echo_server.cc	/^    int m_type = 0;$/;"	m	class:EchoServer	typeref:typename:int	file:	access:private
ElapseFormatItem	sylar/sylar/log.cc	/^    ElapseFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::ElapseFormatItem	file:	access:public	signature:(const std::string & str="")
ElapseFormatItem	sylar/sylar/log.cc	/^class ElapseFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
EncodeZigzag32	sylar/sylar/bytearray.cc	/^static uint32_t EncodeZigzag32(const int32_t& v) {$/;"	f	namespace:sylar	typeref:typename:uint32_t	file:	signature:(const int32_t & v)
EncodeZigzag64	sylar/sylar/bytearray.cc	/^static uint64_t EncodeZigzag64(const int64_t& v) {$/;"	f	namespace:sylar	typeref:typename:uint64_t	file:	signature:(const int64_t & v)
Env	sylar/sylar/env.h	/^class Env {$/;"	c	namespace:sylar
EnvMgr	sylar/sylar/env.h	/^typedef sylar::Singleton<Env> EnvMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<Env>
EpollCtlOp	sylar/sylar/iomanager.cc	/^enum EpollCtlOp {$/;"	g	namespace:sylar	file:
Error	sylar/sylar/http/http_connection.h	/^    enum class Error {$/;"	g	struct:sylar::http::HttpResult	access:public
Error	sylar/sylar/streams/async_socket_stream.h	/^    enum Error {$/;"	g	class:sylar::AsyncSocketStream	access:public
Error	sylar/sylar/streams/load_balance.h	/^    enum Error {$/;"	g	class:sylar::ILoadBalance	access:public
Escape	sylar/sylar/util/json_util.cc	/^std::string JsonUtil::Escape(const std::string& v) {$/;"	f	class:sylar::JsonUtil	typeref:typename:std::string	signature:(const std::string & v)
Escape	sylar/sylar/util/json_util.h	/^    static std::string Escape(const std::string& v);$/;"	p	class:sylar::JsonUtil	typeref:typename:std::string	access:public	signature:(const std::string & v)
Event	sylar/sylar/iomanager.h	/^    enum Event {$/;"	g	class:sylar::IOManager	access:public
EventCb	sylar/sylar/db/redis.cc	/^void FoxRedis::Ctx::EventCb(int fd, short event, void* d) {$/;"	f	class:sylar::FoxRedis::Ctx	typeref:typename:void	signature:(int fd,short event,void * d)
EventCb	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::Ctx::EventCb(int fd, short event, void* d) {$/;"	f	class:sylar::FoxRedisCluster::Ctx	typeref:typename:void	signature:(int fd,short event,void * d)
EventCb	sylar/sylar/db/redis.h	/^        static void EventCb(int fd, short event, void* d);$/;"	p	struct:sylar::FoxRedis::Ctx	typeref:typename:void	access:public	signature:(int fd,short event,void * d)
EventCb	sylar/sylar/db/redis.h	/^        static void EventCb(int fd, short event, void* d);$/;"	p	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:void	access:public	signature:(int fd,short event,void * d)
EventContext	sylar/sylar/iomanager.h	/^        struct EventContext {$/;"	s	struct:sylar::IOManager::FdContext	access:public
EventType	sylar/sylar/zk_client.h	/^    class EventType {$/;"	c	class:sylar::ZKClient	access:public
Execute	sylar/sylar/db/mysql.cc	/^int MySQLUtil::Execute(const std::string& name, const char* format, ...) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:int	signature:(const std::string & name,const char * format,...)
Execute	sylar/sylar/db/mysql.cc	/^int MySQLUtil::Execute(const std::string& name, const char* format, va_list ap) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:int	signature:(const std::string & name,const char * format,va_list ap)
Execute	sylar/sylar/db/mysql.cc	/^int MySQLUtil::Execute(const std::string& name, const std::string& sql) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:int	signature:(const std::string & name,const std::string & sql)
Execute	sylar/sylar/db/mysql.h	/^    static int Execute(const std::string& name, const char* format, ...);$/;"	p	class:sylar::MySQLUtil	typeref:typename:int	access:public	signature:(const std::string & name,const char * format,...)
Execute	sylar/sylar/db/mysql.h	/^    static int Execute(const std::string& name, const char* format, va_list ap); $/;"	p	class:sylar::MySQLUtil	typeref:typename:int	access:public	signature:(const std::string & name,const char * format,va_list ap)
Execute	sylar/sylar/db/mysql.h	/^    static int Execute(const std::string& name, const std::string& sql);$/;"	p	class:sylar::MySQLUtil	typeref:typename:int	access:public	signature:(const std::string & name,const std::string & sql)
FAIR	sylar/sylar/streams/load_balance.h	/^        FAIR = 3$/;"	e	enum:sylar::ILoadBalance::Type	access:public
FATAL	sylar/sylar/log.h	/^        FATAL = 5$/;"	e	enum:sylar::LogLevel::Level	access:public
FCtx	sylar/sylar/db/redis.h	/^    struct FCtx {$/;"	s	class:sylar::FoxRedis	access:private
FCtx	sylar/sylar/db/redis.h	/^    struct FCtx {$/;"	s	class:sylar::FoxRedisCluster	access:private
FILTERED	sylar/sylar/streams/zlib_stream.h	/^        FILTERED = Z_FILTERED,$/;"	e	enum:sylar::ZlibStream::Strategy	access:public
FIXED	sylar/sylar/streams/zlib_stream.h	/^        FIXED = Z_FIXED,$/;"	e	enum:sylar::ZlibStream::Strategy	access:public
FOX_REDIS	sylar/sylar/db/redis.h	/^        FOX_REDIS = 3,$/;"	e	enum:sylar::IRedis::Type	access:public
FOX_REDIS_CLUSTER	sylar/sylar/db/redis.h	/^        FOX_REDIS_CLUSTER = 4$/;"	e	enum:sylar::IRedis::Type	access:public
FROZEN_COOKIE	sylar/sylar/ds/roaring.h	/^    FROZEN_COOKIE = 13766,$/;"	e	enum:__anon10207c070703	access:public
FSUtil	sylar/sylar/util.h	/^class FSUtil {$/;"	c	namespace:sylar
FairLoadBalanceItem	sylar/sylar/streams/load_balance.h	/^class FairLoadBalanceItem : public LoadBalanceItem {$/;"	c	namespace:sylar	inherits:LoadBalanceItem
Family	sylar/sylar/socket.h	/^    enum Family {$/;"	g	class:sylar::Socket	access:public
FdContext	sylar/sylar/iomanager.h	/^    struct FdContext {$/;"	s	class:sylar::IOManager	access:private
FdCtx	sylar/sylar/fd_manager.cc	/^FdCtx::FdCtx(int fd)$/;"	f	class:sylar::FdCtx	signature:(int fd)
FdCtx	sylar/sylar/fd_manager.h	/^    FdCtx(int fd);$/;"	p	class:sylar::FdCtx	access:public	signature:(int fd)
FdCtx	sylar/sylar/fd_manager.h	/^class FdCtx : public std::enable_shared_from_this<FdCtx> {$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<FdCtx>
FdManager	sylar/sylar/fd_manager.cc	/^FdManager::FdManager() {$/;"	f	class:sylar::FdManager	signature:()
FdManager	sylar/sylar/fd_manager.h	/^    FdManager();$/;"	p	class:sylar::FdManager	access:public	signature:()
FdManager	sylar/sylar/fd_manager.h	/^class FdManager {$/;"	c	namespace:sylar
FdMgr	sylar/sylar/fd_manager.h	/^typedef Singleton<FdManager> FdMgr;$/;"	t	namespace:sylar	typeref:typename:Singleton<FdManager>
Fiber	sylar/sylar/fiber.cc	/^Fiber::Fiber() {$/;"	f	class:sylar::Fiber	signature:()
Fiber	sylar/sylar/fiber.cc	/^Fiber::Fiber(std::function<void()> cb, size_t stacksize, bool use_caller)$/;"	f	class:sylar::Fiber	signature:(std::function<void ()> cb,size_t stacksize,bool use_caller)
Fiber	sylar/sylar/fiber.h	/^    Fiber();$/;"	p	class:sylar::Fiber	access:private	signature:()
Fiber	sylar/sylar/fiber.h	/^    Fiber(std::function<void()> cb, size_t stacksize = 0, bool use_caller = false);$/;"	p	class:sylar::Fiber	access:public	signature:(std::function<void ()> cb,size_t stacksize=0,bool use_caller=false)
Fiber	sylar/sylar/fiber.h	/^class Fiber : public std::enable_shared_from_this<Fiber> {$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<Fiber>
FiberAndThread	sylar/sylar/scheduler.h	/^        FiberAndThread()$/;"	f	struct:sylar::Scheduler::FiberAndThread	access:public	signature:()
FiberAndThread	sylar/sylar/scheduler.h	/^        FiberAndThread(Fiber::ptr f, int thr)$/;"	f	struct:sylar::Scheduler::FiberAndThread	access:public	signature:(Fiber::ptr f,int thr)
FiberAndThread	sylar/sylar/scheduler.h	/^        FiberAndThread(Fiber::ptr* f, int thr)$/;"	f	struct:sylar::Scheduler::FiberAndThread	access:public	signature:(Fiber::ptr * f,int thr)
FiberAndThread	sylar/sylar/scheduler.h	/^        FiberAndThread(std::function<void()> f, int thr)$/;"	f	struct:sylar::Scheduler::FiberAndThread	access:public	signature:(std::function<void ()> f,int thr)
FiberAndThread	sylar/sylar/scheduler.h	/^        FiberAndThread(std::function<void()>* f, int thr)$/;"	f	struct:sylar::Scheduler::FiberAndThread	access:public	signature:(std::function<void ()> * f,int thr)
FiberAndThread	sylar/sylar/scheduler.h	/^    struct FiberAndThread {$/;"	s	class:sylar::Scheduler	access:private
FiberIdFormatItem	sylar/sylar/log.cc	/^    FiberIdFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::FiberIdFormatItem	file:	access:public	signature:(const std::string & str="")
FiberIdFormatItem	sylar/sylar/log.cc	/^class FiberIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
FiberSemaphore	sylar/sylar/mutex.cc	/^FiberSemaphore::FiberSemaphore(size_t initial_concurrency)$/;"	f	class:sylar::FiberSemaphore	signature:(size_t initial_concurrency)
FiberSemaphore	sylar/sylar/mutex.h	/^    FiberSemaphore(size_t initial_concurrency = 0);$/;"	p	class:sylar::FiberSemaphore	access:public	signature:(size_t initial_concurrency=0)
FiberSemaphore	sylar/sylar/mutex.h	/^class FiberSemaphore : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
FileLogAppender	sylar/sylar/log.cc	/^FileLogAppender::FileLogAppender(const std::string& filename)$/;"	f	class:sylar::FileLogAppender	signature:(const std::string & filename)
FileLogAppender	sylar/sylar/log.h	/^    FileLogAppender(const std::string& filename);$/;"	p	class:sylar::FileLogAppender	access:public	signature:(const std::string & filename)
FileLogAppender	sylar/sylar/log.h	/^class FileLogAppender : public LogAppender {$/;"	c	namespace:sylar	inherits:LogAppender
FilenameFormatItem	sylar/sylar/log.cc	/^    FilenameFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::FilenameFormatItem	file:	access:public	signature:(const std::string & str="")
FilenameFormatItem	sylar/sylar/log.cc	/^class FilenameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
Flags	sylar/sylar/db/sqlite3.h	/^    enum Flags {$/;"	g	class:sylar::SQLite3	access:public
FlagsType	sylar/sylar/zk_client.h	/^    class FlagsType {$/;"	c	class:sylar::ZKClient	access:public
Format	sylar/sylar/util.cc	/^std::string StringUtil::Format(const char* fmt, ...) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const char * fmt,...)
Format	sylar/sylar/util.h	/^    static std::string Format(const char* fmt, ...);$/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const char * fmt,...)
Format	sylar/sylar/util.h	/^std::string Format(const char* fmt, ...);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const char * fmt,...)
FormatItem	sylar/sylar/log.h	/^    class FormatItem {$/;"	c	class:sylar::LogFormatter	access:public
Formatv	sylar/sylar/util.cc	/^std::string StringUtil::Formatv(const char* fmt, va_list ap) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const char * fmt,va_list ap)
Formatv	sylar/sylar/util.h	/^    static std::string Formatv(const char* fmt, va_list ap);$/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const char * fmt,va_list ap)
Formatv	sylar/sylar/util.h	/^std::string Formatv(const char* fmt, va_list ap);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const char * fmt,va_list ap)
FoxRedis	sylar/sylar/db/redis.cc	/^FoxRedis::FoxRedis(sylar::FoxThread* thr, const std::map<std::string, std::string>& conf)$/;"	f	class:sylar::FoxRedis	signature:(sylar::FoxThread * thr,const std::map<std::string,std::string> & conf)
FoxRedis	sylar/sylar/db/redis.h	/^    FoxRedis(sylar::FoxThread* thr, const std::map<std::string, std::string>& conf);$/;"	p	class:sylar::FoxRedis	access:public	signature:(sylar::FoxThread * thr,const std::map<std::string,std::string> & conf)
FoxRedis	sylar/sylar/db/redis.h	/^class FoxRedis : public IRedis {$/;"	c	namespace:sylar	inherits:IRedis
FoxRedisCluster	sylar/sylar/db/redis.cc	/^FoxRedisCluster::FoxRedisCluster(sylar::FoxThread* thr, const std::map<std::string, std::string>/;"	f	class:sylar::FoxRedisCluster	signature:(sylar::FoxThread * thr,const std::map<std::string,std::string> & conf)
FoxRedisCluster	sylar/sylar/db/redis.h	/^    FoxRedisCluster(sylar::FoxThread* thr, const std::map<std::string, std::string>& conf);$/;"	p	class:sylar::FoxRedisCluster	access:public	signature:(sylar::FoxThread * thr,const std::map<std::string,std::string> & conf)
FoxRedisCluster	sylar/sylar/db/redis.h	/^class FoxRedisCluster : public IRedis {$/;"	c	namespace:sylar	inherits:IRedis
FoxThread	sylar/sylar/db/fox_thread.cc	/^FoxThread::FoxThread(const std::string& name, struct event_base* base)$/;"	f	class:sylar::FoxThread	signature:(const std::string & name,struct event_base * base)
FoxThread	sylar/sylar/db/fox_thread.h	/^    FoxThread(const std::string& name = "", struct event_base* base = NULL);$/;"	p	class:sylar::FoxThread	access:public	signature:(const std::string & name="",struct event_base * base=NULL)
FoxThread	sylar/sylar/db/fox_thread.h	/^class FoxThread : public IFoxThread {$/;"	c	namespace:sylar	inherits:IFoxThread
FoxThreadManager	sylar/sylar/db/fox_thread.h	/^class FoxThreadManager {$/;"	c	namespace:sylar
FoxThreadMgr	sylar/sylar/db/fox_thread.h	/^typedef Singleton<FoxThreadManager> FoxThreadMgr;$/;"	t	namespace:sylar	typeref:typename:Singleton<FoxThreadManager>
FoxThreadPool	sylar/sylar/db/fox_thread.cc	/^FoxThreadPool::FoxThreadPool(uint32_t size, const std::string& name, bool advance)$/;"	f	class:sylar::FoxThreadPool	signature:(uint32_t size,const std::string & name,bool advance)
FoxThreadPool	sylar/sylar/db/fox_thread.h	/^    FoxThreadPool(uint32_t size, const std::string& name = "", bool advance = false);$/;"	p	class:sylar::FoxThreadPool	access:public	signature:(uint32_t size,const std::string & name="",bool advance=false)
FoxThreadPool	sylar/sylar/db/fox_thread.h	/^class FoxThreadPool : public IFoxThread {$/;"	c	namespace:sylar	inherits:IFoxThread
FromString	sylar/sylar/log.cc	/^LogLevel::Level LogLevel::FromString(const std::string& str) {$/;"	f	class:sylar::LogLevel	typeref:typename:LogLevel::Level	signature:(const std::string & str)
FromString	sylar/sylar/log.h	/^    static LogLevel::Level FromString(const std::string& str);$/;"	p	class:sylar::LogLevel	typeref:typename:LogLevel::Level	access:public	signature:(const std::string & str)
FromString	sylar/sylar/util/json_util.cc	/^bool JsonUtil::FromString(Json::Value& json, const std::string& v) {$/;"	f	class:sylar::JsonUtil	typeref:typename:bool	signature:(Json::Value & json,const std::string & v)
FromString	sylar/sylar/util/json_util.h	/^    static bool FromString(Json::Value& json, const std::string& v);$/;"	p	class:sylar::JsonUtil	typeref:typename:bool	access:public	signature:(Json::Value & json,const std::string & v)
FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::Node	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
FunctionServlet	sylar/sylar/http/servlet.cc	/^FunctionServlet::FunctionServlet(callback cb)$/;"	f	class:sylar::http::FunctionServlet	signature:(callback cb)
FunctionServlet	sylar/sylar/http/servlet.h	/^    FunctionServlet(callback cb);$/;"	p	class:sylar::http::FunctionServlet	access:public	signature:(callback cb)
FunctionServlet	sylar/sylar/http/servlet.h	/^class FunctionServlet : public Servlet {$/;"	c	namespace:sylar::http	inherits:Servlet
FunctionWSServlet	sylar/sylar/http/ws_servlet.cc	/^FunctionWSServlet::FunctionWSServlet(callback cb$/;"	f	class:sylar::http::FunctionWSServlet	signature:(callback cb,on_connect_cb connect_cb,on_close_cb close_cb)
FunctionWSServlet	sylar/sylar/http/ws_servlet.h	/^    FunctionWSServlet(callback cb$/;"	p	class:sylar::http::FunctionWSServlet	access:public	signature:(callback cb,on_connect_cb connect_cb=nullptr,on_close_cb close_cb=nullptr)
FunctionWSServlet	sylar/sylar/http/ws_servlet.h	/^class FunctionWSServlet : public WSServlet {$/;"	c	namespace:sylar::http	inherits:WSServlet
GETMYSQLVERSION_SOURCEFILE	sylar/cmake/FindMySQL.cmake	/^  set(GETMYSQLVERSION_SOURCEFILE "${CMAKE_CURRENT_BINARY_DIR}\/getmysqlversion.c")$/;"	v
GOOGLE_PROTOBUF_INCLUDED_sylar_2fns_2fns_5fprotobuf_2eproto	sylar/sylar/ns/ns_protobuf.pb.h	/^#define GOOGLE_PROTOBUF_INCLUDED_sylar_2fns_2fns_5fprotobuf_2eproto$/;"	d
GZIP	sylar/sylar/streams/zlib_stream.h	/^        GZIP$/;"	e	enum:sylar::ZlibStream::Type	access:public
Gen	sylar/sylar/ds/util.cc	/^std::string RandomStringGenerator::Gen(uint32_t size) {$/;"	f	class:sylar::ds::RandomStringGenerator	typeref:typename:std::string	signature:(uint32_t size)
Gen	sylar/sylar/ds/util.h	/^    static std::string Gen(uint32_t size = 10);$/;"	p	class:sylar::ds::RandomStringGenerator	typeref:typename:std::string	access:public	signature:(uint32_t size=10)
GenerateKey	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::GenerateKey(const std::string& pubkey_file$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const std::string & pubkey_file,const std::string & prikey_file,uint32_t length)
GenerateKey	sylar/sylar/util/crypto_util.h	/^    static int32_t GenerateKey(const std::string& pubkey_file$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const std::string & pubkey_file,const std::string & prikey_file,uint32_t length=1024)
GetAllFoxThreadName	sylar/sylar/db/fox_thread.cc	/^void FoxThread::GetAllFoxThreadName(std::map<uint64_t, std::string>& names) {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:(std::map<uint64_t,std::string> & names)
GetAllFoxThreadName	sylar/sylar/db/fox_thread.h	/^    static void GetAllFoxThreadName(std::map<uint64_t, std::string>& names);$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:(std::map<uint64_t,std::string> & names)
GetAsClassName	sylar/sylar/orm/util.cc	/^std::string GetAsClassName(const std::string& v) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
GetAsClassName	sylar/sylar/orm/util.h	/^std::string GetAsClassName(const std::string& v);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
GetAsDefineMacro	sylar/sylar/orm/util.cc	/^std::string GetAsDefineMacro(const std::string& v) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
GetAsDefineMacro	sylar/sylar/orm/util.h	/^std::string GetAsDefineMacro(const std::string& v);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
GetAsGetFunName	sylar/sylar/orm/util.cc	/^std::string GetAsGetFunName(const std::string& v) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
GetAsGetFunName	sylar/sylar/orm/util.h	/^std::string GetAsGetFunName(const std::string& v);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
GetAsMemberName	sylar/sylar/orm/util.cc	/^std::string GetAsMemberName(const std::string& v) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
GetAsMemberName	sylar/sylar/orm/util.h	/^std::string GetAsMemberName(const std::string& v);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
GetAsSetFunName	sylar/sylar/orm/util.cc	/^std::string GetAsSetFunName(const std::string& v) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
GetAsSetFunName	sylar/sylar/orm/util.h	/^std::string GetAsSetFunName(const std::string& v);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
GetAsVariable	sylar/sylar/orm/util.cc	/^std::string GetAsVariable(const std::string& v) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
GetAsVariable	sylar/sylar/orm/util.h	/^std::string GetAsVariable(const std::string& v);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::Node	typeref:typename:int	access:public	signature:() const
GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:int	access:public	signature:() const
GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:int	access:public	signature:() const
GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:int	access:public	signature:() const
GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:int	access:public	signature:() const
GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:int	access:public	signature:() const
GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:int	access:public	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_da/;"	f	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfo::GetClassData() const { return &_clas/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyMessage::GetClassData() const { return &/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryRequest::GetClassData() const { return &_/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryResponse::GetClassData() const { return &/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterInfo::GetClassData() const { return &_/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterRequest::GetClassData() const { return/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
GetConsumersPath	sylar/sylar/streams/service_discovery.cc	/^static std::string GetConsumersPath(const std::string& domain, const std::string& service) {$/;"	f	namespace:sylar	typeref:typename:std::string	file:	signature:(const std::string & domain,const std::string & service)
GetCurrentMS	sylar/sylar/util.cc	/^uint64_t GetCurrentMS() {$/;"	f	namespace:sylar	typeref:typename:uint64_t	signature:()
GetCurrentMS	sylar/sylar/util.h	/^uint64_t GetCurrentMS();$/;"	p	namespace:sylar	typeref:typename:uint64_t	signature:()
GetCurrentUS	sylar/sylar/util.cc	/^uint64_t GetCurrentUS() {$/;"	f	namespace:sylar	typeref:typename:uint64_t	signature:()
GetCurrentUS	sylar/sylar/util.h	/^uint64_t GetCurrentUS();$/;"	p	namespace:sylar	typeref:typename:uint64_t	signature:()
GetDatas	sylar/sylar/config.h	/^    static ConfigVarMap& GetDatas() {$/;"	f	class:sylar::Config	typeref:typename:ConfigVarMap &	access:private	signature:()
GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
GetDomainPath	sylar/sylar/streams/service_discovery.cc	/^static std::string GetDomainPath(const std::string& domain) {$/;"	f	namespace:sylar	typeref:typename:std::string	file:	signature:(const std::string & domain)
GetDouble	sylar/sylar/util/json_util.cc	/^double JsonUtil::GetDouble(const Json::Value& json$/;"	f	class:sylar::JsonUtil	typeref:typename:double	signature:(const Json::Value & json,const std::string & name,double default_value)
GetDouble	sylar/sylar/util/json_util.h	/^    static double GetDouble(const Json::Value& json$/;"	p	class:sylar::JsonUtil	typeref:typename:double	access:public	signature:(const Json::Value & json,const std::string & name,double default_value=0)
GetFiberId	sylar/sylar/fiber.cc	/^uint64_t Fiber::GetFiberId() {$/;"	f	class:sylar::Fiber	typeref:typename:uint64_t	signature:()
GetFiberId	sylar/sylar/fiber.h	/^    static uint64_t GetFiberId();$/;"	p	class:sylar::Fiber	typeref:typename:uint64_t	access:public	signature:()
GetFiberId	sylar/sylar/util.cc	/^uint32_t GetFiberId() {$/;"	f	namespace:sylar	typeref:typename:uint32_t	signature:()
GetFiberId	sylar/sylar/util.h	/^uint32_t GetFiberId();$/;"	p	namespace:sylar	typeref:typename:uint32_t	signature:()
GetFoxThreadName	sylar/sylar/db/fox_thread.cc	/^const std::string& FoxThread::GetFoxThreadName() {$/;"	f	class:sylar::FoxThread	typeref:typename:const std::string &	signature:()
GetFoxThreadName	sylar/sylar/db/fox_thread.h	/^    static const std::string& GetFoxThreadName();$/;"	p	class:sylar::FoxThread	typeref:typename:const std::string &	access:public	signature:()
GetHostName	sylar/sylar/util.cc	/^std::string GetHostName() {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:()
GetHostName	sylar/sylar/util.h	/^std::string GetHostName();$/;"	p	namespace:sylar	typeref:typename:std::string	signature:()
GetHttpRequestBufferSize	sylar/sylar/http/http_parser.cc	/^uint64_t HttpRequestParser::GetHttpRequestBufferSize() {$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:uint64_t	signature:()
GetHttpRequestBufferSize	sylar/sylar/http/http_parser.h	/^    static uint64_t GetHttpRequestBufferSize();$/;"	p	class:sylar::http::HttpRequestParser	typeref:typename:uint64_t	access:public	signature:()
GetHttpRequestMaxBodySize	sylar/sylar/http/http_parser.cc	/^uint64_t HttpRequestParser::GetHttpRequestMaxBodySize() {$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:uint64_t	signature:()
GetHttpRequestMaxBodySize	sylar/sylar/http/http_parser.h	/^    static uint64_t GetHttpRequestMaxBodySize();$/;"	p	class:sylar::http::HttpRequestParser	typeref:typename:uint64_t	access:public	signature:()
GetHttpResponseBufferSize	sylar/sylar/http/http_parser.cc	/^uint64_t HttpResponseParser::GetHttpResponseBufferSize() {$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:uint64_t	signature:()
GetHttpResponseBufferSize	sylar/sylar/http/http_parser.h	/^    static uint64_t GetHttpResponseBufferSize();$/;"	p	class:sylar::http::HttpResponseParser	typeref:typename:uint64_t	access:public	signature:()
GetHttpResponseMaxBodySize	sylar/sylar/http/http_parser.cc	/^uint64_t HttpResponseParser::GetHttpResponseMaxBodySize() {$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:uint64_t	signature:()
GetHttpResponseMaxBodySize	sylar/sylar/http/http_parser.h	/^    static uint64_t GetHttpResponseMaxBodySize();$/;"	p	class:sylar::http::HttpResponseParser	typeref:typename:uint64_t	access:public	signature:()
GetID	sylar/sylar/ds/dict.h	/^    static uint64_t GetID(const char* str) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:(const char * str)
GetID	sylar/sylar/ds/dict.h	/^    static uint64_t GetID(const char* str, const uint32_t& size) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:(const char * str,const uint32_t & size)
GetID	sylar/sylar/ds/dict.h	/^    static uint64_t GetID(const std::string& str) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:(const std::string & str)
GetID	sylar/sylar/ns/ns_protocol.cc	/^uint64_t NSNode::GetID(const std::string& ip, uint16_t port) {$/;"	f	class:sylar::ns::NSNode	typeref:typename:uint64_t	signature:(const std::string & ip,uint16_t port)
GetID	sylar/sylar/ns/ns_protocol.h	/^    static uint64_t GetID(const std::string& ip, uint16_t port);$/;"	p	class:sylar::ns::NSNode	typeref:typename:uint64_t	access:public	signature:(const std::string & ip,uint16_t port)
GetIPv4	sylar/sylar/util.cc	/^std::string GetIPv4() {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:()
GetIPv4	sylar/sylar/util.h	/^std::string GetIPv4();$/;"	p	namespace:sylar	typeref:typename:std::string	signature:()
GetIPv4Inet	sylar/sylar/util.cc	/^in_addr_t GetIPv4Inet() {$/;"	f	namespace:sylar	typeref:typename:in_addr_t	signature:()
GetInstance	sylar/sylar/application.h	/^    static Application* GetInstance() { return s_instance;}$/;"	f	class:sylar::Application	typeref:typename:Application *	access:public	signature:()
GetInstance	sylar/sylar/singleton.h	/^    static T* GetInstance() {$/;"	f	class:sylar::Singleton	typeref:typename:T *	access:public	signature:()
GetInstance	sylar/sylar/singleton.h	/^    static std::shared_ptr<T> GetInstance() {$/;"	f	class:sylar::SingletonPtr	typeref:typename:std::shared_ptr<T>	access:public	signature:()
GetInstancePtr	sylar/sylar/singleton.h	/^std::shared_ptr<T> GetInstancePtr() {$/;"	f	namespace:sylar::__anonda7e01420110	typeref:typename:std::shared_ptr<T>	signature:()
GetInstanceX	sylar/sylar/singleton.h	/^T& GetInstanceX() {$/;"	f	namespace:sylar::__anonda7e01420110	typeref:typename:T &	signature:()
GetInt32	sylar/sylar/util/json_util.cc	/^int32_t JsonUtil::GetInt32(const Json::Value& json$/;"	f	class:sylar::JsonUtil	typeref:typename:int32_t	signature:(const Json::Value & json,const std::string & name,int32_t default_value)
GetInt32	sylar/sylar/util/json_util.h	/^    static int32_t GetInt32(const Json::Value& json$/;"	p	class:sylar::JsonUtil	typeref:typename:int32_t	access:public	signature:(const Json::Value & json,const std::string & name,int32_t default_value=0)
GetInt64	sylar/sylar/util/json_util.cc	/^int64_t JsonUtil::GetInt64(const Json::Value& json$/;"	f	class:sylar::JsonUtil	typeref:typename:int64_t	signature:(const Json::Value & json,const std::string & name,int64_t default_value)
GetInt64	sylar/sylar/util/json_util.h	/^    static int64_t GetInt64(const Json::Value& json$/;"	p	class:sylar::JsonUtil	typeref:typename:int64_t	access:public	signature:(const Json::Value & json,const std::string & name,int64_t default_value=0)
GetInterfaceAddresses	sylar/sylar/address.cc	/^bool Address::GetInterfaceAddresses(std::multimap<std::string$/;"	f	class:sylar::Address	typeref:typename:bool	signature:(std::multimap<std::string,std::pair<Address::ptr,uint32_t>> & result,int family)
GetInterfaceAddresses	sylar/sylar/address.cc	/^bool Address::GetInterfaceAddresses(std::vector<std::pair<Address::ptr, uint32_t> >&result$/;"	f	class:sylar::Address	typeref:typename:bool	signature:(std::vector<std::pair<Address::ptr,uint32_t>> & result,const std::string & iface,int family)
GetInterfaceAddresses	sylar/sylar/address.h	/^    static bool GetInterfaceAddresses(std::multimap<std::string$/;"	p	class:sylar::Address	typeref:typename:bool	access:public	signature:(std::multimap<std::string,std::pair<Address::ptr,uint32_t>> & result,int family=AF_INET)
GetInterfaceAddresses	sylar/sylar/address.h	/^    static bool GetInterfaceAddresses(std::vector<std::pair<Address::ptr, uint32_t> >&result$/;"	p	class:sylar::Address	typeref:typename:bool	access:public	signature:(std::vector<std::pair<Address::ptr,uint32_t>> & result,const std::string & iface,int family=AF_INET)
GetMainFiber	sylar/sylar/scheduler.cc	/^Fiber* Scheduler::GetMainFiber() {$/;"	f	class:sylar::Scheduler	typeref:typename:Fiber *	signature:()
GetMainFiber	sylar/sylar/scheduler.h	/^    static Fiber* GetMainFiber();$/;"	p	class:sylar::Scheduler	typeref:typename:Fiber *	access:public	signature:()
GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {$/;"	f	class:sylar::ns::Node	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata NotifyMessage::GetMetadata() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata QueryRequest::GetMetadata() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata QueryResponse::GetMetadata() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata RegisterInfo::GetMetadata() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
GetModule	sylar/sylar/library.cc	/^Module::ptr Library::GetModule(const std::string& path) {$/;"	f	class:sylar::Library	typeref:typename:Module::ptr	signature:(const std::string & path)
GetModule	sylar/sylar/library.h	/^    static Module::ptr GetModule(const std::string& path);$/;"	p	class:sylar::Library	typeref:typename:Module::ptr	access:public	signature:(const std::string & path)
GetMutex	sylar/sylar/config.h	/^    static RWMutexType& GetMutex() {$/;"	f	class:sylar::Config	typeref:typename:RWMutexType &	access:private	signature:()
GetName	sylar/sylar/thread.cc	/^const std::string& Thread::GetName() {$/;"	f	class:sylar::Thread	typeref:typename:const std::string &	signature:()
GetName	sylar/sylar/thread.h	/^    static const std::string& GetName();$/;"	p	class:sylar::Thread	typeref:typename:const std::string &	access:public	signature:()
GetParamValue	sylar/sylar/util.h	/^V GetParamValue(const Map& m, const K& k, const V& def = V()) {$/;"	f	namespace:sylar	typeref:typename:V	signature:(const Map & m,const K & k,const V & def=V ())
GetProvidersPath	sylar/sylar/streams/service_discovery.cc	/^static std::string GetProvidersPath(const std::string& domain, const std::string& service) {$/;"	f	namespace:sylar	typeref:typename:std::string	file:	signature:(const std::string & domain,const std::string & service)
GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
GetString	sylar/sylar/util/json_util.cc	/^std::string JsonUtil::GetString(const Json::Value& json$/;"	f	class:sylar::JsonUtil	typeref:typename:std::string	signature:(const Json::Value & json,const std::string & name,const std::string & default_value)
GetString	sylar/sylar/util/json_util.h	/^    static std::string GetString(const Json::Value& json$/;"	p	class:sylar::JsonUtil	typeref:typename:std::string	access:public	signature:(const Json::Value & json,const std::string & name,const std::string & default_value="")
GetThis	sylar/sylar/db/fox_thread.cc	/^FoxThread* FoxThread::GetThis() {$/;"	f	class:sylar::FoxThread	typeref:typename:FoxThread *	signature:()
GetThis	sylar/sylar/db/fox_thread.h	/^    static FoxThread* GetThis();$/;"	p	class:sylar::FoxThread	typeref:typename:FoxThread *	access:public	signature:()
GetThis	sylar/sylar/fiber.cc	/^Fiber::ptr Fiber::GetThis() {$/;"	f	class:sylar::Fiber	typeref:typename:Fiber::ptr	signature:()
GetThis	sylar/sylar/fiber.h	/^    static Fiber::ptr GetThis();$/;"	p	class:sylar::Fiber	typeref:typename:Fiber::ptr	access:public	signature:()
GetThis	sylar/sylar/iomanager.cc	/^IOManager* IOManager::GetThis() {$/;"	f	class:sylar::IOManager	typeref:typename:IOManager *	signature:()
GetThis	sylar/sylar/iomanager.h	/^    static IOManager* GetThis();$/;"	p	class:sylar::IOManager	typeref:typename:IOManager *	access:public	signature:()
GetThis	sylar/sylar/scheduler.cc	/^Scheduler* Scheduler::GetThis() {$/;"	f	class:sylar::Scheduler	typeref:typename:Scheduler *	signature:()
GetThis	sylar/sylar/scheduler.h	/^    static Scheduler* GetThis();$/;"	p	class:sylar::Scheduler	typeref:typename:Scheduler *	access:public	signature:()
GetThis	sylar/sylar/thread.cc	/^Thread* Thread::GetThis() {$/;"	f	class:sylar::Thread	typeref:typename:Thread *	signature:()
GetThis	sylar/sylar/thread.h	/^    static Thread* GetThis();$/;"	p	class:sylar::Thread	typeref:typename:Thread *	access:public	signature:()
GetThreadId	sylar/sylar/util.cc	/^pid_t GetThreadId() {$/;"	f	namespace:sylar	typeref:typename:pid_t	signature:()
GetThreadId	sylar/sylar/util.h	/^pid_t GetThreadId();$/;"	p	namespace:sylar	typeref:typename:pid_t	signature:()
GetUint32	sylar/sylar/util/json_util.cc	/^uint32_t JsonUtil::GetUint32(const Json::Value& json$/;"	f	class:sylar::JsonUtil	typeref:typename:uint32_t	signature:(const Json::Value & json,const std::string & name,uint32_t default_value)
GetUint32	sylar/sylar/util/json_util.h	/^    static uint32_t GetUint32(const Json::Value& json$/;"	p	class:sylar::JsonUtil	typeref:typename:uint32_t	access:public	signature:(const Json::Value & json,const std::string & name,uint32_t default_value=0)
GetUint64	sylar/sylar/util/json_util.cc	/^uint64_t JsonUtil::GetUint64(const Json::Value& json$/;"	f	class:sylar::JsonUtil	typeref:typename:uint64_t	signature:(const Json::Value & json,const std::string & name,uint64_t default_value)
GetUint64	sylar/sylar/util/json_util.h	/^    static uint64_t GetUint64(const Json::Value& json$/;"	p	class:sylar::JsonUtil	typeref:typename:uint64_t	access:public	signature:(const Json::Value & json,const std::string & name,uint64_t default_value=0)
HEX	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:	signature:(n)
HEX	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:	signature:(n)
HOLD	sylar/sylar/fiber.h	/^        HOLD,$/;"	e	enum:sylar::Fiber::State	access:public
HOOK_FUN	sylar/sylar/hook.cc	/^    HOOK_FUN(XX);$/;"	p	file:	signature:(XX)
HOOK_FUN	sylar/sylar/hook.cc	/^#define HOOK_FUN(/;"	d	file:	signature:(XX)
HTTP_METHOD_MAP	sylar/sylar/http/http.h	/^    HTTP_METHOD_MAP(XX)$/;"	e	enum:sylar::http::HttpMethod	access:public
HTTP_METHOD_MAP	sylar/sylar/http/http.h	/^#define HTTP_METHOD_MAP(/;"	d	signature:(XX)
HTTP_STATUS_MAP	sylar/sylar/http/http.h	/^    HTTP_STATUS_MAP(XX)$/;"	e	enum:sylar::http::HttpStatus	access:public
HTTP_STATUS_MAP	sylar/sylar/http/http.h	/^#define HTTP_STATUS_MAP(/;"	d	signature:(XX)
HUFFMAN	sylar/sylar/streams/zlib_stream.h	/^        HUFFMAN = Z_HUFFMAN_ONLY,$/;"	e	enum:sylar::ZlibStream::Strategy	access:public
HasBits	sylar/sylar/ns/ns_protobuf.pb.cc	/^  using HasBits = decltype(std::declval<Node>()._has_bits_);$/;"	t	class:sylar::ns::Node::_Internal	file:	access:public
HasBits	sylar/sylar/ns/ns_protobuf.pb.cc	/^  using HasBits = decltype(std::declval<NodeInfo>()._has_bits_);$/;"	t	class:sylar::ns::NodeInfo::_Internal	file:	access:public
HasBits	sylar/sylar/ns/ns_protobuf.pb.cc	/^  using HasBits = decltype(std::declval<RegisterInfo>()._has_bits_);$/;"	t	class:sylar::ns::RegisterInfo::_Internal	file:	access:public
HashLruCache	sylar/sylar/ds/lru_cache.h	/^    HashLruCache(size_t bucket, size_t max_size, size_t elasticity)$/;"	f	class:sylar::ds::HashLruCache	access:public	signature:(size_t bucket,size_t max_size,size_t elasticity)
HashLruCache	sylar/sylar/ds/lru_cache.h	/^class HashLruCache {$/;"	c	namespace:sylar::ds
HashMap	sylar/sylar/ds/hash_map.h	/^    HashMap(const uint32_t& size = 0)$/;"	f	class:sylar::ds::HashMap	access:public	signature:(const uint32_t & size=0)
HashMap	sylar/sylar/ds/hash_map.h	/^class HashMap {$/;"	c	namespace:sylar::ds
HashMultimap	sylar/sylar/ds/hash_multimap.h	/^    HashMultimap(const uint32_t& size = 10)$/;"	f	class:sylar::ds::HashMultimap	access:public	signature:(const uint32_t & size=10)
HashMultimap	sylar/sylar/ds/hash_multimap.h	/^class HashMultimap {$/;"	c	namespace:sylar::ds
HashTimedCache	sylar/sylar/ds/timed_cache.h	/^    HashTimedCache(size_t bucket, size_t max_size, size_t elasticity)$/;"	f	class:sylar::ds::HashTimedCache	access:public	signature:(size_t bucket,size_t max_size,size_t elasticity)
HashTimedCache	sylar/sylar/ds/timed_cache.h	/^class HashTimedCache {$/;"	c	namespace:sylar::ds
HashTimedLruCache	sylar/sylar/ds/timed_lru_cache.h	/^    HashTimedLruCache(size_t bucket, size_t max_size, size_t elasticity)$/;"	f	class:sylar::ds::HashTimedLruCache	access:public	signature:(size_t bucket,size_t max_size,size_t elasticity)
HashTimedLruCache	sylar/sylar/ds/timed_lru_cache.h	/^class HashTimedLruCache {$/;"	c	namespace:sylar::ds
Hello	sylar/sylar/test.proto	/^message Hello {$/;"	m
HoldServletCreator	sylar/sylar/http/servlet.h	/^    HoldServletCreator(Servlet::ptr slt)$/;"	f	class:sylar::http::HoldServletCreator	access:public	signature:(Servlet::ptr slt)
HoldServletCreator	sylar/sylar/http/servlet.h	/^class HoldServletCreator : public IServletCreator {$/;"	c	namespace:sylar::http	inherits:IServletCreator
HolderStats	sylar/sylar/streams/load_balance.h	/^class HolderStats {$/;"	c	namespace:sylar
HolderStatsSet	sylar/sylar/streams/load_balance.cc	/^HolderStatsSet::HolderStatsSet(uint32_t size) {$/;"	f	class:sylar::HolderStatsSet	signature:(uint32_t size)
HolderStatsSet	sylar/sylar/streams/load_balance.h	/^    HolderStatsSet(uint32_t size = 5);$/;"	p	class:sylar::HolderStatsSet	access:public	signature:(uint32_t size=5)
HolderStatsSet	sylar/sylar/streams/load_balance.h	/^class HolderStatsSet {$/;"	c	namespace:sylar
HttpConnection	sylar/sylar/http/http_connection.cc	/^HttpConnection::HttpConnection(Socket::ptr sock, bool owner)$/;"	f	class:sylar::http::HttpConnection	signature:(Socket::ptr sock,bool owner)
HttpConnection	sylar/sylar/http/http_connection.h	/^    HttpConnection(Socket::ptr sock, bool owner = true);$/;"	p	class:sylar::http::HttpConnection	access:public	signature:(Socket::ptr sock,bool owner=true)
HttpConnection	sylar/sylar/http/http_connection.h	/^class HttpConnection : public SocketStream {$/;"	c	namespace:sylar::http	inherits:SocketStream
HttpConnectionPool	sylar/sylar/http/http_connection.cc	/^HttpConnectionPool::HttpConnectionPool(const std::string& host$/;"	f	class:sylar::http::HttpConnectionPool	signature:(const std::string & host,const std::string & vhost,uint32_t port,bool is_https,uint32_t max_size,uint32_t max_alive_time,uint32_t max_request)
HttpConnectionPool	sylar/sylar/http/http_connection.h	/^    HttpConnectionPool(const std::string& host$/;"	p	class:sylar::http::HttpConnectionPool	access:public	signature:(const std::string & host,const std::string & vhost,uint32_t port,bool is_https,uint32_t max_size,uint32_t max_alive_time,uint32_t max_request)
HttpConnectionPool	sylar/sylar/http/http_connection.h	/^class HttpConnectionPool {$/;"	c	namespace:sylar::http
HttpMethod	sylar/sylar/http/http.h	/^enum class HttpMethod {$/;"	g	namespace:sylar::http
HttpMethodToString	sylar/sylar/http/http.cc	/^const char* HttpMethodToString(const HttpMethod& m) {$/;"	f	namespace:sylar::http	typeref:typename:const char *	signature:(const HttpMethod & m)
HttpMethodToString	sylar/sylar/http/http.h	/^const char* HttpMethodToString(const HttpMethod& m);$/;"	p	namespace:sylar::http	typeref:typename:const char *	signature:(const HttpMethod & m)
HttpRequest	sylar/sylar/http/http.cc	/^HttpRequest::HttpRequest(uint8_t version, bool close)$/;"	f	class:sylar::http::HttpRequest	signature:(uint8_t version,bool close)
HttpRequest	sylar/sylar/http/http.h	/^    HttpRequest(uint8_t version = 0x11, bool close = true);$/;"	p	class:sylar::http::HttpRequest	access:public	signature:(uint8_t version=0x11,bool close=true)
HttpRequest	sylar/sylar/http/http.h	/^class HttpRequest {$/;"	c	namespace:sylar::http
HttpRequestParser	sylar/sylar/http/http_parser.cc	/^HttpRequestParser::HttpRequestParser()$/;"	f	class:sylar::http::HttpRequestParser	signature:()
HttpRequestParser	sylar/sylar/http/http_parser.h	/^    HttpRequestParser();$/;"	p	class:sylar::http::HttpRequestParser	access:public	signature:()
HttpRequestParser	sylar/sylar/http/http_parser.h	/^class HttpRequestParser {$/;"	c	namespace:sylar::http
HttpResponse	sylar/sylar/http/http.cc	/^HttpResponse::HttpResponse(uint8_t version, bool close)$/;"	f	class:sylar::http::HttpResponse	signature:(uint8_t version,bool close)
HttpResponse	sylar/sylar/http/http.h	/^    HttpResponse(uint8_t version = 0x11, bool close = true);$/;"	p	class:sylar::http::HttpResponse	access:public	signature:(uint8_t version=0x11,bool close=true)
HttpResponse	sylar/sylar/http/http.h	/^class HttpResponse {$/;"	c	namespace:sylar::http
HttpResponseParser	sylar/sylar/http/http_parser.cc	/^HttpResponseParser::HttpResponseParser()$/;"	f	class:sylar::http::HttpResponseParser	signature:()
HttpResponseParser	sylar/sylar/http/http_parser.h	/^    HttpResponseParser();$/;"	p	class:sylar::http::HttpResponseParser	access:public	signature:()
HttpResponseParser	sylar/sylar/http/http_parser.h	/^class HttpResponseParser {$/;"	c	namespace:sylar::http
HttpResult	sylar/sylar/http/http_connection.h	/^    HttpResult(int _result$/;"	f	struct:sylar::http::HttpResult	access:public	signature:(int _result,HttpResponse::ptr _response,const std::string & _error)
HttpResult	sylar/sylar/http/http_connection.h	/^struct HttpResult {$/;"	s	namespace:sylar::http
HttpServer	sylar/sylar/http/http_server.cc	/^HttpServer::HttpServer(bool keepalive$/;"	f	class:sylar::http::HttpServer	signature:(bool keepalive,sylar::IOManager * worker,sylar::IOManager * io_worker,sylar::IOManager * accept_worker)
HttpServer	sylar/sylar/http/http_server.h	/^    HttpServer(bool keepalive = false$/;"	p	class:sylar::http::HttpServer	access:public	signature:(bool keepalive=false,sylar::IOManager * worker=sylar::IOManager::GetThis (),sylar::IOManager * io_worker=sylar::IOManager::GetThis (),sylar::IOManager * accept_worker=sylar::IOManager::GetThis ())
HttpServer	sylar/sylar/http/http_server.h	/^class HttpServer : public TcpServer {$/;"	c	namespace:sylar::http	inherits:TcpServer
HttpSession	sylar/sylar/http/http_session.cc	/^HttpSession::HttpSession(Socket::ptr sock, bool owner)$/;"	f	class:sylar::http::HttpSession	signature:(Socket::ptr sock,bool owner)
HttpSession	sylar/sylar/http/http_session.h	/^    HttpSession(Socket::ptr sock, bool owner = true);$/;"	p	class:sylar::http::HttpSession	access:public	signature:(Socket::ptr sock,bool owner=true)
HttpSession	sylar/sylar/http/http_session.h	/^class HttpSession : public SocketStream {$/;"	c	namespace:sylar::http	inherits:SocketStream
HttpStatus	sylar/sylar/http/http.h	/^enum class HttpStatus {$/;"	g	namespace:sylar::http
HttpStatusToString	sylar/sylar/http/http.cc	/^const char* HttpStatusToString(const HttpStatus& s) {$/;"	f	namespace:sylar::http	typeref:typename:const char *	signature:(const HttpStatus & s)
HttpStatusToString	sylar/sylar/http/http.h	/^const char* HttpStatusToString(const HttpStatus& s);$/;"	p	namespace:sylar::http	typeref:typename:const char *	signature:(const HttpStatus & s)
IDB	sylar/sylar/db/db.h	/^class IDB : public ISQLUpdate$/;"	c	namespace:sylar	inherits:ISQLUpdate,ISQLQuery
ID_VOID_MAIN	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
IFoxThread	sylar/sylar/db/fox_thread.h	/^class IFoxThread {$/;"	c	namespace:sylar
ILoadBalance	sylar/sylar/streams/load_balance.h	/^class ILoadBalance {$/;"	c	namespace:sylar
IMMEDIATE	sylar/sylar/db/sqlite3.h	/^        IMMEDIATE = 1,$/;"	e	enum:sylar::SQLite3Transaction::Type	access:public
INCLUDE_CONTAINERS_ARRAY_H_	sylar/sylar/ds/roaring.h	/^#define INCLUDE_CONTAINERS_ARRAY_H_$/;"	d
INCLUDE_CONTAINERS_BITSET_H_	sylar/sylar/ds/roaring.h	/^#define INCLUDE_CONTAINERS_BITSET_H_$/;"	d
INCLUDE_CONTAINERS_CONVERT_H_	sylar/sylar/ds/roaring.h	/^#define INCLUDE_CONTAINERS_CONVERT_H_$/;"	d
INCLUDE_CONTAINERS_MIXED_ANDNOT_H_	sylar/sylar/ds/roaring.h	/^#define INCLUDE_CONTAINERS_MIXED_ANDNOT_H_$/;"	d
INCLUDE_CONTAINERS_MIXED_INTERSECTION_H_	sylar/sylar/ds/roaring.h	/^#define INCLUDE_CONTAINERS_MIXED_INTERSECTION_H_$/;"	d
INCLUDE_CONTAINERS_MIXED_NEGATION_H_	sylar/sylar/ds/roaring.h	/^#define INCLUDE_CONTAINERS_MIXED_NEGATION_H_$/;"	d
INCLUDE_CONTAINERS_MIXED_UNION_H_	sylar/sylar/ds/roaring.h	/^#define INCLUDE_CONTAINERS_MIXED_UNION_H_$/;"	d
INCLUDE_CONTAINERS_MIXED_XOR_H_	sylar/sylar/ds/roaring.h	/^#define INCLUDE_CONTAINERS_MIXED_XOR_H_$/;"	d
INCLUDE_CONTAINERS_RUN_H_	sylar/sylar/ds/roaring.h	/^#define INCLUDE_CONTAINERS_RUN_H_$/;"	d
INCLUDE_MISC_CONFIGREPORT_H_	sylar/sylar/ds/roaring.h	/^#define INCLUDE_MISC_CONFIGREPORT_H_$/;"	d
INCLUDE_PORTABILITY_H_	sylar/sylar/ds/roaring.h	/^#define INCLUDE_PORTABILITY_H_$/;"	d
INCLUDE_ROARING_64_MAP_HH_	sylar/sylar/ds/roaring.hh	/^#define INCLUDE_ROARING_64_MAP_HH_$/;"	d
INCLUDE_ROARING_ARRAY_H	sylar/sylar/ds/roaring.h	/^#define INCLUDE_ROARING_ARRAY_H$/;"	d
INCLUDE_ROARING_HH_	sylar/sylar/ds/roaring.hh	/^#define INCLUDE_ROARING_HH_$/;"	d
INCLUDE_UTILASM_H_	sylar/sylar/ds/roaring.h	/^#define INCLUDE_UTILASM_H_$/;"	d
INFO	sylar/sylar/log.h	/^        INFO = 2,$/;"	e	enum:sylar::LogLevel::Level	access:public
INIT	sylar/sylar/fiber.h	/^        INIT,$/;"	e	enum:sylar::Fiber::State	access:public
INIT_ERR	sylar/sylar/db/redis.h	/^        INIT_ERR = 6$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
INIT_ERR	sylar/sylar/db/redis.h	/^        INIT_ERR = 6$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
INVALID_HOST	sylar/sylar/http/http_connection.h	/^        INVALID_HOST = 2,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
INVALID_URL	sylar/sylar/http/http_connection.h	/^        INVALID_URL = 1,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
IOManager	sylar/sylar/iomanager.cc	/^IOManager::IOManager(size_t threads, bool use_caller, const std::string& name)$/;"	f	class:sylar::IOManager	signature:(size_t threads,bool use_caller,const std::string & name)
IOManager	sylar/sylar/iomanager.h	/^    IOManager(size_t threads = 1, bool use_caller = true, const std::string& name = "");$/;"	p	class:sylar::IOManager	access:public	signature:(size_t threads=1,bool use_caller=true,const std::string & name="")
IOManager	sylar/sylar/iomanager.h	/^class IOManager : public Scheduler, public TimerManager {$/;"	c	namespace:sylar	inherits:Scheduler,TimerManager
IO_ERROR	sylar/sylar/email/smtp.h	/^        IO_ERROR = -1$/;"	e	enum:sylar::SmtpResult::Result	access:public
IO_ERROR	sylar/sylar/streams/async_socket_stream.h	/^        IO_ERROR = -2,$/;"	e	enum:sylar::AsyncSocketStream::Error	access:public
IPAddress	sylar/sylar/address.h	/^class IPAddress : public Address {$/;"	c	namespace:sylar	inherits:Address
IPv4	sylar/sylar/socket.h	/^        IPv4 = AF_INET,$/;"	e	enum:sylar::Socket::Family	access:public
IPv4Address	sylar/sylar/address.cc	/^IPv4Address::IPv4Address(const sockaddr_in& address) {$/;"	f	class:sylar::IPv4Address	signature:(const sockaddr_in & address)
IPv4Address	sylar/sylar/address.cc	/^IPv4Address::IPv4Address(uint32_t address, uint16_t port) {$/;"	f	class:sylar::IPv4Address	signature:(uint32_t address,uint16_t port)
IPv4Address	sylar/sylar/address.h	/^    IPv4Address(const sockaddr_in& address);$/;"	p	class:sylar::IPv4Address	access:public	signature:(const sockaddr_in & address)
IPv4Address	sylar/sylar/address.h	/^    IPv4Address(uint32_t address = INADDR_ANY, uint16_t port = 0);$/;"	p	class:sylar::IPv4Address	access:public	signature:(uint32_t address=INADDR_ANY,uint16_t port=0)
IPv4Address	sylar/sylar/address.h	/^class IPv4Address : public IPAddress {$/;"	c	namespace:sylar	inherits:IPAddress
IPv6	sylar/sylar/socket.h	/^        IPv6 = AF_INET6,$/;"	e	enum:sylar::Socket::Family	access:public
IPv6Address	sylar/sylar/address.cc	/^IPv6Address::IPv6Address() {$/;"	f	class:sylar::IPv6Address	signature:()
IPv6Address	sylar/sylar/address.cc	/^IPv6Address::IPv6Address(const sockaddr_in6& address) {$/;"	f	class:sylar::IPv6Address	signature:(const sockaddr_in6 & address)
IPv6Address	sylar/sylar/address.cc	/^IPv6Address::IPv6Address(const uint8_t address[16], uint16_t port) {$/;"	f	class:sylar::IPv6Address	signature:(const uint8_t address[16],uint16_t port)
IPv6Address	sylar/sylar/address.h	/^    IPv6Address();$/;"	p	class:sylar::IPv6Address	access:public	signature:()
IPv6Address	sylar/sylar/address.h	/^    IPv6Address(const sockaddr_in6& address);$/;"	p	class:sylar::IPv6Address	access:public	signature:(const sockaddr_in6 & address)
IPv6Address	sylar/sylar/address.h	/^    IPv6Address(const uint8_t address[16], uint16_t port = 0);$/;"	p	class:sylar::IPv6Address	access:public	signature:(const uint8_t address[16],uint16_t port=0)
IPv6Address	sylar/sylar/address.h	/^class IPv6Address : public IPAddress {$/;"	c	namespace:sylar	inherits:IPAddress
IRedis	sylar/sylar/db/redis.h	/^    IRedis() : m_logEnable(true) { }$/;"	f	class:sylar::IRedis	access:public	signature:()
IRedis	sylar/sylar/db/redis.h	/^class IRedis {$/;"	c	namespace:sylar
ISQLData	sylar/sylar/db/db.h	/^class ISQLData {$/;"	c	namespace:sylar
ISQLQuery	sylar/sylar/db/db.h	/^class ISQLQuery {$/;"	c	namespace:sylar
ISQLUpdate	sylar/sylar/db/db.h	/^class ISQLUpdate {$/;"	c	namespace:sylar
IS_BIG_ENDIAN	sylar/sylar/ds/roaring.h	/^#define IS_BIG_ENDIAN /;"	d
IS_X64	sylar/sylar/ds/roaring.h	/^#define IS_X64$/;"	d
IServiceDiscovery	sylar/sylar/streams/service_discovery.h	/^class IServiceDiscovery {$/;"	c	namespace:sylar
IServletCreator	sylar/sylar/http/servlet.h	/^class IServletCreator {$/;"	c	namespace:sylar::http
IStmt	sylar/sylar/db/db.h	/^class IStmt {$/;"	c	namespace:sylar
ISyncRedis	sylar/sylar/db/redis.h	/^class ISyncRedis : public IRedis {$/;"	c	namespace:sylar	inherits:IRedis
ITransaction	sylar/sylar/db/db.h	/^class ITransaction : public ISQLUpdate {$/;"	c	namespace:sylar	inherits:ISQLUpdate
Index	sylar/sylar/orm/index.h	/^class Index {$/;"	c	namespace:sylar::orm
InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::Node	typeref:typename:void	access:private
InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::NodeInfo	typeref:typename:void	access:private
InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private
InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::QueryRequest	typeref:typename:void	access:private
InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::QueryResponse	typeref:typename:void	access:private
InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private
InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::InternalSwap(Node* other) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(Node * other)
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::InternalSwap(NodeInfo* other) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(NodeInfo * other)
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::InternalSwap(NotifyMessage* other) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(NotifyMessage * other)
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::InternalSwap(QueryRequest* other) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(QueryRequest * other)
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::InternalSwap(QueryResponse* other) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(QueryResponse * other)
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::InternalSwap(RegisterInfo* other) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(RegisterInfo * other)
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::InternalSwap(RegisterRequest* other) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(RegisterRequest * other)
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(Node* other);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(Node * other)
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(NodeInfo* other);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:(NodeInfo * other)
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(NotifyMessage* other);$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:(NotifyMessage * other)
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(QueryRequest* other);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:(QueryRequest * other)
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(QueryResponse* other);$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:(QueryResponse * other)
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(RegisterInfo* other);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:(RegisterInfo * other)
InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(RegisterRequest* other);$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:(RegisterRequest * other)
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool Node::IsInitialized() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool NodeInfo::IsInitialized() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:bool	signature:() const
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool NotifyMessage::IsInitialized() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:bool	signature:() const
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool QueryRequest::IsInitialized() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:bool	signature:() const
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool QueryResponse::IsInitialized() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:bool	signature:() const
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool RegisterInfo::IsInitialized() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:bool	signature:() const
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool RegisterRequest::IsInitialized() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:bool	signature:() const
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:public	signature:() const
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:bool	access:public	signature:() const
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:bool	access:public	signature:() const
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:bool	access:public	signature:() const
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:bool	access:public	signature:() const
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:bool	access:public	signature:() const
IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:bool	access:public	signature:() const
IsRunningPidfile	sylar/sylar/util.cc	/^bool FSUtil::IsRunningPidfile(const std::string& pidfile) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & pidfile)
IsRunningPidfile	sylar/sylar/util.h	/^    static bool IsRunningPidfile(const std::string& pidfile);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & pidfile)
Item	sylar/sylar/ds/timed_cache.h	/^        Item(const K& k, const V& v, const uint64_t& t)$/;"	f	struct:sylar::ds::TimedCache::Item	access:public	signature:(const K & k,const V & v,const uint64_t & t)
Item	sylar/sylar/ds/timed_cache.h	/^    struct Item {$/;"	s	class:sylar::ds::TimedCache	access:private
Item	sylar/sylar/ds/timed_lru_cache.h	/^        Item(const K& k, const V& v, const uint64_t& t)$/;"	f	struct:sylar::ds::TimedLruCache::Item	access:public	signature:(const K & k,const V & v,const uint64_t & t)
Item	sylar/sylar/ds/timed_lru_cache.h	/^    struct Item {$/;"	s	class:sylar::ds::TimedLruCache	access:private
ItemTimeOp	sylar/sylar/ds/timed_lru_cache.h	/^    struct ItemTimeOp {$/;"	s	class:sylar::ds::TimedLruCache	access:private
Ivt	sylar/sylar/ds/util.h	/^    Ivt()$/;"	f	struct:sylar::ds::Ivt	access:public	signature:()
Ivt	sylar/sylar/ds/util.h	/^struct Ivt {$/;"	s	namespace:sylar::ds
Join	sylar/sylar/util.h	/^std::string Join(Iter begin, Iter end, const std::string& tag) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(Iter begin,Iter end,const std::string & tag)
JsonToYaml	sylar/sylar/util.cc	/^bool JsonToYaml(const Json::Value& jnode, YAML::Node& ynode) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(const Json::Value & jnode,YAML::Node & ynode)
JsonToYaml	sylar/sylar/util.h	/^bool JsonToYaml(const Json::Value& jnode, YAML::Node& ynode);$/;"	p	namespace:sylar	typeref:typename:bool	signature:(const Json::Value & jnode,YAML::Node & ynode)
JsonUtil	sylar/sylar/util/json_util.h	/^class JsonUtil {$/;"	c	namespace:sylar
KeyHashType	sylar/sylar/ds/util.h	/^    typedef Murmur3Hash<K, seed> KeyHashType;$/;"	t	class:sylar::ds::Murmur3Hash	typeref:typename:Murmur3Hash<K,seed>	access:public
LAZY_OR_BITSET_CONVERSION	sylar/sylar/ds/roaring.h	/^#define LAZY_OR_BITSET_CONVERSION /;"	d
LAZY_OR_BITSET_CONVERSION_TO_FULL	sylar/sylar/ds/roaring.h	/^#define LAZY_OR_BITSET_CONVERSION_TO_FULL /;"	d
LEN	sylar/sylar/http/http11_parser.rl.cc	/^#define LEN(/;"	d	file:	signature:(AT,FPC)
LEN	sylar/sylar/http/httpclient_parser.rl.cc	/^#define LEN(/;"	d	file:	signature:(AT,FPC)
LIBRARY_OUTPUT_PATH	CMakeLists.txt	/^SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}\/lib)$/;"	v
LIBRARY_OUTPUT_PATH	sylar/CMakeLists.txt	/^SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}\/lib)$/;"	v
LIBRARY_OUTPUT_PATH	sylar/template/CMakeLists.txt	/^SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}\/lib)$/;"	v
LIBS	sylar/CMakeLists.txt	/^set(LIBS$/;"	v
LIB_SRC	CMakeLists.txt	/^set(LIB_SRC$/;"	v
LIB_SRC	sylar/CMakeLists.txt	/^set(LIB_SRC$/;"	v
LIB_SRC	sylar/template/CMakeLists.txt	/^set(LIB_SRC$/;"	v
LOOP_SIZE	sylar/sylar/ds/roaring.c	/^#define LOOP_SIZE /;"	d	file:
Level	sylar/sylar/log.h	/^    enum Level {$/;"	g	class:sylar::LogLevel	access:public
LevelFormatItem	sylar/sylar/log.cc	/^    LevelFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::LevelFormatItem	file:	access:public	signature:(const std::string & str="")
LevelFormatItem	sylar/sylar/log.cc	/^class LevelFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
LexicalCast	sylar/sylar/config.h	/^class LexicalCast {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::list<T>, std::string> {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::map<std::string, T>, std::string> {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::set<T>, std::string> {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::string, std::list<T> > {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::string, std::map<std::string, T> > {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::string, std::set<T> > {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::string, std::unordered_map<std::string, T> > {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::string, std::unordered_set<T> > {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::string, std::vector<T> > {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::unordered_map<std::string, T>, std::string> {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::unordered_set<T>, std::string> {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::vector<T>, std::string> {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/log.cc	/^class LexicalCast<LogDefine, std::string> {$/;"	c	namespace:sylar	file:
LexicalCast	sylar/sylar/log.cc	/^class LexicalCast<std::string, LogDefine> {$/;"	c	namespace:sylar	file:
LexicalCast	sylar/sylar/tcp_server.h	/^class LexicalCast<TcpServerConf, std::string> {$/;"	c	namespace:sylar
LexicalCast	sylar/sylar/tcp_server.h	/^class LexicalCast<std::string, TcpServerConf> {$/;"	c	namespace:sylar
LexicalCast	sylar/tests/test_config.cc	/^class LexicalCast<Person, std::string> {$/;"	c	namespace:sylar	file:
LexicalCast	sylar/tests/test_config.cc	/^class LexicalCast<std::string, Person> {$/;"	c	namespace:sylar	file:
Library	sylar/sylar/library.h	/^class Library {$/;"	c	namespace:sylar
LineFormatItem	sylar/sylar/log.cc	/^    LineFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::LineFormatItem	file:	access:public	signature:(const std::string & str="")
LineFormatItem	sylar/sylar/log.cc	/^class LineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
ListAllFile	sylar/sylar/util.cc	/^void FSUtil::ListAllFile(std::vector<std::string>& files$/;"	f	class:sylar::FSUtil	typeref:typename:void	signature:(std::vector<std::string> & files,const std::string & path,const std::string & subfix)
ListAllFile	sylar/sylar/util.h	/^    static void ListAllFile(std::vector<std::string>& files$/;"	p	class:sylar::FSUtil	typeref:typename:void	access:public	signature:(std::vector<std::string> & files,const std::string & path,const std::string & subfix)
ListAllMember	sylar/sylar/config.cc	/^static void ListAllMember(const std::string& prefix,$/;"	f	namespace:sylar	typeref:typename:void	file:	signature:(const std::string & prefix,const YAML::Node & node,std::list<std::pair<std::string,const YAML::Node>> & output)
LoadBalance	sylar/sylar/streams/load_balance.h	/^class LoadBalance : public ILoadBalance {$/;"	c	namespace:sylar	inherits:ILoadBalance
LoadBalanceItem	sylar/sylar/streams/load_balance.h	/^class LoadBalanceItem {$/;"	c	namespace:sylar
LoadFromConfDir	sylar/sylar/config.cc	/^void Config::LoadFromConfDir(const std::string& path, bool force) {$/;"	f	class:sylar::Config	typeref:typename:void	signature:(const std::string & path,bool force)
LoadFromConfDir	sylar/sylar/config.h	/^    static void LoadFromConfDir(const std::string& path, bool force = false);$/;"	p	class:sylar::Config	typeref:typename:void	access:public	signature:(const std::string & path,bool force=false)
LoadFromYaml	sylar/sylar/config.cc	/^void Config::LoadFromYaml(const YAML::Node& root) {$/;"	f	class:sylar::Config	typeref:typename:void	signature:(const YAML::Node & root)
LoadFromYaml	sylar/sylar/config.h	/^    static void LoadFromYaml(const YAML::Node& root);$/;"	p	class:sylar::Config	typeref:typename:void	access:public	signature:(const YAML::Node & root)
Lock	sylar/sylar/mutex.h	/^    typedef ScopedLockImpl<CASLock> Lock;$/;"	t	class:sylar::CASLock	typeref:typename:ScopedLockImpl<CASLock>	access:public
Lock	sylar/sylar/mutex.h	/^    typedef ScopedLockImpl<Mutex> Lock;$/;"	t	class:sylar::Mutex	typeref:typename:ScopedLockImpl<Mutex>	access:public
Lock	sylar/sylar/mutex.h	/^    typedef ScopedLockImpl<NullMutex> Lock;$/;"	t	class:sylar::NullMutex	typeref:typename:ScopedLockImpl<NullMutex>	access:public
Lock	sylar/sylar/mutex.h	/^    typedef ScopedLockImpl<Spinlock> Lock;$/;"	t	class:sylar::Spinlock	typeref:typename:ScopedLockImpl<Spinlock>	access:public
LogAppender	sylar/sylar/log.h	/^class LogAppender {$/;"	c	namespace:sylar
LogAppenderDefine	sylar/sylar/log.cc	/^struct LogAppenderDefine {$/;"	s	namespace:sylar	file:
LogDefine	sylar/sylar/log.cc	/^struct LogDefine {$/;"	s	namespace:sylar	file:
LogEvent	sylar/sylar/log.cc	/^LogEvent::LogEvent(std::shared_ptr<Logger> logger, LogLevel::Level level$/;"	f	class:sylar::LogEvent	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const char * file,int32_t line,uint32_t elapse,uint32_t thread_id,uint32_t fiber_id,uint64_t time,const std::string & thread_name)
LogEvent	sylar/sylar/log.h	/^    LogEvent(std::shared_ptr<Logger> logger, LogLevel::Level level$/;"	p	class:sylar::LogEvent	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const char * file,int32_t line,uint32_t elapse,uint32_t thread_id,uint32_t fiber_id,uint64_t time,const std::string & thread_name)
LogEvent	sylar/sylar/log.h	/^class LogEvent {$/;"	c	namespace:sylar
LogEventWrap	sylar/sylar/log.cc	/^LogEventWrap::LogEventWrap(LogEvent::ptr e)$/;"	f	class:sylar::LogEventWrap	signature:(LogEvent::ptr e)
LogEventWrap	sylar/sylar/log.h	/^    LogEventWrap(LogEvent::ptr e);$/;"	p	class:sylar::LogEventWrap	access:public	signature:(LogEvent::ptr e)
LogEventWrap	sylar/sylar/log.h	/^class LogEventWrap {$/;"	c	namespace:sylar
LogFormatter	sylar/sylar/log.cc	/^LogFormatter::LogFormatter(const std::string& pattern)$/;"	f	class:sylar::LogFormatter	signature:(const std::string & pattern)
LogFormatter	sylar/sylar/log.h	/^    LogFormatter(const std::string& pattern);$/;"	p	class:sylar::LogFormatter	access:public	signature:(const std::string & pattern)
LogFormatter	sylar/sylar/log.h	/^class LogFormatter {$/;"	c	namespace:sylar
LogIniter	sylar/sylar/log.cc	/^    LogIniter() {$/;"	f	struct:sylar::LogIniter	file:	access:public	signature:()
LogIniter	sylar/sylar/log.cc	/^struct LogIniter {$/;"	s	namespace:sylar	file:
LogLevel	sylar/sylar/log.h	/^class LogLevel {$/;"	c	namespace:sylar
Logger	sylar/sylar/log.cc	/^Logger::Logger(const std::string& name)$/;"	f	class:sylar::Logger	signature:(const std::string & name)
Logger	sylar/sylar/log.h	/^    Logger(const std::string& name = "root");$/;"	p	class:sylar::Logger	access:public	signature:(const std::string & name="")
Logger	sylar/sylar/log.h	/^class Logger : public std::enable_shared_from_this<Logger> {$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<Logger>
LoggerManager	sylar/sylar/log.cc	/^LoggerManager::LoggerManager() {$/;"	f	class:sylar::LoggerManager	signature:()
LoggerManager	sylar/sylar/log.h	/^    LoggerManager();$/;"	p	class:sylar::LoggerManager	access:public	signature:()
LoggerManager	sylar/sylar/log.h	/^class LoggerManager {$/;"	c	namespace:sylar
LoggerMgr	sylar/sylar/log.h	/^typedef sylar::Singleton<LoggerManager> LoggerMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<LoggerManager>
Lookup	sylar/sylar/address.cc	/^bool Address::Lookup(std::vector<Address::ptr>& result, const std::string& host,$/;"	f	class:sylar::Address	typeref:typename:bool	signature:(std::vector<Address::ptr> & result,const std::string & host,int family,int type,int protocol)
Lookup	sylar/sylar/address.h	/^    static bool Lookup(std::vector<Address::ptr>& result, const std::string& host,$/;"	p	class:sylar::Address	typeref:typename:bool	access:public	signature:(std::vector<Address::ptr> & result,const std::string & host,int family=AF_INET,int type=0,int protocol=0)
Lookup	sylar/sylar/config.h	/^    static typename ConfigVar<T>::ptr Lookup(const std::string& name) {$/;"	f	class:sylar::Config	typeref:typename:ConfigVar<T>::ptr	access:public	signature:(const std::string & name)
Lookup	sylar/sylar/config.h	/^    static typename ConfigVar<T>::ptr Lookup(const std::string& name,$/;"	f	class:sylar::Config	typeref:typename:ConfigVar<T>::ptr	access:public	signature:(const std::string & name,const T & default_value,const std::string & description="")
LookupAny	sylar/sylar/address.cc	/^Address::ptr Address::LookupAny(const std::string& host,$/;"	f	class:sylar::Address	typeref:typename:Address::ptr	signature:(const std::string & host,int family,int type,int protocol)
LookupAny	sylar/sylar/address.h	/^    static Address::ptr LookupAny(const std::string& host,$/;"	p	class:sylar::Address	typeref:typename:Address::ptr	access:public	signature:(const std::string & host,int family=AF_INET,int type=0,int protocol=0)
LookupAnyIPAddress	sylar/sylar/address.cc	/^IPAddress::ptr Address::LookupAnyIPAddress(const std::string& host,$/;"	f	class:sylar::Address	typeref:typename:IPAddress::ptr	signature:(const std::string & host,int family,int type,int protocol)
LookupAnyIPAddress	sylar/sylar/address.h	/^    static std::shared_ptr<IPAddress> LookupAnyIPAddress(const std::string& host,$/;"	p	class:sylar::Address	typeref:typename:std::shared_ptr<IPAddress>	access:public	signature:(const std::string & host,int family=AF_INET,int type=0,int protocol=0)
LookupBase	sylar/sylar/config.cc	/^ConfigVarBase::ptr Config::LookupBase(const std::string& name) {$/;"	f	class:sylar::Config	typeref:typename:ConfigVarBase::ptr	signature:(const std::string & name)
LookupBase	sylar/sylar/config.h	/^    static ConfigVarBase::ptr LookupBase(const std::string& name);$/;"	p	class:sylar::Config	typeref:typename:ConfigVarBase::ptr	access:public	signature:(const std::string & name)
LruCache	sylar/sylar/ds/lru_cache.h	/^    LruCache(size_t max_size = 0, size_t elasticity = 0$/;"	f	class:sylar::ds::LruCache	access:public	signature:(size_t max_size=0,size_t elasticity=0,CacheStatus * status=nullptr)
LruCache	sylar/sylar/ds/lru_cache.h	/^class LruCache {$/;"	c	namespace:sylar::ds
M	sylar/tests/test_bitmap.cc	/^int M = 250000000;$/;"	v	typeref:typename:int
MARK	sylar/sylar/http/http11_parser.rl.cc	/^#define MARK(/;"	d	file:	signature:(M,FPC)
MARK	sylar/sylar/http/httpclient_parser.rl.cc	/^#define MARK(/;"	d	file:	signature:(M,FPC)
MASK	sylar/sylar/ds/bitmap.cc	/^Bitmap::base_type Bitmap::MASK[sizeof(base_type) * 8];$/;"	m	class:sylar::ds::Bitmap	typeref:typename:Bitmap::base_type[]
MASK	sylar/sylar/ds/bitmap.h	/^    static base_type MASK[sizeof(base_type) * 8];$/;"	m	class:sylar::ds::Bitmap	typeref:typename:base_type[]	access:private
MAX_CONTAINERS	sylar/sylar/ds/roaring.h	/^#define MAX_CONTAINERS /;"	d
MAX_MUTEX	sylar/sylar/ds/dict.h	/^    static const uint32_t MAX_MUTEX = 1024 * 128;$/;"	m	class:sylar::ds::Dict	typeref:typename:const uint32_t	access:private
MAX_MUTEX	sylar/sylar/ds/hash_map.h	/^    static const uint32_t MAX_MUTEX = 1024 * 128;$/;"	m	class:sylar::ds::HashMap	typeref:typename:const uint32_t	access:private
MAX_MUTEX	sylar/sylar/ds/hash_multimap.h	/^    static const uint32_t MAX_MUTEX = 1024 * 128;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:const uint32_t	access:private
MAX_PATH_LEN	sylar/sylar/address.cc	/^static const size_t MAX_PATH_LEN = sizeof(((sockaddr_un*)0)->sun_path) - 1;$/;"	v	namespace:sylar	typeref:typename:const size_t	file:
MINGW	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^  set(MINGW 1)$/;"	v
MINGW	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^  set(MINGW 1)$/;"	v
MODULE	sylar/sylar/module.h	/^        MODULE = 0,$/;"	e	enum:sylar::Module::Type	access:public
MYSQL_CLIENT_LIBS	sylar/cmake/FindMySQL.cmake	/^SET(MYSQL_CLIENT_LIBS ${MYSQL_LIBRARIES})$/;"	v
MYSQL_CONFIG_EXECUTABLE	sylar/cmake/FindMySQL.cmake	/^    set(MYSQL_CONFIG_EXECUTABLE "${MYSQL_DIR}\/bin\/mysql_config")$/;"	v
MYSQL_CXXFLAGS	sylar/cmake/FindMySQL.cmake	/^        set(MYSQL_CXXFLAGS "${MYSQL_CFLAGS}")$/;"	v
MYSQL_CXX_LINKAGE	sylar/cmake/FindMySQL.cmake	/^        set(MYSQL_CXX_LINKAGE 1)$/;"	v
MYSQL_INCLUDE_DIR	sylar/cmake/FindMySQL.cmake	/^  set(MYSQL_INCLUDE_DIR "${MYSQL_DIR}\/include")$/;"	v
MYSQL_LIBRARIES	sylar/cmake/FindMySQL.cmake	/^  set(MYSQL_LIBRARIES "${MYSQL_LIB}")$/;"	v
MYSQL_LIBRARIES	sylar/cmake/FindMySQL.cmake	/^  set(MYSQL_LIBRARIES ${MYSQL_LIB})$/;"	v
MYSQL_NUM_VERSION	sylar/cmake/FindMySQL.cmake	/^set(MYSQL_NUM_VERSION ${MYSQL_VERSION_ID})$/;"	v
MainFunc	sylar/sylar/fiber.cc	/^void Fiber::MainFunc() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
MainFunc	sylar/sylar/fiber.h	/^    static void MainFunc();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
MallocStackAllocator	sylar/sylar/fiber.cc	/^class MallocStackAllocator {$/;"	c	namespace:sylar	file:
MapType	sylar/sylar/http/http.h	/^    typedef std::map<std::string, std::string, CaseInsensitiveLess> MapType;$/;"	t	class:sylar::http::HttpRequest	typeref:typename:std::map<std::string,std::string,CaseInsensitiveLess>	access:public
MapType	sylar/sylar/http/http.h	/^    typedef std::map<std::string, std::string, CaseInsensitiveLess> MapType;$/;"	t	class:sylar::http::HttpResponse	typeref:typename:std::map<std::string,std::string,CaseInsensitiveLess>	access:public
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::MergeFrom(const Node& from) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(const Node & from)
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::MergeFrom(const NodeInfo& from) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(const NodeInfo & from)
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::MergeFrom(const NotifyMessage& from) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(const NotifyMessage & from)
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::MergeFrom(const QueryRequest& from) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(const QueryRequest & from)
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::MergeFrom(const QueryResponse& from) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(const QueryResponse & from)
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::MergeFrom(const RegisterInfo& from) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(const RegisterInfo & from)
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::MergeFrom(const RegisterRequest& from) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(const RegisterRequest & from)
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const Node& from);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(const Node & from)
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const NodeInfo& from);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(const NodeInfo & from)
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const NotifyMessage& from);$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:public	signature:(const NotifyMessage & from)
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const QueryRequest& from);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(const QueryRequest & from)
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const QueryResponse& from);$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:public	signature:(const QueryResponse & from)
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const RegisterInfo& from);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(const RegisterInfo & from)
MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const RegisterRequest& from);$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:public	signature:(const RegisterRequest & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
Message	sylar/sylar/protocol.h	/^class Message {$/;"	c	namespace:sylar
MessageDecoder	sylar/sylar/protocol.h	/^class MessageDecoder {$/;"	c	namespace:sylar
MessageFormatItem	sylar/sylar/log.cc	/^    MessageFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::MessageFormatItem	file:	access:public	signature:(const std::string & str="")
MessageFormatItem	sylar/sylar/log.cc	/^class MessageFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
MessageType	sylar/sylar/protocol.h	/^    enum MessageType {$/;"	g	class:sylar::Message	access:public
Mkdir	sylar/sylar/util.cc	/^bool FSUtil::Mkdir(const std::string& dirname) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & dirname)
Mkdir	sylar/sylar/util.h	/^    static bool Mkdir(const std::string& dirname);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & dirname)
Module	sylar/sylar/module.cc	/^Module::Module(const std::string& name$/;"	f	class:sylar::Module	signature:(const std::string & name,const std::string & version,const std::string & filename,uint32_t type)
Module	sylar/sylar/module.h	/^    Module(const std::string& name$/;"	p	class:sylar::Module	access:public	signature:(const std::string & name,const std::string & version,const std::string & filename,uint32_t type=MODULE)
Module	sylar/sylar/module.h	/^class Module {$/;"	c	namespace:sylar
ModuleCloser	sylar/sylar/library.cc	/^    ModuleCloser(void* handle, destory_module d)$/;"	f	class:sylar::ModuleCloser	file:	access:public	signature:(void * handle,destory_module d)
ModuleCloser	sylar/sylar/library.cc	/^class ModuleCloser {$/;"	c	namespace:sylar	file:
ModuleManager	sylar/sylar/module.cc	/^ModuleManager::ModuleManager() {$/;"	f	class:sylar::ModuleManager	signature:()
ModuleManager	sylar/sylar/module.h	/^    ModuleManager();$/;"	p	class:sylar::ModuleManager	access:public	signature:()
ModuleManager	sylar/sylar/module.h	/^class ModuleManager {$/;"	c	namespace:sylar
ModuleMgr	sylar/sylar/module.h	/^typedef sylar::Singleton<ModuleManager> ModuleMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<ModuleManager>
MultiPair	sylar/sylar/ds/util.h	/^    MultiPair(const K& k = K(), const V& v = V())$/;"	f	struct:sylar::ds::MultiPair	access:public	signature:(const K & k=K (),const V & v=V ())
MultiPair	sylar/sylar/ds/util.h	/^struct MultiPair {$/;"	s	namespace:sylar::ds
Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash {$/;"	c	namespace:sylar::ds
Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<Pair<K, V>, seed> {$/;"	c	namespace:sylar::ds
Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<int32_t, seed> {$/;"	c	namespace:sylar::ds
Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<int64_t, seed> {$/;"	c	namespace:sylar::ds
Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<std::string, seed> {$/;"	c	namespace:sylar::ds
Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<std::vector<T>, seed> {$/;"	c	namespace:sylar::ds
Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<uint32_t, seed> {$/;"	c	namespace:sylar::ds
Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<uint64_t, seed> {$/;"	c	namespace:sylar::ds
Murmur3Hash64	sylar/sylar/ds/util.h	/^class Murmur3Hash64 {$/;"	c	namespace:sylar::ds
Murmur3Hash64	sylar/sylar/ds/util.h	/^class Murmur3Hash64<std::string, seed, seed2> {$/;"	c	namespace:sylar::ds
Murmur3Hash64	sylar/sylar/ds/util.h	/^class Murmur3Hash64<std::vector<T>, seed, seed2> {$/;"	c	namespace:sylar::ds
Mutex	sylar/sylar/mutex.h	/^    Mutex() {$/;"	f	class:sylar::Mutex	access:public	signature:()
Mutex	sylar/sylar/mutex.h	/^class Mutex : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
MutexType	sylar/sylar/db/mysql.h	/^    typedef sylar::Mutex MutexType;$/;"	t	class:sylar::MySQLManager	typeref:typename:sylar::Mutex	access:public
MutexType	sylar/sylar/db/sqlite3.h	/^    typedef sylar::Mutex MutexType;$/;"	t	class:sylar::SQLite3Manager	typeref:typename:sylar::Mutex	access:public
MutexType	sylar/sylar/http/http_connection.h	/^    typedef Mutex MutexType;$/;"	t	class:sylar::http::HttpConnectionPool	typeref:typename:Mutex	access:public
MutexType	sylar/sylar/iomanager.h	/^        typedef Mutex MutexType;$/;"	t	struct:sylar::IOManager::FdContext	typeref:typename:Mutex	access:public
MutexType	sylar/sylar/log.h	/^    typedef Spinlock MutexType;$/;"	t	class:sylar::LogAppender	typeref:typename:Spinlock	access:public
MutexType	sylar/sylar/log.h	/^    typedef Spinlock MutexType;$/;"	t	class:sylar::Logger	typeref:typename:Spinlock	access:public
MutexType	sylar/sylar/log.h	/^    typedef Spinlock MutexType;$/;"	t	class:sylar::LoggerManager	typeref:typename:Spinlock	access:public
MutexType	sylar/sylar/mutex.h	/^    typedef Spinlock MutexType;$/;"	t	class:sylar::FiberSemaphore	typeref:typename:Spinlock	access:public
MutexType	sylar/sylar/scheduler.h	/^    typedef Mutex MutexType;$/;"	t	class:sylar::Scheduler	typeref:typename:Mutex	access:public
Mv	sylar/sylar/util.cc	/^bool FSUtil::Mv(const std::string& from, const std::string& to) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & from,const std::string & to)
Mv	sylar/sylar/util.h	/^    static bool Mv(const std::string& from, const std::string& to);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & from,const std::string & to)
MyModule	chat/my_module.cc	/^MyModule::MyModule()$/;"	f	class:chat::MyModule	signature:()
MyModule	chat/my_module.h	/^    MyModule();$/;"	p	class:chat::MyModule	access:public	signature:()
MyModule	chat/my_module.h	/^class MyModule : public sylar::Module {$/;"	c	namespace:chat	inherits:sylar::Module
MyModule	sylar/template/template/my_module.cc	/^MyModule::MyModule()$/;"	f	class:name_space::MyModule	signature:()
MyModule	sylar/template/template/my_module.h	/^    MyModule();$/;"	p	class:name_space::MyModule	access:public	signature:()
MyModule	sylar/template/template/my_module.h	/^class MyModule : public sylar::Module {$/;"	c	namespace:name_space	inherits:sylar::Module
MyModule	sylar/tests/test_module.cc	/^    MyModule()$/;"	f	class:MyModule	file:	access:public	signature:()
MyModule	sylar/tests/test_module.cc	/^class MyModule : public sylar::RockModule {$/;"	c	file:	inherits:sylar::RockModule
MyModule::MyModule	sylar/tests/test_module.cc	/^    MyModule()$/;"	f	class:MyModule	file:	access:public	signature:()
MyModule::handleRockNotify	sylar/tests/test_module.cc	/^    bool handleRockNotify(sylar::RockNotify::ptr notify $/;"	f	class:MyModule	typeref:typename:bool	file:	access:public	signature:(sylar::RockNotify::ptr notify,sylar::RockStream::ptr stream)
MyModule::handleRockRequest	sylar/tests/test_module.cc	/^    bool handleRockRequest(sylar::RockRequest::ptr request$/;"	f	class:MyModule	typeref:typename:bool	file:	access:public	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
MyModule::onLoad	sylar/tests/test_module.cc	/^    bool onLoad() override {$/;"	f	class:MyModule	typeref:typename:bool	file:	access:public	signature:()
MyModule::onServerReady	sylar/tests/test_module.cc	/^    bool onServerReady() {$/;"	f	class:MyModule	typeref:typename:bool	file:	access:public	signature:()
MyModule::onUnload	sylar/tests/test_module.cc	/^    bool onUnload() override {$/;"	f	class:MyModule	typeref:typename:bool	file:	access:public	signature:()
MySQL	sylar/sylar/db/mysql.cc	/^MySQL::MySQL(const std::map<std::string, std::string>& args)$/;"	f	class:sylar::MySQL	signature:(const std::map<std::string,std::string> & args)
MySQL	sylar/sylar/db/mysql.h	/^    MySQL(const std::map<std::string, std::string>& args);$/;"	p	class:sylar::MySQL	access:public	signature:(const std::map<std::string,std::string> & args)
MySQL	sylar/sylar/db/mysql.h	/^class MySQL : public IDB$/;"	c	namespace:sylar	inherits:IDB,std::enable_shared_from_this<MySQL>
MySQLBinder	sylar/sylar/db/mysql.h	/^struct MySQLBinder {$/;"	s	namespace:sylar::__anonb8e76c1a0110
MySQLBinder	sylar/sylar/db/mysql.h	/^struct MySQLBinder<N, Head, Tail...> {$/;"	s	namespace:sylar::__anonb8e76c1a0210
MySQLManager	sylar/sylar/db/mysql.cc	/^MySQLManager::MySQLManager()$/;"	f	class:sylar::MySQLManager	signature:()
MySQLManager	sylar/sylar/db/mysql.h	/^    MySQLManager();$/;"	p	class:sylar::MySQLManager	access:public	signature:()
MySQLManager	sylar/sylar/db/mysql.h	/^class MySQLManager {$/;"	c	namespace:sylar
MySQLMgr	sylar/sylar/db/mysql.h	/^typedef sylar::Singleton<MySQLManager> MySQLMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<MySQLManager>
MySQLRes	sylar/sylar/db/mysql.cc	/^MySQLRes::MySQLRes(MYSQL_RES* res, int eno, const char* estr)$/;"	f	class:sylar::MySQLRes	signature:(MYSQL_RES * res,int eno,const char * estr)
MySQLRes	sylar/sylar/db/mysql.h	/^    MySQLRes(MYSQL_RES* res, int eno, const char* estr);$/;"	p	class:sylar::MySQLRes	access:public	signature:(MYSQL_RES * res,int eno,const char * estr)
MySQLRes	sylar/sylar/db/mysql.h	/^class MySQLRes : public ISQLData {$/;"	c	namespace:sylar	inherits:ISQLData
MySQLStmt	sylar/sylar/db/mysql.cc	/^MySQLStmt::MySQLStmt(MySQL::ptr db, MYSQL_STMT* stmt)$/;"	f	class:sylar::MySQLStmt	signature:(MySQL::ptr db,MYSQL_STMT * stmt)
MySQLStmt	sylar/sylar/db/mysql.h	/^    MySQLStmt(MySQL::ptr db, MYSQL_STMT* stmt);$/;"	p	class:sylar::MySQLStmt	access:private	signature:(MySQL::ptr db,MYSQL_STMT * stmt)
MySQLStmt	sylar/sylar/db/mysql.h	/^class MySQLStmt : public IStmt$/;"	c	namespace:sylar	inherits:IStmt,std::enable_shared_from_this<MySQLStmt>
MySQLStmtRes	sylar/sylar/db/mysql.cc	/^MySQLStmtRes::MySQLStmtRes(std::shared_ptr<MySQLStmt> stmt, int eno$/;"	f	class:sylar::MySQLStmtRes	signature:(std::shared_ptr<MySQLStmt> stmt,int eno,const std::string & estr)
MySQLStmtRes	sylar/sylar/db/mysql.h	/^    MySQLStmtRes(std::shared_ptr<MySQLStmt> stmt, int eno, const std::string& estr);$/;"	p	class:sylar::MySQLStmtRes	access:private	signature:(std::shared_ptr<MySQLStmt> stmt,int eno,const std::string & estr)
MySQLStmtRes	sylar/sylar/db/mysql.h	/^class MySQLStmtRes : public ISQLData {$/;"	c	namespace:sylar	inherits:ISQLData
MySQLThreadIniter	sylar/sylar/db/mysql.cc	/^        MySQLThreadIniter() {$/;"	f	struct:sylar::__anond5d4ef180110::MySQLThreadIniter	file:	access:public	signature:()
MySQLThreadIniter	sylar/sylar/db/mysql.cc	/^    struct MySQLThreadIniter {$/;"	s	namespace:sylar::__anond5d4ef180110	file:
MySQLTime	sylar/sylar/db/mysql.h	/^    MySQLTime(time_t t)$/;"	f	struct:sylar::MySQLTime	access:public	signature:(time_t t)
MySQLTime	sylar/sylar/db/mysql.h	/^struct MySQLTime {$/;"	s	namespace:sylar
MySQLTransaction	sylar/sylar/db/mysql.cc	/^MySQLTransaction::MySQLTransaction(MySQL::ptr mysql, bool auto_commit)$/;"	f	class:sylar::MySQLTransaction	signature:(MySQL::ptr mysql,bool auto_commit)
MySQLTransaction	sylar/sylar/db/mysql.h	/^    MySQLTransaction(MySQL::ptr mysql, bool auto_commit);$/;"	p	class:sylar::MySQLTransaction	access:private	signature:(MySQL::ptr mysql,bool auto_commit)
MySQLTransaction	sylar/sylar/db/mysql.h	/^class MySQLTransaction : public ITransaction {$/;"	c	namespace:sylar	inherits:ITransaction
MySQLUtil	sylar/sylar/db/mysql.h	/^class MySQLUtil {$/;"	c	namespace:sylar
N	sylar/tests/test_bitmap.cc	/^int N = 1;$/;"	v	typeref:typename:int
NODE_CHANGE	sylar/sylar/ns/ns_protocol.h	/^    NODE_CHANGE = 0x10001,$/;"	e	enum:sylar::ns::NSNotify	access:public
NONE	sylar/sylar/iomanager.h	/^        NONE    = 0x0,$/;"	e	enum:sylar::IOManager::Event	access:public
NOTCONNECTED	sylar/sylar/zk_client.h	/^        static const int NOTCONNECTED; \/\/ = ZOO_NOTCONNECTED_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
NOTIFY	sylar/sylar/protocol.h	/^        NOTIFY = 3$/;"	e	enum:sylar::Message::MessageType	access:public
NOT_CONNECT	sylar/sylar/streams/async_socket_stream.h	/^        NOT_CONNECT = -3,$/;"	e	enum:sylar::AsyncSocketStream::Error	access:public
NOT_VALUE_MASK	sylar/sylar/ds/bitmap.h	/^    static const base_type NOT_VALUE_MASK = ~VALUE_MASK;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const base_type	access:private
NOWATCHING	sylar/sylar/zk_client.cc	/^const int ZKClient::EventType::NOWATCHING = ZOO_NOTWATCHING_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int
NOWATCHING	sylar/sylar/zk_client.h	/^        static const int NOWATCHING; \/\/ = ZOO_NOTWATCHING_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int	access:public
NO_COMPRESSION	sylar/sylar/streams/zlib_stream.h	/^        NO_COMPRESSION = Z_NO_COMPRESSION,$/;"	e	enum:sylar::ZlibStream::CompressLevel	access:public
NO_CONNECTION	sylar/sylar/streams/load_balance.h	/^        NO_CONNECTION = -102,$/;"	e	enum:sylar::ILoadBalance::Error	access:public
NO_OFFSET_THRESHOLD	sylar/sylar/ds/roaring.h	/^    NO_OFFSET_THRESHOLD = 4$/;"	e	enum:__anon10207c070703	access:public
NO_SERVICE	sylar/sylar/streams/load_balance.h	/^        NO_SERVICE = -101,$/;"	e	enum:sylar::ILoadBalance::Error	access:public
NPOS	sylar/sylar/ds/bitmap.cc	/^Bitmap::base_type Bitmap::NPOS[sizeof(base_type) * 8];$/;"	m	class:sylar::ds::Bitmap	typeref:typename:Bitmap::base_type[]
NPOS	sylar/sylar/ds/bitmap.h	/^    static base_type NPOS[sizeof(base_type) * 8];$/;"	m	class:sylar::ds::Bitmap	typeref:typename:base_type[]	access:private
NSClient	sylar/sylar/ns/ns_client.cc	/^NSClient::NSClient() {$/;"	f	class:sylar::ns::NSClient	signature:()
NSClient	sylar/sylar/ns/ns_client.h	/^    NSClient();$/;"	p	class:sylar::ns::NSClient	access:public	signature:()
NSClient	sylar/sylar/ns/ns_client.h	/^class NSClient : public RockConnection {$/;"	c	namespace:sylar::ns	inherits:RockConnection
NSClientInfo	sylar/sylar/ns/name_server_module.h	/^class NSClientInfo {$/;"	c	namespace:sylar::ns
NSCommand	sylar/sylar/ns/ns_protocol.h	/^enum class NSCommand {$/;"	g	namespace:sylar::ns
NSDomain	sylar/sylar/ns/ns_protocol.h	/^    NSDomain(const std::string& domain)$/;"	f	class:sylar::ns::NSDomain	access:public	signature:(const std::string & domain)
NSDomain	sylar/sylar/ns/ns_protocol.h	/^class NSDomain {$/;"	c	namespace:sylar::ns
NSDomainSet	sylar/sylar/ns/ns_protocol.h	/^class NSDomainSet {$/;"	c	namespace:sylar::ns
NSNode	sylar/sylar/ns/ns_protocol.cc	/^NSNode::NSNode(const std::string& ip, uint16_t port, uint32_t weight)$/;"	f	class:sylar::ns::NSNode	signature:(const std::string & ip,uint16_t port,uint32_t weight)
NSNode	sylar/sylar/ns/ns_protocol.h	/^    NSNode(const std::string& ip, uint16_t port, uint32_t weight);$/;"	p	class:sylar::ns::NSNode	access:public	signature:(const std::string & ip,uint16_t port,uint32_t weight)
NSNode	sylar/sylar/ns/ns_protocol.h	/^class NSNode {$/;"	c	namespace:sylar::ns
NSNodeSet	sylar/sylar/ns/ns_protocol.cc	/^NSNodeSet::NSNodeSet(uint32_t cmd)$/;"	f	class:sylar::ns::NSNodeSet	signature:(uint32_t cmd)
NSNodeSet	sylar/sylar/ns/ns_protocol.h	/^    NSNodeSet(uint32_t cmd);$/;"	p	class:sylar::ns::NSNodeSet	access:public	signature:(uint32_t cmd)
NSNodeSet	sylar/sylar/ns/ns_protocol.h	/^class NSNodeSet {$/;"	c	namespace:sylar::ns
NSNotify	sylar/sylar/ns/ns_protocol.h	/^enum class NSNotify {$/;"	g	namespace:sylar::ns
NameFormatItem	sylar/sylar/log.cc	/^    NameFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::NameFormatItem	file:	access:public	signature:(const std::string & str="")
NameFormatItem	sylar/sylar/log.cc	/^class NameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
NameServerModule	sylar/sylar/ns/name_server_module.cc	/^NameServerModule::NameServerModule()$/;"	f	class:sylar::ns::NameServerModule	signature:()
NameServerModule	sylar/sylar/ns/name_server_module.h	/^    NameServerModule();$/;"	p	class:sylar::ns::NameServerModule	access:public	signature:()
NameServerModule	sylar/sylar/ns/name_server_module.h	/^class NameServerModule : public RockModule {$/;"	c	namespace:sylar::ns	inherits:RockModule
NeedEscape	sylar/sylar/util/json_util.cc	/^bool JsonUtil::NeedEscape(const std::string& v) {$/;"	f	class:sylar::JsonUtil	typeref:typename:bool	signature:(const std::string & v)
NeedEscape	sylar/sylar/util/json_util.h	/^    static bool NeedEscape(const std::string& v);$/;"	p	class:sylar::JsonUtil	typeref:typename:bool	access:public	signature:(const std::string & v)
New	sylar/sylar/ns/ns_protobuf.pb.h	/^  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::Node	typeref:typename:Node *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
New	sylar/sylar/ns/ns_protobuf.pb.h	/^  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:NodeInfo *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
New	sylar/sylar/ns/ns_protobuf.pb.h	/^  NotifyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:NotifyMessage *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
New	sylar/sylar/ns/ns_protobuf.pb.h	/^  QueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:QueryRequest *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
New	sylar/sylar/ns/ns_protobuf.pb.h	/^  QueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:QueryResponse *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
New	sylar/sylar/ns/ns_protobuf.pb.h	/^  RegisterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:RegisterInfo *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
New	sylar/sylar/ns/ns_protobuf.pb.h	/^  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:RegisterRequest *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
NewLineFormatItem	sylar/sylar/log.cc	/^    NewLineFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::NewLineFormatItem	file:	access:public	signature:(const std::string & str="")
NewLineFormatItem	sylar/sylar/log.cc	/^class NewLineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
Node	sylar/sylar/bytearray.cc	/^ByteArray::Node::Node()$/;"	f	class:sylar::ByteArray::Node	signature:()
Node	sylar/sylar/bytearray.cc	/^ByteArray::Node::Node(size_t s)$/;"	f	class:sylar::ByteArray::Node	signature:(size_t s)
Node	sylar/sylar/bytearray.h	/^        Node();$/;"	p	struct:sylar::ByteArray::Node	access:public	signature:()
Node	sylar/sylar/bytearray.h	/^        Node(size_t s);$/;"	p	struct:sylar::ByteArray::Node	access:public	signature:(size_t s)
Node	sylar/sylar/bytearray.h	/^    struct Node {$/;"	s	class:sylar::ByteArray	access:public
Node	sylar/sylar/ds/dict.h	/^        Node(const K& k = K()) $/;"	f	struct:sylar::ds::Dict::Node	access:public	signature:(const K & k=K ())
Node	sylar/sylar/ds/dict.h	/^    struct Node {$/;"	s	class:sylar::ds::Dict	access:private
Node	sylar/sylar/ds/hash_map.h	/^        Node(const K& k = K()) $/;"	f	struct:sylar::ds::HashMap::Node	access:public	signature:(const K & k=K ())
Node	sylar/sylar/ds/hash_map.h	/^    struct Node {$/;"	s	class:sylar::ds::HashMap	access:private
Node	sylar/sylar/ds/hash_multimap.h	/^        Node(const K& k = K()) $/;"	f	struct:sylar::ds::HashMultimap::Node	access:public	signature:(const K & k=K ())
Node	sylar/sylar/ds/hash_multimap.h	/^    struct Node {$/;"	s	class:sylar::ds::HashMultimap	access:private
Node	sylar/sylar/ns/ns_protobuf.pb.cc	/^Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::Node	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
Node	sylar/sylar/ns/ns_protobuf.pb.cc	/^Node::Node(const Node& from)$/;"	f	class:sylar::ns::Node	signature:(const Node & from)
Node	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr Node::Node($/;"	f	class:sylar::ns::Node	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
Node	sylar/sylar/ns/ns_protobuf.pb.h	/^  Node(Node&& from) noexcept$/;"	f	class:sylar::ns::Node	access:public	signature:(Node && from)
Node	sylar/sylar/ns/ns_protobuf.pb.h	/^  Node(const Node& from);$/;"	p	class:sylar::ns::Node	access:public	signature:(const Node & from)
Node	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::Node	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
Node	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::Node	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
Node	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline Node() : Node(nullptr) {}$/;"	f	class:sylar::ns::Node	access:public	signature:()
Node	sylar/sylar/ns/ns_protobuf.pb.h	/^class Node final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
Node	sylar/sylar/ns/ns_protobuf.proto	/^message Node {$/;"	m
NodeDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr NodeDefaultTypeInternal()$/;"	f	struct:sylar::ns::NodeDefaultTypeInternal	file:	access:public	signature:()
NodeDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct NodeDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
NodeInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^NodeInfo::NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::NodeInfo	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
NodeInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^NodeInfo::NodeInfo(const NodeInfo& from)$/;"	f	class:sylar::ns::NodeInfo	signature:(const NodeInfo & from)
NodeInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr NodeInfo::NodeInfo($/;"	f	class:sylar::ns::NodeInfo	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
NodeInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  NodeInfo(NodeInfo&& from) noexcept$/;"	f	class:sylar::ns::NodeInfo	access:public	signature:(NodeInfo && from)
NodeInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  NodeInfo(const NodeInfo& from);$/;"	p	class:sylar::ns::NodeInfo	access:public	signature:(const NodeInfo & from)
NodeInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::NodeInfo	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
NodeInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr NodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::NodeInfo	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
NodeInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline NodeInfo() : NodeInfo(nullptr) {}$/;"	f	class:sylar::ns::NodeInfo	access:public	signature:()
NodeInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^class NodeInfo final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
NodeInfo	sylar/sylar/ns/ns_protobuf.proto	/^message NodeInfo {$/;"	m
NodeInfoDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr NodeInfoDefaultTypeInternal()$/;"	f	struct:sylar::ns::NodeInfoDefaultTypeInternal	file:	access:public	signature:()
NodeInfoDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct NodeInfoDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
Noncopyable	sylar/sylar/noncopyable.h	/^    Noncopyable() = default;$/;"	p	class:sylar::Noncopyable	access:public	signature:()
Noncopyable	sylar/sylar/noncopyable.h	/^    Noncopyable(const Noncopyable&) = delete;$/;"	p	class:sylar::Noncopyable	access:public	signature:(const Noncopyable &)
Noncopyable	sylar/sylar/noncopyable.h	/^class Noncopyable {$/;"	c	namespace:sylar
NotFoundServlet	sylar/sylar/http/servlet.cc	/^NotFoundServlet::NotFoundServlet(const std::string& name)$/;"	f	class:sylar::http::NotFoundServlet	signature:(const std::string & name)
NotFoundServlet	sylar/sylar/http/servlet.h	/^    NotFoundServlet(const std::string& name);$/;"	p	class:sylar::http::NotFoundServlet	access:public	signature:(const std::string & name)
NotFoundServlet	sylar/sylar/http/servlet.h	/^class NotFoundServlet : public Servlet {$/;"	c	namespace:sylar::http	inherits:Servlet
Notify	sylar/sylar/protocol.cc	/^Notify::Notify()$/;"	f	class:sylar::Notify	signature:()
Notify	sylar/sylar/protocol.h	/^    Notify();$/;"	p	class:sylar::Notify	access:public	signature:()
Notify	sylar/sylar/protocol.h	/^class Notify : public Message {$/;"	c	namespace:sylar	inherits:Message
NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.cc	/^NotifyMessage::NotifyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::NotifyMessage	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.cc	/^NotifyMessage::NotifyMessage(const NotifyMessage& from)$/;"	f	class:sylar::ns::NotifyMessage	signature:(const NotifyMessage & from)
NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr NotifyMessage::NotifyMessage($/;"	f	class:sylar::ns::NotifyMessage	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.h	/^  NotifyMessage(NotifyMessage&& from) noexcept$/;"	f	class:sylar::ns::NotifyMessage	access:public	signature:(NotifyMessage && from)
NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.h	/^  NotifyMessage(const NotifyMessage& from);$/;"	p	class:sylar::ns::NotifyMessage	access:public	signature:(const NotifyMessage & from)
NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit NotifyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::NotifyMessage	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr NotifyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::NotifyMessage	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline NotifyMessage() : NotifyMessage(nullptr) {}$/;"	f	class:sylar::ns::NotifyMessage	access:public	signature:()
NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.h	/^class NotifyMessage final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
NotifyMessage	sylar/sylar/ns/ns_protobuf.proto	/^message NotifyMessage {$/;"	m
NotifyMessageDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr NotifyMessageDefaultTypeInternal()$/;"	f	struct:sylar::ns::NotifyMessageDefaultTypeInternal	file:	access:public	signature:()
NotifyMessageDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct NotifyMessageDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
NullMutex	sylar/sylar/mutex.h	/^    NullMutex() {}$/;"	f	class:sylar::NullMutex	access:public	signature:()
NullMutex	sylar/sylar/mutex.h	/^class NullMutex : Noncopyable{$/;"	c	namespace:sylar	inherits:Noncopyable
NullRWMutex	sylar/sylar/mutex.h	/^    NullRWMutex() {}$/;"	f	class:sylar::NullRWMutex	access:public	signature:()
NullRWMutex	sylar/sylar/mutex.h	/^class NullRWMutex : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
OK	sylar/sylar/db/redis.h	/^        OK = 0,$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
OK	sylar/sylar/db/redis.h	/^        OK = 0,$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
OK	sylar/sylar/email/smtp.h	/^        OK = 0,$/;"	e	enum:sylar::SmtpResult::Result	access:public
OK	sylar/sylar/http/http_connection.h	/^        OK = 0,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
OK	sylar/sylar/streams/async_socket_stream.h	/^        OK = 0,$/;"	e	enum:sylar::AsyncSocketStream::Error	access:public
OPCODE	sylar/sylar/http/ws_session.h	/^    enum OPCODE {$/;"	g	struct:sylar::http::WSFrameHead	access:public
ORM_SRCS	sylar/CMakeLists.txt	/^set(ORM_SRCS$/;"	v
OR_BITSET_CONVERSION_TO_FULL	sylar/sylar/ds/roaring.h	/^#define OR_BITSET_CONVERSION_TO_FULL /;"	d
OnAuthCb	sylar/sylar/db/redis.cc	/^void FoxRedis::OnAuthCb(redisAsyncContext* c, void* rp, void* priv) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(redisAsyncContext * c,void * rp,void * priv)
OnAuthCb	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::OnAuthCb(redisClusterAsyncContext* c, void* rp, void* priv) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(redisClusterAsyncContext * c,void * rp,void * priv)
OnAuthCb	sylar/sylar/db/redis.h	/^    static void OnAuthCb(redisAsyncContext* c, void* rp, void* priv);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(redisAsyncContext * c,void * rp,void * priv)
OnAuthCb	sylar/sylar/db/redis.h	/^    static void OnAuthCb(redisClusterAsyncContext* c, void* rp, void* priv);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(redisClusterAsyncContext * c,void * rp,void * priv)
OnTimer	sylar/sylar/timer.cc	/^static void OnTimer(std::weak_ptr<void> weak_cond, std::function<void()> cb) {$/;"	f	namespace:sylar	typeref:typename:void	file:	signature:(std::weak_ptr<void> weak_cond,std::function<void ()> cb)
OnWatcher	sylar/sylar/zk_client.cc	/^void ZKClient::OnWatcher(zhandle_t *zh, int type, int stat, const char *path,void *watcherCtx) {$/;"	f	class:sylar::ZKClient	typeref:typename:void	signature:(zhandle_t * zh,int type,int stat,const char * path,void * watcherCtx)
OnWatcher	sylar/sylar/zk_client.h	/^    static void OnWatcher(zhandle_t *zh, int type, int stat, const char *path,void *watcherCtx);$/;"	p	class:sylar::ZKClient	typeref:typename:void	access:private	signature:(zhandle_t * zh,int type,int stat,const char * path,void * watcherCtx)
OpenForRead	sylar/sylar/util.cc	/^bool FSUtil::OpenForRead(std::ifstream& ifs, const std::string& filename$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(std::ifstream & ifs,const std::string & filename,std::ios_base::openmode mode)
OpenForRead	sylar/sylar/util.h	/^    static bool OpenForRead(std::ifstream& ifs, const std::string& filename$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(std::ifstream & ifs,const std::string & filename,std::ios_base::openmode mode)
OpenForWrite	sylar/sylar/util.cc	/^bool FSUtil::OpenForWrite(std::ofstream& ofs, const std::string& filename$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(std::ofstream & ofs,const std::string & filename,std::ios_base::openmode mode)
OpenForWrite	sylar/sylar/util.h	/^    static bool OpenForWrite(std::ofstream& ofs, const std::string& filename$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(std::ofstream & ofs,const std::string & filename,std::ios_base::openmode mode)
PARSE_OBJECT	sylar/sylar/orm/table.cc	/^#define PARSE_OBJECT(/;"	d	file:	signature:(prefix)
PARSE_PARAM	sylar/sylar/http/http.cc	/^#define PARSE_PARAM(/;"	d	file:	signature:(str,m,flag,trim)
PBToJsonString	sylar/sylar/util.cc	/^std::string PBToJsonString(const google::protobuf::Message& message) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const google::protobuf::Message & message)
PBToJsonString	sylar/sylar/util.h	/^std::string PBToJsonString(const google::protobuf::Message& message);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const google::protobuf::Message & message)
PERFPARAMETERS_H_	sylar/sylar/ds/roaring.h	/^#define PERFPARAMETERS_H_$/;"	d
PING	sylar/sylar/http/ws_session.h	/^        PING = 0x9,$/;"	e	enum:sylar::http::WSFrameHead::OPCODE	access:public
PLATFORM_ID	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PONG	sylar/sylar/http/ws_session.h	/^        PONG = 0xA$/;"	e	enum:sylar::http::WSFrameHead::OPCODE	access:public
POOL_GET_CONNECTION	sylar/sylar/http/http_connection.h	/^        POOL_GET_CONNECTION = 8,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
POOL_INVALID_CONNECTION	sylar/sylar/http/http_connection.h	/^        POOL_INVALID_CONNECTION = 9,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
POS	sylar/sylar/ds/bitmap.cc	/^Bitmap::base_type Bitmap::POS[sizeof(base_type) * 8];$/;"	m	class:sylar::ds::Bitmap	typeref:typename:Bitmap::base_type[]
POS	sylar/sylar/ds/bitmap.h	/^    static base_type POS[sizeof(base_type) * 8];$/;"	m	class:sylar::ds::Bitmap	typeref:typename:base_type[]	access:private
PROTOBUF_INTERNAL_EXPORT_sylar_2fns_2fns_5fprotobuf_2eproto	sylar/sylar/ns/ns_protobuf.pb.h	/^#define PROTOBUF_INTERNAL_EXPORT_sylar_2fns_2fns_5fprotobuf_2eproto$/;"	d
PROTOBUF_SECTION_VARIABLE	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char descriptor_table_protodef_sylar_2fns_2fns_5fprotobuf_2eproto[] PROTOBUF_SECTION_VARIA/;"	p	typeref:typename:const char descriptor_table_protodef_sylar_2fns_2fns_5fprotobuf_2eproto[]	file:	signature:(protodesc_cold)
PROTOBUF_SECTION_VARIABLE	sylar/sylar/ns/ns_protobuf.pb.cc	/^const uint32_t TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto::offsets[] PROTOBUF_SECTION_VARIAB/;"	p	typeref:typename:const uint32_t TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto::offsets[]	file:	signature:(protodesc_cold)
PROTOBUF_SECTION_VARIABLE	sylar/sylar/ns/ns_protobuf.pb.cc	/^static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIA/;"	p	typeref:typename:const::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[]	file:	signature:(protodesc_cold)
PROTOBUF_SECTION_VARIABLE	sylar/sylar/ns/ns_protobuf.pb.h	/^    PROTOBUF_SECTION_VARIABLE(protodesc_cold);$/;"	p	struct:TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto	typeref:typename:const::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]	access:public	signature:(protodesc_cold)
PROTOBUF_SECTION_VARIABLE	sylar/sylar/ns/ns_protobuf.pb.h	/^    PROTOBUF_SECTION_VARIABLE(protodesc_cold);$/;"	p	struct:TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto	typeref:typename:const::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]	access:public	signature:(protodesc_cold)
PROTOBUF_SECTION_VARIABLE	sylar/sylar/ns/ns_protobuf.pb.h	/^    PROTOBUF_SECTION_VARIABLE(protodesc_cold);$/;"	p	struct:TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto	typeref:typename:const::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]	access:public	signature:(protodesc_cold)
PTR_TO	sylar/sylar/http/http11_parser.rl.cc	/^#define PTR_TO(/;"	d	file:	signature:(F)
PTR_TO	sylar/sylar/http/httpclient_parser.rl.cc	/^#define PTR_TO(/;"	d	file:	signature:(F)
Pair	sylar/sylar/ds/util.h	/^    Pair(const K& k = K(), const V& v = V())$/;"	f	struct:sylar::ds::Pair	access:public	signature:(const K & k=K (),const V & v=V ())
Pair	sylar/sylar/ds/util.h	/^struct Pair {$/;"	s	namespace:sylar::ds
ParseDomainService	sylar/sylar/streams/service_discovery.cc	/^bool ParseDomainService(const std::string& path, std::string& domain, std::string& service) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(const std::string & path,std::string & domain,std::string & service)
ParseType	sylar/sylar/orm/column.cc	/^Column::Type Column::ParseType(const std::string& v) {$/;"	f	class:sylar::orm::Column	typeref:typename:Column::Type	signature:(const std::string & v)
ParseType	sylar/sylar/orm/column.h	/^    static Type ParseType(const std::string& v);$/;"	p	class:sylar::orm::Column	typeref:typename:Type	access:public	signature:(const std::string & v)
ParseType	sylar/sylar/orm/index.cc	/^Index::Type Index::ParseType(const std::string& v) {$/;"	f	class:sylar::orm::Index	typeref:typename:Index::Type	signature:(const std::string & v)
ParseType	sylar/sylar/orm/index.h	/^    static Type ParseType(const std::string& v);$/;"	p	class:sylar::orm::Index	typeref:typename:Type	access:public	signature:(const std::string & v)
Person	sylar/tests/test_config.cc	/^    Person() {};$/;"	f	class:Person	file:	access:public	signature:()
Person	sylar/tests/test_config.cc	/^class Person {$/;"	c	file:
Person::Person	sylar/tests/test_config.cc	/^    Person() {};$/;"	f	class:Person	file:	access:public	signature:()
Person::m_age	sylar/tests/test_config.cc	/^    int m_age = 0;$/;"	m	class:Person	typeref:typename:int	file:	access:public
Person::m_name	sylar/tests/test_config.cc	/^    std::string m_name;$/;"	m	class:Person	typeref:typename:std::string	file:	access:public
Person::m_sex	sylar/tests/test_config.cc	/^    bool m_sex = 0;$/;"	m	class:Person	typeref:typename:bool	file:	access:public
Person::operator ==	sylar/tests/test_config.cc	/^    bool operator==(const Person& oth) const {$/;"	f	class:Person	typeref:typename:bool	file:	access:public	signature:(const Person & oth) const
Person::toString	sylar/tests/test_config.cc	/^    std::string toString() const {$/;"	f	class:Person	typeref:typename:std::string	file:	access:public	signature:() const
PidVid	sylar/tests/test_array.cc	/^    PidVid(uint32_t p = 0, uint32_t v = 0)$/;"	f	struct:PidVid	file:	access:public	signature:(uint32_t p=0,uint32_t v=0)
PidVid	sylar/tests/test_array.cc	/^struct PidVid {$/;"	s	file:
PidVid	sylar/tests/test_dict.cc	/^    PidVid(uint32_t p = 0, uint32_t v = 0)$/;"	f	struct:PidVid	file:	access:public	signature:(uint32_t p=0,uint32_t v=0)
PidVid	sylar/tests/test_dict.cc	/^struct PidVid {$/;"	s	file:
PidVid	sylar/tests/test_hashmap.cc	/^    PidVid(uint32_t p = 0, uint32_t v = 0)$/;"	f	struct:PidVid	file:	access:public	signature:(uint32_t p=0,uint32_t v=0)
PidVid	sylar/tests/test_hashmap.cc	/^struct PidVid {$/;"	s	file:
PidVid	sylar/tests/test_hashmultimap.cc	/^    PidVid(uint32_t p = 0, uint32_t v = 0)$/;"	f	struct:PidVid	file:	access:public	signature:(uint32_t p=0,uint32_t v=0)
PidVid	sylar/tests/test_hashmultimap.cc	/^struct PidVid {$/;"	s	file:
PidVid::PidVid	sylar/tests/test_array.cc	/^    PidVid(uint32_t p = 0, uint32_t v = 0)$/;"	f	struct:PidVid	file:	access:public	signature:(uint32_t p=0,uint32_t v=0)
PidVid::PidVid	sylar/tests/test_dict.cc	/^    PidVid(uint32_t p = 0, uint32_t v = 0)$/;"	f	struct:PidVid	file:	access:public	signature:(uint32_t p=0,uint32_t v=0)
PidVid::PidVid	sylar/tests/test_hashmap.cc	/^    PidVid(uint32_t p = 0, uint32_t v = 0)$/;"	f	struct:PidVid	file:	access:public	signature:(uint32_t p=0,uint32_t v=0)
PidVid::PidVid	sylar/tests/test_hashmultimap.cc	/^    PidVid(uint32_t p = 0, uint32_t v = 0)$/;"	f	struct:PidVid	file:	access:public	signature:(uint32_t p=0,uint32_t v=0)
PidVid::operator <	sylar/tests/test_array.cc	/^    bool operator<(const PidVid& o) const {$/;"	f	struct:PidVid	typeref:typename:bool	file:	access:public	signature:(const PidVid & o) const
PidVid::operator <	sylar/tests/test_dict.cc	/^    bool operator<(const PidVid& o) const {$/;"	f	struct:PidVid	typeref:typename:bool	file:	access:public	signature:(const PidVid & o) const
PidVid::operator <	sylar/tests/test_hashmap.cc	/^    bool operator<(const PidVid& o) const {$/;"	f	struct:PidVid	typeref:typename:bool	file:	access:public	signature:(const PidVid & o) const
PidVid::operator <	sylar/tests/test_hashmultimap.cc	/^    bool operator<(const PidVid& o) const {$/;"	f	struct:PidVid	typeref:typename:bool	file:	access:public	signature:(const PidVid & o) const
PidVid::pid	sylar/tests/test_array.cc	/^    uint32_t pid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
PidVid::pid	sylar/tests/test_dict.cc	/^    uint32_t pid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
PidVid::pid	sylar/tests/test_hashmap.cc	/^    uint32_t pid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
PidVid::pid	sylar/tests/test_hashmultimap.cc	/^    uint32_t pid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
PidVid::vid	sylar/tests/test_array.cc	/^    uint32_t vid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
PidVid::vid	sylar/tests/test_dict.cc	/^    uint32_t vid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
PidVid::vid	sylar/tests/test_hashmap.cc	/^    uint32_t vid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
PidVid::vid	sylar/tests/test_hashmultimap.cc	/^    uint32_t vid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
PrimeGenerator	sylar/sylar/ds/util.cc	/^PrimeGenerator::PrimeGenerator()$/;"	f	class:sylar::ds::PrimeGenerator	signature:()
PrimeGenerator	sylar/sylar/ds/util.h	/^    PrimeGenerator();$/;"	p	class:sylar::ds::PrimeGenerator	access:public	signature:()
PrimeGenerator	sylar/sylar/ds/util.h	/^class PrimeGenerator {$/;"	c	namespace:sylar::ds
ProcessInfo	sylar/sylar/daemon.h	/^struct ProcessInfo {$/;"	s	namespace:sylar
ProcessInfoMgr	sylar/sylar/daemon.h	/^typedef sylar::Singleton<ProcessInfo> ProcessInfoMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<ProcessInfo>
QUERY	sylar/sylar/ns/ns_protocol.h	/^    QUERY           = 0x10002,$/;"	e	enum:sylar::ns::NSCommand	access:public
QUERY_BLACKLIST	sylar/sylar/ns/ns_protocol.h	/^    QUERY_BLACKLIST = 0x10004,$/;"	e	enum:sylar::ns::NSCommand	access:public
Query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLUtil::Query(const std::string& name, const char* format, ...) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const char * format,...)
Query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLUtil::Query(const std::string& name, const char* format,va_list ap) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const char * format,va_list ap)
Query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLUtil::Query(const std::string& name, const std::string& sql) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const std::string & sql)
Query	sylar/sylar/db/mysql.h	/^    static ISQLData::ptr Query(const std::string& name, const char* format, ...);$/;"	p	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const char * format,...)
Query	sylar/sylar/db/mysql.h	/^    static ISQLData::ptr Query(const std::string& name, const char* format,va_list ap); $/;"	p	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const char * format,va_list ap)
Query	sylar/sylar/db/mysql.h	/^    static ISQLData::ptr Query(const std::string& name, const std::string& sql);$/;"	p	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const std::string & sql)
QueryRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^QueryRequest::QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::QueryRequest	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
QueryRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^QueryRequest::QueryRequest(const QueryRequest& from)$/;"	f	class:sylar::ns::QueryRequest	signature:(const QueryRequest & from)
QueryRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr QueryRequest::QueryRequest($/;"	f	class:sylar::ns::QueryRequest	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
QueryRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  QueryRequest(QueryRequest&& from) noexcept$/;"	f	class:sylar::ns::QueryRequest	access:public	signature:(QueryRequest && from)
QueryRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  QueryRequest(const QueryRequest& from);$/;"	p	class:sylar::ns::QueryRequest	access:public	signature:(const QueryRequest & from)
QueryRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::QueryRequest	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
QueryRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr QueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::QueryRequest	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
QueryRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline QueryRequest() : QueryRequest(nullptr) {}$/;"	f	class:sylar::ns::QueryRequest	access:public	signature:()
QueryRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^class QueryRequest final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
QueryRequest	sylar/sylar/ns/ns_protobuf.proto	/^message QueryRequest {$/;"	m
QueryRequestDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr QueryRequestDefaultTypeInternal()$/;"	f	struct:sylar::ns::QueryRequestDefaultTypeInternal	file:	access:public	signature:()
QueryRequestDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct QueryRequestDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
QueryResponse	sylar/sylar/ns/ns_protobuf.pb.cc	/^QueryResponse::QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::QueryResponse	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
QueryResponse	sylar/sylar/ns/ns_protobuf.pb.cc	/^QueryResponse::QueryResponse(const QueryResponse& from)$/;"	f	class:sylar::ns::QueryResponse	signature:(const QueryResponse & from)
QueryResponse	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr QueryResponse::QueryResponse($/;"	f	class:sylar::ns::QueryResponse	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
QueryResponse	sylar/sylar/ns/ns_protobuf.pb.h	/^  QueryResponse(QueryResponse&& from) noexcept$/;"	f	class:sylar::ns::QueryResponse	access:public	signature:(QueryResponse && from)
QueryResponse	sylar/sylar/ns/ns_protobuf.pb.h	/^  QueryResponse(const QueryResponse& from);$/;"	p	class:sylar::ns::QueryResponse	access:public	signature:(const QueryResponse & from)
QueryResponse	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::QueryResponse	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
QueryResponse	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr QueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::QueryResponse	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
QueryResponse	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline QueryResponse() : QueryResponse(nullptr) {}$/;"	f	class:sylar::ns::QueryResponse	access:public	signature:()
QueryResponse	sylar/sylar/ns/ns_protobuf.pb.h	/^class QueryResponse final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
QueryResponse	sylar/sylar/ns/ns_protobuf.proto	/^message QueryResponse {$/;"	m
QueryResponseDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr QueryResponseDefaultTypeInternal()$/;"	f	struct:sylar::ns::QueryResponseDefaultTypeInternal	file:	access:public	signature:()
QueryResponseDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct QueryResponseDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
READ	sylar/sylar/iomanager.h	/^        READ    = 0x1,$/;"	e	enum:sylar::IOManager::Event	access:public
READONLY	sylar/sylar/db/sqlite3.h	/^        READONLY = SQLITE_OPEN_READONLY,$/;"	e	enum:sylar::SQLite3::Flags	access:public
READONLY	sylar/sylar/zk_client.h	/^        static const int READONLY; \/\/ = ZOO_READONLY_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
READWRITE	sylar/sylar/db/sqlite3.h	/^        READWRITE = SQLITE_OPEN_READWRITE,$/;"	e	enum:sylar::SQLite3::Flags	access:public
READY	sylar/sylar/fiber.h	/^        READY,$/;"	e	enum:sylar::Fiber::State	access:public
REDIS	sylar/sylar/db/redis.h	/^        REDIS = 1,$/;"	e	enum:sylar::IRedis::Type	access:public
REDIS_CLUSTER	sylar/sylar/db/redis.h	/^        REDIS_CLUSTER = 2,$/;"	e	enum:sylar::IRedis::Type	access:public
REF	sylar/sylar/db/sqlite3.h	/^        REF = 2$/;"	e	enum:sylar::SQLite3Stmt::Type	access:public
REGISTER	sylar/sylar/ns/ns_protocol.h	/^    REGISTER        = 0x10001,$/;"	e	enum:sylar::ns::NSCommand	access:public
REPLY_ERR	sylar/sylar/db/redis.h	/^        REPLY_ERR = 5,$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
REPLY_ERR	sylar/sylar/db/redis.h	/^        REPLY_ERR = 5,$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
REPLY_NULL	sylar/sylar/db/redis.h	/^        REPLY_NULL = 4,$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
REPLY_NULL	sylar/sylar/db/redis.h	/^        REPLY_NULL = 4,$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
REQUEST	sylar/sylar/protocol.h	/^        REQUEST = 1,$/;"	e	enum:sylar::Message::MessageType	access:public
RESPONSE	sylar/sylar/protocol.h	/^        RESPONSE = 2,$/;"	e	enum:sylar::Message::MessageType	access:public
RESULT	sylar/sylar/db/redis.h	/^    enum RESULT {$/;"	g	class:sylar::FoxRedis	access:public
RESULT	sylar/sylar/db/redis.h	/^    enum RESULT {$/;"	g	class:sylar::FoxRedisCluster	access:public
RLE	sylar/sylar/streams/zlib_stream.h	/^        RLE = Z_RLE$/;"	e	enum:sylar::ZlibStream::Strategy	access:public
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	build/sylar/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
ROARING_FLAG_COW	sylar/sylar/ds/roaring.h	/^#define ROARING_FLAG_COW /;"	d
ROARING_FLAG_FROZEN	sylar/sylar/ds/roaring.h	/^#define ROARING_FLAG_FROZEN /;"	d
ROARING_H	sylar/sylar/ds/roaring.h	/^#define ROARING_H$/;"	d
ROARING_INCLUDE_ROARING_VERSION	sylar/sylar/ds/roaring.h	/^#define ROARING_INCLUDE_ROARING_VERSION /;"	d
ROARING_INLINE_ASM	sylar/sylar/ds/roaring.h	/^#define ROARING_INLINE_ASM$/;"	d
ROARING_TYPES_H	sylar/sylar/ds/roaring.h	/^#define ROARING_TYPES_H$/;"	d
ROARING_VECTOR_OPERATIONS_ENABLED	sylar/sylar/ds/roaring.h	/^#define ROARING_VECTOR_OPERATIONS_ENABLED /;"	d
ROARING_VERSION	sylar/sylar/ds/roaring.h	/^#define ROARING_VERSION /;"	d
ROARING_VERSION_MAJOR	sylar/sylar/ds/roaring.h	/^    ROARING_VERSION_MAJOR = 0,  $/;"	e	enum:__anon10207c070103	access:public
ROARING_VERSION_MINOR	sylar/sylar/ds/roaring.h	/^    ROARING_VERSION_MINOR = 2,  $/;"	e	enum:__anon10207c070103	access:public
ROARING_VERSION_REVISION	sylar/sylar/ds/roaring.h	/^    ROARING_VERSION_REVISION = 65  $/;"	e	enum:__anon10207c070103	access:public
ROCK	sylar/sylar/module.h	/^        ROCK = 1,$/;"	e	enum:sylar::Module::Type	access:public
ROTL	sylar/sylar/util/hash_util.cc	/^#define	ROTL(/;"	d	file:	signature:(x,r)
ROUNDROBIN	sylar/sylar/streams/load_balance.h	/^        ROUNDROBIN = 1,$/;"	e	enum:sylar::ILoadBalance::Type	access:public
RSACipher	sylar/sylar/util/crypto_util.cc	/^RSACipher::RSACipher()$/;"	f	class:sylar::RSACipher	signature:()
RSACipher	sylar/sylar/util/crypto_util.h	/^    RSACipher();$/;"	p	class:sylar::RSACipher	access:public	signature:()
RSACipher	sylar/sylar/util/crypto_util.h	/^class RSACipher {$/;"	c	namespace:sylar
RUN_CONTAINER_TYPE_CODE	sylar/sylar/ds/roaring.h	/^#define RUN_CONTAINER_TYPE_CODE /;"	d
RUN_DEFAULT_INIT_SIZE	sylar/sylar/ds/roaring.h	/^enum { RUN_DEFAULT_INIT_SIZE = 0 };$/;"	e	enum:__anon10207c070303	access:public
RWMutex	sylar/sylar/mutex.h	/^    RWMutex() {$/;"	f	class:sylar::RWMutex	access:public	signature:()
RWMutex	sylar/sylar/mutex.h	/^class RWMutex : Noncopyable{$/;"	c	namespace:sylar	inherits:Noncopyable
RWMutexType	sylar/sylar/config.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::Config	typeref:typename:RWMutex	access:public
RWMutexType	sylar/sylar/config.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::ConfigVar	typeref:typename:RWMutex	access:public
RWMutexType	sylar/sylar/env.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::Env	typeref:typename:RWMutex	access:public
RWMutexType	sylar/sylar/fd_manager.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::FdManager	typeref:typename:RWMutex	access:public
RWMutexType	sylar/sylar/http/servlet.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::http::ServletDispatch	typeref:typename:RWMutex	access:public
RWMutexType	sylar/sylar/http/ws_servlet.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::http::WSServletDispatch	typeref:typename:RWMutex	access:public
RWMutexType	sylar/sylar/iomanager.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::IOManager	typeref:typename:RWMutex	access:public
RWMutexType	sylar/sylar/module.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::ModuleManager	typeref:typename:RWMutex	access:public
RWMutexType	sylar/sylar/streams/async_socket_stream.h	/^    typedef sylar::RWMutex RWMutexType;$/;"	t	class:sylar::AsyncSocketStream	typeref:typename:sylar::RWMutex	access:public
RWMutexType	sylar/sylar/streams/async_socket_stream.h	/^    typedef sylar::RWMutex RWMutexType;$/;"	t	class:sylar::AsyncSocketStreamManager	typeref:typename:sylar::RWMutex	access:public
RWMutexType	sylar/sylar/streams/load_balance.h	/^    typedef sylar::RWMutex RWMutexType;$/;"	t	class:sylar::LoadBalance	typeref:typename:sylar::RWMutex	access:public
RWMutexType	sylar/sylar/streams/load_balance.h	/^    typedef sylar::RWMutex RWMutexType;$/;"	t	class:sylar::SDLoadBalance	typeref:typename:sylar::RWMutex	access:public
RWMutexType	sylar/sylar/timer.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::TimerManager	typeref:typename:RWMutex	access:public
RandomStringGenerator	sylar/sylar/ds/util.h	/^class RandomStringGenerator {$/;"	c	namespace:sylar::ds
ReadFixFromStream	sylar/sylar/util.h	/^inline bool ReadFixFromStream(std::istream& is, char* data, const uint64_t& size) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,char * data,const uint64_t & size)
ReadFixFromStreamWithSpeed	sylar/sylar/util.cc	/^bool ReadFixFromStreamWithSpeed(std::istream& is, char* data,$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,char * data,const uint64_t & size,const uint64_t & speed)
ReadFixFromStreamWithSpeed	sylar/sylar/util.h	/^bool ReadFixFromStreamWithSpeed(std::istream& is, char* data,$/;"	p	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,char * data,const uint64_t & size,const uint64_t & speed=-1)
ReadFromStream	sylar/sylar/util.h	/^bool ReadFromStream(std::istream& is, T& v) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,T & v)
ReadFromStream	sylar/sylar/util.h	/^bool ReadFromStream(std::istream& is, std::vector<T>& v) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,std::vector<T> & v)
ReadFromStreamWithSpeed	sylar/sylar/util.h	/^bool ReadFromStreamWithSpeed(std::istream& is, const T& v,$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,const T & v,const uint64_t & speed=-1)
ReadFromStreamWithSpeed	sylar/sylar/util.h	/^bool ReadFromStreamWithSpeed(std::istream& is, const std::vector<T>& v,$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,const std::vector<T> & v,const uint64_t & speed=-1)
ReadLock	sylar/sylar/mutex.h	/^    typedef ReadScopedLockImpl<NullMutex> ReadLock;$/;"	t	class:sylar::NullRWMutex	typeref:typename:ReadScopedLockImpl<NullMutex>	access:public
ReadLock	sylar/sylar/mutex.h	/^    typedef ReadScopedLockImpl<RWMutex> ReadLock;$/;"	t	class:sylar::RWMutex	typeref:typename:ReadScopedLockImpl<RWMutex>	access:public
ReadScopedLockImpl	sylar/sylar/mutex.h	/^    ReadScopedLockImpl(T& mutex)$/;"	f	struct:sylar::ReadScopedLockImpl	access:public	signature:(T & mutex)
ReadScopedLockImpl	sylar/sylar/mutex.h	/^struct ReadScopedLockImpl {$/;"	s	namespace:sylar
Realpath	sylar/sylar/util.cc	/^bool FSUtil::Realpath(const std::string& path, std::string& rpath) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & path,std::string & rpath)
Realpath	sylar/sylar/util.h	/^    static bool Realpath(const std::string& path, std::string& rpath);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & path,std::string & rpath)
Redis	sylar/sylar/db/redis.cc	/^Redis::Redis() {$/;"	f	class:sylar::Redis	signature:()
Redis	sylar/sylar/db/redis.cc	/^Redis::Redis(const std::map<std::string, std::string>& conf) {$/;"	f	class:sylar::Redis	signature:(const std::map<std::string,std::string> & conf)
Redis	sylar/sylar/db/redis.h	/^    Redis();$/;"	p	class:sylar::Redis	access:public	signature:()
Redis	sylar/sylar/db/redis.h	/^    Redis(const std::map<std::string, std::string>& conf);$/;"	p	class:sylar::Redis	access:public	signature:(const std::map<std::string,std::string> & conf)
Redis	sylar/sylar/db/redis.h	/^class Redis : public ISyncRedis {$/;"	c	namespace:sylar	inherits:ISyncRedis
RedisCluster	sylar/sylar/db/redis.cc	/^RedisCluster::RedisCluster() {$/;"	f	class:sylar::RedisCluster	signature:()
RedisCluster	sylar/sylar/db/redis.cc	/^RedisCluster::RedisCluster(const std::map<std::string, std::string>& conf) {$/;"	f	class:sylar::RedisCluster	signature:(const std::map<std::string,std::string> & conf)
RedisCluster	sylar/sylar/db/redis.h	/^    RedisCluster();$/;"	p	class:sylar::RedisCluster	access:public	signature:()
RedisCluster	sylar/sylar/db/redis.h	/^    RedisCluster(const std::map<std::string, std::string>& conf);$/;"	p	class:sylar::RedisCluster	access:public	signature:(const std::map<std::string,std::string> & conf)
RedisCluster	sylar/sylar/db/redis.h	/^class RedisCluster : public ISyncRedis {$/;"	c	namespace:sylar	inherits:ISyncRedis
RedisManager	sylar/sylar/db/redis.cc	/^RedisManager::RedisManager() {$/;"	f	class:sylar::RedisManager	signature:()
RedisManager	sylar/sylar/db/redis.h	/^    RedisManager();$/;"	p	class:sylar::RedisManager	access:public	signature:()
RedisManager	sylar/sylar/db/redis.h	/^class RedisManager {$/;"	c	namespace:sylar
RedisMgr	sylar/sylar/db/redis.h	/^typedef sylar::Singleton<RedisManager> RedisMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<RedisManager>
RedisReplyClone	sylar/sylar/db/redis.cc	/^redisReply* RedisReplyClone(redisReply* r) {$/;"	f	namespace:sylar	typeref:typename:redisReply *	signature:(redisReply * r)
RedisUtil	sylar/sylar/db/redis.h	/^class RedisUtil {$/;"	c	namespace:sylar
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterInfo::RegisterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::RegisterInfo	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterInfo::RegisterInfo(const RegisterInfo& from)$/;"	f	class:sylar::ns::RegisterInfo	signature:(const RegisterInfo & from)
RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr RegisterInfo::RegisterInfo($/;"	f	class:sylar::ns::RegisterInfo	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  RegisterInfo(RegisterInfo&& from) noexcept$/;"	f	class:sylar::ns::RegisterInfo	access:public	signature:(RegisterInfo && from)
RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  RegisterInfo(const RegisterInfo& from);$/;"	p	class:sylar::ns::RegisterInfo	access:public	signature:(const RegisterInfo & from)
RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit RegisterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::RegisterInfo	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr RegisterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::RegisterInfo	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline RegisterInfo() : RegisterInfo(nullptr) {}$/;"	f	class:sylar::ns::RegisterInfo	access:public	signature:()
RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^class RegisterInfo final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
RegisterInfo	sylar/sylar/ns/ns_protobuf.proto	/^message RegisterInfo {$/;"	m
RegisterInfoDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr RegisterInfoDefaultTypeInternal()$/;"	f	struct:sylar::ns::RegisterInfoDefaultTypeInternal	file:	access:public	signature:()
RegisterInfoDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct RegisterInfoDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::RegisterRequest	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterRequest::RegisterRequest(const RegisterRequest& from)$/;"	f	class:sylar::ns::RegisterRequest	signature:(const RegisterRequest & from)
RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr RegisterRequest::RegisterRequest($/;"	f	class:sylar::ns::RegisterRequest	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  RegisterRequest(RegisterRequest&& from) noexcept$/;"	f	class:sylar::ns::RegisterRequest	access:public	signature:(RegisterRequest && from)
RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  RegisterRequest(const RegisterRequest& from);$/;"	p	class:sylar::ns::RegisterRequest	access:public	signature:(const RegisterRequest & from)
RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::RegisterRequest	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr RegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::RegisterRequest	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline RegisterRequest() : RegisterRequest(nullptr) {}$/;"	f	class:sylar::ns::RegisterRequest	access:public	signature:()
RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^class RegisterRequest final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
RegisterRequest	sylar/sylar/ns/ns_protobuf.proto	/^message RegisterRequest {$/;"	m
RegisterRequestDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr RegisterRequestDefaultTypeInternal()$/;"	f	struct:sylar::ns::RegisterRequestDefaultTypeInternal	file:	access:public	signature:()
RegisterRequestDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct RegisterRequestDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
ReleasePtr	sylar/sylar/http/http_connection.cc	/^void HttpConnectionPool::ReleasePtr(HttpConnection* ptr, HttpConnectionPool* pool) {$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:void	signature:(HttpConnection * ptr,HttpConnectionPool * pool)
ReleasePtr	sylar/sylar/http/http_connection.h	/^    static void ReleasePtr(HttpConnection* ptr, HttpConnectionPool* pool);$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:void	access:private	signature:(HttpConnection * ptr,HttpConnectionPool * pool)
ReplyPtr	sylar/sylar/db/redis.h	/^typedef std::shared_ptr<redisReply> ReplyPtr;$/;"	t	namespace:sylar	typeref:typename:std::shared_ptr<redisReply>
Request	sylar/sylar/protocol.cc	/^Request::Request()$/;"	f	class:sylar::Request	signature:()
Request	sylar/sylar/protocol.h	/^    Request();$/;"	p	class:sylar::Request	access:public	signature:()
Request	sylar/sylar/protocol.h	/^class Request : public Message {$/;"	c	namespace:sylar	inherits:Message
Res	sylar/sylar/db/redis.cc	/^struct Res {$/;"	s	namespace:sylar	file:
Response	sylar/sylar/protocol.cc	/^Response::Response()$/;"	f	class:sylar::Response	signature:()
Response	sylar/sylar/protocol.h	/^    Response();$/;"	p	class:sylar::Response	access:public	signature:()
Response	sylar/sylar/protocol.h	/^class Response : public Message {$/;"	c	namespace:sylar	inherits:Message
Result	sylar/sylar/email/smtp.h	/^    enum Result {$/;"	g	struct:sylar::SmtpResult	access:public
Rm	sylar/sylar/util.cc	/^bool FSUtil::Rm(const std::string& path) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & path)
Rm	sylar/sylar/util.h	/^    static bool Rm(const std::string& path);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & path)
Roaring	sylar/sylar/ds/roaring.hh	/^    Roaring() {$/;"	f	class:Roaring	access:public	signature:()
Roaring	sylar/sylar/ds/roaring.hh	/^    Roaring(Roaring &&r) noexcept {$/;"	f	class:Roaring	access:public	signature:(Roaring && r)
Roaring	sylar/sylar/ds/roaring.hh	/^    Roaring(const Roaring &r) {$/;"	f	class:Roaring	access:public	signature:(const Roaring & r)
Roaring	sylar/sylar/ds/roaring.hh	/^    Roaring(roaring_bitmap_t *s) noexcept {$/;"	f	class:Roaring	access:public	signature:(roaring_bitmap_t * s)
Roaring	sylar/sylar/ds/roaring.hh	/^    Roaring(size_t n, const uint32_t *data) : Roaring() {$/;"	f	class:Roaring	access:public	signature:(size_t n,const uint32_t * data)
Roaring	sylar/sylar/ds/roaring.hh	/^class Roaring {$/;"	c
Roaring64Map	sylar/sylar/ds/roaring.hh	/^    Roaring64Map() = default;$/;"	p	class:Roaring64Map	access:public	signature:()
Roaring64Map	sylar/sylar/ds/roaring.hh	/^    Roaring64Map(const Roaring &r) { emplaceOrInsert(0, r); }$/;"	f	class:Roaring64Map	access:public	signature:(const Roaring & r)
Roaring64Map	sylar/sylar/ds/roaring.hh	/^    Roaring64Map(roaring_bitmap_t *s) { emplaceOrInsert(0, s); }$/;"	f	class:Roaring64Map	access:public	signature:(roaring_bitmap_t * s)
Roaring64Map	sylar/sylar/ds/roaring.hh	/^    Roaring64Map(size_t n, const uint32_t *data) { addMany(n, data); }$/;"	f	class:Roaring64Map	access:public	signature:(size_t n,const uint32_t * data)
Roaring64Map	sylar/sylar/ds/roaring.hh	/^    Roaring64Map(size_t n, const uint64_t *data) { addMany(n, data); }$/;"	f	class:Roaring64Map	access:public	signature:(size_t n,const uint64_t * data)
Roaring64Map	sylar/sylar/ds/roaring.hh	/^class Roaring64Map {$/;"	c
Roaring64Map::Roaring64Map	sylar/sylar/ds/roaring.hh	/^    Roaring64Map() = default;$/;"	p	class:Roaring64Map	access:public	signature:()
Roaring64Map::Roaring64Map	sylar/sylar/ds/roaring.hh	/^    Roaring64Map(const Roaring &r) { emplaceOrInsert(0, r); }$/;"	f	class:Roaring64Map	access:public	signature:(const Roaring & r)
Roaring64Map::Roaring64Map	sylar/sylar/ds/roaring.hh	/^    Roaring64Map(roaring_bitmap_t *s) { emplaceOrInsert(0, s); }$/;"	f	class:Roaring64Map	access:public	signature:(roaring_bitmap_t * s)
Roaring64Map::Roaring64Map	sylar/sylar/ds/roaring.hh	/^    Roaring64Map(size_t n, const uint32_t *data) { addMany(n, data); }$/;"	f	class:Roaring64Map	access:public	signature:(size_t n,const uint32_t * data)
Roaring64Map::Roaring64Map	sylar/sylar/ds/roaring.hh	/^    Roaring64Map(size_t n, const uint64_t *data) { addMany(n, data); }$/;"	f	class:Roaring64Map	access:public	signature:(size_t n,const uint64_t * data)
Roaring64Map::add	sylar/sylar/ds/roaring.hh	/^    void add(uint32_t x) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(uint32_t x)
Roaring64Map::add	sylar/sylar/ds/roaring.hh	/^    void add(uint64_t x) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(uint64_t x)
Roaring64Map::addChecked	sylar/sylar/ds/roaring.hh	/^    bool addChecked(uint32_t x) {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint32_t x)
Roaring64Map::addChecked	sylar/sylar/ds/roaring.hh	/^    bool addChecked(uint64_t x) {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint64_t x)
Roaring64Map::addMany	sylar/sylar/ds/roaring.hh	/^    void addMany(size_t n_args, const uint32_t *vals) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(size_t n_args,const uint32_t * vals)
Roaring64Map::addMany	sylar/sylar/ds/roaring.hh	/^    void addMany(size_t n_args, const uint64_t *vals) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(size_t n_args,const uint64_t * vals)
Roaring64Map::begin	sylar/sylar/ds/roaring.hh	/^    const_iterator begin() const;$/;"	p	class:Roaring64Map	typeref:typename:const_iterator	access:public	signature:() const
Roaring64Map::begin	sylar/sylar/ds/roaring.hh	/^inline Roaring64MapSetBitForwardIterator Roaring64Map::begin() const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64MapSetBitForwardIterator	signature:() const
Roaring64Map::bitmapOf	sylar/sylar/ds/roaring.hh	/^    static Roaring64Map bitmapOf(size_t n...) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(size_t n...)
Roaring64Map::cardinality	sylar/sylar/ds/roaring.hh	/^    uint64_t cardinality() const {$/;"	f	class:Roaring64Map	typeref:typename:uint64_t	access:public	signature:() const
Roaring64Map::clear	sylar/sylar/ds/roaring.hh	/^	void clear() {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:()
Roaring64Map::const_bidirectional_iterator	sylar/sylar/ds/roaring.hh	/^    typedef Roaring64MapSetBitBiDirectionalIterator const_bidirectional_iterator;	$/;"	t	class:Roaring64Map	typeref:typename:Roaring64MapSetBitBiDirectionalIterator	access:public
Roaring64Map::const_iterator	sylar/sylar/ds/roaring.hh	/^    typedef Roaring64MapSetBitForwardIterator const_iterator;$/;"	t	class:Roaring64Map	typeref:typename:Roaring64MapSetBitForwardIterator	access:public
Roaring64Map::const_reverse_iterator	sylar/sylar/ds/roaring.hh	/^    typedef Roaring64MapSetBitReverseIterator const_reverse_iterator;	$/;"	t	class:Roaring64Map	typeref:typename:Roaring64MapSetBitReverseIterator	access:public
Roaring64Map::contains	sylar/sylar/ds/roaring.hh	/^    bool contains(uint32_t x) const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint32_t x) const
Roaring64Map::contains	sylar/sylar/ds/roaring.hh	/^    bool contains(uint64_t x) const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint64_t x) const
Roaring64Map::copyOnWrite	sylar/sylar/ds/roaring.hh	/^    bool copyOnWrite = false;$/;"	m	class:Roaring64Map	typeref:typename:bool	access:private
Roaring64Map::emplaceOrInsert	sylar/sylar/ds/roaring.hh	/^    void emplaceOrInsert(const uint32_t key, const Roaring &value) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:private	signature:(const uint32_t key,const Roaring & value)
Roaring64Map::end	sylar/sylar/ds/roaring.hh	/^    const_iterator end() const;$/;"	p	class:Roaring64Map	typeref:typename:const_iterator	access:public	signature:() const
Roaring64Map::end	sylar/sylar/ds/roaring.hh	/^inline Roaring64MapSetBitForwardIterator Roaring64Map::end() const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64MapSetBitForwardIterator	signature:() const
Roaring64Map::fastunion	sylar/sylar/ds/roaring.hh	/^    static Roaring64Map fastunion(size_t n, const Roaring64Map **inputs) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(size_t n,const Roaring64Map ** inputs)
Roaring64Map::flip	sylar/sylar/ds/roaring.hh	/^    void flip(uint64_t range_start, uint64_t range_end) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(uint64_t range_start,uint64_t range_end)
Roaring64Map::getCopyOnWrite	sylar/sylar/ds/roaring.hh	/^    bool getCopyOnWrite() const { return copyOnWrite; }$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:() const
Roaring64Map::getSizeInBytes	sylar/sylar/ds/roaring.hh	/^    size_t getSizeInBytes(bool portable = true) const {$/;"	f	class:Roaring64Map	typeref:typename:size_t	access:public	signature:(bool portable=true) const
Roaring64Map::highBytes	sylar/sylar/ds/roaring.hh	/^    static uint32_t highBytes(const uint64_t in) { return uint32_t(in >> 32); }$/;"	f	class:Roaring64Map	typeref:typename:uint32_t	access:private	signature:(const uint64_t in)
Roaring64Map::isEmpty	sylar/sylar/ds/roaring.hh	/^    bool isEmpty() const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:() const
Roaring64Map::isFull	sylar/sylar/ds/roaring.hh	/^    bool isFull() const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:() const
Roaring64Map::isStrictSubset	sylar/sylar/ds/roaring.hh	/^    bool isStrictSubset(const Roaring64Map &r) const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(const Roaring64Map & r) const
Roaring64Map::isSubset	sylar/sylar/ds/roaring.hh	/^    bool isSubset(const Roaring64Map &r) const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(const Roaring64Map & r) const
Roaring64Map::iterate	sylar/sylar/ds/roaring.hh	/^    void iterate(roaring_iterator64 iterator, void *ptr) const {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(roaring_iterator64 iterator,void * ptr) const
Roaring64Map::lowBytes	sylar/sylar/ds/roaring.hh	/^    static uint32_t lowBytes(const uint64_t in) { return uint32_t(in); }$/;"	f	class:Roaring64Map	typeref:typename:uint32_t	access:private	signature:(const uint64_t in)
Roaring64Map::maximum	sylar/sylar/ds/roaring.hh	/^    uint64_t maximum() const {$/;"	f	class:Roaring64Map	typeref:typename:uint64_t	access:public	signature:() const
Roaring64Map::minimum	sylar/sylar/ds/roaring.hh	/^    uint64_t minimum() const {$/;"	f	class:Roaring64Map	typeref:typename:uint64_t	access:public	signature:() const
Roaring64Map::operator &	sylar/sylar/ds/roaring.hh	/^    Roaring64Map operator&(const Roaring64Map &o) const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(const Roaring64Map & o) const
Roaring64Map::operator &=	sylar/sylar/ds/roaring.hh	/^    Roaring64Map &operator&=(const Roaring64Map &r) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map &	access:public	signature:(const Roaring64Map & r)
Roaring64Map::operator -	sylar/sylar/ds/roaring.hh	/^    Roaring64Map operator-(const Roaring64Map &o) const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(const Roaring64Map & o) const
Roaring64Map::operator -=	sylar/sylar/ds/roaring.hh	/^    Roaring64Map &operator-=(const Roaring64Map &r) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map &	access:public	signature:(const Roaring64Map & r)
Roaring64Map::operator =	sylar/sylar/ds/roaring.hh	/^	Roaring64Map &operator=(const Roaring64Map &r) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map &	access:public	signature:(const Roaring64Map & r)
Roaring64Map::operator ==	sylar/sylar/ds/roaring.hh	/^    bool operator==(const Roaring64Map &r) const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(const Roaring64Map & r) const
Roaring64Map::operator ^	sylar/sylar/ds/roaring.hh	/^    Roaring64Map operator^(const Roaring64Map &o) const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(const Roaring64Map & o) const
Roaring64Map::operator ^=	sylar/sylar/ds/roaring.hh	/^    Roaring64Map &operator^=(const Roaring64Map &r) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map &	access:public	signature:(const Roaring64Map & r)
Roaring64Map::operator |	sylar/sylar/ds/roaring.hh	/^    Roaring64Map operator|(const Roaring64Map &o) const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(const Roaring64Map & o) const
Roaring64Map::operator |=	sylar/sylar/ds/roaring.hh	/^    Roaring64Map &operator|=(const Roaring64Map &r) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map &	access:public	signature:(const Roaring64Map & r)
Roaring64Map::printf	sylar/sylar/ds/roaring.hh	/^    void printf() const {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:() const
Roaring64Map::printf::iter_data::first_char	sylar/sylar/ds/roaring.hh	/^                char first_char = '{';$/;"	m	struct:Roaring64Map::printf::iter_data	typeref:typename:char	access:public
Roaring64Map::printf::iter_data::high_bits	sylar/sylar/ds/roaring.hh	/^                uint32_t high_bits;$/;"	m	struct:Roaring64Map::printf::iter_data	typeref:typename:uint32_t	access:public
Roaring64Map::rank	sylar/sylar/ds/roaring.hh	/^    uint64_t rank(uint64_t x) const {$/;"	f	class:Roaring64Map	typeref:typename:uint64_t	access:public	signature:(uint64_t x) const
Roaring64Map::rbegin	sylar/sylar/ds/roaring.hh	/^    const_reverse_iterator rbegin() const;$/;"	p	class:Roaring64Map	typeref:typename:const_reverse_iterator	access:public	signature:() const
Roaring64Map::rbegin	sylar/sylar/ds/roaring.hh	/^inline Roaring64MapSetBitReverseIterator Roaring64Map::rbegin() const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64MapSetBitReverseIterator	signature:() const
Roaring64Map::read	sylar/sylar/ds/roaring.hh	/^    static Roaring64Map read(const char *buf, bool portable = true) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(const char * buf,bool portable=true)
Roaring64Map::readSafe	sylar/sylar/ds/roaring.hh	/^    static Roaring64Map readSafe(const char *buf, size_t maxbytes) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(const char * buf,size_t maxbytes)
Roaring64Map::remove	sylar/sylar/ds/roaring.hh	/^    void remove(uint32_t x) { roarings[0].remove(x); }$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(uint32_t x)
Roaring64Map::remove	sylar/sylar/ds/roaring.hh	/^    void remove(uint64_t x) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(uint64_t x)
Roaring64Map::removeChecked	sylar/sylar/ds/roaring.hh	/^    bool removeChecked(uint32_t x) {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint32_t x)
Roaring64Map::removeChecked	sylar/sylar/ds/roaring.hh	/^    bool removeChecked(uint64_t x) {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint64_t x)
Roaring64Map::removeRunCompression	sylar/sylar/ds/roaring.hh	/^    bool removeRunCompression() {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:()
Roaring64Map::rend	sylar/sylar/ds/roaring.hh	/^    const_reverse_iterator rend() const;$/;"	p	class:Roaring64Map	typeref:typename:const_reverse_iterator	access:public	signature:() const
Roaring64Map::rend	sylar/sylar/ds/roaring.hh	/^inline Roaring64MapSetBitReverseIterator Roaring64Map::rend() const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64MapSetBitReverseIterator	signature:() const
Roaring64Map::roarings	sylar/sylar/ds/roaring.hh	/^    std::map<uint32_t, Roaring> roarings;$/;"	m	class:Roaring64Map	typeref:typename:std::map<uint32_t,Roaring>	access:private
Roaring64Map::runOptimize	sylar/sylar/ds/roaring.hh	/^    bool runOptimize() {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:()
Roaring64Map::select	sylar/sylar/ds/roaring.hh	/^    bool select(uint64_t rnk, uint64_t *element) const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint64_t rnk,uint64_t * element) const
Roaring64Map::setCopyOnWrite	sylar/sylar/ds/roaring.hh	/^    void setCopyOnWrite(bool val) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(bool val)
Roaring64Map::shrinkToFit	sylar/sylar/ds/roaring.hh	/^    size_t shrinkToFit() {$/;"	f	class:Roaring64Map	typeref:typename:size_t	access:public	signature:()
Roaring64Map::swap	sylar/sylar/ds/roaring.hh	/^    void swap(Roaring64Map &r) { roarings.swap(r.roarings); }$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(Roaring64Map & r)
Roaring64Map::toString	sylar/sylar/ds/roaring.hh	/^    std::string toString() const {$/;"	f	class:Roaring64Map	typeref:typename:std::string	access:public	signature:() const
Roaring64Map::toString::iter_data::first_char	sylar/sylar/ds/roaring.hh	/^            char first_char = '{';$/;"	m	struct:Roaring64Map::toString::iter_data	typeref:typename:char	access:public
Roaring64Map::toString::iter_data::high_bits	sylar/sylar/ds/roaring.hh	/^            uint32_t high_bits;$/;"	m	struct:Roaring64Map::toString::iter_data	typeref:typename:uint32_t	access:public
Roaring64Map::toString::iter_data::str	sylar/sylar/ds/roaring.hh	/^            std::string str;$/;"	m	struct:Roaring64Map::toString::iter_data	typeref:typename:std::string	access:public
Roaring64Map::toUint64Array	sylar/sylar/ds/roaring.hh	/^    void toUint64Array(uint64_t *ans) const {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(uint64_t * ans) const
Roaring64Map::uniteBytes	sylar/sylar/ds/roaring.hh	/^    static uint64_t uniteBytes(const uint32_t highBytes,$/;"	f	class:Roaring64Map	typeref:typename:uint64_t	access:private	signature:(const uint32_t highBytes,const uint32_t lowBytes)
Roaring64Map::write	sylar/sylar/ds/roaring.hh	/^    size_t write(char *buf, bool portable = true) const {$/;"	f	class:Roaring64Map	typeref:typename:size_t	access:public	signature:(char * buf,bool portable=true) const
Roaring64MapSetBitBiDirectionalIterator	sylar/sylar/ds/roaring.hh	/^	Roaring64MapSetBitBiDirectionalIterator(const Roaring64Map &parent,$/;"	f	class:Roaring64MapSetBitBiDirectionalIterator	access:public	signature:(const Roaring64Map & parent,bool exhausted=false)
Roaring64MapSetBitBiDirectionalIterator	sylar/sylar/ds/roaring.hh	/^class Roaring64MapSetBitBiDirectionalIterator final :public Roaring64MapSetBitForwardIterator {$/;"	c	inherits:Roaring64MapSetBitForwardIterator
Roaring64MapSetBitBiDirectionalIterator::Roaring64MapSetBitBiDirectionalIterator	sylar/sylar/ds/roaring.hh	/^	Roaring64MapSetBitBiDirectionalIterator(const Roaring64Map &parent,$/;"	f	class:Roaring64MapSetBitBiDirectionalIterator	access:public	signature:(const Roaring64Map & parent,bool exhausted=false)
Roaring64MapSetBitBiDirectionalIterator::map_begin	sylar/sylar/ds/roaring.hh	/^	std::map<uint32_t, Roaring>::const_iterator map_begin;$/;"	m	class:Roaring64MapSetBitBiDirectionalIterator	typeref:typename:std::map<uint32_t,Roaring>::const_iterator	access:protected
Roaring64MapSetBitBiDirectionalIterator::operator --	sylar/sylar/ds/roaring.hh	/^	type_of_iterator operator--(int) {  \/\/ i--, must return orig. value$/;"	f	class:Roaring64MapSetBitBiDirectionalIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
Roaring64MapSetBitBiDirectionalIterator::operator --	sylar/sylar/ds/roaring.hh	/^	type_of_iterator& operator--() { \/\/  --i, must return dec.value$/;"	f	class:Roaring64MapSetBitBiDirectionalIterator	typeref:typename:type_of_iterator &	access:public	signature:()
Roaring64MapSetBitBiDirectionalIterator::operator =	sylar/sylar/ds/roaring.hh	/^	Roaring64MapSetBitBiDirectionalIterator &operator=(const Roaring64MapSetBitForwardIterator& r) /;"	f	class:Roaring64MapSetBitBiDirectionalIterator	typeref:typename:Roaring64MapSetBitBiDirectionalIterator &	access:public	signature:(const Roaring64MapSetBitForwardIterator & r)
Roaring64MapSetBitForwardIterator	sylar/sylar/ds/roaring.hh	/^    Roaring64MapSetBitForwardIterator(const Roaring64Map &parent,$/;"	f	class:Roaring64MapSetBitForwardIterator	access:public	signature:(const Roaring64Map & parent,bool exhausted=false)
Roaring64MapSetBitForwardIterator	sylar/sylar/ds/roaring.hh	/^class Roaring64MapSetBitForwardIterator {$/;"	c
Roaring64MapSetBitForwardIterator::Roaring64MapSetBitForwardIterator	sylar/sylar/ds/roaring.hh	/^    Roaring64MapSetBitForwardIterator(const Roaring64Map &parent,$/;"	f	class:Roaring64MapSetBitForwardIterator	access:public	signature:(const Roaring64Map & parent,bool exhausted=false)
Roaring64MapSetBitForwardIterator::difference_type	sylar/sylar/ds/roaring.hh	/^    typedef int64_t difference_type;$/;"	t	class:Roaring64MapSetBitForwardIterator	typeref:typename:int64_t	access:public
Roaring64MapSetBitForwardIterator::i	sylar/sylar/ds/roaring.hh	/^    roaring_uint32_iterator_t i;$/;"	m	class:Roaring64MapSetBitForwardIterator	typeref:typename:roaring_uint32_iterator_t	access:protected
Roaring64MapSetBitForwardIterator::iterator_category	sylar/sylar/ds/roaring.hh	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:Roaring64MapSetBitForwardIterator	typeref:typename:std::forward_iterator_tag	access:public
Roaring64MapSetBitForwardIterator::map_end	sylar/sylar/ds/roaring.hh	/^    std::map<uint32_t, Roaring>::const_iterator map_end;$/;"	m	class:Roaring64MapSetBitForwardIterator	typeref:typename:std::map<uint32_t,Roaring>::const_iterator	access:protected
Roaring64MapSetBitForwardIterator::map_iter	sylar/sylar/ds/roaring.hh	/^    std::map<uint32_t, Roaring>::const_iterator map_iter;$/;"	m	class:Roaring64MapSetBitForwardIterator	typeref:typename:std::map<uint32_t,Roaring>::const_iterator	access:protected
Roaring64MapSetBitForwardIterator::move	sylar/sylar/ds/roaring.hh	/^	bool move(const value_type& x) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const value_type & x)
Roaring64MapSetBitForwardIterator::operator !=	sylar/sylar/ds/roaring.hh	/^    bool operator!=(const Roaring64MapSetBitForwardIterator &o) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const Roaring64MapSetBitForwardIterator & o)
Roaring64MapSetBitForwardIterator::operator *	sylar/sylar/ds/roaring.hh	/^    value_type operator*() const {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:value_type	access:public	signature:() const
Roaring64MapSetBitForwardIterator::operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator &operator++() {  \/\/ ++i, must returned inc. value$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:type_of_iterator &	access:public	signature:()
Roaring64MapSetBitForwardIterator::operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator operator++(int) {  \/\/ i++, must return orig. value$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
Roaring64MapSetBitForwardIterator::operator <	sylar/sylar/ds/roaring.hh	/^    bool operator<(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
Roaring64MapSetBitForwardIterator::operator <=	sylar/sylar/ds/roaring.hh	/^    bool operator<=(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
Roaring64MapSetBitForwardIterator::operator =	sylar/sylar/ds/roaring.hh	/^	Roaring64MapSetBitForwardIterator &operator=(const Roaring64MapSetBitForwardIterator& r) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:Roaring64MapSetBitForwardIterator &	access:public	signature:(const Roaring64MapSetBitForwardIterator & r)
Roaring64MapSetBitForwardIterator::operator ==	sylar/sylar/ds/roaring.hh	/^	bool operator==(const Roaring64MapSetBitForwardIterator &o) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const Roaring64MapSetBitForwardIterator & o)
Roaring64MapSetBitForwardIterator::operator >	sylar/sylar/ds/roaring.hh	/^    bool operator>(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
Roaring64MapSetBitForwardIterator::operator >=	sylar/sylar/ds/roaring.hh	/^    bool operator>=(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
Roaring64MapSetBitForwardIterator::p	sylar/sylar/ds/roaring.hh	/^	const std::map<uint32_t, Roaring>& p;$/;"	m	class:Roaring64MapSetBitForwardIterator	typeref:typename:const std::map<uint32_t,Roaring> &	access:protected
Roaring64MapSetBitForwardIterator::pointer	sylar/sylar/ds/roaring.hh	/^    typedef uint64_t *pointer;$/;"	t	class:Roaring64MapSetBitForwardIterator	typeref:typename:uint64_t *	access:public
Roaring64MapSetBitForwardIterator::reference_type	sylar/sylar/ds/roaring.hh	/^    typedef uint64_t &reference_type;$/;"	t	class:Roaring64MapSetBitForwardIterator	typeref:typename:uint64_t &	access:public
Roaring64MapSetBitForwardIterator::type_of_iterator	sylar/sylar/ds/roaring.hh	/^    typedef Roaring64MapSetBitForwardIterator type_of_iterator;$/;"	t	class:Roaring64MapSetBitForwardIterator	typeref:typename:Roaring64MapSetBitForwardIterator	access:public
Roaring64MapSetBitForwardIterator::value_type	sylar/sylar/ds/roaring.hh	/^    typedef uint64_t value_type;$/;"	t	class:Roaring64MapSetBitForwardIterator	typeref:typename:uint64_t	access:public
Roaring64MapSetBitReverseIterator	sylar/sylar/ds/roaring.hh	/^    Roaring64MapSetBitReverseIterator(const Roaring64Map &parent,$/;"	f	class:Roaring64MapSetBitReverseIterator	access:public	signature:(const Roaring64Map & parent,bool exhausted=false)
Roaring64MapSetBitReverseIterator	sylar/sylar/ds/roaring.hh	/^class Roaring64MapSetBitReverseIterator {$/;"	c
Roaring64MapSetBitReverseIterator::Roaring64MapSetBitReverseIterator	sylar/sylar/ds/roaring.hh	/^    Roaring64MapSetBitReverseIterator(const Roaring64Map &parent,$/;"	f	class:Roaring64MapSetBitReverseIterator	access:public	signature:(const Roaring64Map & parent,bool exhausted=false)
Roaring64MapSetBitReverseIterator::difference_type	sylar/sylar/ds/roaring.hh	/^    typedef int64_t difference_type;$/;"	t	class:Roaring64MapSetBitReverseIterator	typeref:typename:int64_t	access:public
Roaring64MapSetBitReverseIterator::i	sylar/sylar/ds/roaring.hh	/^    roaring_uint32_iterator_t i;$/;"	m	class:Roaring64MapSetBitReverseIterator	typeref:typename:roaring_uint32_iterator_t	access:protected
Roaring64MapSetBitReverseIterator::iterator_category	sylar/sylar/ds/roaring.hh	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:Roaring64MapSetBitReverseIterator	typeref:typename:std::forward_iterator_tag	access:public
Roaring64MapSetBitReverseIterator::map_end	sylar/sylar/ds/roaring.hh	/^    std::map<uint32_t, Roaring>::const_reverse_iterator map_end;$/;"	m	class:Roaring64MapSetBitReverseIterator	typeref:typename:std::map<uint32_t,Roaring>::const_reverse_iterator	access:protected
Roaring64MapSetBitReverseIterator::map_iter	sylar/sylar/ds/roaring.hh	/^    std::map<uint32_t, Roaring>::const_reverse_iterator map_iter;$/;"	m	class:Roaring64MapSetBitReverseIterator	typeref:typename:std::map<uint32_t,Roaring>::const_reverse_iterator	access:protected
Roaring64MapSetBitReverseIterator::move	sylar/sylar/ds/roaring.hh	/^	bool move(const value_type& x) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const value_type & x)
Roaring64MapSetBitReverseIterator::operator !=	sylar/sylar/ds/roaring.hh	/^    bool operator!=(const type_of_iterator& o) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
Roaring64MapSetBitReverseIterator::operator *	sylar/sylar/ds/roaring.hh	/^    value_type operator*() const {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:value_type	access:public	signature:() const
Roaring64MapSetBitReverseIterator::operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator &operator++() {  \/\/ ++i, must returned inc. value$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:type_of_iterator &	access:public	signature:()
Roaring64MapSetBitReverseIterator::operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator operator++(int) {  \/\/ i++, must return orig. value$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
Roaring64MapSetBitReverseIterator::operator <	sylar/sylar/ds/roaring.hh	/^    bool operator<(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
Roaring64MapSetBitReverseIterator::operator <=	sylar/sylar/ds/roaring.hh	/^    bool operator<=(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
Roaring64MapSetBitReverseIterator::operator =	sylar/sylar/ds/roaring.hh	/^	type_of_iterator &operator=(const type_of_iterator& r) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:type_of_iterator &	access:public	signature:(const type_of_iterator & r)
Roaring64MapSetBitReverseIterator::operator ==	sylar/sylar/ds/roaring.hh	/^	bool operator==(const type_of_iterator& o) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
Roaring64MapSetBitReverseIterator::operator >	sylar/sylar/ds/roaring.hh	/^    bool operator>(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
Roaring64MapSetBitReverseIterator::operator >=	sylar/sylar/ds/roaring.hh	/^    bool operator>=(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
Roaring64MapSetBitReverseIterator::p	sylar/sylar/ds/roaring.hh	/^	const std::map<uint32_t, Roaring>& p;$/;"	m	class:Roaring64MapSetBitReverseIterator	typeref:typename:const std::map<uint32_t,Roaring> &	access:protected
Roaring64MapSetBitReverseIterator::pointer	sylar/sylar/ds/roaring.hh	/^    typedef uint64_t *pointer;$/;"	t	class:Roaring64MapSetBitReverseIterator	typeref:typename:uint64_t *	access:public
Roaring64MapSetBitReverseIterator::reference_type	sylar/sylar/ds/roaring.hh	/^    typedef uint64_t &reference_type;$/;"	t	class:Roaring64MapSetBitReverseIterator	typeref:typename:uint64_t &	access:public
Roaring64MapSetBitReverseIterator::type_of_iterator	sylar/sylar/ds/roaring.hh	/^    typedef Roaring64MapSetBitReverseIterator type_of_iterator;$/;"	t	class:Roaring64MapSetBitReverseIterator	typeref:typename:Roaring64MapSetBitReverseIterator	access:public
Roaring64MapSetBitReverseIterator::value_type	sylar/sylar/ds/roaring.hh	/^    typedef uint64_t value_type;$/;"	t	class:Roaring64MapSetBitReverseIterator	typeref:typename:uint64_t	access:public
Roaring::Roaring	sylar/sylar/ds/roaring.hh	/^    Roaring() {$/;"	f	class:Roaring	access:public	signature:()
Roaring::Roaring	sylar/sylar/ds/roaring.hh	/^    Roaring(Roaring &&r) noexcept {$/;"	f	class:Roaring	access:public	signature:(Roaring && r)
Roaring::Roaring	sylar/sylar/ds/roaring.hh	/^    Roaring(const Roaring &r) {$/;"	f	class:Roaring	access:public	signature:(const Roaring & r)
Roaring::Roaring	sylar/sylar/ds/roaring.hh	/^    Roaring(roaring_bitmap_t *s) noexcept {$/;"	f	class:Roaring	access:public	signature:(roaring_bitmap_t * s)
Roaring::Roaring	sylar/sylar/ds/roaring.hh	/^    Roaring(size_t n, const uint32_t *data) : Roaring() {$/;"	f	class:Roaring	access:public	signature:(size_t n,const uint32_t * data)
Roaring::add	sylar/sylar/ds/roaring.hh	/^    void add(uint32_t x) { roaring_bitmap_add(&roaring, x); }$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(uint32_t x)
Roaring::addChecked	sylar/sylar/ds/roaring.hh	/^    bool addChecked(uint32_t x) { $/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(uint32_t x)
Roaring::addMany	sylar/sylar/ds/roaring.hh	/^    void addMany(size_t n_args, const uint32_t *vals) {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(size_t n_args,const uint32_t * vals)
Roaring::addRange	sylar/sylar/ds/roaring.hh	/^    void addRange(const uint64_t x, const uint64_t y)  {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(const uint64_t x,const uint64_t y)
Roaring::and_cardinality	sylar/sylar/ds/roaring.hh	/^    uint64_t and_cardinality(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:uint64_t	access:public	signature:(const Roaring & r) const
Roaring::andnot_cardinality	sylar/sylar/ds/roaring.hh	/^    uint64_t andnot_cardinality(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:uint64_t	access:public	signature:(const Roaring & r) const
Roaring::begin	sylar/sylar/ds/roaring.hh	/^    const_iterator begin() const;$/;"	p	class:Roaring	typeref:typename:const_iterator	access:public	signature:() const
Roaring::begin	sylar/sylar/ds/roaring.hh	/^inline RoaringSetBitForwardIterator Roaring::begin() const {$/;"	f	class:Roaring	typeref:typename:RoaringSetBitForwardIterator	signature:() const
Roaring::bitmapOf	sylar/sylar/ds/roaring.hh	/^    static Roaring bitmapOf(size_t n, ...) {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(size_t n,...)
Roaring::cardinality	sylar/sylar/ds/roaring.hh	/^    uint64_t cardinality() const {$/;"	f	class:Roaring	typeref:typename:uint64_t	access:public	signature:() const
Roaring::const_iterator	sylar/sylar/ds/roaring.hh	/^    typedef RoaringSetBitForwardIterator const_iterator;$/;"	t	class:Roaring	typeref:typename:RoaringSetBitForwardIterator	access:public
Roaring::const_reverse_iterator	sylar/sylar/ds/roaring.hh	/^    typedef RoaringSetBitReverseIterator const_reverse_iterator;$/;"	t	class:Roaring	typeref:typename:RoaringSetBitReverseIterator	access:public
Roaring::contains	sylar/sylar/ds/roaring.hh	/^    bool contains(uint32_t x) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(uint32_t x) const
Roaring::containsRange	sylar/sylar/ds/roaring.hh	/^    bool containsRange(const uint64_t x, const uint64_t y) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(const uint64_t x,const uint64_t y) const
Roaring::end	sylar/sylar/ds/roaring.hh	/^    const_iterator &end() const;$/;"	p	class:Roaring	typeref:typename:const_iterator &	access:public	signature:() const
Roaring::end	sylar/sylar/ds/roaring.hh	/^inline RoaringSetBitForwardIterator &Roaring::end() const {$/;"	f	class:Roaring	typeref:typename:RoaringSetBitForwardIterator &	signature:() const
Roaring::fastunion	sylar/sylar/ds/roaring.hh	/^    static Roaring fastunion(size_t n, const Roaring **inputs) {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(size_t n,const Roaring ** inputs)
Roaring::flip	sylar/sylar/ds/roaring.hh	/^    void flip(uint64_t range_start, uint64_t range_end) {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(uint64_t range_start,uint64_t range_end)
Roaring::getCopyOnWrite	sylar/sylar/ds/roaring.hh	/^    bool getCopyOnWrite() const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:() const
Roaring::getSizeInBytes	sylar/sylar/ds/roaring.hh	/^    size_t getSizeInBytes(bool portable = true) const {$/;"	f	class:Roaring	typeref:typename:size_t	access:public	signature:(bool portable=true) const
Roaring::intersect	sylar/sylar/ds/roaring.hh	/^    bool intersect(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(const Roaring & r) const
Roaring::isEmpty	sylar/sylar/ds/roaring.hh	/^    bool isEmpty() const { return roaring_bitmap_is_empty(&roaring); }$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:() const
Roaring::isStrictSubset	sylar/sylar/ds/roaring.hh	/^    bool isStrictSubset(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(const Roaring & r) const
Roaring::isSubset	sylar/sylar/ds/roaring.hh	/^    bool isSubset(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(const Roaring & r) const
Roaring::iterate	sylar/sylar/ds/roaring.hh	/^    void iterate(roaring_iterator iterator, void *ptr) const {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(roaring_iterator iterator,void * ptr) const
Roaring::jaccard_index	sylar/sylar/ds/roaring.hh	/^    double jaccard_index(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:double	access:public	signature:(const Roaring & r) const
Roaring::maximum	sylar/sylar/ds/roaring.hh	/^    uint32_t maximum() const { return roaring_bitmap_maximum(&roaring); }$/;"	f	class:Roaring	typeref:typename:uint32_t	access:public	signature:() const
Roaring::minimum	sylar/sylar/ds/roaring.hh	/^    uint32_t minimum() const { return roaring_bitmap_minimum(&roaring); }$/;"	f	class:Roaring	typeref:typename:uint32_t	access:public	signature:() const
Roaring::operator &	sylar/sylar/ds/roaring.hh	/^    Roaring operator&(const Roaring &o) const {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(const Roaring & o) const
Roaring::operator &=	sylar/sylar/ds/roaring.hh	/^    Roaring &operator&=(const Roaring &r) {$/;"	f	class:Roaring	typeref:typename:Roaring &	access:public	signature:(const Roaring & r)
Roaring::operator -	sylar/sylar/ds/roaring.hh	/^    Roaring operator-(const Roaring &o) const {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(const Roaring & o) const
Roaring::operator -=	sylar/sylar/ds/roaring.hh	/^    Roaring &operator-=(const Roaring &r) {$/;"	f	class:Roaring	typeref:typename:Roaring &	access:public	signature:(const Roaring & r)
Roaring::operator =	sylar/sylar/ds/roaring.hh	/^    Roaring &operator=(Roaring &&r) noexcept {$/;"	f	class:Roaring	typeref:typename:Roaring &	access:public	signature:(Roaring && r)
Roaring::operator =	sylar/sylar/ds/roaring.hh	/^    Roaring &operator=(const Roaring &r) {$/;"	f	class:Roaring	typeref:typename:Roaring &	access:public	signature:(const Roaring & r)
Roaring::operator ==	sylar/sylar/ds/roaring.hh	/^    bool operator==(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(const Roaring & r) const
Roaring::operator ^	sylar/sylar/ds/roaring.hh	/^    Roaring operator^(const Roaring &o) const {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(const Roaring & o) const
Roaring::operator ^=	sylar/sylar/ds/roaring.hh	/^    Roaring &operator^=(const Roaring &r) {$/;"	f	class:Roaring	typeref:typename:Roaring &	access:public	signature:(const Roaring & r)
Roaring::operator |	sylar/sylar/ds/roaring.hh	/^    Roaring operator|(const Roaring &o) const {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(const Roaring & o) const
Roaring::operator |=	sylar/sylar/ds/roaring.hh	/^    Roaring &operator|=(const Roaring &r) {$/;"	f	class:Roaring	typeref:typename:Roaring &	access:public	signature:(const Roaring & r)
Roaring::or_cardinality	sylar/sylar/ds/roaring.hh	/^    uint64_t or_cardinality(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:uint64_t	access:public	signature:(const Roaring & r) const
Roaring::printf	sylar/sylar/ds/roaring.hh	/^    void printf() const { roaring_bitmap_printf(&roaring); }$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:() const
Roaring::rangeUint32Array	sylar/sylar/ds/roaring.hh	/^    void rangeUint32Array(uint32_t *ans, size_t offset, size_t limit) const {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(uint32_t * ans,size_t offset,size_t limit) const
Roaring::rank	sylar/sylar/ds/roaring.hh	/^    uint64_t rank(uint32_t x) const { return roaring_bitmap_rank(&roaring, x); }$/;"	f	class:Roaring	typeref:typename:uint64_t	access:public	signature:(uint32_t x) const
Roaring::rbegin	sylar/sylar/ds/roaring.hh	/^    const_reverse_iterator rbegin() const;$/;"	p	class:Roaring	typeref:typename:const_reverse_iterator	access:public	signature:() const
Roaring::rbegin	sylar/sylar/ds/roaring.hh	/^inline RoaringSetBitReverseIterator Roaring::rbegin() const {$/;"	f	class:Roaring	typeref:typename:RoaringSetBitReverseIterator	signature:() const
Roaring::read	sylar/sylar/ds/roaring.hh	/^    static Roaring read(const char *buf, bool portable = true) {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(const char * buf,bool portable=true)
Roaring::readSafe	sylar/sylar/ds/roaring.hh	/^    static Roaring readSafe(const char *buf, size_t maxbytes) {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(const char * buf,size_t maxbytes)
Roaring::remove	sylar/sylar/ds/roaring.hh	/^    void remove(uint32_t x) { roaring_bitmap_remove(&roaring, x); }$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(uint32_t x)
Roaring::removeChecked	sylar/sylar/ds/roaring.hh	/^    bool removeChecked(uint32_t x) {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(uint32_t x)
Roaring::removeRunCompression	sylar/sylar/ds/roaring.hh	/^    bool removeRunCompression() {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:()
Roaring::rend	sylar/sylar/ds/roaring.hh	/^    const_reverse_iterator& rend() const;$/;"	p	class:Roaring	typeref:typename:const_reverse_iterator &	access:public	signature:() const
Roaring::rend	sylar/sylar/ds/roaring.hh	/^inline RoaringSetBitReverseIterator &Roaring::rend() const {$/;"	f	class:Roaring	typeref:typename:RoaringSetBitReverseIterator &	signature:() const
Roaring::roaring	sylar/sylar/ds/roaring.hh	/^    roaring_bitmap_t roaring;$/;"	m	class:Roaring	typeref:typename:roaring_bitmap_t	access:public
Roaring::runOptimize	sylar/sylar/ds/roaring.hh	/^    bool runOptimize() { return roaring_bitmap_run_optimize(&roaring); }$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:()
Roaring::select	sylar/sylar/ds/roaring.hh	/^    bool select(uint32_t rnk, uint32_t *element) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(uint32_t rnk,uint32_t * element) const
Roaring::setCopyOnWrite	sylar/sylar/ds/roaring.hh	/^    void setCopyOnWrite(bool val) {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(bool val)
Roaring::shrinkToFit	sylar/sylar/ds/roaring.hh	/^    size_t shrinkToFit() { return roaring_bitmap_shrink_to_fit(&roaring); }$/;"	f	class:Roaring	typeref:typename:size_t	access:public	signature:()
Roaring::swap	sylar/sylar/ds/roaring.hh	/^    void swap(Roaring &r) { std::swap(r.roaring, roaring); }$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(Roaring & r)
Roaring::toString	sylar/sylar/ds/roaring.hh	/^    std::string toString() const {$/;"	f	class:Roaring	typeref:typename:std::string	access:public	signature:() const
Roaring::toString::iter_data::first_char	sylar/sylar/ds/roaring.hh	/^            char first_char = '{';$/;"	m	struct:Roaring::toString::iter_data	typeref:typename:char	access:public
Roaring::toString::iter_data::str	sylar/sylar/ds/roaring.hh	/^            std::string str;$/;"	m	struct:Roaring::toString::iter_data	typeref:typename:std::string	access:public
Roaring::toUint32Array	sylar/sylar/ds/roaring.hh	/^    void toUint32Array(uint32_t *ans) const {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(uint32_t * ans) const
Roaring::write	sylar/sylar/ds/roaring.hh	/^    size_t write(char *buf, bool portable = true) const {$/;"	f	class:Roaring	typeref:typename:size_t	access:public	signature:(char * buf,bool portable=true) const
Roaring::xor_cardinality	sylar/sylar/ds/roaring.hh	/^    uint64_t xor_cardinality(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:uint64_t	access:public	signature:(const Roaring & r) const
Roaring::~Roaring	sylar/sylar/ds/roaring.hh	/^    ~Roaring() { ra_clear(&roaring.high_low_container); }$/;"	f	class:Roaring	access:public	signature:()
RoaringBitmap	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::RoaringBitmap() {$/;"	f	class:sylar::ds::RoaringBitmap	signature:()
RoaringBitmap	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::RoaringBitmap(const Roaring& b)$/;"	f	class:sylar::ds::RoaringBitmap	signature:(const Roaring & b)
RoaringBitmap	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::RoaringBitmap(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	signature:(const RoaringBitmap & b)
RoaringBitmap	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::RoaringBitmap(uint32_t size) {$/;"	f	class:sylar::ds::RoaringBitmap	signature:(uint32_t size)
RoaringBitmap	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap();$/;"	p	class:sylar::ds::RoaringBitmap	access:public	signature:()
RoaringBitmap	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap(const Roaring& b);$/;"	p	class:sylar::ds::RoaringBitmap	access:private	signature:(const Roaring & b)
RoaringBitmap	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap(const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	access:public	signature:(const RoaringBitmap & b)
RoaringBitmap	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap(uint32_t size);$/;"	p	class:sylar::ds::RoaringBitmap	access:public	signature:(uint32_t size)
RoaringBitmap	sylar/sylar/ds/roaring_bitmap.h	/^class RoaringBitmap {$/;"	c	namespace:sylar::ds
RoaringSetBitForwardIterator	sylar/sylar/ds/roaring.hh	/^    RoaringSetBitForwardIterator(const Roaring &parent,$/;"	f	class:RoaringSetBitForwardIterator	access:public	signature:(const Roaring & parent,bool exhausted=false)
RoaringSetBitForwardIterator	sylar/sylar/ds/roaring.hh	/^class RoaringSetBitForwardIterator final {$/;"	c
RoaringSetBitForwardIterator::RoaringSetBitForwardIterator	sylar/sylar/ds/roaring.hh	/^    RoaringSetBitForwardIterator(const Roaring &parent,$/;"	f	class:RoaringSetBitForwardIterator	access:public	signature:(const Roaring & parent,bool exhausted=false)
RoaringSetBitForwardIterator::difference_type	sylar/sylar/ds/roaring.hh	/^    typedef int32_t difference_type;$/;"	t	class:RoaringSetBitForwardIterator	typeref:typename:int32_t	access:public
RoaringSetBitForwardIterator::equalorlarger	sylar/sylar/ds/roaring.hh	/^    void equalorlarger(uint32_t val) {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:void	access:public	signature:(uint32_t val)
RoaringSetBitForwardIterator::i	sylar/sylar/ds/roaring.hh	/^    roaring_uint32_iterator_t i;$/;"	m	class:RoaringSetBitForwardIterator	typeref:typename:roaring_uint32_iterator_t	access:public
RoaringSetBitForwardIterator::iterator_category	sylar/sylar/ds/roaring.hh	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:RoaringSetBitForwardIterator	typeref:typename:std::forward_iterator_tag	access:public
RoaringSetBitForwardIterator::operator !=	sylar/sylar/ds/roaring.hh	/^    bool operator!=(const RoaringSetBitForwardIterator &o) const {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const RoaringSetBitForwardIterator & o) const
RoaringSetBitForwardIterator::operator *	sylar/sylar/ds/roaring.hh	/^    value_type operator*() const { return i.current_value; }$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:value_type	access:public	signature:() const
RoaringSetBitForwardIterator::operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator &operator++() {  \/\/ ++i, must returned inc. value$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:type_of_iterator &	access:public	signature:()
RoaringSetBitForwardIterator::operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator operator++(int) {  \/\/ i++, must return orig. value$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
RoaringSetBitForwardIterator::operator --	sylar/sylar/ds/roaring.hh	/^    type_of_iterator operator--(int) { \/\/ postfix --$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
RoaringSetBitForwardIterator::operator --	sylar/sylar/ds/roaring.hh	/^    type_of_iterator& operator--() { \/\/ prefix --$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:type_of_iterator &	access:public	signature:()
RoaringSetBitForwardIterator::operator <	sylar/sylar/ds/roaring.hh	/^    bool operator<(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
RoaringSetBitForwardIterator::operator <=	sylar/sylar/ds/roaring.hh	/^    bool operator<=(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
RoaringSetBitForwardIterator::operator ==	sylar/sylar/ds/roaring.hh	/^    bool operator==(const RoaringSetBitForwardIterator &o) const {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const RoaringSetBitForwardIterator & o) const
RoaringSetBitForwardIterator::operator >	sylar/sylar/ds/roaring.hh	/^    bool operator>(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
RoaringSetBitForwardIterator::operator >=	sylar/sylar/ds/roaring.hh	/^    bool operator>=(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
RoaringSetBitForwardIterator::pointer	sylar/sylar/ds/roaring.hh	/^    typedef uint32_t *pointer;$/;"	t	class:RoaringSetBitForwardIterator	typeref:typename:uint32_t *	access:public
RoaringSetBitForwardIterator::reference_type	sylar/sylar/ds/roaring.hh	/^    typedef uint32_t &reference_type;$/;"	t	class:RoaringSetBitForwardIterator	typeref:typename:uint32_t &	access:public
RoaringSetBitForwardIterator::type_of_iterator	sylar/sylar/ds/roaring.hh	/^    typedef RoaringSetBitForwardIterator type_of_iterator;$/;"	t	class:RoaringSetBitForwardIterator	typeref:typename:RoaringSetBitForwardIterator	access:public
RoaringSetBitForwardIterator::value_type	sylar/sylar/ds/roaring.hh	/^    typedef uint32_t value_type;$/;"	t	class:RoaringSetBitForwardIterator	typeref:typename:uint32_t	access:public
RoaringSetBitReverseIterator	sylar/sylar/ds/roaring.hh	/^    RoaringSetBitReverseIterator(const Roaring &parent,$/;"	f	class:RoaringSetBitReverseIterator	access:public	signature:(const Roaring & parent,bool exhausted=false)
RoaringSetBitReverseIterator	sylar/sylar/ds/roaring.hh	/^class RoaringSetBitReverseIterator final {$/;"	c
RoaringSetBitReverseIterator::RoaringSetBitReverseIterator	sylar/sylar/ds/roaring.hh	/^    RoaringSetBitReverseIterator(const Roaring &parent,$/;"	f	class:RoaringSetBitReverseIterator	access:public	signature:(const Roaring & parent,bool exhausted=false)
RoaringSetBitReverseIterator::difference_type	sylar/sylar/ds/roaring.hh	/^    typedef int32_t difference_type;$/;"	t	class:RoaringSetBitReverseIterator	typeref:typename:int32_t	access:public
RoaringSetBitReverseIterator::equalorlarger	sylar/sylar/ds/roaring.hh	/^    void equalorlarger(uint32_t val) {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:void	access:public	signature:(uint32_t val)
RoaringSetBitReverseIterator::i	sylar/sylar/ds/roaring.hh	/^    roaring_uint32_iterator_t i;$/;"	m	class:RoaringSetBitReverseIterator	typeref:typename:roaring_uint32_iterator_t	access:public
RoaringSetBitReverseIterator::iterator_category	sylar/sylar/ds/roaring.hh	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:RoaringSetBitReverseIterator	typeref:typename:std::forward_iterator_tag	access:public
RoaringSetBitReverseIterator::operator !=	sylar/sylar/ds/roaring.hh	/^    bool operator!=(const type_of_iterator &o) const {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o) const
RoaringSetBitReverseIterator::operator *	sylar/sylar/ds/roaring.hh	/^    value_type operator*() const { return i.current_value; }$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:value_type	access:public	signature:() const
RoaringSetBitReverseIterator::operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator &operator++() {  \/\/ ++i, must returned inc. value$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:type_of_iterator &	access:public	signature:()
RoaringSetBitReverseIterator::operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator operator++(int) {  \/\/ i++, must return orig. value$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
RoaringSetBitReverseIterator::operator --	sylar/sylar/ds/roaring.hh	/^    type_of_iterator operator--(int) { \/\/ postfix --$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
RoaringSetBitReverseIterator::operator --	sylar/sylar/ds/roaring.hh	/^    type_of_iterator& operator--() { \/\/ prefix --$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:type_of_iterator &	access:public	signature:()
RoaringSetBitReverseIterator::operator <	sylar/sylar/ds/roaring.hh	/^    bool operator<(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
RoaringSetBitReverseIterator::operator <=	sylar/sylar/ds/roaring.hh	/^    bool operator<=(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
RoaringSetBitReverseIterator::operator ==	sylar/sylar/ds/roaring.hh	/^    bool operator==(const type_of_iterator &o) const {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o) const
RoaringSetBitReverseIterator::operator >	sylar/sylar/ds/roaring.hh	/^    bool operator>(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
RoaringSetBitReverseIterator::operator >=	sylar/sylar/ds/roaring.hh	/^    bool operator>=(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
RoaringSetBitReverseIterator::pointer	sylar/sylar/ds/roaring.hh	/^    typedef uint32_t *pointer;$/;"	t	class:RoaringSetBitReverseIterator	typeref:typename:uint32_t *	access:public
RoaringSetBitReverseIterator::reference_type	sylar/sylar/ds/roaring.hh	/^    typedef uint32_t &reference_type;$/;"	t	class:RoaringSetBitReverseIterator	typeref:typename:uint32_t &	access:public
RoaringSetBitReverseIterator::type_of_iterator	sylar/sylar/ds/roaring.hh	/^    typedef RoaringSetBitReverseIterator type_of_iterator;$/;"	t	class:RoaringSetBitReverseIterator	typeref:typename:RoaringSetBitReverseIterator	access:public
RoaringSetBitReverseIterator::value_type	sylar/sylar/ds/roaring.hh	/^    typedef uint32_t value_type;$/;"	t	class:RoaringSetBitReverseIterator	typeref:typename:uint32_t	access:public
RockBody	sylar/sylar/rock/rock_protocol.h	/^class RockBody {$/;"	c	namespace:sylar
RockConnection	sylar/sylar/rock/rock_stream.cc	/^RockConnection::RockConnection()$/;"	f	class:sylar::RockConnection	signature:()
RockConnection	sylar/sylar/rock/rock_stream.h	/^    RockConnection();$/;"	p	class:sylar::RockConnection	access:public	signature:()
RockConnection	sylar/sylar/rock/rock_stream.h	/^class RockConnection : public RockStream {$/;"	c	namespace:sylar	inherits:RockStream
RockCtx	sylar/sylar/rock/rock_stream.h	/^    struct RockCtx : public Ctx {$/;"	s	class:sylar::RockStream	inherits:Ctx	access:protected
RockMessageDecoder	sylar/sylar/rock/rock_protocol.h	/^class RockMessageDecoder : public MessageDecoder {$/;"	c	namespace:sylar	inherits:MessageDecoder
RockModule	sylar/sylar/module.cc	/^RockModule::RockModule(const std::string& name$/;"	f	class:sylar::RockModule	signature:(const std::string & name,const std::string & version,const std::string & filename)
RockModule	sylar/sylar/module.h	/^    RockModule(const std::string& name$/;"	p	class:sylar::RockModule	access:public	signature:(const std::string & name,const std::string & version,const std::string & filename)
RockModule	sylar/sylar/module.h	/^class RockModule : public Module {$/;"	c	namespace:sylar	inherits:Module
RockMsgHeader	sylar/sylar/rock/rock_protocol.cc	/^RockMsgHeader::RockMsgHeader()$/;"	f	class:sylar::RockMsgHeader	signature:()
RockMsgHeader	sylar/sylar/rock/rock_protocol.h	/^    RockMsgHeader();$/;"	p	struct:sylar::RockMsgHeader	access:public	signature:()
RockMsgHeader	sylar/sylar/rock/rock_protocol.h	/^struct RockMsgHeader {$/;"	s	namespace:sylar
RockNotify	sylar/sylar/rock/rock_protocol.h	/^class RockNotify : public Notify, public RockBody {$/;"	c	namespace:sylar	inherits:Notify,RockBody
RockRequest	sylar/sylar/rock/rock_protocol.h	/^class RockRequest : public Request, public RockBody {$/;"	c	namespace:sylar	inherits:Request,RockBody
RockResponse	sylar/sylar/rock/rock_protocol.h	/^class RockResponse : public Response, public RockBody {$/;"	c	namespace:sylar	inherits:Response,RockBody
RockResult	sylar/sylar/rock/rock_stream.h	/^   RockResult(int32_t _result, int32_t _used, RockResponse::ptr rsp, RockRequest::ptr req)$/;"	f	struct:sylar::RockResult	access:public	signature:(int32_t _result,int32_t _used,RockResponse::ptr rsp,RockRequest::ptr req)
RockResult	sylar/sylar/rock/rock_stream.h	/^struct RockResult {$/;"	s	namespace:sylar
RockSDLoadBalance	sylar/sylar/rock/rock_stream.cc	/^RockSDLoadBalance::RockSDLoadBalance(IServiceDiscovery::ptr sd)$/;"	f	class:sylar::RockSDLoadBalance	signature:(IServiceDiscovery::ptr sd)
RockSDLoadBalance	sylar/sylar/rock/rock_stream.h	/^    RockSDLoadBalance(IServiceDiscovery::ptr sd);$/;"	p	class:sylar::RockSDLoadBalance	access:public	signature:(IServiceDiscovery::ptr sd)
RockSDLoadBalance	sylar/sylar/rock/rock_stream.h	/^class RockSDLoadBalance : public SDLoadBalance {$/;"	c	namespace:sylar	inherits:SDLoadBalance
RockSendCtx	sylar/sylar/rock/rock_stream.h	/^    struct RockSendCtx : public SendCtx {$/;"	s	class:sylar::RockStream	inherits:SendCtx	access:protected
RockServer	sylar/sylar/rock/rock_server.cc	/^RockServer::RockServer(const std::string& type$/;"	f	class:sylar::RockServer	signature:(const std::string & type,sylar::IOManager * worker,sylar::IOManager * io_worker,sylar::IOManager * accept_worker)
RockServer	sylar/sylar/rock/rock_server.h	/^    RockServer(const std::string& type = "rock"$/;"	p	class:sylar::RockServer	access:public	signature:(const std::string & type="",sylar::IOManager * worker=sylar::IOManager::GetThis (),sylar::IOManager * io_worker=sylar::IOManager::GetThis (),sylar::IOManager * accept_worker=sylar::IOManager::GetThis ())
RockServer	sylar/sylar/rock/rock_server.h	/^class RockServer : public TcpServer {$/;"	c	namespace:sylar	inherits:TcpServer
RockSession	sylar/sylar/rock/rock_stream.cc	/^RockSession::RockSession(Socket::ptr sock)$/;"	f	class:sylar::RockSession	signature:(Socket::ptr sock)
RockSession	sylar/sylar/rock/rock_stream.h	/^    RockSession(Socket::ptr sock);$/;"	p	class:sylar::RockSession	access:public	signature:(Socket::ptr sock)
RockSession	sylar/sylar/rock/rock_stream.h	/^class RockSession : public RockStream {$/;"	c	namespace:sylar	inherits:RockStream
RockStream	sylar/sylar/rock/rock_stream.cc	/^RockStream::RockStream(Socket::ptr sock)$/;"	f	class:sylar::RockStream	signature:(Socket::ptr sock)
RockStream	sylar/sylar/rock/rock_stream.h	/^    RockStream(Socket::ptr sock);$/;"	p	class:sylar::RockStream	access:public	signature:(Socket::ptr sock)
RockStream	sylar/sylar/rock/rock_stream.h	/^class RockStream : public sylar::AsyncSocketStream {$/;"	c	namespace:sylar	inherits:sylar::AsyncSocketStream
RoundRobinLoadBalance	sylar/sylar/streams/load_balance.h	/^class RoundRobinLoadBalance : public LoadBalance {$/;"	c	namespace:sylar	inherits:LoadBalance
SDLoadBalance	sylar/sylar/streams/load_balance.cc	/^SDLoadBalance::SDLoadBalance(IServiceDiscovery::ptr sd)$/;"	f	class:sylar::SDLoadBalance	signature:(IServiceDiscovery::ptr sd)
SDLoadBalance	sylar/sylar/streams/load_balance.h	/^    SDLoadBalance(IServiceDiscovery::ptr sd);$/;"	p	class:sylar::SDLoadBalance	access:public	signature:(IServiceDiscovery::ptr sd)
SDLoadBalance	sylar/sylar/streams/load_balance.h	/^class SDLoadBalance {$/;"	c	namespace:sylar
SEND_CLOSE_BY_PEER	sylar/sylar/http/http_connection.h	/^        SEND_CLOSE_BY_PEER = 4,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
SEND_SOCKET_ERROR	sylar/sylar/http/http_connection.h	/^        SEND_SOCKET_ERROR = 5,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
SEQUENCE	sylar/sylar/zk_client.cc	/^const int ZKClient::FlagsType::SEQUENCE  = ZOO_SEQUENCE;$/;"	m	class:sylar::ZKClient::FlagsType	typeref:typename:const int
SEQUENCE	sylar/sylar/zk_client.h	/^        static const int SEQUENCE;  \/\/  = ZOO_SEQUENCE;$/;"	m	class:sylar::ZKClient::FlagsType	typeref:typename:const int	access:public
SERIALIZATION_ARRAY_UINT32	sylar/sylar/ds/roaring.h	/^#define SERIALIZATION_ARRAY_UINT32 /;"	d
SERIALIZATION_CONTAINER	sylar/sylar/ds/roaring.h	/^#define SERIALIZATION_CONTAINER /;"	d
SERIAL_COOKIE	sylar/sylar/ds/roaring.h	/^    SERIAL_COOKIE = 12347,$/;"	e	enum:__anon10207c070703	access:public
SERIAL_COOKIE_NO_RUNCONTAINER	sylar/sylar/ds/roaring.h	/^    SERIAL_COOKIE_NO_RUNCONTAINER = 12346,$/;"	e	enum:__anon10207c070703	access:public
SESSION	sylar/sylar/zk_client.cc	/^const int ZKClient::EventType::SESSION = ZOO_SESSION_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int
SESSION	sylar/sylar/zk_client.h	/^        static const int SESSION; \/\/ = ZOO_SESSION_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int	access:public
SET_BLACKLIST	sylar/sylar/ns/ns_protocol.h	/^    SET_BLACKLIST   = 0x10003,$/;"	e	enum:sylar::ns::NSCommand	access:public
SHARED_CONTAINER_TYPE_CODE	sylar/sylar/ds/roaring.h	/^#define SHARED_CONTAINER_TYPE_CODE /;"	d
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/sylar/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SQLite3	sylar/sylar/db/sqlite3.cc	/^SQLite3::SQLite3(sqlite3* db)$/;"	f	class:sylar::SQLite3	signature:(sqlite3 * db)
SQLite3	sylar/sylar/db/sqlite3.h	/^    SQLite3(sqlite3* db);$/;"	p	class:sylar::SQLite3	access:private	signature:(sqlite3 * db)
SQLite3	sylar/sylar/db/sqlite3.h	/^class SQLite3 : public IDB$/;"	c	namespace:sylar	inherits:IDB,std::enable_shared_from_this<SQLite3>
SQLite3Binder	sylar/sylar/db/sqlite3.h	/^struct SQLite3Binder {$/;"	s	namespace:sylar::__anonbc7bfd090110
SQLite3Binder	sylar/sylar/db/sqlite3.h	/^struct SQLite3Binder<N, Head, Tail...> {$/;"	s	namespace:sylar::__anonbc7bfd090310
SQLite3Data	sylar/sylar/db/sqlite3.cc	/^SQLite3Data::SQLite3Data(std::shared_ptr<SQLite3Stmt> stmt, int err$/;"	f	class:sylar::SQLite3Data	signature:(std::shared_ptr<SQLite3Stmt> stmt,int err,const char * errstr)
SQLite3Data	sylar/sylar/db/sqlite3.h	/^    SQLite3Data(std::shared_ptr<SQLite3Stmt> stmt, int err$/;"	p	class:sylar::SQLite3Data	access:public	signature:(std::shared_ptr<SQLite3Stmt> stmt,int err,const char * errstr)
SQLite3Data	sylar/sylar/db/sqlite3.h	/^class SQLite3Data : public ISQLData {$/;"	c	namespace:sylar	inherits:ISQLData
SQLite3Manager	sylar/sylar/db/sqlite3.cc	/^SQLite3Manager::SQLite3Manager()$/;"	f	class:sylar::SQLite3Manager	signature:()
SQLite3Manager	sylar/sylar/db/sqlite3.h	/^    SQLite3Manager();$/;"	p	class:sylar::SQLite3Manager	access:public	signature:()
SQLite3Manager	sylar/sylar/db/sqlite3.h	/^class SQLite3Manager {$/;"	c	namespace:sylar
SQLite3Mgr	sylar/sylar/db/sqlite3.h	/^typedef sylar::Singleton<SQLite3Manager> SQLite3Mgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<SQLite3Manager>
SQLite3Stmt	sylar/sylar/db/sqlite3.cc	/^SQLite3Stmt::SQLite3Stmt(SQLite3::ptr db)$/;"	f	class:sylar::SQLite3Stmt	signature:(SQLite3::ptr db)
SQLite3Stmt	sylar/sylar/db/sqlite3.h	/^    SQLite3Stmt(SQLite3::ptr db);$/;"	p	class:sylar::SQLite3Stmt	access:protected	signature:(SQLite3::ptr db)
SQLite3Stmt	sylar/sylar/db/sqlite3.h	/^class SQLite3Stmt : public IStmt$/;"	c	namespace:sylar	inherits:IStmt,std::enable_shared_from_this<SQLite3Stmt>
SQLite3Transaction	sylar/sylar/db/sqlite3.cc	/^SQLite3Transaction::SQLite3Transaction(SQLite3::ptr db, bool auto_commit, Type type)$/;"	f	class:sylar::SQLite3Transaction	signature:(SQLite3::ptr db,bool auto_commit,Type type)
SQLite3Transaction	sylar/sylar/db/sqlite3.h	/^    SQLite3Transaction(SQLite3::ptr db$/;"	p	class:sylar::SQLite3Transaction	access:public	signature:(SQLite3::ptr db,bool auto_commit=false,Type type=DEFERRED)
SQLite3Transaction	sylar/sylar/db/sqlite3.h	/^class SQLite3Transaction : public ITransaction {$/;"	c	namespace:sylar	inherits:ITransaction
SSLSocket	sylar/sylar/socket.cc	/^SSLSocket::SSLSocket(int family, int type, int protocol)$/;"	f	class:sylar::SSLSocket	signature:(int family,int type,int protocol)
SSLSocket	sylar/sylar/socket.h	/^    SSLSocket(int family, int type, int protocol = 0);$/;"	p	class:sylar::SSLSocket	access:public	signature:(int family,int type,int protocol=0)
SSLSocket	sylar/sylar/socket.h	/^class SSLSocket : public Socket {$/;"	c	namespace:sylar	inherits:Socket
STATUS	sylar/sylar/db/redis.h	/^    enum STATUS {$/;"	g	class:sylar::FoxRedis	access:public
STATUS	sylar/sylar/db/redis.h	/^    enum STATUS {$/;"	g	class:sylar::FoxRedisCluster	access:public
STRINGIFY	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:	signature:(X)
STRINGIFY	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:	signature:(X)
STRINGIFY_HELPER	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:	signature:(X)
STRINGIFY_HELPER	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:	signature:(X)
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/sylar/Makefile	/^SUFFIXES =$/;"	m
SYLAR_ASSERT	sylar/sylar/macro.h	/^#define SYLAR_ASSERT(/;"	d	signature:(x)
SYLAR_ASSERT2	sylar/sylar/macro.h	/^#define SYLAR_ASSERT2(/;"	d	signature:(x,w)
SYLAR_BIG_ENDIAN	sylar/sylar/endian.h	/^#define SYLAR_BIG_ENDIAN /;"	d
SYLAR_BYTE_ORDER	sylar/sylar/endian.h	/^#define SYLAR_BYTE_ORDER /;"	d
SYLAR_LIKELY	sylar/sylar/macro.h	/^#   define SYLAR_LIKELY(/;"	d	signature:(x)
SYLAR_LITTLE_ENDIAN	sylar/sylar/endian.h	/^#define SYLAR_LITTLE_ENDIAN /;"	d
SYLAR_LOG_DEBUG	sylar/sylar/log.h	/^#define SYLAR_LOG_DEBUG(/;"	d	signature:(logger)
SYLAR_LOG_ERROR	sylar/sylar/log.h	/^#define SYLAR_LOG_ERROR(/;"	d	signature:(logger)
SYLAR_LOG_FATAL	sylar/sylar/log.h	/^#define SYLAR_LOG_FATAL(/;"	d	signature:(logger)
SYLAR_LOG_FMT_DEBUG	sylar/sylar/log.h	/^#define SYLAR_LOG_FMT_DEBUG(/;"	d	signature:(logger,fmt,...)
SYLAR_LOG_FMT_ERROR	sylar/sylar/log.h	/^#define SYLAR_LOG_FMT_ERROR(/;"	d	signature:(logger,fmt,...)
SYLAR_LOG_FMT_FATAL	sylar/sylar/log.h	/^#define SYLAR_LOG_FMT_FATAL(/;"	d	signature:(logger,fmt,...)
SYLAR_LOG_FMT_INFO	sylar/sylar/log.h	/^#define SYLAR_LOG_FMT_INFO(/;"	d	signature:(logger,fmt,...)
SYLAR_LOG_FMT_LEVEL	sylar/sylar/log.h	/^#define SYLAR_LOG_FMT_LEVEL(/;"	d	signature:(logger,level,fmt,...)
SYLAR_LOG_FMT_WARN	sylar/sylar/log.h	/^#define SYLAR_LOG_FMT_WARN(/;"	d	signature:(logger,fmt,...)
SYLAR_LOG_INFO	sylar/sylar/log.h	/^#define SYLAR_LOG_INFO(/;"	d	signature:(logger)
SYLAR_LOG_LEVEL	sylar/sylar/log.h	/^#define SYLAR_LOG_LEVEL(/;"	d	signature:(logger,level)
SYLAR_LOG_NAME	sylar/sylar/log.h	/^#define SYLAR_LOG_NAME(/;"	d	signature:(name)
SYLAR_LOG_ROOT	sylar/sylar/log.h	/^#define SYLAR_LOG_ROOT(/;"	d	signature:()
SYLAR_LOG_WARN	sylar/sylar/log.h	/^#define SYLAR_LOG_WARN(/;"	d	signature:(logger)
SYLAR_UNLIKELY	sylar/sylar/macro.h	/^#   define SYLAR_UNLIKELY(/;"	d	signature:(x)
Scheduler	sylar/sylar/scheduler.cc	/^Scheduler::Scheduler(size_t threads, bool use_caller, const std::string& name)$/;"	f	class:sylar::Scheduler	signature:(size_t threads,bool use_caller,const std::string & name)
Scheduler	sylar/sylar/scheduler.h	/^    Scheduler(size_t threads = 1, bool use_caller = true, const std::string& name = "");$/;"	p	class:sylar::Scheduler	access:public	signature:(size_t threads=1,bool use_caller=true,const std::string & name="")
Scheduler	sylar/sylar/scheduler.h	/^class Scheduler {$/;"	c	namespace:sylar
SchedulerSwitcher	sylar/sylar/scheduler.cc	/^SchedulerSwitcher::SchedulerSwitcher(Scheduler* target) {$/;"	f	class:sylar::SchedulerSwitcher	signature:(Scheduler * target)
SchedulerSwitcher	sylar/sylar/scheduler.h	/^    SchedulerSwitcher(Scheduler* target = nullptr);$/;"	p	class:sylar::SchedulerSwitcher	access:public	signature:(Scheduler * target=nullptr)
SchedulerSwitcher	sylar/sylar/scheduler.h	/^class SchedulerSwitcher : public Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
ScopedLockImpl	sylar/sylar/mutex.h	/^    ScopedLockImpl(T& mutex)$/;"	f	struct:sylar::ScopedLockImpl	access:public	signature:(T & mutex)
ScopedLockImpl	sylar/sylar/mutex.h	/^struct ScopedLockImpl {$/;"	s	namespace:sylar
Semaphore	sylar/sylar/mutex.cc	/^Semaphore::Semaphore(uint32_t count) {$/;"	f	class:sylar::Semaphore	signature:(uint32_t count)
Semaphore	sylar/sylar/mutex.h	/^    Semaphore(uint32_t count = 0);$/;"	p	class:sylar::Semaphore	access:public	signature:(uint32_t count=0)
Semaphore	sylar/sylar/mutex.h	/^class Semaphore : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
SendCtx	sylar/sylar/streams/async_socket_stream.h	/^    struct SendCtx {$/;"	s	class:sylar::AsyncSocketStream	access:protected
ServiceItemInfo	sylar/sylar/streams/service_discovery.h	/^class ServiceItemInfo {$/;"	c	namespace:sylar
Servlet	sylar/sylar/http/servlet.h	/^    Servlet(const std::string& name)$/;"	f	class:sylar::http::Servlet	access:public	signature:(const std::string & name)
Servlet	sylar/sylar/http/servlet.h	/^class Servlet {$/;"	c	namespace:sylar::http
ServletCreator	sylar/sylar/http/servlet.h	/^    ServletCreator() {$/;"	f	class:sylar::http::ServletCreator	access:public	signature:()
ServletCreator	sylar/sylar/http/servlet.h	/^class ServletCreator : public IServletCreator {$/;"	c	namespace:sylar::http	inherits:IServletCreator
ServletDispatch	sylar/sylar/http/servlet.cc	/^ServletDispatch::ServletDispatch()$/;"	f	class:sylar::http::ServletDispatch	signature:()
ServletDispatch	sylar/sylar/http/servlet.h	/^    ServletDispatch();$/;"	p	class:sylar::http::ServletDispatch	access:public	signature:()
ServletDispatch	sylar/sylar/http/servlet.h	/^class ServletDispatch : public Servlet {$/;"	c	namespace:sylar::http	inherits:Servlet
SessionData	sylar/sylar/http/session_data.cc	/^SessionData::SessionData(bool auto_gen)$/;"	f	class:sylar::http::SessionData	signature:(bool auto_gen)
SessionData	sylar/sylar/http/session_data.h	/^    SessionData(bool auto_gen = false);$/;"	p	class:sylar::http::SessionData	access:public	signature:(bool auto_gen=false)
SessionData	sylar/sylar/http/session_data.h	/^class SessionData {$/;"	c	namespace:sylar::http
SessionDataManager	sylar/sylar/http/session_data.h	/^class SessionDataManager {$/;"	c	namespace:sylar::http
SessionDataMgr	sylar/sylar/http/session_data.h	/^typedef sylar::Singleton<SessionDataManager> SessionDataMgr;$/;"	t	namespace:sylar::http	typeref:typename:sylar::Singleton<SessionDataManager>
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(int size) const
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(int size) const
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(int size) const
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(int size) const
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(int size) const
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(int size) const
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(int size) const
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(int size) const
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:(int size) const
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:(int size) const
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:(int size) const
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:(int size) const
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:(int size) const
SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:(int size) const
SetName	sylar/sylar/thread.cc	/^void Thread::SetName(const std::string& name) {$/;"	f	class:sylar::Thread	typeref:typename:void	signature:(const std::string & name)
SetName	sylar/sylar/thread.h	/^    static void SetName(const std::string& name);$/;"	p	class:sylar::Thread	typeref:typename:void	access:public	signature:(const std::string & name)
SetThis	sylar/sylar/fiber.cc	/^void Fiber::SetThis(Fiber* f) {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:(Fiber * f)
SetThis	sylar/sylar/fiber.h	/^    static void SetThis(Fiber* f);$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:(Fiber * f)
SharedArray	sylar/sylar/util.h	/^    SharedArray(const SharedArray& r)$/;"	f	class:sylar::SharedArray	access:public	signature:(const SharedArray & r)
SharedArray	sylar/sylar/util.h	/^    explicit SharedArray(const uint64_t& size = 0, T* p = 0)$/;"	f	class:sylar::SharedArray	access:public	signature:(const uint64_t & size=0,T * p=0)
SharedArray	sylar/sylar/util.h	/^    template<class D> SharedArray(const uint64_t& size, T* p, D d)$/;"	f	class:sylar::SharedArray	access:public	signature:(const uint64_t & size,T * p,D d)
SharedArray	sylar/sylar/util.h	/^class SharedArray {$/;"	c	namespace:sylar
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void Node::SharedCtor() {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:()
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void NodeInfo::SharedCtor() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:()
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void NotifyMessage::SharedCtor() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:()
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void QueryRequest::SharedCtor() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:()
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void QueryResponse::SharedCtor() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:()
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void RegisterInfo::SharedCtor() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:()
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void RegisterRequest::SharedCtor() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:()
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:()
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:()
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:()
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:()
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:()
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:()
SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void Node::SharedDtor() {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void NodeInfo::SharedDtor() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void NotifyMessage::SharedDtor() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void QueryRequest::SharedDtor() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void QueryResponse::SharedDtor() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void RegisterInfo::SharedDtor() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void RegisterRequest::SharedDtor() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:()
SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:()
Singleton	sylar/sylar/singleton.h	/^class Singleton {$/;"	c	namespace:sylar
SingletonPtr	sylar/sylar/singleton.h	/^class SingletonPtr {$/;"	c	namespace:sylar
Slice	sylar/sylar/util.h	/^void Slice(std::vector<std::vector<T> >& dst, const std::vector<T>& src, size_t size) {$/;"	f	namespace:sylar	typeref:typename:void	signature:(std::vector<std::vector<T>> & dst,const std::vector<T> & src,size_t size)
SmtpClient	sylar/sylar/email/smtp.cc	/^SmtpClient::SmtpClient(Socket::ptr sock)$/;"	f	class:sylar::SmtpClient	signature:(Socket::ptr sock)
SmtpClient	sylar/sylar/email/smtp.h	/^    SmtpClient(Socket::ptr sock);$/;"	p	class:sylar::SmtpClient	access:private	signature:(Socket::ptr sock)
SmtpClient	sylar/sylar/email/smtp.h	/^class SmtpClient : public sylar::SocketStream {$/;"	c	namespace:sylar	inherits:sylar::SocketStream
SmtpResult	sylar/sylar/email/smtp.h	/^    SmtpResult(int r, const std::string& m)$/;"	f	struct:sylar::SmtpResult	access:public	signature:(int r,const std::string & m)
SmtpResult	sylar/sylar/email/smtp.h	/^struct SmtpResult {$/;"	s	namespace:sylar
Socket	sylar/sylar/socket.cc	/^Socket::Socket(int family, int type, int protocol)$/;"	f	class:sylar::Socket	signature:(int family,int type,int protocol)
Socket	sylar/sylar/socket.h	/^    Socket(int family, int type, int protocol = 0);$/;"	p	class:sylar::Socket	access:public	signature:(int family,int type,int protocol=0)
Socket	sylar/sylar/socket.h	/^class Socket : public std::enable_shared_from_this<Socket>, Noncopyable {$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<Socket>,Noncopyable
SocketStream	sylar/sylar/streams/socket_stream.cc	/^SocketStream::SocketStream(Socket::ptr sock, bool owner)$/;"	f	class:sylar::SocketStream	signature:(Socket::ptr sock,bool owner)
SocketStream	sylar/sylar/streams/socket_stream.h	/^    SocketStream(Socket::ptr sock, bool owner = true);$/;"	p	class:sylar::SocketStream	access:public	signature:(Socket::ptr sock,bool owner=true)
SocketStream	sylar/sylar/streams/socket_stream.h	/^class SocketStream : public Stream {$/;"	c	namespace:sylar	inherits:Stream
SortLast	sylar/sylar/ds/util.h	/^void SortLast(const T& data, const int& size) {$/;"	f	namespace:sylar::ds	typeref:typename:void	signature:(const T & data,const int & size)
SpeedLimit	sylar/sylar/util.cc	/^SpeedLimit::SpeedLimit(uint32_t speed)$/;"	f	class:sylar::SpeedLimit	signature:(uint32_t speed)
SpeedLimit	sylar/sylar/util.h	/^    SpeedLimit(uint32_t speed);$/;"	p	class:sylar::SpeedLimit	access:public	signature:(uint32_t speed)
SpeedLimit	sylar/sylar/util.h	/^class SpeedLimit {$/;"	c	namespace:sylar
Spinlock	sylar/sylar/mutex.h	/^    Spinlock() {$/;"	f	class:sylar::Spinlock	access:public	signature:()
Spinlock	sylar/sylar/mutex.h	/^class Spinlock : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
StackAllocator	sylar/sylar/fiber.cc	/^using StackAllocator = MallocStackAllocator;$/;"	t	namespace:sylar	typeref:typename:MallocStackAllocator	file:
State	sylar/sylar/fiber.h	/^    enum State {$/;"	g	class:sylar::Fiber	access:public
StateType	sylar/sylar/zk_client.h	/^    class StateType {$/;"	c	class:sylar::ZKClient	access:public
StatusServlet	sylar/sylar/http/servlets/status_servlet.cc	/^StatusServlet::StatusServlet()$/;"	f	class:sylar::http::StatusServlet	signature:()
StatusServlet	sylar/sylar/http/servlets/status_servlet.h	/^    StatusServlet();$/;"	p	class:sylar::http::StatusServlet	access:public	signature:()
StatusServlet	sylar/sylar/http/servlets/status_servlet.h	/^class StatusServlet : public Servlet {$/;"	c	namespace:sylar::http	inherits:Servlet
StdoutLogAppender	sylar/sylar/log.h	/^class StdoutLogAppender : public LogAppender {$/;"	c	namespace:sylar	inherits:LogAppender
Str2Time	sylar/sylar/util.cc	/^time_t Str2Time(const char* str, const char* format) {$/;"	f	namespace:sylar	typeref:typename:time_t	signature:(const char * str,const char * format)
Str2Time	sylar/sylar/util.h	/^time_t Str2Time(const char* str, const char* format = "%Y-%m-%d %H:%M:%S");$/;"	p	namespace:sylar	typeref:typename:time_t	signature:(const char * str,const char * format="")
Strategy	sylar/sylar/streams/zlib_stream.h	/^    enum Strategy {$/;"	g	class:sylar::ZlibStream	access:public
Stream	sylar/sylar/stream.h	/^class Stream {$/;"	c	namespace:sylar
StringDict	sylar/sylar/ds/dict.h	/^class StringDict {$/;"	c	namespace:sylar::ds
StringFormatItem	sylar/sylar/log.cc	/^    StringFormatItem(const std::string& str)$/;"	f	class:sylar::StringFormatItem	file:	access:public	signature:(const std::string & str)
StringFormatItem	sylar/sylar/log.cc	/^class StringFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
StringToHttpMethod	sylar/sylar/http/http.cc	/^HttpMethod StringToHttpMethod(const std::string& m) {$/;"	f	namespace:sylar::http	typeref:typename:HttpMethod	signature:(const std::string & m)
StringToHttpMethod	sylar/sylar/http/http.h	/^HttpMethod StringToHttpMethod(const std::string& m);$/;"	p	namespace:sylar::http	typeref:typename:HttpMethod	signature:(const std::string & m)
StringToWString	sylar/sylar/util.cc	/^std::wstring StringUtil::StringToWString(const std::string& s) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::wstring	signature:(const std::string & s)
StringToWString	sylar/sylar/util.h	/^    static std::wstring StringToWString(const std::string& s);$/;"	p	class:sylar::StringUtil	typeref:typename:std::wstring	access:public	signature:(const std::string & s)
StringUtil	sylar/sylar/util.h	/^class StringUtil {$/;"	c	namespace:sylar
Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(Node* other) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(Node * other)
Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(NodeInfo* other) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(NodeInfo * other)
Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(NotifyMessage* other) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	access:public	signature:(NotifyMessage * other)
Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(QueryRequest* other) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(QueryRequest * other)
Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(QueryResponse* other) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	access:public	signature:(QueryResponse * other)
Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(RegisterInfo* other) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(RegisterInfo * other)
Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(RegisterRequest* other) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	access:public	signature:(RegisterRequest * other)
Symlink	sylar/sylar/util.cc	/^bool FSUtil::Symlink(const std::string& from, const std::string& to) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & from,const std::string & to)
Symlink	sylar/sylar/util.h	/^    static bool Symlink(const std::string& frm, const std::string& to);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & frm,const std::string & to)
TCP	sylar/sylar/socket.h	/^        TCP = SOCK_STREAM,$/;"	e	enum:sylar::Socket::Type	access:public
TERM	sylar/sylar/fiber.h	/^        TERM,$/;"	e	enum:sylar::Fiber::State	access:public
TEXT_FRAME	sylar/sylar/http/ws_session.h	/^        TEXT_FRAME = 1,$/;"	e	enum:sylar::http::WSFrameHead::OPCODE	access:public
THREADED	sylar/sylar/zk_client.h	/^#define THREADED$/;"	d
TICK	sylar/sylar/ns/ns_protocol.h	/^    TICK            = 0x10005,$/;"	e	enum:sylar::ns::NSCommand	access:public
TIMEOUT	sylar/sylar/http/http_connection.h	/^        TIMEOUT = 6,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
TIMEOUT	sylar/sylar/streams/async_socket_stream.h	/^        TIMEOUT = -1,$/;"	e	enum:sylar::AsyncSocketStream::Error	access:public
TIME_OUT	sylar/sylar/db/redis.h	/^        TIME_OUT = 1,$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
TIME_OUT	sylar/sylar/db/redis.h	/^        TIME_OUT = 1,$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
TYPE_BLOB	sylar/sylar/orm/column.h	/^        TYPE_BLOB,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_DOUBLE	sylar/sylar/orm/column.h	/^        TYPE_DOUBLE,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_FLOAT	sylar/sylar/orm/column.h	/^        TYPE_FLOAT,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_INDEX	sylar/sylar/orm/index.h	/^        TYPE_INDEX$/;"	e	enum:sylar::orm::Index::Type	access:public
TYPE_INT16	sylar/sylar/orm/column.h	/^        TYPE_INT16,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_INT32	sylar/sylar/orm/column.h	/^        TYPE_INT32,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_INT64	sylar/sylar/orm/column.h	/^        TYPE_INT64,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_INT8	sylar/sylar/orm/column.h	/^        TYPE_INT8,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_MYSQL	sylar/sylar/orm/table.h	/^        TYPE_MYSQL = 2$/;"	e	enum:sylar::orm::Table::DBType	access:public
TYPE_NULL	sylar/sylar/orm/column.h	/^        TYPE_NULL = 0,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_NULL	sylar/sylar/orm/index.h	/^        TYPE_NULL = 0,$/;"	e	enum:sylar::orm::Index::Type	access:public
TYPE_PK	sylar/sylar/orm/index.h	/^        TYPE_PK,$/;"	e	enum:sylar::orm::Index::Type	access:public
TYPE_SQLITE3	sylar/sylar/orm/table.h	/^        TYPE_SQLITE3 = 1,$/;"	e	enum:sylar::orm::Table::DBType	access:public
TYPE_STRING	sylar/sylar/orm/column.h	/^        TYPE_STRING,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_TEXT	sylar/sylar/orm/column.h	/^        TYPE_TEXT,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_TIMESTAMP	sylar/sylar/orm/column.h	/^        TYPE_TIMESTAMP$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_UINT16	sylar/sylar/orm/column.h	/^        TYPE_UINT16,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_UINT32	sylar/sylar/orm/column.h	/^        TYPE_UINT32,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_UINT64	sylar/sylar/orm/column.h	/^        TYPE_UINT64,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_UINT8	sylar/sylar/orm/column.h	/^        TYPE_UINT8,$/;"	e	enum:sylar::orm::Column::Type	access:public
TYPE_UNIQ	sylar/sylar/orm/index.h	/^        TYPE_UNIQ,$/;"	e	enum:sylar::orm::Index::Type	access:public
TabFormatItem	sylar/sylar/log.cc	/^    TabFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::TabFormatItem	file:	access:public	signature:(const std::string & str="")
TabFormatItem	sylar/sylar/log.cc	/^class TabFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
Table	sylar/sylar/orm/table.h	/^class Table {$/;"	c	namespace:sylar::orm
TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto	sylar/sylar/ns/ns_protobuf.pb.h	/^struct TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto {$/;"	s
TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto::PROTOBUF_SECTION_VARIABLE	sylar/sylar/ns/ns_protobuf.pb.h	/^    PROTOBUF_SECTION_VARIABLE(protodesc_cold);$/;"	p	struct:TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto	typeref:typename:const::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]	access:public	signature:(protodesc_cold)
TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto::PROTOBUF_SECTION_VARIABLE	sylar/sylar/ns/ns_protobuf.pb.h	/^    PROTOBUF_SECTION_VARIABLE(protodesc_cold);$/;"	p	struct:TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto	typeref:typename:const::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]	access:public	signature:(protodesc_cold)
TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto::PROTOBUF_SECTION_VARIABLE	sylar/sylar/ns/ns_protobuf.pb.h	/^    PROTOBUF_SECTION_VARIABLE(protodesc_cold);$/;"	p	struct:TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto	typeref:typename:const::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]	access:public	signature:(protodesc_cold)
TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto::field_metadata	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];$/;"	m	struct:TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto	typeref:typename:const::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata[]	access:public
TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto::offsets	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const uint32_t offsets[];$/;"	m	struct:TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto	typeref:typename:const uint32_t[]	access:public
TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto::serialization_table	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];$/;"	m	struct:TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto	typeref:typename:const::PROTOBUF_NAMESPACE_ID::internal::SerializationTable[]	access:public
TcpServer	sylar/sylar/tcp_server.cc	/^TcpServer::TcpServer(sylar::IOManager* worker,$/;"	f	class:sylar::TcpServer	signature:(sylar::IOManager * worker,sylar::IOManager * io_worker,sylar::IOManager * accept_worker)
TcpServer	sylar/sylar/tcp_server.h	/^    TcpServer(sylar::IOManager* worker = sylar::IOManager::GetThis()$/;"	p	class:sylar::TcpServer	access:public	signature:(sylar::IOManager * worker=sylar::IOManager::GetThis (),sylar::IOManager * io_woker=sylar::IOManager::GetThis (),sylar::IOManager * accept_worker=sylar::IOManager::GetThis ())
TcpServer	sylar/sylar/tcp_server.h	/^class TcpServer : public std::enable_shared_from_this<TcpServer>$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<TcpServer>,Noncopyable
TcpServerConf	sylar/sylar/tcp_server.h	/^struct TcpServerConf {$/;"	s	namespace:sylar
Thread	sylar/sylar/thread.cc	/^Thread::Thread(std::function<void()> cb, const std::string& name)$/;"	f	class:sylar::Thread	signature:(std::function<void ()> cb,const std::string & name)
Thread	sylar/sylar/thread.h	/^    Thread(std::function<void()> cb, const std::string& name);$/;"	p	class:sylar::Thread	access:public	signature:(std::function<void ()> cb,const std::string & name)
Thread	sylar/sylar/thread.h	/^class Thread : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
ThreadIdFormatItem	sylar/sylar/log.cc	/^    ThreadIdFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::ThreadIdFormatItem	file:	access:public	signature:(const std::string & str="")
ThreadIdFormatItem	sylar/sylar/log.cc	/^class ThreadIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
ThreadNameFormatItem	sylar/sylar/log.cc	/^    ThreadNameFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::ThreadNameFormatItem	file:	access:public	signature:(const std::string & str="")
ThreadNameFormatItem	sylar/sylar/log.cc	/^class ThreadNameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
Time2Str	sylar/sylar/util.cc	/^std::string Time2Str(time_t ts, const std::string& format) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(time_t ts,const std::string & format)
Time2Str	sylar/sylar/util.h	/^std::string Time2Str(time_t ts = time(0), const std::string& format = "%Y-%m-%d %H:%M:%S");$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(time_t ts=time (0),const std::string & format="")
TimeCb	sylar/sylar/db/redis.cc	/^void FoxRedis::TimeCb(int fd, short event, void* d) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(int fd,short event,void * d)
TimeCb	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::TimeCb(int fd, short event, void* d) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(int fd,short event,void * d)
TimeCb	sylar/sylar/db/redis.h	/^    static void TimeCb(int fd, short event, void* d);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(int fd,short event,void * d)
TimeCb	sylar/sylar/db/redis.h	/^    static void TimeCb(int fd, short event, void* d);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(int fd,short event,void * d)
TimedCache	sylar/sylar/ds/timed_cache.h	/^    TimedCache(size_t max_size = 0, size_t elasticity = 0$/;"	f	class:sylar::ds::TimedCache	access:public	signature:(size_t max_size=0,size_t elasticity=0,CacheStatus * status=nullptr)
TimedCache	sylar/sylar/ds/timed_cache.h	/^class TimedCache {$/;"	c	namespace:sylar::ds
TimedLruCache	sylar/sylar/ds/timed_lru_cache.h	/^    TimedLruCache(size_t max_size = 0, size_t elasticity = 0$/;"	f	class:sylar::ds::TimedLruCache	access:public	signature:(size_t max_size=0,size_t elasticity=0,CacheStatus * status=nullptr)
TimedLruCache	sylar/sylar/ds/timed_lru_cache.h	/^class TimedLruCache {$/;"	c	namespace:sylar::ds
Timer	sylar/sylar/timer.cc	/^Timer::Timer(uint64_t ms, std::function<void()> cb,$/;"	f	class:sylar::Timer	signature:(uint64_t ms,std::function<void ()> cb,bool recurring,TimerManager * manager)
Timer	sylar/sylar/timer.cc	/^Timer::Timer(uint64_t next)$/;"	f	class:sylar::Timer	signature:(uint64_t next)
Timer	sylar/sylar/timer.h	/^    Timer(uint64_t ms, std::function<void()> cb,$/;"	p	class:sylar::Timer	access:private	signature:(uint64_t ms,std::function<void ()> cb,bool recurring,TimerManager * manager)
Timer	sylar/sylar/timer.h	/^    Timer(uint64_t next);$/;"	p	class:sylar::Timer	access:private	signature:(uint64_t next)
Timer	sylar/sylar/timer.h	/^class Timer : public std::enable_shared_from_this<Timer> {$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<Timer>
TimerManager	sylar/sylar/timer.cc	/^TimerManager::TimerManager() {$/;"	f	class:sylar::TimerManager	signature:()
TimerManager	sylar/sylar/timer.h	/^    TimerManager();$/;"	p	class:sylar::TimerManager	access:public	signature:()
TimerManager	sylar/sylar/timer.h	/^class TimerManager {$/;"	c	namespace:sylar
ToChar	sylar/sylar/util.cc	/^int8_t  TypeUtil::ToChar(const char* str) {$/;"	f	class:sylar::TypeUtil	typeref:typename:int8_t	signature:(const char * str)
ToChar	sylar/sylar/util.cc	/^int8_t  TypeUtil::ToChar(const std::string& str) {$/;"	f	class:sylar::TypeUtil	typeref:typename:int8_t	signature:(const std::string & str)
ToChar	sylar/sylar/util.h	/^    static int8_t ToChar(const char* str);$/;"	p	class:sylar::TypeUtil	typeref:typename:int8_t	access:public	signature:(const char * str)
ToChar	sylar/sylar/util.h	/^    static int8_t ToChar(const std::string& str);$/;"	p	class:sylar::TypeUtil	typeref:typename:int8_t	access:public	signature:(const std::string & str)
ToLower	sylar/sylar/util.cc	/^std::string ToLower(const std::string& name) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & name)
ToLower	sylar/sylar/util.h	/^std::string ToLower(const std::string& name);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & name)
ToString	sylar/sylar/log.cc	/^const char* LogLevel::ToString(LogLevel::Level level) {$/;"	f	class:sylar::LogLevel	typeref:typename:const char *	signature:(LogLevel::Level level)
ToString	sylar/sylar/log.h	/^    static const char* ToString(LogLevel::Level level);$/;"	p	class:sylar::LogLevel	typeref:typename:const char *	access:public	signature:(LogLevel::Level level)
ToString	sylar/sylar/util/json_util.cc	/^std::string JsonUtil::ToString(const Json::Value& json) {$/;"	f	class:sylar::JsonUtil	typeref:typename:std::string	signature:(const Json::Value & json)
ToString	sylar/sylar/util/json_util.h	/^    static std::string ToString(const Json::Value& json);$/;"	p	class:sylar::JsonUtil	typeref:typename:std::string	access:public	signature:(const Json::Value & json)
ToUpper	sylar/sylar/util.cc	/^std::string ToUpper(const std::string& name) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & name)
ToUpper	sylar/sylar/util.h	/^std::string ToUpper(const std::string& name);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & name)
TotalFibers	sylar/sylar/fiber.cc	/^uint64_t Fiber::TotalFibers() {$/;"	f	class:sylar::Fiber	typeref:typename:uint64_t	signature:()
TotalFibers	sylar/sylar/fiber.h	/^    static uint64_t TotalFibers();$/;"	p	class:sylar::Fiber	typeref:typename:uint64_t	access:public	signature:()
Trim	sylar/sylar/util.cc	/^std::string StringUtil::Trim(const std::string& str, const std::string& delimit) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const std::string & str,const std::string & delimit)
Trim	sylar/sylar/util.h	/^    static std::string Trim(const std::string& str, const std::string& delimit = " \\t\\r\\n");$/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const std::string & str,const std::string & delimit="")
TrimLeft	sylar/sylar/util.cc	/^std::string StringUtil::TrimLeft(const std::string& str, const std::string& delimit) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const std::string & str,const std::string & delimit)
TrimLeft	sylar/sylar/util.h	/^    static std::string TrimLeft(const std::string& str, const std::string& delimit = " \\t\\r\\n/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const std::string & str,const std::string & delimit="")
TrimRight	sylar/sylar/util.cc	/^std::string StringUtil::TrimRight(const std::string& str, const std::string& delimit) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const std::string & str,const std::string & delimit)
TrimRight	sylar/sylar/util.h	/^    static std::string TrimRight(const std::string& str, const std::string& delimit = " \\t\\r\\/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const std::string & str,const std::string & delimit="")
TryCmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisUtil::TryCmd(const std::string& name, uint32_t count, const char* fmt, ...) {$/;"	f	class:sylar::RedisUtil	typeref:typename:ReplyPtr	signature:(const std::string & name,uint32_t count,const char * fmt,...)
TryCmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisUtil::TryCmd(const std::string& name, uint32_t count, const std::vector<std::strin/;"	f	class:sylar::RedisUtil	typeref:typename:ReplyPtr	signature:(const std::string & name,uint32_t count,const std::vector<std::string> & args)
TryCmd	sylar/sylar/db/redis.h	/^    static ReplyPtr TryCmd(const std::string& name, uint32_t count, const char* fmt, ...);$/;"	p	class:sylar::RedisUtil	typeref:typename:ReplyPtr	access:public	signature:(const std::string & name,uint32_t count,const char * fmt,...)
TryCmd	sylar/sylar/db/redis.h	/^    static ReplyPtr TryCmd(const std::string& name, uint32_t count, const std::vector<std::strin/;"	p	class:sylar::RedisUtil	typeref:typename:ReplyPtr	access:public	signature:(const std::string & name,uint32_t count,const std::vector<std::string> & args)
TryExecute	sylar/sylar/db/mysql.cc	/^int MySQLUtil::TryExecute(const std::string& name, uint32_t count, const char* format, ...) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:int	signature:(const std::string & name,uint32_t count,const char * format,...)
TryExecute	sylar/sylar/db/mysql.cc	/^int MySQLUtil::TryExecute(const std::string& name, uint32_t count, const std::string& sql) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:int	signature:(const std::string & name,uint32_t count,const std::string & sql)
TryExecute	sylar/sylar/db/mysql.h	/^    static int TryExecute(const std::string& name, uint32_t count, const char* format, ...);$/;"	p	class:sylar::MySQLUtil	typeref:typename:int	access:public	signature:(const std::string & name,uint32_t count,const char * format,...)
TryExecute	sylar/sylar/db/mysql.h	/^    static int TryExecute(const std::string& name, uint32_t count, const char* format, va_list a/;"	p	class:sylar::MySQLUtil	typeref:typename:int	access:public	signature:(const std::string & name,uint32_t count,const char * format,va_list ap)
TryExecute	sylar/sylar/db/mysql.h	/^    static int TryExecute(const std::string& name, uint32_t count, const std::string& sql);$/;"	p	class:sylar::MySQLUtil	typeref:typename:int	access:public	signature:(const std::string & name,uint32_t count,const std::string & sql)
TryQuery	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLUtil::TryQuery(const std::string& name, uint32_t count, const char* format, ./;"	f	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	signature:(const std::string & name,uint32_t count,const char * format,...)
TryQuery	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLUtil::TryQuery(const std::string& name, uint32_t count, const std::string& sq/;"	f	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	signature:(const std::string & name,uint32_t count,const std::string & sql)
TryQuery	sylar/sylar/db/mysql.h	/^    static ISQLData::ptr TryQuery(const std::string& name, uint32_t count, const char* format, ./;"	p	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,uint32_t count,const char * format,...)
TryQuery	sylar/sylar/db/mysql.h	/^    static ISQLData::ptr TryQuery(const std::string& name, uint32_t count, const std::string& sq/;"	p	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,uint32_t count,const std::string & sql)
Type	sylar/sylar/db/redis.h	/^    enum Type {$/;"	g	class:sylar::IRedis	access:public
Type	sylar/sylar/db/sqlite3.h	/^    enum Type {$/;"	g	class:sylar::SQLite3Stmt	access:public
Type	sylar/sylar/db/sqlite3.h	/^    enum Type {$/;"	g	class:sylar::SQLite3Transaction	access:public
Type	sylar/sylar/module.h	/^    enum Type {$/;"	g	class:sylar::Module	access:public
Type	sylar/sylar/orm/column.h	/^    enum Type {$/;"	g	class:sylar::orm::Column	access:public
Type	sylar/sylar/orm/index.h	/^    enum Type {$/;"	g	class:sylar::orm::Index	access:public
Type	sylar/sylar/socket.h	/^    enum Type {$/;"	g	class:sylar::Socket	access:public
Type	sylar/sylar/streams/load_balance.h	/^    enum Type {$/;"	g	class:sylar::ILoadBalance	access:public
Type	sylar/sylar/streams/zlib_stream.h	/^    enum Type {$/;"	g	class:sylar::ZlibStream	access:public
TypeToName	sylar/sylar/util.h	/^const char* TypeToName() {$/;"	f	namespace:sylar	typeref:typename:const char *	signature:()
TypeToString	sylar/sylar/orm/column.cc	/^std::string Column::TypeToString(Type type) {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:(Type type)
TypeToString	sylar/sylar/orm/column.h	/^    static std::string TypeToString(Type type);$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:(Type type)
TypeToString	sylar/sylar/orm/index.cc	/^std::string Index::TypeToString(Type v) {$/;"	f	class:sylar::orm::Index	typeref:typename:std::string	signature:(Type v)
TypeToString	sylar/sylar/orm/index.h	/^    static std::string TypeToString(Type v);$/;"	p	class:sylar::orm::Index	typeref:typename:std::string	access:public	signature:(Type v)
TypeUtil	sylar/sylar/util.h	/^class TypeUtil {$/;"	c	namespace:sylar
U64_DIV_BASE	sylar/sylar/ds/bitmap.h	/^    static const base_type U64_DIV_BASE = (sizeof(uint64_t) \/ sizeof(base_type));$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const base_type	access:private
U64_VALUE_SIZE	sylar/sylar/ds/bitmap.h	/^    static const base_type U64_VALUE_SIZE = (VALUE_SIZE * U64_DIV_BASE);$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const base_type	access:private
UDP	sylar/sylar/socket.h	/^        UDP = SOCK_DGRAM$/;"	e	enum:sylar::Socket::Type	access:public
UINT32_C	sylar/sylar/ds/roaring.h	/^#define UINT32_C(/;"	d	signature:(c)
UINT64_C	sylar/sylar/ds/roaring.h	/^#define UINT64_C(/;"	d	signature:(c)
UNCONNECTED	sylar/sylar/db/redis.h	/^        UNCONNECTED = 0,$/;"	e	enum:sylar::FoxRedis::STATUS	access:public
UNCONNECTED	sylar/sylar/db/redis.h	/^        UNCONNECTED = 0,$/;"	e	enum:sylar::FoxRedisCluster::STATUS	access:public
UNIX	build/CMakeFiles/3.16.3/CMakeCCompiler.cmake	/^  set(UNIX 1)$/;"	v
UNIX	build/CMakeFiles/3.16.3/CMakeCXXCompiler.cmake	/^  set(UNIX 1)$/;"	v
UNIX	sylar/sylar/socket.h	/^        UNIX = AF_UNIX,$/;"	e	enum:sylar::Socket::Family	access:public
UNKNOW	sylar/sylar/log.h	/^        UNKNOW = 0,$/;"	e	enum:sylar::LogLevel::Level	access:public
USEAVX	sylar/sylar/ds/roaring.h	/^#define USEAVX$/;"	d
USEAVX2FORDECODING	sylar/sylar/ds/roaring.h	/^#define USEAVX2FORDECODING /;"	d
USENEON	sylar/sylar/ds/roaring.h	/^#  define USENEON$/;"	d
USESSE4	sylar/sylar/ds/roaring.h	/^#define USESSE4 /;"	d
USESSE4	sylar/sylar/ds/roaring.h	/^#define USESSE4$/;"	d
USE_BMI	sylar/sylar/ds/roaring.h	/^#define USE_BMI /;"	d
UnixAddress	sylar/sylar/address.cc	/^UnixAddress::UnixAddress() {$/;"	f	class:sylar::UnixAddress	signature:()
UnixAddress	sylar/sylar/address.cc	/^UnixAddress::UnixAddress(const std::string& path) {$/;"	f	class:sylar::UnixAddress	signature:(const std::string & path)
UnixAddress	sylar/sylar/address.h	/^    UnixAddress();$/;"	p	class:sylar::UnixAddress	access:public	signature:()
UnixAddress	sylar/sylar/address.h	/^    UnixAddress(const std::string& path);$/;"	p	class:sylar::UnixAddress	access:public	signature:(const std::string & path)
UnixAddress	sylar/sylar/address.h	/^class UnixAddress : public Address {$/;"	c	namespace:sylar	inherits:Address
UnknownAddress	sylar/sylar/address.cc	/^UnknownAddress::UnknownAddress(const sockaddr& addr) {$/;"	f	class:sylar::UnknownAddress	signature:(const sockaddr & addr)
UnknownAddress	sylar/sylar/address.cc	/^UnknownAddress::UnknownAddress(int family) {$/;"	f	class:sylar::UnknownAddress	signature:(int family)
UnknownAddress	sylar/sylar/address.h	/^    UnknownAddress(const sockaddr& addr);$/;"	p	class:sylar::UnknownAddress	access:public	signature:(const sockaddr & addr)
UnknownAddress	sylar/sylar/address.h	/^    UnknownAddress(int family);$/;"	p	class:sylar::UnknownAddress	access:public	signature:(int family)
UnknownAddress	sylar/sylar/address.h	/^class UnknownAddress : public Address {$/;"	c	namespace:sylar	inherits:Address
Unlink	sylar/sylar/util.cc	/^bool FSUtil::Unlink(const std::string& filename, bool exist) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & filename,bool exist)
Unlink	sylar/sylar/util.h	/^    static bool Unlink(const std::string& filename, bool exist = false);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & filename,bool exist=false)
UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(Node* other) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(Node * other)
UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(NodeInfo* other) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(NodeInfo * other)
UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(NotifyMessage* other) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	access:public	signature:(NotifyMessage * other)
UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(QueryRequest* other) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(QueryRequest * other)
UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(QueryResponse* other) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	access:public	signature:(QueryResponse * other)
UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(RegisterInfo* other) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(RegisterInfo * other)
UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(RegisterRequest* other) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	access:public	signature:(RegisterRequest * other)
Uri	sylar/sylar/uri.h	/^    Uri();$/;"	p	class:sylar::Uri	access:public	signature:()
Uri	sylar/sylar/uri.h	/^class Uri {$/;"	c	namespace:sylar
Uri	sylar/sylar/uri.rl.cc	/^Uri::Uri()$/;"	f	class:sylar::Uri	signature:()
UrlDecode	sylar/sylar/util.cc	/^std::string StringUtil::UrlDecode(const std::string& str, bool space_as_plus) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const std::string & str,bool space_as_plus)
UrlDecode	sylar/sylar/util.h	/^    static std::string UrlDecode(const std::string& str, bool space_as_plus = true);$/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const std::string & str,bool space_as_plus=true)
UrlEncode	sylar/sylar/util.cc	/^std::string StringUtil::UrlEncode(const std::string& str, bool space_as_plus) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const std::string & str,bool space_as_plus)
UrlEncode	sylar/sylar/util.h	/^    static std::string UrlEncode(const std::string& str, bool space_as_plus = true);$/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const std::string & str,bool space_as_plus=true)
VALUE_MASK	sylar/sylar/ds/bitmap.h	/^    static const base_type VALUE_MASK = ((base_type)1 << (sizeof(base_type) * 8 - 2));$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const base_type	access:private
VALUE_SIZE	sylar/sylar/ds/bitmap.h	/^    static const uint32_t VALUE_SIZE = sizeof(base_type) * 8 - 2;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const uint32_t	access:private
VERBOSE	build/Makefile	/^VERBOSE = 1$/;"	m
VERBOSE	build/sylar/Makefile	/^VERBOSE = 1$/;"	m
Visit	sylar/sylar/config.cc	/^void Config::Visit(std::function<void(ConfigVarBase::ptr)> cb) {$/;"	f	class:sylar::Config	typeref:typename:void	signature:(std::function<void (ConfigVarBase::ptr)> cb)
Visit	sylar/sylar/config.h	/^    static void Visit(std::function<void(ConfigVarBase::ptr)> cb);$/;"	p	class:sylar::Config	typeref:typename:void	access:public	signature:(std::function<void (ConfigVarBase::ptr)> cb)
WARN	sylar/sylar/log.h	/^        WARN = 3,$/;"	e	enum:sylar::LogLevel::Level	access:public
WARN_UNUSED	sylar/sylar/ds/roaring.h	/^#define WARN_UNUSED /;"	d
WARN_UNUSED	sylar/sylar/ds/roaring.h	/^#define WARN_UNUSED$/;"	d
WEIGHT	sylar/sylar/streams/load_balance.h	/^        WEIGHT = 2,$/;"	e	enum:sylar::ILoadBalance::Type	access:public
WORDS_IN_AVX2_REG	sylar/sylar/ds/roaring.c	/^#define WORDS_IN_AVX2_REG /;"	d	file:
WRITE	sylar/sylar/iomanager.h	/^        WRITE   = 0x4,$/;"	e	enum:sylar::IOManager::Event	access:public
WSConnection	sylar/sylar/http/ws_connection.cc	/^WSConnection::WSConnection(Socket::ptr sock, bool owner) $/;"	f	class:sylar::http::WSConnection	signature:(Socket::ptr sock,bool owner)
WSConnection	sylar/sylar/http/ws_connection.h	/^    WSConnection(Socket::ptr sock, bool owner = true);$/;"	p	class:sylar::http::WSConnection	access:public	signature:(Socket::ptr sock,bool owner=true)
WSConnection	sylar/sylar/http/ws_connection.h	/^class WSConnection : public HttpConnection {$/;"	c	namespace:sylar::http	inherits:HttpConnection
WSFrameHead	sylar/sylar/http/ws_session.h	/^struct WSFrameHead {$/;"	s	namespace:sylar::http
WSFrameMessage	sylar/sylar/http/ws_session.cc	/^WSFrameMessage::WSFrameMessage(int opcode, const std::string& data)$/;"	f	class:sylar::http::WSFrameMessage	signature:(int opcode,const std::string & data)
WSFrameMessage	sylar/sylar/http/ws_session.h	/^    WSFrameMessage(int opcode = 0, const std::string& data = "");$/;"	p	class:sylar::http::WSFrameMessage	access:public	signature:(int opcode=0,const std::string & data="")
WSFrameMessage	sylar/sylar/http/ws_session.h	/^class WSFrameMessage {$/;"	c	namespace:sylar::http
WSPing	sylar/sylar/http/ws_session.cc	/^int32_t WSPing(Stream* stream) {$/;"	f	namespace:sylar::http	typeref:typename:int32_t	signature:(Stream * stream)
WSPing	sylar/sylar/http/ws_session.h	/^int32_t WSPing(Stream* stream);$/;"	p	namespace:sylar::http	typeref:typename:int32_t	signature:(Stream * stream)
WSPong	sylar/sylar/http/ws_session.cc	/^int32_t WSPong(Stream* stream) {$/;"	f	namespace:sylar::http	typeref:typename:int32_t	signature:(Stream * stream)
WSPong	sylar/sylar/http/ws_session.h	/^int32_t WSPong(Stream* stream);$/;"	p	namespace:sylar::http	typeref:typename:int32_t	signature:(Stream * stream)
WSRecvMessage	sylar/sylar/http/ws_session.cc	/^WSFrameMessage::ptr WSRecvMessage(Stream* stream, bool client) {$/;"	f	namespace:sylar::http	typeref:typename:WSFrameMessage::ptr	signature:(Stream * stream,bool client)
WSRecvMessage	sylar/sylar/http/ws_session.h	/^WSFrameMessage::ptr WSRecvMessage(Stream* stream, bool client);$/;"	p	namespace:sylar::http	typeref:typename:WSFrameMessage::ptr	signature:(Stream * stream,bool client)
WSSendMessage	sylar/sylar/http/ws_session.cc	/^int32_t WSSendMessage(Stream* stream, WSFrameMessage::ptr msg, bool client, bool fin) {$/;"	f	namespace:sylar::http	typeref:typename:int32_t	signature:(Stream * stream,WSFrameMessage::ptr msg,bool client,bool fin)
WSSendMessage	sylar/sylar/http/ws_session.h	/^int32_t WSSendMessage(Stream* stream, WSFrameMessage::ptr msg, bool client, bool fin);$/;"	p	namespace:sylar::http	typeref:typename:int32_t	signature:(Stream * stream,WSFrameMessage::ptr msg,bool client,bool fin)
WSServer	sylar/sylar/http/ws_server.cc	/^WSServer::WSServer(sylar::IOManager* worker, sylar::IOManager* io_worker, sylar::IOManager* acce/;"	f	class:sylar::http::WSServer	signature:(sylar::IOManager * worker,sylar::IOManager * io_worker,sylar::IOManager * accept_worker)
WSServer	sylar/sylar/http/ws_server.h	/^    WSServer(sylar::IOManager* worker = sylar::IOManager::GetThis()$/;"	p	class:sylar::http::WSServer	access:public	signature:(sylar::IOManager * worker=sylar::IOManager::GetThis (),sylar::IOManager * io_worker=sylar::IOManager::GetThis (),sylar::IOManager * accept_worker=sylar::IOManager::GetThis ())
WSServer	sylar/sylar/http/ws_server.h	/^class WSServer : public TcpServer {$/;"	c	namespace:sylar::http	inherits:TcpServer
WSServlet	sylar/sylar/http/ws_servlet.h	/^    WSServlet(const std::string& name)$/;"	f	class:sylar::http::WSServlet	access:public	signature:(const std::string & name)
WSServlet	sylar/sylar/http/ws_servlet.h	/^class WSServlet : public Servlet {$/;"	c	namespace:sylar::http	inherits:Servlet
WSServletDispatch	sylar/sylar/http/ws_servlet.cc	/^WSServletDispatch::WSServletDispatch() {$/;"	f	class:sylar::http::WSServletDispatch	signature:()
WSServletDispatch	sylar/sylar/http/ws_servlet.h	/^    WSServletDispatch();$/;"	p	class:sylar::http::WSServletDispatch	access:public	signature:()
WSServletDispatch	sylar/sylar/http/ws_servlet.h	/^class WSServletDispatch : public ServletDispatch {$/;"	c	namespace:sylar::http	inherits:ServletDispatch
WSSession	sylar/sylar/http/ws_session.cc	/^WSSession::WSSession(Socket::ptr sock, bool owner)$/;"	f	class:sylar::http::WSSession	signature:(Socket::ptr sock,bool owner)
WSSession	sylar/sylar/http/ws_session.h	/^    WSSession(Socket::ptr sock, bool owner = true);$/;"	p	class:sylar::http::WSSession	access:public	signature:(Socket::ptr sock,bool owner=true)
WSSession	sylar/sylar/http/ws_session.h	/^class WSSession : public HttpSession {$/;"	c	namespace:sylar::http	inherits:HttpSession
WStringToString	sylar/sylar/util.cc	/^std::string StringUtil::WStringToString(const std::wstring& ws) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const std::wstring & ws)
WStringToString	sylar/sylar/util.h	/^    static std::string WStringToString(const std::wstring& ws);$/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const std::wstring & ws)
WeightLoadBalance	sylar/sylar/streams/load_balance.h	/^class WeightLoadBalance : public LoadBalance {$/;"	c	namespace:sylar	inherits:LoadBalance
WorkerGroup	sylar/sylar/worker.cc	/^WorkerGroup::WorkerGroup(uint32_t batch_size, sylar::Scheduler* s)$/;"	f	class:sylar::WorkerGroup	signature:(uint32_t batch_size,sylar::Scheduler * s)
WorkerGroup	sylar/sylar/worker.h	/^    WorkerGroup(uint32_t batch_size, sylar::Scheduler* s = sylar::Scheduler::GetThis());$/;"	p	class:sylar::WorkerGroup	access:public	signature:(uint32_t batch_size,sylar::Scheduler * s=sylar::Scheduler::GetThis ())
WorkerGroup	sylar/sylar/worker.h	/^class WorkerGroup : Noncopyable, public std::enable_shared_from_this<WorkerGroup> {$/;"	c	namespace:sylar	inherits:Noncopyable,std::enable_shared_from_this<WorkerGroup>
WorkerManager	sylar/sylar/worker.cc	/^WorkerManager::WorkerManager()$/;"	f	class:sylar::WorkerManager	signature:()
WorkerManager	sylar/sylar/worker.h	/^    WorkerManager();$/;"	p	class:sylar::WorkerManager	access:public	signature:()
WorkerManager	sylar/sylar/worker.h	/^class WorkerManager {$/;"	c	namespace:sylar
WorkerMgr	sylar/sylar/worker.h	/^typedef sylar::Singleton<WorkerManager> WorkerMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<WorkerManager>
WriteFixToStreamWithSpeed	sylar/sylar/util.cc	/^bool WriteFixToStreamWithSpeed(std::ostream& os, const char* data,$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::ostream & os,const char * data,const uint64_t & size,const uint64_t & speed)
WriteFixToStreamWithSpeed	sylar/sylar/util.h	/^bool WriteFixToStreamWithSpeed(std::ostream& os, const char* data,$/;"	p	namespace:sylar	typeref:typename:bool	signature:(std::ostream & os,const char * data,const uint64_t & size,const uint64_t & speed=-1)
WriteLock	sylar/sylar/mutex.h	/^    typedef WriteScopedLockImpl<NullMutex> WriteLock;$/;"	t	class:sylar::NullRWMutex	typeref:typename:WriteScopedLockImpl<NullMutex>	access:public
WriteLock	sylar/sylar/mutex.h	/^    typedef WriteScopedLockImpl<RWMutex> WriteLock;$/;"	t	class:sylar::RWMutex	typeref:typename:WriteScopedLockImpl<RWMutex>	access:public
WriteScopedLockImpl	sylar/sylar/mutex.h	/^    WriteScopedLockImpl(T& mutex)$/;"	f	struct:sylar::WriteScopedLockImpl	access:public	signature:(T & mutex)
WriteScopedLockImpl	sylar/sylar/mutex.h	/^struct WriteScopedLockImpl {$/;"	s	namespace:sylar
WriteToStream	sylar/sylar/util.h	/^bool WriteToStream(std::ostream& os, const T& v) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::ostream & os,const T & v)
WriteToStream	sylar/sylar/util.h	/^bool WriteToStream(std::ostream& os, const std::vector<T>& v) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::ostream & os,const std::vector<T> & v)
WriteToStreamWithSpeed	sylar/sylar/util.h	/^bool WriteToStreamWithSpeed(std::ostream& os, const T& v,$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::ostream & os,const T & v,const uint64_t & speed=-1)
WriteToStreamWithSpeed	sylar/sylar/util.h	/^bool WriteToStreamWithSpeed(std::ostream& os, const std::vector<T>& v,$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::ostream & os,const std::vector<T> & v,const uint64_t & speed=-1,const uint64_t & min_duration_ms=10)
XX	sylar/sylar/bytearray.cc	/^#define XX(/;"	d	file:	signature:(type)
XX	sylar/sylar/db/mysql.cc	/^#define XX(/;"	d	file:	signature:(m,t)
XX	sylar/sylar/db/mysql.cc	/^#define XX(/;"	d	file:	signature:(type)
XX	sylar/sylar/db/mysql.h	/^#define XX(/;"	d	signature:(type,type2)
XX	sylar/sylar/db/mysql.h	/^XX(char*, char*);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(char *,char *)
XX	sylar/sylar/db/mysql.h	/^XX(const char*, char*);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(const char *,char *)
XX	sylar/sylar/db/mysql.h	/^XX(double, double&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(double,double &)
XX	sylar/sylar/db/mysql.h	/^XX(float, float&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(float,float &)
XX	sylar/sylar/db/mysql.h	/^XX(int16_t, int16_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(int16_t,int16_t &)
XX	sylar/sylar/db/mysql.h	/^XX(int32_t, int32_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(int32_t,int32_t &)
XX	sylar/sylar/db/mysql.h	/^XX(int64_t, int64_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(int64_t,int64_t &)
XX	sylar/sylar/db/mysql.h	/^XX(int8_t, int8_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(int8_t,int8_t &)
XX	sylar/sylar/db/mysql.h	/^XX(std::string, std::string&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(std::string,std::string &)
XX	sylar/sylar/db/mysql.h	/^XX(uint16_t, uint16_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(uint16_t,uint16_t &)
XX	sylar/sylar/db/mysql.h	/^XX(uint32_t, uint32_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(uint32_t,uint32_t &)
XX	sylar/sylar/db/mysql.h	/^XX(uint64_t, uint64_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(uint64_t,uint64_t &)
XX	sylar/sylar/db/mysql.h	/^XX(uint8_t, uint8_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(uint8_t,uint8_t &)
XX	sylar/sylar/db/sqlite3.h	/^#define XX(/;"	d	signature:(type,type2)
XX	sylar/sylar/db/sqlite3.h	/^XX(char*, char* const);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(char *,char * const)
XX	sylar/sylar/db/sqlite3.h	/^XX(const char*, char* const);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(const char *,char * const)
XX	sylar/sylar/db/sqlite3.h	/^XX(double, double);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(double,double)
XX	sylar/sylar/db/sqlite3.h	/^XX(float, double);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(float,double)
XX	sylar/sylar/db/sqlite3.h	/^XX(int16_t, int32_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(int16_t,int32_t)
XX	sylar/sylar/db/sqlite3.h	/^XX(int32_t, int32_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(int32_t,int32_t)
XX	sylar/sylar/db/sqlite3.h	/^XX(int64_t, int64_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(int64_t,int64_t)
XX	sylar/sylar/db/sqlite3.h	/^XX(int8_t, int32_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(int8_t,int32_t)
XX	sylar/sylar/db/sqlite3.h	/^XX(std::string, std::string);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(std::string,std::string)
XX	sylar/sylar/db/sqlite3.h	/^XX(uint16_t, int32_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(uint16_t,int32_t)
XX	sylar/sylar/db/sqlite3.h	/^XX(uint32_t, int32_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(uint32_t,int32_t)
XX	sylar/sylar/db/sqlite3.h	/^XX(uint64_t, int64_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(uint64_t,int64_t)
XX	sylar/sylar/db/sqlite3.h	/^XX(uint8_t, int32_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(uint8_t,int32_t)
XX	sylar/sylar/email/smtp.cc	/^#define XX(/;"	d	file:	signature:(fun)
XX	sylar/sylar/hook.cc	/^#define XX(/;"	d	file:	signature:(name)
XX	sylar/sylar/http/http.cc	/^#define XX(/;"	d	file:	signature:(code,name,msg)
XX	sylar/sylar/http/http.cc	/^#define XX(/;"	d	file:	signature:(num,name,string)
XX	sylar/sylar/http/http.h	/^#define XX(/;"	d	signature:(code,name,desc)
XX	sylar/sylar/http/http.h	/^#define XX(/;"	d	signature:(num,name,string)
XX	sylar/sylar/http/servlets/status_servlet.cc	/^#define XX(/;"	d	file:	signature:(key)
XX	sylar/sylar/iomanager.cc	/^#define XX(/;"	d	file:	signature:(E)
XX	sylar/sylar/iomanager.cc	/^#define XX(/;"	d	file:	signature:(ctl)
XX	sylar/sylar/log.cc	/^#define XX(/;"	d	file:	signature:(level,v)
XX	sylar/sylar/log.cc	/^#define XX(/;"	d	file:	signature:(name)
XX	sylar/sylar/log.cc	/^#define XX(/;"	d	file:	signature:(str,C)
XX	sylar/sylar/ns/name_server_module.cc	/^#define XX(/;"	d	file:	signature:(info,attr)
XX	sylar/sylar/orm/column.cc	/^#define XX(/;"	d	file:	signature:(a,b)
XX	sylar/sylar/orm/column.cc	/^#define XX(/;"	d	file:	signature:(a,b,c)
XX	sylar/sylar/orm/index.cc	/^#define XX(/;"	d	file:	signature:(a,b)
XX	sylar/sylar/streams/load_balance.cc	/^#define XX(/;"	d	file:	signature:(f)
XX	sylar/sylar/util.cc	/^#define XX(/;"	d	file:	signature:(cpptype,method,valuetype,jsontype)
XX	sylar/tests/test_bytearray.cc	/^#define XX(/;"	d	file:	signature:(type,len,write_fun,read_fun,base_len)
XX	sylar/tests/test_config.cc	/^#define XX(/;"	d	file:	signature:(g_var,name,prefix)
XX	sylar/tests/test_http_server.cc	/^#define XX(/;"	d	file:	signature:(...)
XX	sylar/tests/test_sqlite3.cc	/^#define XX(/;"	d	file:	signature:(...)
XX2	sylar/sylar/http/servlets/status_servlet.cc	/^#define XX2(/;"	d	file:	signature:(key)
XX_M	sylar/tests/test_config.cc	/^#define XX_M(/;"	d	file:	signature:(g_var,name,prefix)
XX_PM	sylar/tests/test_config.cc	/^#define XX_PM(/;"	d	file:	signature:(g_var,prefix)
XmlToString	sylar/sylar/orm/util.cc	/^std::string XmlToString(const tinyxml2::XMLNode& node) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const tinyxml2::XMLNode & node)
XmlToString	sylar/sylar/orm/util.h	/^std::string XmlToString(const tinyxml2::XMLNode& node);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const tinyxml2::XMLNode & node)
YamlToJson	sylar/sylar/util.cc	/^bool YamlToJson(const YAML::Node& ynode, Json::Value& jnode) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(const YAML::Node & ynode,Json::Value & jnode)
YamlToJson	sylar/sylar/util.h	/^bool YamlToJson(const YAML::Node& ynode, Json::Value& jnode);$/;"	p	namespace:sylar	typeref:typename:bool	signature:(const YAML::Node & ynode,Json::Value & jnode)
YieldToHold	sylar/sylar/fiber.cc	/^void Fiber::YieldToHold() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
YieldToHold	sylar/sylar/fiber.h	/^    static void YieldToHold();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
YieldToReady	sylar/sylar/fiber.cc	/^void Fiber::YieldToReady() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
YieldToReady	sylar/sylar/fiber.h	/^    static void YieldToReady();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
ZKClient	sylar/sylar/zk_client.cc	/^ZKClient::ZKClient()$/;"	f	class:sylar::ZKClient	signature:()
ZKClient	sylar/sylar/zk_client.h	/^    ZKClient();$/;"	p	class:sylar::ZKClient	access:public	signature:()
ZKClient	sylar/sylar/zk_client.h	/^class ZKClient : public std::enable_shared_from_this<ZKClient> {$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<ZKClient>
ZKServiceDiscovery	sylar/sylar/streams/service_discovery.cc	/^ZKServiceDiscovery::ZKServiceDiscovery(const std::string& hosts)$/;"	f	class:sylar::ZKServiceDiscovery	signature:(const std::string & hosts)
ZKServiceDiscovery	sylar/sylar/streams/service_discovery.h	/^    ZKServiceDiscovery(const std::string& hosts);$/;"	p	class:sylar::ZKServiceDiscovery	access:public	signature:(const std::string & hosts)
ZKServiceDiscovery	sylar/sylar/streams/service_discovery.h	/^class ZKServiceDiscovery : public IServiceDiscovery$/;"	c	namespace:sylar	inherits:IServiceDiscovery,std::enable_shared_from_this<ZKServiceDiscovery>
ZLIB	sylar/sylar/streams/zlib_stream.h	/^        ZLIB,$/;"	e	enum:sylar::ZlibStream::Type	access:public
ZlibStream	sylar/sylar/streams/zlib_stream.cc	/^ZlibStream::ZlibStream(bool encode, uint32_t buff_size)$/;"	f	class:sylar::ZlibStream	signature:(bool encode,uint32_t buff_size)
ZlibStream	sylar/sylar/streams/zlib_stream.h	/^    ZlibStream(bool encode, uint32_t buff_size = 4096);$/;"	p	class:sylar::ZlibStream	access:public	signature:(bool encode,uint32_t buff_size=4096)
ZlibStream	sylar/sylar/streams/zlib_stream.h	/^class ZlibStream : public Stream {$/;"	c	namespace:sylar	inherits:Stream
_GNU_SOURCE	sylar/sylar/ds/roaring.h	/^#define _GNU_SOURCE$/;"	d
_GetIPv4	sylar/sylar/util.cc	/^std::string _GetIPv4() {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:()
_HookIniter	sylar/sylar/hook.cc	/^    _HookIniter() {$/;"	f	struct:sylar::_HookIniter	file:	access:public	signature:()
_HookIniter	sylar/sylar/hook.cc	/^struct _HookIniter {$/;"	s	namespace:sylar	file:
_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class Node::_Internal {$/;"	c	class:sylar::ns::Node	file:
_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class NodeInfo::_Internal {$/;"	c	class:sylar::ns::NodeInfo	file:
_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class NotifyMessage::_Internal {$/;"	c	class:sylar::ns::NotifyMessage	file:
_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class QueryRequest::_Internal {$/;"	c	class:sylar::ns::QueryRequest	file:
_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class QueryResponse::_Internal {$/;"	c	class:sylar::ns::QueryResponse	file:
_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class RegisterInfo::_Internal {$/;"	c	class:sylar::ns::RegisterInfo	file:
_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class RegisterRequest::_Internal {$/;"	c	class:sylar::ns::RegisterRequest	file:
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContex/;"	f	class:sylar::ns::Node	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseCo/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* NotifyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::Pa/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* QueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::Par/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* QueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::Pa/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* RegisterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::Par/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* RegisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::Node	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::QueryRequest	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::QueryResponse	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* Node::_InternalSerialize($/;"	f	class:sylar::ns::Node	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* NodeInfo::_InternalSerialize($/;"	f	class:sylar::ns::NodeInfo	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* NotifyMessage::_InternalSerialize($/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* QueryRequest::_InternalSerialize($/;"	f	class:sylar::ns::QueryRequest	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* QueryResponse::_InternalSerialize($/;"	f	class:sylar::ns::QueryResponse	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* RegisterInfo::_InternalSerialize($/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* RegisterRequest::_InternalSerialize($/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::Node	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::NodeInfo	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::QueryRequest	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::QueryResponse	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
_NodeInfo_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfoDefaultTypeInternal _NodeInfo_default_i/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfoDefaultTypeInternal
_Node_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeDefaultTypeInternal _Node_default_instance_/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeDefaultTypeInternal
_NotifyMessage_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotifyMessageDefaultTypeInternal _NotifyMessage/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotifyMessageDefaultTypeInternal
_POSIX_C_SOURCE	sylar/sylar/ds/roaring.c	/^#define _POSIX_C_SOURCE /;"	d	file:
_POSIX_C_SOURCE	sylar/sylar/ds/roaring.h	/^#define _POSIX_C_SOURCE /;"	d
_QueryRequest_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryRequestDefaultTypeInternal _QueryRequest_d/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryRequestDefaultTypeInternal
_QueryResponse_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryResponseDefaultTypeInternal _QueryResponse/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryResponseDefaultTypeInternal
_RegisterInfo_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterInfoDefaultTypeInternal _RegisterInfo_d/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterInfoDefaultTypeInternal
_RegisterRequest_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterRequestDefaultTypeInternal _RegisterReq/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterRequestDefaultTypeInternal
_RequestSizeIniter	sylar/sylar/http/http_parser.cc	/^    _RequestSizeIniter() {$/;"	f	struct:sylar::http::__anon90b2dfe80110::_RequestSizeIniter	file:	access:public	signature:()
_RequestSizeIniter	sylar/sylar/http/http_parser.cc	/^struct _RequestSizeIniter {$/;"	s	namespace:sylar::http::__anon90b2dfe80110	file:
_SSLInit	sylar/sylar/socket.cc	/^    _SSLInit() {$/;"	f	struct:sylar::__anonca51b6360110::_SSLInit	file:	access:public	signature:()
_SSLInit	sylar/sylar/socket.cc	/^struct _SSLInit {$/;"	s	namespace:sylar::__anonca51b6360110	file:
_XOPEN_SOURCE	sylar/sylar/ds/roaring.h	/^#define _XOPEN_SOURCE /;"	d
__FD_MANAGER_H__	sylar/sylar/fd_manager.h	/^#define __FD_MANAGER_H__$/;"	d
__HTTP_WS_SERVLET_H__	sylar/sylar/http/ws_servlet.h	/^#define __HTTP_WS_SERVLET_H__$/;"	d
__STDC_FORMAT_MACROS	sylar/sylar/ds/roaring.h	/^#define __STDC_FORMAT_MACROS /;"	d
__SYLAR_ADDRESS_H__	sylar/sylar/address.h	/^#define __SYLAR_ADDRESS_H__$/;"	d
__SYLAR_APPLICATION_H__	sylar/sylar/application.h	/^#define __SYLAR_APPLICATION_H__$/;"	d
__SYLAR_BYTEARRAY_H__	sylar/sylar/bytearray.h	/^#define __SYLAR_BYTEARRAY_H__$/;"	d
__SYLAR_CONFIG_H__	sylar/sylar/config.h	/^#define __SYLAR_CONFIG_H__$/;"	d
__SYLAR_DAEMON_H__	sylar/sylar/daemon.h	/^#define __SYLAR_DAEMON_H__$/;"	d
__SYLAR_DB_DB_H__	sylar/sylar/db/db.h	/^#define __SYLAR_DB_DB_H__$/;"	d
__SYLAR_DB_FOX_THREAD_H__	sylar/sylar/db/fox_thread.h	/^#define __SYLAR_DB_FOX_THREAD_H__$/;"	d
__SYLAR_DB_MYSQL_H__	sylar/sylar/db/mysql.h	/^#define __SYLAR_DB_MYSQL_H__$/;"	d
__SYLAR_DB_REDIS_H__	sylar/sylar/db/redis.h	/^#define __SYLAR_DB_REDIS_H__$/;"	d
__SYLAR_DB_SQLITE3_H__	sylar/sylar/db/sqlite3.h	/^#define __SYLAR_DB_SQLITE3_H__$/;"	d
__SYLAR_DS_ARRAY_H__	sylar/sylar/ds/array.h	/^#define __SYLAR_DS_ARRAY_H__$/;"	d
__SYLAR_DS_BITMAP_H__	sylar/sylar/ds/bitmap.h	/^#define __SYLAR_DS_BITMAP_H__$/;"	d
__SYLAR_DS_CACHE_STATUS_H__	sylar/sylar/ds/cache_status.h	/^#define __SYLAR_DS_CACHE_STATUS_H__$/;"	d
__SYLAR_DS_DICT_H__	sylar/sylar/ds/dict.h	/^#define __SYLAR_DS_DICT_H__$/;"	d
__SYLAR_DS_HASH_MAP2_H__	sylar/sylar/ds/hash_map.h	/^#define __SYLAR_DS_HASH_MAP2_H__$/;"	d
__SYLAR_DS_HASH_MULTIMAP_H__	sylar/sylar/ds/hash_multimap.h	/^#define __SYLAR_DS_HASH_MULTIMAP_H__$/;"	d
__SYLAR_DS_LRU_CACHE_H__	sylar/sylar/ds/lru_cache.h	/^#define __SYLAR_DS_LRU_CACHE_H__$/;"	d
__SYLAR_DS_ROARING_BITMAP_H__	sylar/sylar/ds/roaring_bitmap.h	/^#define __SYLAR_DS_ROARING_BITMAP_H__$/;"	d
__SYLAR_DS_TIMED_CACHE_H__	sylar/sylar/ds/timed_cache.h	/^#define __SYLAR_DS_TIMED_CACHE_H__$/;"	d
__SYLAR_DS_TIMED_LRU_CACHE_H__	sylar/sylar/ds/timed_lru_cache.h	/^#define __SYLAR_DS_TIMED_LRU_CACHE_H__$/;"	d
__SYLAR_DS_UTIL_H__	sylar/sylar/ds/util.h	/^#define __SYLAR_DS_UTIL_H__$/;"	d
__SYLAR_EMAIL_EMAIL_H__	sylar/sylar/email/email.h	/^#define __SYLAR_EMAIL_EMAIL_H__$/;"	d
__SYLAR_EMAIL_SMTP_H__	sylar/sylar/email/smtp.h	/^#define __SYLAR_EMAIL_SMTP_H__$/;"	d
__SYLAR_ENDIAN_H__	sylar/sylar/endian.h	/^#define __SYLAR_ENDIAN_H__$/;"	d
__SYLAR_ENV_H__	sylar/sylar/env.h	/^#define __SYLAR_ENV_H__$/;"	d
__SYLAR_FIBER_H__	sylar/sylar/fiber.h	/^#define __SYLAR_FIBER_H__$/;"	d
__SYLAR_HOOK_H__	sylar/sylar/hook.h	/^#define __SYLAR_HOOK_H__$/;"	d
__SYLAR_HTTP_CONNECTION_H__	sylar/sylar/http/http_connection.h	/^#define __SYLAR_HTTP_CONNECTION_H__$/;"	d
__SYLAR_HTTP_HTTP_H__	sylar/sylar/http/http.h	/^#define __SYLAR_HTTP_HTTP_H__$/;"	d
__SYLAR_HTTP_HTTP_SERVER_H__	sylar/sylar/http/http_server.h	/^#define __SYLAR_HTTP_HTTP_SERVER_H__$/;"	d
__SYLAR_HTTP_PARSER_H__	sylar/sylar/http/http_parser.h	/^#define __SYLAR_HTTP_PARSER_H__$/;"	d
__SYLAR_HTTP_SERVLETS_CONFIG_SERVLET_H__	sylar/sylar/http/servlets/config_servlet.h	/^#define __SYLAR_HTTP_SERVLETS_CONFIG_SERVLET_H__$/;"	d
__SYLAR_HTTP_SERVLETS_STATUS_SERVLET_H__	sylar/sylar/http/servlets/status_servlet.h	/^#define __SYLAR_HTTP_SERVLETS_STATUS_SERVLET_H__$/;"	d
__SYLAR_HTTP_SERVLET_H__	sylar/sylar/http/servlet.h	/^#define __SYLAR_HTTP_SERVLET_H__$/;"	d
__SYLAR_HTTP_SESSION_DATA_H__	sylar/sylar/http/session_data.h	/^#define __SYLAR_HTTP_SESSION_DATA_H__$/;"	d
__SYLAR_HTTP_SESSION_H__	sylar/sylar/http/http_session.h	/^#define __SYLAR_HTTP_SESSION_H__$/;"	d
__SYLAR_HTTP_WS_CONNECTION_H__	sylar/sylar/http/ws_connection.h	/^#define __SYLAR_HTTP_WS_CONNECTION_H__$/;"	d
__SYLAR_HTTP_WS_SERVER_H__	sylar/sylar/http/ws_server.h	/^#define __SYLAR_HTTP_WS_SERVER_H__$/;"	d
__SYLAR_HTTP_WS_SESSION_H__	sylar/sylar/http/ws_session.h	/^#define __SYLAR_HTTP_WS_SESSION_H__$/;"	d
__SYLAR_IOMANAGER_H__	sylar/sylar/iomanager.h	/^#define __SYLAR_IOMANAGER_H__$/;"	d
__SYLAR_LIBRARY_H__	sylar/sylar/library.h	/^#define __SYLAR_LIBRARY_H__$/;"	d
__SYLAR_LOG_H__	sylar/sylar/log.h	/^#define __SYLAR_LOG_H__$/;"	d
__SYLAR_MACRO_H__	sylar/sylar/macro.h	/^#define __SYLAR_MACRO_H__$/;"	d
__SYLAR_MODULE_H__	sylar/sylar/module.h	/^#define __SYLAR_MODULE_H__$/;"	d
__SYLAR_MUTEX_H__	sylar/sylar/mutex.h	/^#define __SYLAR_MUTEX_H__$/;"	d
__SYLAR_NONCOPYABLE_H__	sylar/sylar/noncopyable.h	/^#define __SYLAR_NONCOPYABLE_H__$/;"	d
__SYLAR_NS_NAME_SERVER_MODULE_H__	sylar/sylar/ns/name_server_module.h	/^#define __SYLAR_NS_NAME_SERVER_MODULE_H__$/;"	d
__SYLAR_NS_NS_CLIENT_H__	sylar/sylar/ns/ns_client.h	/^#define __SYLAR_NS_NS_CLIENT_H__$/;"	d
__SYLAR_NS_NS_PROTOCOL_H__	sylar/sylar/ns/ns_protocol.h	/^#define __SYLAR_NS_NS_PROTOCOL_H__$/;"	d
__SYLAR_ORM_COLUMN_H__	sylar/sylar/orm/column.h	/^#define __SYLAR_ORM_COLUMN_H__$/;"	d
__SYLAR_ORM_INDEX_H__	sylar/sylar/orm/index.h	/^#define __SYLAR_ORM_INDEX_H__$/;"	d
__SYLAR_ORM_TABLE_H__	sylar/sylar/orm/table.h	/^#define __SYLAR_ORM_TABLE_H__$/;"	d
__SYLAR_ORM_UTIL_H__	sylar/sylar/orm/util.h	/^#define __SYLAR_ORM_UTIL_H__$/;"	d
__SYLAR_PROTOCOL_H__	sylar/sylar/protocol.h	/^#define __SYLAR_PROTOCOL_H__$/;"	d
__SYLAR_ROCK_ROCK_PROTOCOL_H__	sylar/sylar/rock/rock_protocol.h	/^#define __SYLAR_ROCK_ROCK_PROTOCOL_H__$/;"	d
__SYLAR_ROCK_ROCK_STREAM_H__	sylar/sylar/rock/rock_stream.h	/^#define __SYLAR_ROCK_ROCK_STREAM_H__$/;"	d
__SYLAR_ROCK_SERVER_H__	sylar/sylar/rock/rock_server.h	/^#define __SYLAR_ROCK_SERVER_H__$/;"	d
__SYLAR_SCHEDULER_H__	sylar/sylar/scheduler.h	/^#define __SYLAR_SCHEDULER_H__$/;"	d
__SYLAR_SINGLETON_H__	sylar/sylar/singleton.h	/^#define __SYLAR_SINGLETON_H__$/;"	d
__SYLAR_SOCKET_H__	sylar/sylar/socket.h	/^#define __SYLAR_SOCKET_H__$/;"	d
__SYLAR_SOCKET_STREAM_H__	sylar/sylar/streams/socket_stream.h	/^#define __SYLAR_SOCKET_STREAM_H__$/;"	d
__SYLAR_STREAMS_ASYNC_SOCKET_STREAM_H__	sylar/sylar/streams/async_socket_stream.h	/^#define __SYLAR_STREAMS_ASYNC_SOCKET_STREAM_H__$/;"	d
__SYLAR_STREAMS_SERVICE_DISCOVERY_H__	sylar/sylar/streams/service_discovery.h	/^#define __SYLAR_STREAMS_SERVICE_DISCOVERY_H__$/;"	d
__SYLAR_STREAMS_SOCKET_STREAM_POOL_H__	sylar/sylar/streams/load_balance.h	/^#define __SYLAR_STREAMS_SOCKET_STREAM_POOL_H__$/;"	d
__SYLAR_STREAMS_ZLIB_STREAM_H__	sylar/sylar/streams/zlib_stream.h	/^#define __SYLAR_STREAMS_ZLIB_STREAM_H__$/;"	d
__SYLAR_STREAM_H__	sylar/sylar/stream.h	/^#define __SYLAR_STREAM_H__$/;"	d
__SYLAR_SYLAR_H__	sylar/sylar/sylar.h	/^#define __SYLAR_SYLAR_H__$/;"	d
__SYLAR_TCP_SERVER_H__	sylar/sylar/tcp_server.h	/^#define __SYLAR_TCP_SERVER_H__$/;"	d
__SYLAR_THREAD_H__	sylar/sylar/thread.h	/^#define __SYLAR_THREAD_H__$/;"	d
__SYLAR_TIMER_H__	sylar/sylar/timer.h	/^#define __SYLAR_TIMER_H__$/;"	d
__SYLAR_URI_H__	sylar/sylar/uri.h	/^#define __SYLAR_URI_H__$/;"	d
__SYLAR_UTIL_CRYPTO_UTIL_H__	sylar/sylar/util/crypto_util.h	/^#define __SYLAR_UTIL_CRYPTO_UTIL_H__$/;"	d
__SYLAR_UTIL_HASH_UTIL_H__	sylar/sylar/util/hash_util.h	/^#define __SYLAR_UTIL_HASH_UTIL_H__$/;"	d
__SYLAR_UTIL_H__	sylar/sylar/util.h	/^#define __SYLAR_UTIL_H__$/;"	d
__SYLAR_UTIL_JSON_UTIL_H__	sylar/sylar/util/json_util.h	/^#define __SYLAR_UTIL_JSON_UTIL_H__$/;"	d
__SYLAR_WORKER_H__	sylar/sylar/worker.h	/^#define __SYLAR_WORKER_H__$/;"	d
__SYLAR_ZK_CLIENT_H__	sylar/sylar/zk_client.h	/^#define __SYLAR_ZK_CLIENT_H__$/;"	d
__anon037a23cd0102	sylar/sylar/util.h	/^    T& operator[](std::ptrdiff_t i) const {$/;"	f	class:sylar::SharedArray	file:	access:public	signature:(std::ptrdiff_t i) 
__anon037a23cd0202	sylar/sylar/util.h	/^    T* get() const {$/;"	f	class:sylar::SharedArray	file:	access:public	signature:(std::ptrdiff_t i) 
__anon037a23cd0302	sylar/sylar/util.h	/^    bool unique() const {$/;"	f	class:sylar::SharedArray	file:	access:public	signature:(std::ptrdiff_t i) 
__anon037a23cd0402	sylar/sylar/util.h	/^    long use_count() const {$/;"	f	class:sylar::SharedArray	file:	access:public	signature:(std::ptrdiff_t i) 
__anon07a7fa4a0102	sylar/tests/test_http_server.cc	/^                ,sylar::http::HttpSession::ptr session) {$/;"	f	function:run	file:	signature:(sylar::http::HttpRequest::ptr req ,sylar::http::HttpResponse::ptr rsp ,sylar::http::HttpSession::ptr session) 
__anon07a7fa4a0202	sylar/tests/test_http_server.cc	/^                ,sylar::http::HttpSession::ptr session) {$/;"	f	function:run	file:	signature:(sylar::http::HttpRequest::ptr req ,sylar::http::HttpResponse::ptr rsp ,sylar::http::HttpSession::ptr session) 
__anon07a7fa4a0302	sylar/tests/test_http_server.cc	/^                ,sylar::http::HttpSession::ptr session) {$/;"	f	function:run	file:	signature:(sylar::http::HttpRequest::ptr req ,sylar::http::HttpResponse::ptr rsp ,sylar::http::HttpSession::ptr session) 
__anon10207c070103	sylar/sylar/ds/roaring.h	/^enum { $/;"	g
__anon10207c070203	sylar/sylar/ds/roaring.h	/^enum { ARRAY_LAZY_LOWERBOUND = 1024 };$/;"	g
__anon10207c070303	sylar/sylar/ds/roaring.h	/^enum { RUN_DEFAULT_INIT_SIZE = 0 };$/;"	g
__anon10207c070403	sylar/sylar/ds/roaring.h	/^enum { ARRAY_DEFAULT_INIT_SIZE = 0 };$/;"	g
__anon10207c070503	sylar/sylar/ds/roaring.h	/^enum { DEFAULT_MAX_SIZE = 4096 };$/;"	g
__anon10207c070603	sylar/sylar/ds/roaring.h	/^enum {$/;"	g
__anon10207c070703	sylar/sylar/ds/roaring.h	/^enum {$/;"	g
__anon106ad4760102	sylar/sylar/ds/hash_map.h	/^        oth.rforeach([&tmp](const K& k, const V& v){$/;"	f	function:sylar::ds::HashMap::merge	file:	signature:(const K& k, const V& v)
__anon142ffd4f0102	sylar/sylar/ds/roaring.hh	/^                [](uint32_t value, void *inner_iter_data) -> bool {$/;"	f	function:Roaring::toString	typeref:typename:bool	file:	signature:(uint32_t value, void *inner_iter_data) 
__anon142ffd4f0202	sylar/sylar/ds/roaring.hh	/^               const std::pair<uint32_t, Roaring> &map_entry) {$/;"	f	function:Roaring64Map::cardinality	file:	signature:(uint64_t previous, const std::pair<uint32_t, Roaring> &map_entry) 
__anon142ffd4f0302	sylar/sylar/ds/roaring.hh	/^                           [](const std::pair<uint32_t, Roaring> &map_entry) {$/;"	f	function:Roaring64Map::isEmpty	file:	signature:(const std::pair<uint32_t, Roaring> &map_entry) 
__anon142ffd4f0402	sylar/sylar/ds/roaring.hh	/^                         [](const std::pair<uint32_t, Roaring> &roaring_map_entry) {$/;"	f	function:Roaring64Map::isFull	file:	signature:(const std::pair<uint32_t, Roaring> &roaring_map_entry) 
__anon142ffd4f0502	sylar/sylar/ds/roaring.hh	/^                                 const std::pair<uint32_t, Roaring> &map_entry) {$/;"	f	function:Roaring64Map::toUint64Array	file:	signature:(uint64_t *previous, const std::pair<uint32_t, Roaring> &map_entry) 
__anon142ffd4f0602	sylar/sylar/ds/roaring.hh	/^            [](bool previous, std::pair<const uint32_t, Roaring> &map_entry) {$/;"	f	function:Roaring64Map::removeRunCompression	file:	signature:(bool previous, std::pair<const uint32_t, Roaring> &map_entry) 
__anon142ffd4f0702	sylar/sylar/ds/roaring.hh	/^            [](bool previous, std::pair<const uint32_t, Roaring> &map_entry) {$/;"	f	function:Roaring64Map::runOptimize	file:	signature:(bool previous, std::pair<const uint32_t, Roaring> &map_entry) 
__anon142ffd4f0802	sylar/sylar/ds/roaring.hh	/^                      [=](const std::pair<uint32_t, Roaring> &map_entry) {$/;"	f	function:Roaring64Map::iterate	file:	signature:(const std::pair<uint32_t, Roaring> &map_entry) 
__anon142ffd4f0902	sylar/sylar/ds/roaring.hh	/^            [&buf, portable](const std::pair<uint32_t, Roaring> &map_entry) {$/;"	f	function:Roaring64Map::write	file:	signature:(const std::pair<uint32_t, Roaring> &map_entry) 
__anon142ffd4f0a02	sylar/sylar/ds/roaring.hh	/^                const std::pair<uint32_t, Roaring> &map_entry) {$/;"	f	function:Roaring64Map::getSizeInBytes	file:	signature:(size_t previous, const std::pair<uint32_t, Roaring> &map_entry) 
__anon142ffd4f0b02	sylar/sylar/ds/roaring.hh	/^                      [=](std::pair<const uint32_t, Roaring> &map_entry) {$/;"	f	function:Roaring64Map::setCopyOnWrite	file:	signature:(std::pair<const uint32_t, Roaring> &map_entry) 
__anon142ffd4f0c02	sylar/sylar/ds/roaring.hh	/^                [](uint32_t low_bits, void *inner_iter_data) -> bool {$/;"	f	function:Roaring64Map::printf	typeref:typename:bool	file:	signature:(uint32_t low_bits, void *inner_iter_data) 
__anon142ffd4f0d02	sylar/sylar/ds/roaring.hh	/^                [](const std::pair<uint32_t, Roaring> &map_entry) {$/;"	f	function:Roaring64Map::printf	file:	signature:(const std::pair<uint32_t, Roaring> &map_entry) 
__anon142ffd4f0e02	sylar/sylar/ds/roaring.hh	/^                        [](uint32_t low_bits, void *high_bits) -> bool {$/;"	f	function:Roaring64Map::printf::__anon142ffd4f0d02	typeref:typename:bool	file:	signature:(uint32_t low_bits, void *high_bits) 
__anon142ffd4f0f02	sylar/sylar/ds/roaring.hh	/^                [](uint32_t low_bits, void *inner_iter_data) -> bool {$/;"	f	function:Roaring64Map::toString	typeref:typename:bool	file:	signature:(uint32_t low_bits, void *inner_iter_data) 
__anon142ffd4f1002	sylar/sylar/ds/roaring.hh	/^                    const std::pair<uint32_t, Roaring> &map_entry) {$/;"	f	function:Roaring64Map::toString	file:	signature:( const std::pair<uint32_t, Roaring> &map_entry) 
__anon142ffd4f1102	sylar/sylar/ds/roaring.hh	/^                        [](uint32_t low_bits, void *inner_iter_data) -> bool {$/;"	f	function:Roaring64Map::toString::__anon142ffd4f1002	typeref:typename:bool	file:	signature:(uint32_t low_bits, void *inner_iter_data) 
__anon1eebf0c70102	sylar/sylar/worker.cc	/^            n->schedule([](){});$/;"	f	function:sylar::WorkerManager::stop	file:	signature:()
__anon27886ee00102	sylar/sylar/iomanager.cc	/^    std::shared_ptr<epoll_event> shared_events(events, [](epoll_event* ptr){$/;"	f	function:sylar::IOManager::idle	file:	signature:(epoll_event* ptr)
__anon2ac126f80110	sylar/sylar/util/crypto_util.cc	/^namespace {$/;"	n	namespace:sylar	file:
__anon2b5b520a0102	sylar/sylar/tcp_server.cc	/^    m_acceptWorker->schedule([this, self]() {$/;"	f	function:sylar::TcpServer::stop	file:	signature:() 
__anon2b661ea00102	sylar/sylar/bytearray.cc	/^    std::shared_ptr<char> buff(new char[m_baseSize], [](char* ptr) { delete[] ptr;});$/;"	f	function:sylar::ByteArray::readFromFile	file:	signature:(char* ptr) 
__anon2ceae8eb0102	sylar/sylar/http/http_connection.cc	/^            new char[buff_size + 1], [](char* ptr){$/;"	f	function:sylar::http::HttpConnection::recvResponse	file:	signature:(char* ptr)
__anon35c01ee30102	sylar/tests/test_http_connection.cc	/^    sylar::IOManager::GetThis()->addTimer(1000, [pool](){$/;"	f	function:test_pool	file:	signature:()
__anon35c01ee30202	sylar/tests/test_http_connection.cc	/^    sylar::IOManager::GetThis()->addTimer(1000, [pool](){$/;"	f	function:test_https	file:	signature:()
__anon44429d050102	sylar/tests/test_hook.cc	/^    iom.schedule([](){$/;"	f	function:test_sleep	file:	signature:()
__anon44429d050202	sylar/tests/test_hook.cc	/^    iom.schedule([](){$/;"	f	function:test_sleep	file:	signature:()
__anon452fd6830102	sylar/tests/test_rock.cc	/^    sylar::IOManager::GetThis()->addTimer(1000, [](){$/;"	f	function:run	file:	signature:()
__anon4c0709990102	sylar/sylar/db/redis.cc	/^                sylar::FoxThreadMgr::GetInstance()->dispatch("redis", [this, conf, name, &done](/;"	f	function:sylar::RedisManager::init	file:	signature:()
__anon4c0709990202	sylar/sylar/db/redis.cc	/^                sylar::FoxThreadMgr::GetInstance()->dispatch("redis", [this, conf, name, &done](/;"	f	function:sylar::RedisManager::init	file:	signature:()
__anon52899a540102	sylar/tests/test_ws_server.cc	/^                  ,sylar::http::WSSession::ptr session) {$/;"	f	function:run	file:	signature:(sylar::http::HttpRequest::ptr header ,sylar::http::WSFrameMessage::ptr msg ,sylar::http::WSSession::ptr session) 
__anon6ba9cf1c0102	sylar/tests/test_service_discovery.cc	/^    iom.addTimer(1000, [](){$/;"	f	function:main	file:	signature:()
__anon76025de80102	sylar/tests/test_zookeeper.cc	/^        iom.addTimer(1115000, [client](){client->close();});$/;"	f	function:main	file:	signature:()
__anon76025de80202	sylar/tests/test_zookeeper.cc	/^        iom.addTimer(5000, [](){}, true);$/;"	f	function:main	file:	signature:()
__anon7aa2b95f0102	sylar/sylar/http/http_session.cc	/^            new char[buff_size], [](char* ptr){$/;"	f	function:sylar::http::HttpSession::recvRequest	file:	signature:(char* ptr)
__anon7ecbc2de0102	sylar/sylar/hook.cc	/^        g_tcp_connect_timeout->addListener([](const int& old_value, const int& new_value){$/;"	f	function:sylar::_HookIniter::_HookIniter	file:	signature:(const int& old_value, const int& new_value)
__anon7ecbc2de0202	sylar/sylar/hook.cc	/^            timer = iom->addConditionTimer(to, [winfo, fd, iom, event]() {$/;"	f	function:do_io	file:	signature:() 
__anon7ecbc2de0302	sylar/sylar/hook.cc	/^        timer = iom->addConditionTimer(timeout_ms, [winfo, fd, iom]() {$/;"	f	function:connect_with_timeout	file:	signature:() 
__anon835d8e650102	sylar/sylar/rock/rock_stream.cc	/^    sylar::WorkerMgr::GetInstance()->schedule("service_io", [conn, addr](){$/;"	f	function:sylar::create_rock_stream	file:	signature:()
__anon90b2dfe80110	sylar/sylar/http/http_parser.cc	/^namespace {$/;"	n	namespace:sylar::http	file:
__anon90b2dfe80202	sylar/sylar/http/http_parser.cc	/^                [](const uint64_t& ov, const uint64_t& nv){$/;"	f	function:sylar::http::__anon90b2dfe80110::_RequestSizeIniter::_RequestSizeIniter	file:	signature:(const uint64_t& ov, const uint64_t& nv)
__anon90b2dfe80302	sylar/sylar/http/http_parser.cc	/^                [](const uint64_t& ov, const uint64_t& nv){$/;"	f	function:sylar::http::__anon90b2dfe80110::_RequestSizeIniter::_RequestSizeIniter	file:	signature:(const uint64_t& ov, const uint64_t& nv)
__anon90b2dfe80402	sylar/sylar/http/http_parser.cc	/^                [](const uint64_t& ov, const uint64_t& nv){$/;"	f	function:sylar::http::__anon90b2dfe80110::_RequestSizeIniter::_RequestSizeIniter	file:	signature:(const uint64_t& ov, const uint64_t& nv)
__anon90b2dfe80502	sylar/sylar/http/http_parser.cc	/^                [](const uint64_t& ov, const uint64_t& nv){$/;"	f	function:sylar::http::__anon90b2dfe80110::_RequestSizeIniter::_RequestSizeIniter	file:	signature:(const uint64_t& ov, const uint64_t& nv)
__anon97532efd0102	sylar/sylar/http/servlets/config_servlet.cc	/^    sylar::Config::Visit([&node](ConfigVarBase::ptr base) {$/;"	f	function:sylar::http::ConfigServlet::handle	file:	signature:(ConfigVarBase::ptr base) 
__anon9b5d69720102	sylar/sylar/orm/table.cc	/^    std::sort(cols.begin(), cols.end(), [](const Column::ptr& a, const Column::ptr& b){$/;"	f	function:sylar::orm::Table::gen_inc	file:	signature:(const Column::ptr& a, const Column::ptr& b)
__anon9b5d69720202	sylar/sylar/orm/table.cc	/^    std::sort(cols.begin(), cols.end(), [](const Column::ptr& a, const Column::ptr& b){$/;"	f	function:sylar::orm::Table::gen_src	file:	signature:(const Column::ptr& a, const Column::ptr& b)
__anona650b9670102	sylar/tests/test_iomanager.cc	/^        sylar::IOManager::GetThis()->addEvent(sock, sylar::IOManager::READ, [](){$/;"	f	function:test_fiber	file:	signature:()
__anona650b9670202	sylar/tests/test_iomanager.cc	/^        sylar::IOManager::GetThis()->addEvent(sock, sylar::IOManager::WRITE, [](){$/;"	f	function:test_fiber	file:	signature:()
__anona650b9670302	sylar/tests/test_iomanager.cc	/^    s_timer = iom.addTimer(1000, [](){$/;"	f	function:test_timer	file:	signature:()
__anona953e8480102	sylar/tests/test_daemon.cc	/^    timer = iom.addTimer(1000, [](){$/;"	f	function:server_main	file:	signature:()
__anonac1462a10102	sylar/sylar/application.cc	/^    m_mainIOManager->addTimer(2000, [](){$/;"	f	function:sylar::Application::main	file:	signature:()
__anonb8e76c1a0110	sylar/sylar/db/mysql.h	/^namespace {$/;"	n	namespace:sylar
__anonb8e76c1a0210	sylar/sylar/db/mysql.h	/^namespace {$/;"	n	namespace:sylar
__anonbc7bfd090110	sylar/sylar/db/sqlite3.h	/^namespace {$/;"	n	namespace:sylar
__anonbc7bfd090210	sylar/sylar/db/sqlite3.h	/^namespace {$/;"	n	namespace:sylar
__anonbc7bfd090310	sylar/sylar/db/sqlite3.h	/^namespace {$/;"	n	namespace:sylar
__anonc323c4230102	sylar/sylar/streams/service_discovery.cc	/^    m_timer = sylar::IOManager::GetThis()->addTimer(60 * 1000, [self, this](){$/;"	f	function:sylar::ZKServiceDiscovery::start	file:	signature:()
__anonc478b84a0102	sylar/tests/test_config.cc	/^    g_person->addListener([](const Person& old_value, const Person& new_value){$/;"	f	function:test_class	file:	signature:(const Person& old_value, const Person& new_value)
__anonc478b84a0202	sylar/tests/test_config.cc	/^    sylar::Config::Visit([](sylar::ConfigVarBase::ptr var) {$/;"	f	function:main	file:	signature:(sylar::ConfigVarBase::ptr var) 
__anonc6bde2260102	sylar/examples/echo_udp_client.cc	/^    sylar::IOManager::GetThis()->schedule([sock](){$/;"	f	function:run	file:	signature:()
__anonc90150740102	sylar/sylar/ds/array.h	/^    const T& operator[](uint64_t idx) const {$/;"	f	class:sylar::ds::Array	file:	access:public	signature:(uint64_t idx) 
__anonca51b6360110	sylar/sylar/socket.cc	/^namespace {$/;"	n	namespace:sylar	file:
__anoncd3540ac0102	sylar/tests/test_nameserver.cc	/^            sylar::IOManager::GetThis()->addTimer(3000, [conn, i](){$/;"	f	function:run	file:	signature:()
__anond0e9e3700103	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::Node	typeref:typename:int	access:public
__anond0e9e3700203	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::RegisterInfo	typeref:typename:int	access:public
__anond0e9e3700303	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::RegisterRequest	typeref:typename:int	access:public
__anond0e9e3700403	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::QueryRequest	typeref:typename:int	access:public
__anond0e9e3700503	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::NodeInfo	typeref:typename:int	access:public
__anond0e9e3700603	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::QueryResponse	typeref:typename:int	access:public
__anond0e9e3700703	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::NotifyMessage	typeref:typename:int	access:public
__anond374e7d00102	sylar/sylar/rock/rock_server.cc	/^            [session](Module::ptr m) {$/;"	f	function:sylar::RockServer::handleClient	file:	signature:(Module::ptr m) 
__anond374e7d00202	sylar/sylar/rock/rock_server.cc	/^        [](AsyncSocketStream::ptr stream) {$/;"	f	function:sylar::RockServer::handleClient	file:	signature:(AsyncSocketStream::ptr stream) 
__anond374e7d00302	sylar/sylar/rock/rock_server.cc	/^                    [stream](Module::ptr m) {$/;"	f	function:sylar::RockServer::handleClient::__anond374e7d00202	file:	signature:(Module::ptr m) 
__anond374e7d00402	sylar/sylar/rock/rock_server.cc	/^           ,sylar::RockStream::ptr conn)->bool {$/;"	f	function:sylar::RockServer::handleClient	typeref:typename:bool	file:	signature:(sylar::RockRequest::ptr req ,sylar::RockResponse::ptr rsp ,sylar::RockStream::ptr conn)
__anond374e7d00502	sylar/sylar/rock/rock_server.cc	/^                    [&rt, req, rsp, conn](Module::ptr m) {$/;"	f	function:sylar::RockServer::handleClient::__anond374e7d00402	file:	signature:(Module::ptr m) 
__anond374e7d00602	sylar/sylar/rock/rock_server.cc	/^           ,sylar::RockStream::ptr conn)->bool {$/;"	f	function:sylar::RockServer::handleClient	typeref:typename:bool	file:	signature:(sylar::RockNotify::ptr nty ,sylar::RockStream::ptr conn)
__anond374e7d00702	sylar/sylar/rock/rock_server.cc	/^                    [&rt, nty, conn](Module::ptr m) {$/;"	f	function:sylar::RockServer::handleClient::__anond374e7d00602	file:	signature:(Module::ptr m) 
__anond5d4ef180110	sylar/sylar/db/mysql.cc	/^namespace {$/;"	n	namespace:sylar	file:
__anonda7e01420110	sylar/sylar/singleton.h	/^namespace {$/;"	n	namespace:sylar
__anonee1f21ef0102	sylar/sylar/log.cc	/^                    const std::set<LogDefine>& new_value){$/;"	f	function:sylar::LogIniter::LogIniter	file:	signature:(const std::set<LogDefine>& old_value, const std::set<LogDefine>& new_value)
__anonee26512e010a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::NodeDefaultTypeInternal	file:	access:public
__anonee26512e020a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::RegisterInfoDefaultTypeInternal	file:	access:public
__anonee26512e030a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::RegisterRequestDefaultTypeInternal	file:	access:public
__anonee26512e040a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::QueryRequestDefaultTypeInternal	file:	access:public
__anonee26512e050a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::NodeInfoDefaultTypeInternal	file:	access:public
__anonee26512e060a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::QueryResponseDefaultTypeInternal	file:	access:public
__anonee26512e070a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::NotifyMessageDefaultTypeInternal	file:	access:public
__anonf0b69f800102	sylar/sylar/streams/load_balance.cc	/^        sylar::WorkerMgr::GetInstance()->schedule("service_io", [stream](){$/;"	f	function:sylar::LoadBalanceItem::close	file:	signature:()
__builtin_clzll	sylar/sylar/ds/roaring.h	/^static inline int __builtin_clzll(unsigned long long input_num) {$/;"	f	typeref:typename:int	signature:(unsigned long long input_num)
__builtin_ctzll	sylar/sylar/ds/roaring.h	/^static inline int __builtin_ctzll(unsigned long long input_num) {$/;"	f	typeref:typename:int	signature:(unsigned long long input_num)
__builtin_popcountll	sylar/sylar/ds/roaring.h	/^static inline int __builtin_popcountll(unsigned long long input_num) {$/;"	f	typeref:typename:int	signature:(unsigned long long input_num)
__builtin_unreachable	sylar/sylar/ds/roaring.h	/^#define __builtin_unreachable(/;"	d	signature:()
__log_init	sylar/sylar/log.cc	/^static LogIniter __log_init;$/;"	v	namespace:sylar	typeref:typename:LogIniter	file:
__lstat	sylar/sylar/util.cc	/^static int __lstat(const char* file, struct stat* st = nullptr) {$/;"	f	namespace:sylar	typeref:typename:int	file:	signature:(const char * file,struct stat * st=nullptr)
__mkdir	sylar/sylar/util.cc	/^static int __mkdir(const char* dirname) {$/;"	f	namespace:sylar	typeref:typename:int	file:	signature:(const char * dirname)
__restrict__	sylar/sylar/ds/roaring.h	/^#define __restrict__ /;"	d
_check_lib_search_error	sylar/cmake/FindMySQL.cmake	/^macro(_check_lib_search_error _lib_dir_var _lib_var _exta_err_string)$/;"	m
_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {$/;"	m	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfo::_class_data_ = {$/;"	m	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyMessage::_class_data_ = {$/;"	m	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryRequest::_class_data_ = {$/;"	m	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryResponse::_class_data_ = {$/;"	m	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterInfo::_class_data_ = {$/;"	m	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterRequest::_class_data_ = {$/;"	m	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::Node	typeref:typename:const ClassData	access:public
_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::NodeInfo	typeref:typename:const ClassData	access:public
_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::NotifyMessage	typeref:typename:const ClassData	access:public
_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::QueryRequest	typeref:typename:const ClassData	access:public
_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::QueryResponse	typeref:typename:const ClassData	access:public
_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::RegisterInfo	typeref:typename:const ClassData	access:public
_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::RegisterRequest	typeref:typename:const ClassData	access:public
_dynamic_libs	sylar/cmake/FindMySQL.cmake	/^  set(_dynamic_libs   "libmysql")$/;"	v
_dynamic_libs	sylar/cmake/FindMySQL.cmake	/^  set(_dynamic_libs   "mysqlclient")$/;"	v
_dynamic_libs	sylar/cmake/FindMySQL.cmake	/^  set(_dynamic_libs   "mysqlclient_r"      "mysqlclient")$/;"	v
_err_string	sylar/cmake/FindMySQL.cmake	/^  set(_err_string "Could not find ${_link_type} "$/;"	v
_exe_fallback_path	sylar/cmake/FindMySQL.cmake	/^set(_exe_fallback_path$/;"	v
_http11_common_h	sylar/sylar/http/http11_common.h	/^#define _http11_common_h$/;"	d
_include_fallback_path	sylar/cmake/FindMySQL.cmake	/^set(_include_fallback_path$/;"	v
_init	sylar/sylar/http/http_parser.cc	/^static _RequestSizeIniter _init;$/;"	v	namespace:sylar::http::__anon90b2dfe80110	typeref:typename:_RequestSizeIniter	file:
_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    Node _instance;$/;"	m	union:sylar::ns::NodeDefaultTypeInternal::__anonee26512e010a	typeref:typename:Node	file:	access:public
_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    NodeInfo _instance;$/;"	m	union:sylar::ns::NodeInfoDefaultTypeInternal::__anonee26512e050a	typeref:typename:NodeInfo	file:	access:public
_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    NotifyMessage _instance;$/;"	m	union:sylar::ns::NotifyMessageDefaultTypeInternal::__anonee26512e070a	typeref:typename:NotifyMessage	file:	access:public
_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    QueryRequest _instance;$/;"	m	union:sylar::ns::QueryRequestDefaultTypeInternal::__anonee26512e040a	typeref:typename:QueryRequest	file:	access:public
_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    QueryResponse _instance;$/;"	m	union:sylar::ns::QueryResponseDefaultTypeInternal::__anonee26512e060a	typeref:typename:QueryResponse	file:	access:public
_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    RegisterInfo _instance;$/;"	m	union:sylar::ns::RegisterInfoDefaultTypeInternal::__anonee26512e020a	typeref:typename:RegisterInfo	file:	access:public
_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    RegisterRequest _instance;$/;"	m	union:sylar::ns::RegisterRequestDefaultTypeInternal::__anonee26512e030a	typeref:typename:RegisterRequest	file:	access:public
_internal_add_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^  void _internal_add_cmds(uint32_t value);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:(uint32_t value)
_internal_add_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::_internal_add_cmds(uint32_t value) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(uint32_t value)
_internal_add_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* NotifyMessage::_internal_add_dels() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::sylar::ns::NodeInfo *	signature:()
_internal_add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* _internal_add_domains();$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:std::string *	access:private	signature:()
_internal_add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* QueryRequest::_internal_add_domains() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:std::string *	signature:()
_internal_add_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* QueryResponse::_internal_add_infos() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::sylar::ns::NodeInfo *	signature:()
_internal_add_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::RegisterInfo* RegisterRequest::_internal_add_infos() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::sylar::ns::RegisterInfo *	signature:()
_internal_add_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* NodeInfo::_internal_add_nodes() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::sylar::ns::Node *	signature:()
_internal_add_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* NotifyMessage::_internal_add_updates() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::sylar::ns::NodeInfo *	signature:()
_internal_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t _internal_cmd() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:uint32_t	access:private	signature:() const
_internal_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t NodeInfo::_internal_cmd() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:uint32_t	signature:() const
_internal_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^      _internal_cmds() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedField<uint32_t> &	access:private	signature:() const
_internal_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t _internal_cmds(int index) const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:uint32_t	access:private	signature:(int index) const
_internal_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^RegisterInfo::_internal_cmds() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedField<uint32_t> &	signature:() const
_internal_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t RegisterInfo::_internal_cmds(int index) const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:uint32_t	signature:(int index) const
_internal_cmds_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_cmds_size() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:int	access:private	signature:() const
_internal_cmds_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int RegisterInfo::_internal_cmds_size() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:int	signature:() const
_internal_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::NodeInfo& _internal_dels(int index) const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	access:private	signature:(int index) const
_internal_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::NodeInfo& NotifyMessage::_internal_dels(int index) const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	signature:(int index) const
_internal_dels_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_dels_size() const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:int	access:private	signature:() const
_internal_dels_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int NotifyMessage::_internal_dels_size() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:int	signature:() const
_internal_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& _internal_domain() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const std::string &	access:private	signature:() const
_internal_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& _internal_domain() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const std::string &	access:private	signature:() const
_internal_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& NodeInfo::_internal_domain() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const std::string &	signature:() const
_internal_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& RegisterInfo::_internal_domain() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const std::string &	signature:() const
_internal_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& _internal_domains(int index) const;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:const std::string &	access:private	signature:(int index) const
_internal_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& QueryRequest::_internal_domains(int index) const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const std::string &	signature:(int index) const
_internal_domains_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_domains_size() const;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:int	access:private	signature:() const
_internal_domains_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int QueryRequest::_internal_domains_size() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:int	signature:() const
_internal_has_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_cmd() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:bool	access:private	signature:() const
_internal_has_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool NodeInfo::_internal_has_cmd() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:bool	signature:() const
_internal_has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_domain() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:bool	access:private	signature:() const
_internal_has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_domain() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:bool	access:private	signature:() const
_internal_has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool NodeInfo::_internal_has_domain() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:bool	signature:() const
_internal_has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool RegisterInfo::_internal_has_domain() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:bool	signature:() const
_internal_has_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_ip() const;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:private	signature:() const
_internal_has_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool Node::_internal_has_ip() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
_internal_has_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_node() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:bool	access:private	signature:() const
_internal_has_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool RegisterInfo::_internal_has_node() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:bool	signature:() const
_internal_has_port	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_port() const;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:private	signature:() const
_internal_has_port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool Node::_internal_has_port() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
_internal_has_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_weight() const;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:private	signature:() const
_internal_has_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool Node::_internal_has_weight() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
_internal_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::NodeInfo& _internal_infos(int index) const;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:const::sylar::ns::NodeInfo &	access:private	signature:(int index) const
_internal_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::RegisterInfo& _internal_infos(int index) const;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:const::sylar::ns::RegisterInfo &	access:private	signature:(int index) const
_internal_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::NodeInfo& QueryResponse::_internal_infos(int index) const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::sylar::ns::NodeInfo &	signature:(int index) const
_internal_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::RegisterInfo& RegisterRequest::_internal_infos(int index) const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::sylar::ns::RegisterInfo &	signature:(int index) const
_internal_infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_infos_size() const;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:int	access:private	signature:() const
_internal_infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_infos_size() const;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:int	access:private	signature:() const
_internal_infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int QueryResponse::_internal_infos_size() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:int	signature:() const
_internal_infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int RegisterRequest::_internal_infos_size() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:int	signature:() const
_internal_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& _internal_ip() const;$/;"	p	class:sylar::ns::Node	typeref:typename:const std::string &	access:private	signature:() const
_internal_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& Node::_internal_ip() const {$/;"	f	class:sylar::ns::Node	typeref:typename:const std::string &	signature:() const
_internal_mutable_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^RegisterInfo::_internal_mutable_cmds() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedField<uint32_t> *	signature:()
_internal_mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* _internal_mutable_domain();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:std::string *	access:private	signature:()
_internal_mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* _internal_mutable_domain();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:std::string *	access:private	signature:()
_internal_mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* NodeInfo::_internal_mutable_domain() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:std::string *	signature:()
_internal_mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* RegisterInfo::_internal_mutable_domain() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:std::string *	signature:()
_internal_mutable_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* _internal_mutable_ip();$/;"	p	class:sylar::ns::Node	typeref:typename:std::string *	access:private	signature:()
_internal_mutable_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* Node::_internal_mutable_ip() {$/;"	f	class:sylar::ns::Node	typeref:typename:std::string *	signature:()
_internal_mutable_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* RegisterInfo::_internal_mutable_node() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::sylar::ns::Node *	signature:()
_internal_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::Node& _internal_node() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const::sylar::ns::Node &	access:private	signature:() const
_internal_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::Node& RegisterInfo::_internal_node() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::sylar::ns::Node &	signature:() const
_internal_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::Node& _internal_nodes(int index) const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const::sylar::ns::Node &	access:private	signature:(int index) const
_internal_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::Node& NodeInfo::_internal_nodes(int index) const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::sylar::ns::Node &	signature:(int index) const
_internal_nodes_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_nodes_size() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:int	access:private	signature:() const
_internal_nodes_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int NodeInfo::_internal_nodes_size() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:int	signature:() const
_internal_port	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t _internal_port() const;$/;"	p	class:sylar::ns::Node	typeref:typename:uint32_t	access:private	signature:() const
_internal_port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t Node::_internal_port() const {$/;"	f	class:sylar::ns::Node	typeref:typename:uint32_t	signature:() const
_internal_set_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  void _internal_set_cmd(uint32_t value);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:(uint32_t value)
_internal_set_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::_internal_set_cmd(uint32_t value) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(uint32_t value)
_internal_set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:PROTOBUF_ALWAYS_INLINE void	access:private	signature:(const std::string & value)
_internal_set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:PROTOBUF_ALWAYS_INLINE void	access:private	signature:(const std::string & value)
_internal_set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::_internal_set_domain(const std::string& value) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(const std::string & value)
_internal_set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::_internal_set_domain(const std::string& value) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(const std::string & value)
_internal_set_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);$/;"	p	class:sylar::ns::Node	typeref:typename:PROTOBUF_ALWAYS_INLINE void	access:private	signature:(const std::string & value)
_internal_set_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::_internal_set_ip(const std::string& value) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(const std::string & value)
_internal_set_port	sylar/sylar/ns/ns_protobuf.pb.h	/^  void _internal_set_port(uint32_t value);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(uint32_t value)
_internal_set_port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::_internal_set_port(uint32_t value) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(uint32_t value)
_internal_set_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  void _internal_set_weight(uint32_t value);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(uint32_t value)
_internal_set_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::_internal_set_weight(uint32_t value) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(uint32_t value)
_internal_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::NodeInfo& _internal_updates(int index) const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	access:private	signature:(int index) const
_internal_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::NodeInfo& NotifyMessage::_internal_updates(int index) const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	signature:(int index) const
_internal_updates_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_updates_size() const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:int	access:private	signature:() const
_internal_updates_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int NotifyMessage::_internal_updates_size() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:int	signature:() const
_internal_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t _internal_weight() const;$/;"	p	class:sylar::ns::Node	typeref:typename:uint32_t	access:private	signature:() const
_internal_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t Node::_internal_weight() const {$/;"	f	class:sylar::ns::Node	typeref:typename:uint32_t	signature:() const
_lib	sylar/cmake/FindMySQL.cmake	/^  set(_lib     "${${_lib_var}}")$/;"	v
_lib_dir	sylar/cmake/FindMySQL.cmake	/^  set(_lib_dir "${${_lib_dir_var}}")$/;"	v
_lib_fallback_path	sylar/cmake/FindMySQL.cmake	/^set(_lib_fallback_path$/;"	v
_lib_subdirs	sylar/cmake/FindMySQL.cmake	/^set(_lib_subdirs$/;"	v
_lib_suffix_build	sylar/cmake/FindMySQL.cmake	/^  set(_lib_suffix_build Debug)$/;"	v
_lib_suffix_build	sylar/cmake/FindMySQL.cmake	/^  set(_lib_suffix_build Release)$/;"	v
_lib_suffix_dist	sylar/cmake/FindMySQL.cmake	/^  set(_lib_suffix_dist debug)$/;"	v
_lib_suffix_dist	sylar/cmake/FindMySQL.cmake	/^  set(_lib_suffix_dist opt)$/;"	v
_link_type	sylar/cmake/FindMySQL.cmake	/^  set(_link_type   "dynamic")$/;"	v
_link_type	sylar/cmake/FindMySQL.cmake	/^  set(_link_type   "static")$/;"	v
_mysql_conf	sylar/cmake/FindMySQL.cmake	/^macro(_mysql_conf _var _opt)$/;"	m
_mysql_config	sylar/cmake/FindMySQL.cmake	/^macro(_mysql_config _var _regex _opt)$/;"	m
_mysql_config_in_mysql_dir	sylar/cmake/FindMySQL.cmake	/^    set(_mysql_config_in_mysql_dir 1)$/;"	v
_mysql_config_replace	sylar/cmake/FindMySQL.cmake	/^macro(_mysql_config_replace _var _regex1 _replace _regex2 _opt)$/;"	m
_mysql_config_set_by_user	sylar/cmake/FindMySQL.cmake	/^  set(_mysql_config_set_by_user 1)$/;"	v
_search_libs	sylar/cmake/FindMySQL.cmake	/^        set(_search_libs ${matched_lib})$/;"	v
_search_libs	sylar/cmake/FindMySQL.cmake	/^  set(_search_libs ${_dynamic_libs})$/;"	v
_search_libs	sylar/cmake/FindMySQL.cmake	/^  set(_search_libs ${_static_libs})$/;"	v
_static_lib_ext	sylar/cmake/FindMySQL.cmake	/^  set(_static_lib_ext ".a")$/;"	v
_static_lib_ext	sylar/cmake/FindMySQL.cmake	/^  set(_static_lib_ext ".lib")   # Careful, can be import library for DLL$/;"	v
_static_libs	sylar/cmake/FindMySQL.cmake	/^  set(_static_libs    "libmysqlclient.a")$/;"	v
_static_libs	sylar/cmake/FindMySQL.cmake	/^  set(_static_libs    "libmysqlclient_r.a" "libmysqlclient.a")$/;"	v
_static_libs	sylar/cmake/FindMySQL.cmake	/^  set(_static_libs    "mysqlclient")$/;"	v
_static_subdirs	sylar/cmake/FindMySQL.cmake	/^set(_static_subdirs$/;"	v
_vs_subdir	sylar/cmake/FindMySQL.cmake	/^    set(_vs_subdir "${_vs_subdir}\/debug")$/;"	v
_vs_subdir	sylar/cmake/FindMySQL.cmake	/^  set(_vs_subdir vs10)$/;"	v
_vs_subdir	sylar/cmake/FindMySQL.cmake	/^  set(_vs_subdir vs11)$/;"	v
_vs_subdir	sylar/cmake/FindMySQL.cmake	/^  set(_vs_subdir vs12)$/;"	v
_vs_subdir	sylar/cmake/FindMySQL.cmake	/^  set(_vs_subdir vs13)$/;"	v
_vs_subdir	sylar/cmake/FindMySQL.cmake	/^  set(_vs_subdir vs14)$/;"	v
_vs_subdir	sylar/cmake/FindMySQL.cmake	/^  set(_vs_subdir vs15)$/;"	v
_vs_subdir	sylar/cmake/FindMySQL.cmake	/^  set(_vs_subdir vs9)$/;"	v
a	sylar/tests/test_env.cc	/^A a;$/;"	v	typeref:typename:A
accept	sylar/sylar/hook.cc	/^int accept(int s, struct sockaddr *addr, socklen_t *addrlen) {$/;"	f	typeref:typename:int	signature:(int s,struct sockaddr * addr,socklen_t * addrlen)
accept	sylar/sylar/socket.cc	/^Socket::ptr SSLSocket::accept() {$/;"	f	class:sylar::SSLSocket	typeref:typename:Socket::ptr	signature:()
accept	sylar/sylar/socket.cc	/^Socket::ptr Socket::accept() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
accept	sylar/sylar/socket.h	/^    virtual Socket::ptr accept() override;$/;"	p	class:sylar::SSLSocket	typeref:typename:Socket::ptr	access:public	signature:()
accept	sylar/sylar/socket.h	/^    virtual Socket::ptr accept();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
accept_fun	sylar/sylar/hook.h	/^typedef int (*accept_fun)(int s, struct sockaddr *addr, socklen_t *addrlen);$/;"	t	typeref:typename:int (*)(int s,struct sockaddr * addr,socklen_t * addrlen)
accept_worker	sylar/sylar/tcp_server.h	/^    std::string accept_worker;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
add	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::add(const std::string& name, IFoxThread::ptr thr) {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:(const std::string & name,IFoxThread::ptr thr)
add	sylar/sylar/db/fox_thread.h	/^    void add(const std::string& name, IFoxThread::ptr thr);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:(const std::string & name,IFoxThread::ptr thr)
add	sylar/sylar/ds/roaring.hh	/^    void add(uint32_t x) { roaring_bitmap_add(&roaring, x); }$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(uint32_t x)
add	sylar/sylar/ds/roaring.hh	/^    void add(uint32_t x) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(uint32_t x)
add	sylar/sylar/ds/roaring.hh	/^    void add(uint64_t x) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(uint64_t x)
add	sylar/sylar/env.cc	/^void Env::add(const std::string& key, const std::string& val) {$/;"	f	class:sylar::Env	typeref:typename:void	signature:(const std::string & key,const std::string & val)
add	sylar/sylar/env.h	/^    void add(const std::string& key, const std::string& val);$/;"	p	class:sylar::Env	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val)
add	sylar/sylar/http/session_data.cc	/^void SessionDataManager::add(SessionData::ptr info) {$/;"	f	class:sylar::http::SessionDataManager	typeref:typename:void	signature:(SessionData::ptr info)
add	sylar/sylar/http/session_data.h	/^    void add(SessionData::ptr info);$/;"	p	class:sylar::http::SessionDataManager	typeref:typename:void	access:public	signature:(SessionData::ptr info)
add	sylar/sylar/module.cc	/^void ModuleManager::add(Module::ptr m) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(Module::ptr m)
add	sylar/sylar/module.h	/^    void add(Module::ptr m);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(Module::ptr m)
add	sylar/sylar/ns/ns_protocol.cc	/^void NSDomain::add(NSNodeSet::ptr info) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:void	signature:(NSNodeSet::ptr info)
add	sylar/sylar/ns/ns_protocol.cc	/^void NSDomain::add(uint32_t cmd, NSNode::ptr info) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:void	signature:(uint32_t cmd,NSNode::ptr info)
add	sylar/sylar/ns/ns_protocol.cc	/^void NSDomainSet::add(NSDomain::ptr info) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:void	signature:(NSDomain::ptr info)
add	sylar/sylar/ns/ns_protocol.cc	/^void NSNodeSet::add(NSNode::ptr info) {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:void	signature:(NSNode::ptr info)
add	sylar/sylar/ns/ns_protocol.h	/^    void add(NSDomain::ptr info);$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:void	access:public	signature:(NSDomain::ptr info)
add	sylar/sylar/ns/ns_protocol.h	/^    void add(NSNode::ptr info);$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:void	access:public	signature:(NSNode::ptr info)
add	sylar/sylar/ns/ns_protocol.h	/^    void add(NSNodeSet::ptr info);$/;"	p	class:sylar::ns::NSDomain	typeref:typename:void	access:public	signature:(NSNodeSet::ptr info)
add	sylar/sylar/ns/ns_protocol.h	/^    void add(uint32_t cmd, NSNode::ptr info);$/;"	p	class:sylar::ns::NSDomain	typeref:typename:void	access:public	signature:(uint32_t cmd,NSNode::ptr info)
add	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStreamManager::add(AsyncSocketStream::ptr stream) {$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:void	signature:(AsyncSocketStream::ptr stream)
add	sylar/sylar/streams/async_socket_stream.h	/^    void add(AsyncSocketStream::ptr stream);$/;"	p	class:sylar::AsyncSocketStreamManager	typeref:typename:void	access:public	signature:(AsyncSocketStream::ptr stream)
add	sylar/sylar/streams/load_balance.cc	/^void LoadBalance::add(LoadBalanceItem::ptr v) {$/;"	f	class:sylar::LoadBalance	typeref:typename:void	signature:(LoadBalanceItem::ptr v)
add	sylar/sylar/streams/load_balance.h	/^    void add(LoadBalanceItem::ptr v);$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:public	signature:(LoadBalanceItem::ptr v)
add	sylar/sylar/util.cc	/^void SpeedLimit::add(uint32_t v) {$/;"	f	class:sylar::SpeedLimit	typeref:typename:void	signature:(uint32_t v)
add	sylar/sylar/util.h	/^    void add(uint32_t v);$/;"	p	class:sylar::SpeedLimit	typeref:typename:void	access:public	signature:(uint32_t v)
add	sylar/sylar/worker.cc	/^void WorkerManager::add(Scheduler::ptr s) {$/;"	f	class:sylar::WorkerManager	typeref:typename:void	signature:(Scheduler::ptr s)
add	sylar/sylar/worker.h	/^    void add(Scheduler::ptr s);$/;"	p	class:sylar::WorkerManager	typeref:typename:void	access:public	signature:(Scheduler::ptr s)
addAppender	sylar/sylar/log.cc	/^void Logger::addAppender(LogAppender::ptr appender) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogAppender::ptr appender)
addAppender	sylar/sylar/log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogAppender::ptr appender)
addCapacity	sylar/sylar/bytearray.cc	/^void ByteArray::addCapacity(size_t size) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(size_t size)
addCapacity	sylar/sylar/bytearray.h	/^    void addCapacity(size_t size);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:private	signature:(size_t size)
addChecked	sylar/sylar/ds/roaring.hh	/^    bool addChecked(uint32_t x) { $/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(uint32_t x)
addChecked	sylar/sylar/ds/roaring.hh	/^    bool addChecked(uint32_t x) {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint32_t x)
addChecked	sylar/sylar/ds/roaring.hh	/^    bool addChecked(uint64_t x) {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint64_t x)
addConditionTimer	sylar/sylar/timer.cc	/^Timer::ptr TimerManager::addConditionTimer(uint64_t ms, std::function<void()> cb$/;"	f	class:sylar::TimerManager	typeref:typename:Timer::ptr	signature:(uint64_t ms,std::function<void ()> cb,std::weak_ptr<void> weak_cond,bool recurring)
addConditionTimer	sylar/sylar/timer.h	/^    Timer::ptr addConditionTimer(uint64_t ms, std::function<void()> cb$/;"	p	class:sylar::TimerManager	typeref:typename:Timer::ptr	access:public	signature:(uint64_t ms,std::function<void ()> cb,std::weak_ptr<void> weak_cond,bool recurring=false)
addCtx	sylar/sylar/streams/async_socket_stream.cc	/^bool AsyncSocketStream::addCtx(Ctx::ptr ctx) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:bool	signature:(Ctx::ptr ctx)
addCtx	sylar/sylar/streams/async_socket_stream.h	/^    bool addCtx(Ctx::ptr ctx);$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:bool	access:protected	signature:(Ctx::ptr ctx)
addEntity	sylar/sylar/email/email.cc	/^void EMail::addEntity(EMailEntity::ptr entity) {$/;"	f	class:sylar::EMail	typeref:typename:void	signature:(EMailEntity::ptr entity)
addEntity	sylar/sylar/email/email.h	/^    void addEntity(EMailEntity::ptr entity);$/;"	p	class:sylar::EMail	typeref:typename:void	access:public	signature:(EMailEntity::ptr entity)
addEvent	sylar/sylar/iomanager.cc	/^int IOManager::addEvent(int fd, Event event, std::function<void()> cb) {$/;"	f	class:sylar::IOManager	typeref:typename:int	signature:(int fd,Event event,std::function<void ()> cb)
addEvent	sylar/sylar/iomanager.h	/^    int addEvent(int fd, Event event, std::function<void()> cb = nullptr);$/;"	p	class:sylar::IOManager	typeref:typename:int	access:public	signature:(int fd,Event event,std::function<void ()> cb=nullptr)
addFetch	sylar/sylar/util.h	/^    static T addFetch(volatile T& t, S v = 1) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v=1)
addGlobServlet	sylar/sylar/http/servlet.cc	/^void ServletDispatch::addGlobServlet(const std::string& uri$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri,FunctionServlet::callback cb)
addGlobServlet	sylar/sylar/http/servlet.cc	/^void ServletDispatch::addGlobServlet(const std::string& uri$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri,Servlet::ptr slt)
addGlobServlet	sylar/sylar/http/servlet.h	/^    void addGlobServlet(const std::string& uri, FunctionServlet::callback cb);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,FunctionServlet::callback cb)
addGlobServlet	sylar/sylar/http/servlet.h	/^    void addGlobServlet(const std::string& uri, Servlet::ptr slt);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,Servlet::ptr slt)
addGlobServlet	sylar/sylar/http/ws_servlet.cc	/^void WSServletDispatch::addGlobServlet(const std::string& uri$/;"	f	class:sylar::http::WSServletDispatch	typeref:typename:void	signature:(const std::string & uri,FunctionWSServlet::callback cb,FunctionWSServlet::on_connect_cb connect_cb,FunctionWSServlet::on_close_cb close_cb)
addGlobServlet	sylar/sylar/http/ws_servlet.h	/^    void addGlobServlet(const std::string& uri$/;"	p	class:sylar::http::WSServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,FunctionWSServlet::callback cb,FunctionWSServlet::on_connect_cb connect_cb=nullptr,FunctionWSServlet::on_close_cb close_cb=nullptr)
addGlobServletCreator	sylar/sylar/http/servlet.cc	/^void ServletDispatch::addGlobServletCreator(const std::string& uri, IServletCreator::ptr creator/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri,IServletCreator::ptr creator)
addGlobServletCreator	sylar/sylar/http/servlet.h	/^    void addGlobServletCreator(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri)
addGlobServletCreator	sylar/sylar/http/servlet.h	/^    void addGlobServletCreator(const std::string& uri, IServletCreator::ptr creator);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,IServletCreator::ptr creator)
addHeader	sylar/sylar/email/email.cc	/^void EMailEntity::addHeader(const std::string& key, const std::string& val) {$/;"	f	class:sylar::EMailEntity	typeref:typename:void	signature:(const std::string & key,const std::string & val)
addHeader	sylar/sylar/email/email.h	/^    void addHeader(const std::string& key, const std::string& val);$/;"	p	class:sylar::EMailEntity	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val)
addHelp	sylar/sylar/env.cc	/^void Env::addHelp(const std::string& key, const std::string& desc) {$/;"	f	class:sylar::Env	typeref:typename:void	signature:(const std::string & key,const std::string & desc)
addHelp	sylar/sylar/env.h	/^    void addHelp(const std::string& key, const std::string& desc);$/;"	p	class:sylar::Env	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & desc)
addListener	sylar/sylar/config.h	/^    uint64_t addListener(on_change_cb cb) {$/;"	f	class:sylar::ConfigVar	typeref:typename:uint64_t	access:public	signature:(on_change_cb cb)
addMany	sylar/sylar/ds/roaring.hh	/^    void addMany(size_t n_args, const uint32_t *vals) {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(size_t n_args,const uint32_t * vals)
addMany	sylar/sylar/ds/roaring.hh	/^    void addMany(size_t n_args, const uint32_t *vals) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(size_t n_args,const uint32_t * vals)
addMany	sylar/sylar/ds/roaring.hh	/^    void addMany(size_t n_args, const uint64_t *vals) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(size_t n_args,const uint64_t * vals)
addQueryDomain	sylar/sylar/ns/ns_client.cc	/^void NSClient::addQueryDomain(const std::string& domain) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:(const std::string & domain)
addQueryDomain	sylar/sylar/ns/ns_client.h	/^    void addQueryDomain(const std::string& domain);$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:public	signature:(const std::string & domain)
addRange	sylar/sylar/ds/roaring.hh	/^    void addRange(const uint64_t x, const uint64_t y)  {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(const uint64_t x,const uint64_t y)
addServlet	sylar/sylar/http/servlet.cc	/^void ServletDispatch::addServlet(const std::string& uri$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri,FunctionServlet::callback cb)
addServlet	sylar/sylar/http/servlet.cc	/^void ServletDispatch::addServlet(const std::string& uri, Servlet::ptr slt) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri,Servlet::ptr slt)
addServlet	sylar/sylar/http/servlet.h	/^    void addServlet(const std::string& uri, FunctionServlet::callback cb);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,FunctionServlet::callback cb)
addServlet	sylar/sylar/http/servlet.h	/^    void addServlet(const std::string& uri, Servlet::ptr slt);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,Servlet::ptr slt)
addServlet	sylar/sylar/http/ws_servlet.cc	/^void WSServletDispatch::addServlet(const std::string& uri$/;"	f	class:sylar::http::WSServletDispatch	typeref:typename:void	signature:(const std::string & uri,FunctionWSServlet::callback cb,FunctionWSServlet::on_connect_cb connect_cb,FunctionWSServlet::on_close_cb close_cb)
addServlet	sylar/sylar/http/ws_servlet.h	/^    void addServlet(const std::string& uri$/;"	p	class:sylar::http::WSServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,FunctionWSServlet::callback cb,FunctionWSServlet::on_connect_cb connect_cb=nullptr,FunctionWSServlet::on_close_cb close_cb=nullptr)
addServletCreator	sylar/sylar/http/servlet.cc	/^void ServletDispatch::addServletCreator(const std::string& uri, IServletCreator::ptr creator) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri,IServletCreator::ptr creator)
addServletCreator	sylar/sylar/http/servlet.h	/^    void addServletCreator(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri)
addServletCreator	sylar/sylar/http/servlet.h	/^    void addServletCreator(const std::string& uri, IServletCreator::ptr creator);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,IServletCreator::ptr creator)
addTimer	sylar/sylar/timer.cc	/^Timer::ptr TimerManager::addTimer(uint64_t ms, std::function<void()> cb$/;"	f	class:sylar::TimerManager	typeref:typename:Timer::ptr	signature:(uint64_t ms,std::function<void ()> cb,bool recurring)
addTimer	sylar/sylar/timer.cc	/^void TimerManager::addTimer(Timer::ptr val, RWMutexType::WriteLock& lock) {$/;"	f	class:sylar::TimerManager	typeref:typename:void	signature:(Timer::ptr val,RWMutexType::WriteLock & lock)
addTimer	sylar/sylar/timer.h	/^    Timer::ptr addTimer(uint64_t ms, std::function<void()> cb$/;"	p	class:sylar::TimerManager	typeref:typename:Timer::ptr	access:public	signature:(uint64_t ms,std::function<void ()> cb,bool recurring=false)
addTimer	sylar/sylar/timer.h	/^    void addTimer(Timer::ptr val, RWMutexType::WriteLock& lock);$/;"	p	class:sylar::TimerManager	typeref:typename:void	access:protected	signature:(Timer::ptr val,RWMutexType::WriteLock & lock)
add_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^  void add_cmds(uint32_t value);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(uint32_t value)
add_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::add_cmds(uint32_t value) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(uint32_t value)
add_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* NotifyMessage::add_dels() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::sylar::ns::NodeInfo *	signature:()
add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* add_domains();$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:std::string *	access:public	signature:()
add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void add_domains(const char* value);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(const char * value)
add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void add_domains(const char* value, size_t size);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(const char * value,size_t size)
add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void add_domains(const std::string& value);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(const std::string & value)
add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void add_domains(std::string&& value);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(std::string && value)
add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* QueryRequest::add_domains() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:std::string *	signature:()
add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::add_domains(const char* value) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(const char * value)
add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::add_domains(const char* value, size_t size) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(const char * value,size_t size)
add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::add_domains(const std::string& value) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(const std::string & value)
add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::add_domains(std::string&& value) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(std::string && value)
add_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* QueryResponse::add_infos() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::sylar::ns::NodeInfo *	signature:()
add_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::RegisterInfo* RegisterRequest::add_infos() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::sylar::ns::RegisterInfo *	signature:()
add_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* NodeInfo::add_nodes() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::sylar::ns::Node *	signature:()
add_run	sylar/sylar/ds/roaring.c	/^static void add_run(run_container_t *r, int s, int e) {$/;"	f	typeref:typename:void	file:	signature:(run_container_t * r,int s,int e)
add_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* NotifyMessage::add_updates() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::sylar::ns::NodeInfo *	signature:()
address	sylar/sylar/tcp_server.h	/^    std::vector<std::string> address;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::vector<std::string>	access:public
advanceUntil	sylar/sylar/ds/roaring.h	/^static inline int32_t advanceUntil(const uint16_t *array, int32_t pos,$/;"	f	typeref:typename:int32_t	signature:(const uint16_t * array,int32_t pos,int32_t length,uint16_t min)
all	build/Makefile	/^all: cmake_check_build_system$/;"	t
all	build/sylar/Makefile	/^all: cmake_check_build_system$/;"	t
alloc	sylar/sylar/db/mysql.cc	/^void MySQLStmtRes::Data::alloc(size_t size) {$/;"	f	class:sylar::MySQLStmtRes::Data	typeref:typename:void	signature:(size_t size)
alloc	sylar/sylar/db/mysql.h	/^        void alloc(size_t size);$/;"	p	struct:sylar::MySQLStmtRes::Data	typeref:typename:void	access:public	signature:(size_t size)
allocation_size	sylar/sylar/ds/roaring.h	/^    int32_t allocation_size;$/;"	m	struct:roaring_array_s	typeref:typename:int32_t	access:public
andFetch	sylar/sylar/util.h	/^    static T andFetch(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
and_cardinality	sylar/sylar/ds/roaring.hh	/^    uint64_t and_cardinality(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:uint64_t	access:public	signature:(const Roaring & r) const
andnot_cardinality	sylar/sylar/ds/roaring.hh	/^    uint64_t andnot_cardinality(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:uint64_t	access:public	signature:(const Roaring & r) const
any	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::any() const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:() const
any	sylar/sylar/ds/bitmap.h	/^    bool any() const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:() const
any	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::any() const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:() const
any	sylar/sylar/ds/roaring_bitmap.h	/^    bool any() const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:() const
append	sylar/sylar/ds/array.h	/^    void append(const T& v) {$/;"	f	class:sylar::ds::Array	typeref:typename:void	access:public	signature:(const T & v)
appendCmd	sylar/sylar/db/redis.cc	/^int Redis::appendCmd(const char* fmt, ...) {$/;"	f	class:sylar::Redis	typeref:typename:int	signature:(const char * fmt,...)
appendCmd	sylar/sylar/db/redis.cc	/^int Redis::appendCmd(const char* fmt, va_list ap) {$/;"	f	class:sylar::Redis	typeref:typename:int	signature:(const char * fmt,va_list ap)
appendCmd	sylar/sylar/db/redis.cc	/^int Redis::appendCmd(const std::vector<std::string>& argv) {$/;"	f	class:sylar::Redis	typeref:typename:int	signature:(const std::vector<std::string> & argv)
appendCmd	sylar/sylar/db/redis.cc	/^int RedisCluster::appendCmd(const char* fmt, ...) {$/;"	f	class:sylar::RedisCluster	typeref:typename:int	signature:(const char * fmt,...)
appendCmd	sylar/sylar/db/redis.cc	/^int RedisCluster::appendCmd(const char* fmt, va_list ap) {$/;"	f	class:sylar::RedisCluster	typeref:typename:int	signature:(const char * fmt,va_list ap)
appendCmd	sylar/sylar/db/redis.cc	/^int RedisCluster::appendCmd(const std::vector<std::string>& argv) {$/;"	f	class:sylar::RedisCluster	typeref:typename:int	signature:(const std::vector<std::string> & argv)
appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const char* fmt, ...) = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:int	access:public	signature:(const char * fmt,...)
appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const char* fmt, ...);$/;"	p	class:sylar::Redis	typeref:typename:int	access:public	signature:(const char * fmt,...)
appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const char* fmt, ...);$/;"	p	class:sylar::RedisCluster	typeref:typename:int	access:public	signature:(const char * fmt,...)
appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const char* fmt, va_list ap) = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:int	access:public	signature:(const char * fmt,va_list ap)
appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const char* fmt, va_list ap);$/;"	p	class:sylar::Redis	typeref:typename:int	access:public	signature:(const char * fmt,va_list ap)
appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const char* fmt, va_list ap);$/;"	p	class:sylar::RedisCluster	typeref:typename:int	access:public	signature:(const char * fmt,va_list ap)
appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const std::vector<std::string>& argv) = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:int	access:public	signature:(const std::vector<std::string> & argv)
appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const std::vector<std::string>& argv);$/;"	p	class:sylar::Redis	typeref:typename:int	access:public	signature:(const std::vector<std::string> & argv)
appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const std::vector<std::string>& argv);$/;"	p	class:sylar::RedisCluster	typeref:typename:int	access:public	signature:(const std::vector<std::string> & argv)
appenders	sylar/sylar/log.cc	/^    std::vector<LogAppenderDefine> appenders;$/;"	m	struct:sylar::LogDefine	typeref:typename:std::vector<LogAppenderDefine>	file:	access:public
arena_alloc	sylar/sylar/ds/roaring.c	/^inline static void *arena_alloc(char **arena, size_t num_bytes) {$/;"	f	typeref:typename:void *	file:	signature:(char ** arena,size_t num_bytes)
args	sylar/sylar/tcp_server.h	/^    std::map<std::string, std::string> args;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::map<std::string,std::string>	access:public
array	sylar/sylar/ds/roaring.h	/^    uint16_t *array;$/;"	m	struct:array_container_s	typeref:typename:uint16_t *	access:public
array	sylar/sylar/ds/roaring.h	/^    uint64_t *array;$/;"	m	struct:bitset_container_s	typeref:typename:uint64_t *	access:public
array_array_container_andnot	sylar/sylar/ds/roaring.c	/^void array_array_container_andnot(const array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * src_1,const array_container_t * src_2,array_container_t * dst)
array_array_container_andnot	sylar/sylar/ds/roaring.h	/^void array_array_container_andnot(const array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * src_1,const array_container_t * src_2,array_container_t * dst)
array_array_container_iandnot	sylar/sylar/ds/roaring.c	/^void array_array_container_iandnot(array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(array_container_t * src_1,const array_container_t * src_2)
array_array_container_iandnot	sylar/sylar/ds/roaring.h	/^void array_array_container_iandnot(array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(array_container_t * src_1,const array_container_t * src_2)
array_array_container_inplace_union	sylar/sylar/ds/roaring.c	/^bool array_array_container_inplace_union(array_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_array_container_inplace_union	sylar/sylar/ds/roaring.h	/^bool array_array_container_inplace_union(array_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_array_container_ixor	sylar/sylar/ds/roaring.c	/^bool array_array_container_ixor(array_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_array_container_ixor	sylar/sylar/ds/roaring.h	/^bool array_array_container_ixor(array_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_array_container_lazy_inplace_union	sylar/sylar/ds/roaring.c	/^bool array_array_container_lazy_inplace_union(array_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_array_container_lazy_inplace_union	sylar/sylar/ds/roaring.h	/^bool array_array_container_lazy_inplace_union(array_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_array_container_lazy_union	sylar/sylar/ds/roaring.c	/^bool array_array_container_lazy_union(const array_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_array_container_lazy_union	sylar/sylar/ds/roaring.h	/^bool array_array_container_lazy_union(const array_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_array_container_lazy_xor	sylar/sylar/ds/roaring.c	/^bool array_array_container_lazy_xor(const array_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_array_container_lazy_xor	sylar/sylar/ds/roaring.h	/^bool array_array_container_lazy_xor(const array_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_array_container_union	sylar/sylar/ds/roaring.c	/^bool array_array_container_union(const array_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_array_container_union	sylar/sylar/ds/roaring.h	/^bool array_array_container_union(const array_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_array_container_xor	sylar/sylar/ds/roaring.c	/^bool array_array_container_xor(const array_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_array_container_xor	sylar/sylar/ds/roaring.h	/^bool array_array_container_xor(const array_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const array_container_t * src_1,const array_container_t * src_2,void ** dst)
array_bitset_container_andnot	sylar/sylar/ds/roaring.c	/^void array_bitset_container_andnot(const array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * src_1,const bitset_container_t * src_2,array_container_t * dst)
array_bitset_container_andnot	sylar/sylar/ds/roaring.h	/^void array_bitset_container_andnot(const array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * src_1,const bitset_container_t * src_2,array_container_t * dst)
array_bitset_container_iandnot	sylar/sylar/ds/roaring.c	/^void array_bitset_container_iandnot(array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(array_container_t * src_1,const bitset_container_t * src_2)
array_bitset_container_iandnot	sylar/sylar/ds/roaring.h	/^void array_bitset_container_iandnot(array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(array_container_t * src_1,const bitset_container_t * src_2)
array_bitset_container_intersect	sylar/sylar/ds/roaring.c	/^bool array_bitset_container_intersect(const array_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const array_container_t * src_1,const bitset_container_t * src_2)
array_bitset_container_intersect	sylar/sylar/ds/roaring.h	/^bool array_bitset_container_intersect(const array_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const array_container_t * src_1,const bitset_container_t * src_2)
array_bitset_container_intersection	sylar/sylar/ds/roaring.c	/^void array_bitset_container_intersection(const array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * src_1,const bitset_container_t * src_2,array_container_t * dst)
array_bitset_container_intersection	sylar/sylar/ds/roaring.h	/^void array_bitset_container_intersection(const array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * src_1,const bitset_container_t * src_2,array_container_t * dst)
array_bitset_container_intersection_cardinality	sylar/sylar/ds/roaring.c	/^int array_bitset_container_intersection_cardinality($/;"	f	typeref:typename:int	signature:(const array_container_t * src_1,const bitset_container_t * src_2)
array_bitset_container_intersection_cardinality	sylar/sylar/ds/roaring.h	/^int array_bitset_container_intersection_cardinality($/;"	p	typeref:typename:int	signature:(const array_container_t * src_1,const bitset_container_t * src_2)
array_bitset_container_ixor	sylar/sylar/ds/roaring.c	/^bool array_bitset_container_ixor(array_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(array_container_t * src_1,const bitset_container_t * src_2,void ** dst)
array_bitset_container_ixor	sylar/sylar/ds/roaring.h	/^bool array_bitset_container_ixor(array_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(array_container_t * src_1,const bitset_container_t * src_2,void ** dst)
array_bitset_container_lazy_union	sylar/sylar/ds/roaring.c	/^void array_bitset_container_lazy_union(const array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
array_bitset_container_lazy_union	sylar/sylar/ds/roaring.h	/^void array_bitset_container_lazy_union(const array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
array_bitset_container_lazy_xor	sylar/sylar/ds/roaring.c	/^void array_bitset_container_lazy_xor(const array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
array_bitset_container_lazy_xor	sylar/sylar/ds/roaring.h	/^void array_bitset_container_lazy_xor(const array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
array_bitset_container_union	sylar/sylar/ds/roaring.c	/^void array_bitset_container_union(const array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
array_bitset_container_union	sylar/sylar/ds/roaring.h	/^void array_bitset_container_union(const array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
array_bitset_container_xor	sylar/sylar/ds/roaring.c	/^bool array_bitset_container_xor(const array_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const array_container_t * src_1,const bitset_container_t * src_2,void ** dst)
array_bitset_container_xor	sylar/sylar/ds/roaring.h	/^bool array_bitset_container_xor(const array_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const array_container_t * src_1,const bitset_container_t * src_2,void ** dst)
array_container_add	sylar/sylar/ds/roaring.h	/^static inline bool array_container_add(array_container_t *arr, uint16_t value) {$/;"	f	typeref:typename:bool	signature:(array_container_t * arr,uint16_t value)
array_container_add_from_range	sylar/sylar/ds/roaring.c	/^void array_container_add_from_range(array_container_t *arr, uint32_t min,$/;"	f	typeref:typename:void	signature:(array_container_t * arr,uint32_t min,uint32_t max,uint16_t step)
array_container_add_from_range	sylar/sylar/ds/roaring.h	/^void array_container_add_from_range(array_container_t *arr, uint32_t min,$/;"	p	typeref:typename:void	signature:(array_container_t * arr,uint32_t min,uint32_t max,uint16_t step)
array_container_add_range	sylar/sylar/ds/roaring.h	/^static inline void array_container_add_range(array_container_t *array,$/;"	f	typeref:typename:void	signature:(array_container_t * array,uint32_t min,uint32_t max)
array_container_add_range_nvals	sylar/sylar/ds/roaring.h	/^static inline void array_container_add_range_nvals(array_container_t *array,$/;"	f	typeref:typename:void	signature:(array_container_t * array,uint32_t min,uint32_t max,int32_t nvals_less,int32_t nvals_greater)
array_container_andnot	sylar/sylar/ds/roaring.c	/^void array_container_andnot(const array_container_t *array_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * array_1,const array_container_t * array_2,array_container_t * out)
array_container_andnot	sylar/sylar/ds/roaring.h	/^void array_container_andnot(const array_container_t *array_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * array_1,const array_container_t * array_2,array_container_t * out)
array_container_append	sylar/sylar/ds/roaring.h	/^static inline void array_container_append(array_container_t *arr,$/;"	f	typeref:typename:void	signature:(array_container_t * arr,uint16_t pos)
array_container_cardinality	sylar/sylar/ds/roaring.c	/^extern inline int array_container_cardinality(const array_container_t *array);$/;"	p	typeref:typename:int	file:	signature:(const array_container_t * array)
array_container_cardinality	sylar/sylar/ds/roaring.h	/^static inline int array_container_cardinality(const array_container_t *array) {$/;"	f	typeref:typename:int	signature:(const array_container_t * array)
array_container_clear	sylar/sylar/ds/roaring.c	/^extern inline void array_container_clear(array_container_t *array);$/;"	p	typeref:typename:void	file:	signature:(array_container_t * array)
array_container_clear	sylar/sylar/ds/roaring.h	/^static inline void array_container_clear(array_container_t *array) {$/;"	f	typeref:typename:void	signature:(array_container_t * array)
array_container_clone	sylar/sylar/ds/roaring.c	/^array_container_t *array_container_clone(const array_container_t *src) {$/;"	f	typeref:typename:array_container_t *	signature:(const array_container_t * src)
array_container_clone	sylar/sylar/ds/roaring.h	/^array_container_t *array_container_clone(const array_container_t *src);$/;"	p	typeref:typename:array_container_t *	signature:(const array_container_t * src)
array_container_contains	sylar/sylar/ds/roaring.c	/^extern inline bool array_container_contains(const array_container_t *arr,$/;"	p	typeref:typename:bool	file:	signature:(const array_container_t * arr,uint16_t pos)
array_container_contains	sylar/sylar/ds/roaring.h	/^inline bool array_container_contains(const array_container_t *arr,$/;"	f	typeref:typename:bool	signature:(const array_container_t * arr,uint16_t pos)
array_container_contains_range	sylar/sylar/ds/roaring.h	/^static inline bool array_container_contains_range(const array_container_t *arr,$/;"	f	typeref:typename:bool	signature:(const array_container_t * arr,uint32_t range_start,uint32_t range_end)
array_container_copy	sylar/sylar/ds/roaring.c	/^void array_container_copy(const array_container_t *src,$/;"	f	typeref:typename:void	signature:(const array_container_t * src,array_container_t * dst)
array_container_copy	sylar/sylar/ds/roaring.h	/^void array_container_copy(const array_container_t *src, array_container_t *dst);$/;"	p	typeref:typename:void	signature:(const array_container_t * src,array_container_t * dst)
array_container_create	sylar/sylar/ds/roaring.c	/^array_container_t *array_container_create() {$/;"	f	typeref:typename:array_container_t *	signature:()
array_container_create	sylar/sylar/ds/roaring.h	/^array_container_t *array_container_create(void);$/;"	p	typeref:typename:array_container_t *	signature:(void)
array_container_create_given_capacity	sylar/sylar/ds/roaring.c	/^array_container_t *array_container_create_given_capacity(int32_t size) {$/;"	f	typeref:typename:array_container_t *	signature:(int32_t size)
array_container_create_given_capacity	sylar/sylar/ds/roaring.h	/^array_container_t *array_container_create_given_capacity(int32_t size);$/;"	p	typeref:typename:array_container_t *	signature:(int32_t size)
array_container_create_range	sylar/sylar/ds/roaring.c	/^array_container_t * array_container_create_range(uint32_t min, uint32_t max) {$/;"	f	typeref:typename:array_container_t *	signature:(uint32_t min,uint32_t max)
array_container_create_range	sylar/sylar/ds/roaring.h	/^array_container_t * array_container_create_range(uint32_t min, uint32_t max);$/;"	p	typeref:typename:array_container_t *	signature:(uint32_t min,uint32_t max)
array_container_deserialize	sylar/sylar/ds/roaring.c	/^void *array_container_deserialize(const char *buf, size_t buf_len) {$/;"	f	typeref:typename:void *	signature:(const char * buf,size_t buf_len)
array_container_deserialize	sylar/sylar/ds/roaring.h	/^void *array_container_deserialize(const char *buf, size_t buf_len);$/;"	p	typeref:typename:void *	signature:(const char * buf,size_t buf_len)
array_container_empty	sylar/sylar/ds/roaring.c	/^extern inline bool array_container_empty(const array_container_t *array);$/;"	p	typeref:typename:bool	file:	signature:(const array_container_t * array)
array_container_empty	sylar/sylar/ds/roaring.h	/^static inline bool array_container_empty(const array_container_t *array) {$/;"	f	typeref:typename:bool	signature:(const array_container_t * array)
array_container_equal_bitset	sylar/sylar/ds/roaring.c	/^bool array_container_equal_bitset(const array_container_t* container1,$/;"	f	typeref:typename:bool	signature:(const array_container_t * container1,const bitset_container_t * container2)
array_container_equal_bitset	sylar/sylar/ds/roaring.h	/^bool array_container_equal_bitset(const array_container_t* container1,$/;"	p	typeref:typename:bool	signature:(const array_container_t * container1,const bitset_container_t * container2)
array_container_equals	sylar/sylar/ds/roaring.h	/^static inline bool array_container_equals($/;"	f	typeref:typename:bool	signature:(const array_container_t * container1,const array_container_t * container2)
array_container_free	sylar/sylar/ds/roaring.c	/^void array_container_free(array_container_t *arr) {$/;"	f	typeref:typename:void	signature:(array_container_t * arr)
array_container_free	sylar/sylar/ds/roaring.h	/^void array_container_free(array_container_t *array);$/;"	p	typeref:typename:void	signature:(array_container_t * array)
array_container_from_bitset	sylar/sylar/ds/roaring.c	/^array_container_t *array_container_from_bitset(const bitset_container_t *bits) {$/;"	f	typeref:typename:array_container_t *	signature:(const bitset_container_t * bits)
array_container_from_bitset	sylar/sylar/ds/roaring.h	/^array_container_t *array_container_from_bitset(const bitset_container_t *bits);$/;"	p	typeref:typename:array_container_t *	signature:(const bitset_container_t * bits)
array_container_from_run	sylar/sylar/ds/roaring.c	/^array_container_t *array_container_from_run(const run_container_t *arr) {$/;"	f	typeref:typename:array_container_t *	signature:(const run_container_t * arr)
array_container_from_run	sylar/sylar/ds/roaring.h	/^array_container_t *array_container_from_run(const run_container_t *arr);$/;"	p	typeref:typename:array_container_t *	signature:(const run_container_t * arr)
array_container_full	sylar/sylar/ds/roaring.c	/^extern inline bool array_container_full(const array_container_t *array);$/;"	p	typeref:typename:bool	file:	signature:(const array_container_t * array)
array_container_full	sylar/sylar/ds/roaring.h	/^static inline bool array_container_full(const array_container_t *array) {$/;"	f	typeref:typename:bool	signature:(const array_container_t * array)
array_container_grow	sylar/sylar/ds/roaring.c	/^void array_container_grow(array_container_t *container, int32_t min,$/;"	f	typeref:typename:void	signature:(array_container_t * container,int32_t min,bool preserve)
array_container_grow	sylar/sylar/ds/roaring.h	/^void array_container_grow(array_container_t *container, int32_t min,$/;"	p	typeref:typename:void	signature:(array_container_t * container,int32_t min,bool preserve)
array_container_index_equalorlarger	sylar/sylar/ds/roaring.c	/^extern inline int array_container_index_equalorlarger(const array_container_t *arr, uint16_t x);$/;"	p	typeref:typename:int	file:	signature:(const array_container_t * arr,uint16_t x)
array_container_index_equalorlarger	sylar/sylar/ds/roaring.h	/^inline int array_container_index_equalorlarger(const array_container_t *arr, uint16_t x) {$/;"	f	typeref:typename:int	signature:(const array_container_t * arr,uint16_t x)
array_container_intersect	sylar/sylar/ds/roaring.c	/^bool array_container_intersect(const array_container_t *array1,$/;"	f	typeref:typename:bool	signature:(const array_container_t * array1,const array_container_t * array2)
array_container_intersect	sylar/sylar/ds/roaring.h	/^bool array_container_intersect(const array_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const array_container_t * src_1,const array_container_t * src_2)
array_container_intersection	sylar/sylar/ds/roaring.c	/^void array_container_intersection(const array_container_t *array1,$/;"	f	typeref:typename:void	signature:(const array_container_t * array1,const array_container_t * array2,array_container_t * out)
array_container_intersection	sylar/sylar/ds/roaring.h	/^void array_container_intersection(const array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * src_1,const array_container_t * src_2,array_container_t * dst)
array_container_intersection_cardinality	sylar/sylar/ds/roaring.c	/^int array_container_intersection_cardinality(const array_container_t *array1,$/;"	f	typeref:typename:int	signature:(const array_container_t * array1,const array_container_t * array2)
array_container_intersection_cardinality	sylar/sylar/ds/roaring.h	/^int array_container_intersection_cardinality(const array_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const array_container_t * src_1,const array_container_t * src_2)
array_container_intersection_inplace	sylar/sylar/ds/roaring.c	/^void array_container_intersection_inplace(array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(array_container_t * src_1,const array_container_t * src_2)
array_container_intersection_inplace	sylar/sylar/ds/roaring.h	/^void array_container_intersection_inplace(array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(array_container_t * src_1,const array_container_t * src_2)
array_container_is_subset	sylar/sylar/ds/roaring.c	/^bool array_container_is_subset(const array_container_t *container1,$/;"	f	typeref:typename:bool	signature:(const array_container_t * container1,const array_container_t * container2)
array_container_is_subset	sylar/sylar/ds/roaring.h	/^bool array_container_is_subset(const array_container_t *container1,$/;"	p	typeref:typename:bool	signature:(const array_container_t * container1,const array_container_t * container2)
array_container_is_subset_bitset	sylar/sylar/ds/roaring.c	/^bool array_container_is_subset_bitset(const array_container_t* container1,$/;"	f	typeref:typename:bool	signature:(const array_container_t * container1,const bitset_container_t * container2)
array_container_is_subset_bitset	sylar/sylar/ds/roaring.h	/^bool array_container_is_subset_bitset(const array_container_t* container1,$/;"	p	typeref:typename:bool	signature:(const array_container_t * container1,const bitset_container_t * container2)
array_container_is_subset_run	sylar/sylar/ds/roaring.c	/^bool array_container_is_subset_run(const array_container_t* container1,$/;"	f	typeref:typename:bool	signature:(const array_container_t * container1,const run_container_t * container2)
array_container_is_subset_run	sylar/sylar/ds/roaring.h	/^bool array_container_is_subset_run(const array_container_t* container1,$/;"	p	typeref:typename:bool	signature:(const array_container_t * container1,const run_container_t * container2)
array_container_iterate	sylar/sylar/ds/roaring.c	/^bool array_container_iterate(const array_container_t *cont, uint32_t base,$/;"	f	typeref:typename:bool	signature:(const array_container_t * cont,uint32_t base,roaring_iterator iterator,void * ptr)
array_container_iterate	sylar/sylar/ds/roaring.h	/^bool array_container_iterate(const array_container_t *cont, uint32_t base,$/;"	p	typeref:typename:bool	signature:(const array_container_t * cont,uint32_t base,roaring_iterator iterator,void * ptr)
array_container_iterate64	sylar/sylar/ds/roaring.c	/^bool array_container_iterate64(const array_container_t *cont, uint32_t base,$/;"	f	typeref:typename:bool	signature:(const array_container_t * cont,uint32_t base,roaring_iterator64 iterator,uint64_t high_bits,void * ptr)
array_container_iterate64	sylar/sylar/ds/roaring.h	/^bool array_container_iterate64(const array_container_t *cont, uint32_t base,$/;"	p	typeref:typename:bool	signature:(const array_container_t * cont,uint32_t base,roaring_iterator64 iterator,uint64_t high_bits,void * ptr)
array_container_maximum	sylar/sylar/ds/roaring.c	/^extern inline uint16_t array_container_maximum(const array_container_t *arr);$/;"	p	typeref:typename:uint16_t	file:	signature:(const array_container_t * arr)
array_container_maximum	sylar/sylar/ds/roaring.h	/^inline uint16_t array_container_maximum(const array_container_t *arr) {$/;"	f	typeref:typename:uint16_t	signature:(const array_container_t * arr)
array_container_minimum	sylar/sylar/ds/roaring.c	/^extern inline uint16_t array_container_minimum(const array_container_t *arr);$/;"	p	typeref:typename:uint16_t	file:	signature:(const array_container_t * arr)
array_container_minimum	sylar/sylar/ds/roaring.h	/^inline uint16_t array_container_minimum(const array_container_t *arr) {$/;"	f	typeref:typename:uint16_t	signature:(const array_container_t * arr)
array_container_negation	sylar/sylar/ds/roaring.c	/^void array_container_negation(const array_container_t *src,$/;"	f	typeref:typename:void	signature:(const array_container_t * src,bitset_container_t * dst)
array_container_negation	sylar/sylar/ds/roaring.h	/^void array_container_negation(const array_container_t *src,$/;"	p	typeref:typename:void	signature:(const array_container_t * src,bitset_container_t * dst)
array_container_negation_range	sylar/sylar/ds/roaring.c	/^bool array_container_negation_range(const array_container_t *src,$/;"	f	typeref:typename:bool	signature:(const array_container_t * src,const int range_start,const int range_end,void ** dst)
array_container_negation_range	sylar/sylar/ds/roaring.h	/^bool array_container_negation_range(const array_container_t *src,$/;"	p	typeref:typename:bool	signature:(const array_container_t * src,const int range_start,const int range_end,void ** dst)
array_container_negation_range_inplace	sylar/sylar/ds/roaring.c	/^bool array_container_negation_range_inplace(array_container_t *src,$/;"	f	typeref:typename:bool	signature:(array_container_t * src,const int range_start,const int range_end,void ** dst)
array_container_negation_range_inplace	sylar/sylar/ds/roaring.h	/^bool array_container_negation_range_inplace(array_container_t *src,$/;"	p	typeref:typename:bool	signature:(array_container_t * src,const int range_start,const int range_end,void ** dst)
array_container_nonzero_cardinality	sylar/sylar/ds/roaring.c	/^extern inline bool array_container_nonzero_cardinality(const array_container_t *array);$/;"	p	typeref:typename:bool	file:	signature:(const array_container_t * array)
array_container_nonzero_cardinality	sylar/sylar/ds/roaring.h	/^static inline bool array_container_nonzero_cardinality($/;"	f	typeref:typename:bool	signature:(const array_container_t * array)
array_container_number_of_runs	sylar/sylar/ds/roaring.c	/^int32_t array_container_number_of_runs(const array_container_t *a) {$/;"	f	typeref:typename:int32_t	signature:(const array_container_t * a)
array_container_number_of_runs	sylar/sylar/ds/roaring.h	/^int32_t array_container_number_of_runs(const array_container_t *a);$/;"	p	typeref:typename:int32_t	signature:(const array_container_t * a)
array_container_printf	sylar/sylar/ds/roaring.c	/^void array_container_printf(const array_container_t *v) {$/;"	f	typeref:typename:void	signature:(const array_container_t * v)
array_container_printf	sylar/sylar/ds/roaring.h	/^void array_container_printf(const array_container_t *v);$/;"	p	typeref:typename:void	signature:(const array_container_t * v)
array_container_printf_as_uint32_array	sylar/sylar/ds/roaring.c	/^void array_container_printf_as_uint32_array(const array_container_t *v,$/;"	f	typeref:typename:void	signature:(const array_container_t * v,uint32_t base)
array_container_printf_as_uint32_array	sylar/sylar/ds/roaring.h	/^void array_container_printf_as_uint32_array(const array_container_t *v,$/;"	p	typeref:typename:void	signature:(const array_container_t * v,uint32_t base)
array_container_rank	sylar/sylar/ds/roaring.c	/^extern inline int array_container_rank(const array_container_t *arr,$/;"	p	typeref:typename:int	file:	signature:(const array_container_t * arr,uint16_t x)
array_container_rank	sylar/sylar/ds/roaring.h	/^inline int array_container_rank(const array_container_t *arr, uint16_t x) {$/;"	f	typeref:typename:int	signature:(const array_container_t * arr,uint16_t x)
array_container_read	sylar/sylar/ds/roaring.c	/^int32_t array_container_read(int32_t cardinality, array_container_t *container,$/;"	f	typeref:typename:int32_t	signature:(int32_t cardinality,array_container_t * container,const char * buf)
array_container_read	sylar/sylar/ds/roaring.h	/^int32_t array_container_read(int32_t cardinality, array_container_t *container,$/;"	p	typeref:typename:int32_t	signature:(int32_t cardinality,array_container_t * container,const char * buf)
array_container_remove	sylar/sylar/ds/roaring.h	/^static inline bool array_container_remove(array_container_t *arr,$/;"	f	typeref:typename:bool	signature:(array_container_t * arr,uint16_t pos)
array_container_remove_range	sylar/sylar/ds/roaring.h	/^static inline void array_container_remove_range(array_container_t *array,$/;"	f	typeref:typename:void	signature:(array_container_t * array,uint32_t pos,uint32_t count)
array_container_s	sylar/sylar/ds/roaring.h	/^struct array_container_s {$/;"	s
array_container_s::array	sylar/sylar/ds/roaring.h	/^    uint16_t *array;$/;"	m	struct:array_container_s	typeref:typename:uint16_t *	access:public
array_container_s::capacity	sylar/sylar/ds/roaring.h	/^    int32_t capacity;$/;"	m	struct:array_container_s	typeref:typename:int32_t	access:public
array_container_s::cardinality	sylar/sylar/ds/roaring.h	/^    int32_t cardinality;$/;"	m	struct:array_container_s	typeref:typename:int32_t	access:public
array_container_select	sylar/sylar/ds/roaring.h	/^static inline bool array_container_select(const array_container_t *container,$/;"	f	typeref:typename:bool	signature:(const array_container_t * container,uint32_t * start_rank,uint32_t rank,uint32_t * element)
array_container_serialization_len	sylar/sylar/ds/roaring.c	/^uint32_t array_container_serialization_len(const array_container_t *container) {$/;"	f	typeref:typename:uint32_t	signature:(const array_container_t * container)
array_container_serialization_len	sylar/sylar/ds/roaring.h	/^uint32_t array_container_serialization_len(const array_container_t *container);$/;"	p	typeref:typename:uint32_t	signature:(const array_container_t * container)
array_container_serialize	sylar/sylar/ds/roaring.c	/^int32_t array_container_serialize(const array_container_t *container, char *buf) {$/;"	f	typeref:typename:int32_t	signature:(const array_container_t * container,char * buf)
array_container_serialize	sylar/sylar/ds/roaring.h	/^int32_t array_container_serialize(const array_container_t *container,$/;"	p	typeref:typename:int32_t	signature:(const array_container_t * container,char * buf)
array_container_serialized_size_in_bytes	sylar/sylar/ds/roaring.c	/^extern inline int32_t array_container_serialized_size_in_bytes(int32_t card);$/;"	p	typeref:typename:int32_t	file:	signature:(int32_t card)
array_container_serialized_size_in_bytes	sylar/sylar/ds/roaring.h	/^static inline int32_t array_container_serialized_size_in_bytes(int32_t card) {$/;"	f	typeref:typename:int32_t	signature:(int32_t card)
array_container_shrink_to_fit	sylar/sylar/ds/roaring.c	/^int array_container_shrink_to_fit(array_container_t *src) {$/;"	f	typeref:typename:int	signature:(array_container_t * src)
array_container_shrink_to_fit	sylar/sylar/ds/roaring.h	/^int array_container_shrink_to_fit(array_container_t *src);$/;"	p	typeref:typename:int	signature:(array_container_t * src)
array_container_size_in_bytes	sylar/sylar/ds/roaring.h	/^static inline int32_t array_container_size_in_bytes($/;"	f	typeref:typename:int32_t	signature:(const array_container_t * container)
array_container_t	sylar/sylar/ds/roaring.h	/^typedef struct array_container_s array_container_t;$/;"	t	typeref:struct:array_container_s
array_container_to_uint32_array	sylar/sylar/ds/roaring.c	/^int array_container_to_uint32_array(void *vout, const array_container_t *cont,$/;"	f	typeref:typename:int	signature:(void * vout,const array_container_t * cont,uint32_t base)
array_container_to_uint32_array	sylar/sylar/ds/roaring.h	/^int array_container_to_uint32_array(void *vout, const array_container_t *cont,$/;"	p	typeref:typename:int	signature:(void * vout,const array_container_t * cont,uint32_t base)
array_container_try_add	sylar/sylar/ds/roaring.h	/^static inline int array_container_try_add(array_container_t *arr, uint16_t value,$/;"	f	typeref:typename:int	signature:(array_container_t * arr,uint16_t value,int32_t max_cardinality)
array_container_union	sylar/sylar/ds/roaring.c	/^void array_container_union(const array_container_t *array_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * array_1,const array_container_t * array_2,array_container_t * out)
array_container_union	sylar/sylar/ds/roaring.h	/^void array_container_union(const array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * src_1,const array_container_t * src_2,array_container_t * dst)
array_container_write	sylar/sylar/ds/roaring.c	/^int32_t array_container_write(const array_container_t *container, char *buf) {$/;"	f	typeref:typename:int32_t	signature:(const array_container_t * container,char * buf)
array_container_write	sylar/sylar/ds/roaring.h	/^int32_t array_container_write(const array_container_t *container, char *buf);$/;"	p	typeref:typename:int32_t	signature:(const array_container_t * container,char * buf)
array_container_xor	sylar/sylar/ds/roaring.c	/^void array_container_xor(const array_container_t *array_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * array_1,const array_container_t * array_2,array_container_t * out)
array_container_xor	sylar/sylar/ds/roaring.h	/^void array_container_xor(const array_container_t *array_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * array_1,const array_container_t * array_2,array_container_t * out)
array_run_container_andnot	sylar/sylar/ds/roaring.c	/^void array_run_container_andnot(const array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * src_1,const run_container_t * src_2,array_container_t * dst)
array_run_container_andnot	sylar/sylar/ds/roaring.h	/^void array_run_container_andnot(const array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * src_1,const run_container_t * src_2,array_container_t * dst)
array_run_container_iandnot	sylar/sylar/ds/roaring.c	/^void array_run_container_iandnot(array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(array_container_t * src_1,const run_container_t * src_2)
array_run_container_iandnot	sylar/sylar/ds/roaring.h	/^void array_run_container_iandnot(array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(array_container_t * src_1,const run_container_t * src_2)
array_run_container_inplace_union	sylar/sylar/ds/roaring.c	/^void array_run_container_inplace_union(const array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * src_1,run_container_t * src_2)
array_run_container_inplace_union	sylar/sylar/ds/roaring.h	/^void array_run_container_inplace_union(const array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * src_1,run_container_t * src_2)
array_run_container_intersect	sylar/sylar/ds/roaring.c	/^bool array_run_container_intersect(const array_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const array_container_t * src_1,const run_container_t * src_2)
array_run_container_intersect	sylar/sylar/ds/roaring.h	/^bool array_run_container_intersect(const array_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const array_container_t * src_1,const run_container_t * src_2)
array_run_container_intersection	sylar/sylar/ds/roaring.c	/^void array_run_container_intersection(const array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * src_1,const run_container_t * src_2,array_container_t * dst)
array_run_container_intersection	sylar/sylar/ds/roaring.h	/^void array_run_container_intersection(const array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * src_1,const run_container_t * src_2,array_container_t * dst)
array_run_container_intersection_cardinality	sylar/sylar/ds/roaring.c	/^int array_run_container_intersection_cardinality(const array_container_t *src_1,$/;"	f	typeref:typename:int	signature:(const array_container_t * src_1,const run_container_t * src_2)
array_run_container_intersection_cardinality	sylar/sylar/ds/roaring.h	/^int array_run_container_intersection_cardinality(const array_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const array_container_t * src_1,const run_container_t * src_2)
array_run_container_ixor	sylar/sylar/ds/roaring.c	/^int array_run_container_ixor(array_container_t *src_1,$/;"	f	typeref:typename:int	signature:(array_container_t * src_1,const run_container_t * src_2,void ** dst)
array_run_container_ixor	sylar/sylar/ds/roaring.h	/^int array_run_container_ixor(array_container_t *src_1,$/;"	p	typeref:typename:int	signature:(array_container_t * src_1,const run_container_t * src_2,void ** dst)
array_run_container_lazy_xor	sylar/sylar/ds/roaring.c	/^void array_run_container_lazy_xor(const array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * src_1,const run_container_t * src_2,run_container_t * dst)
array_run_container_lazy_xor	sylar/sylar/ds/roaring.h	/^void array_run_container_lazy_xor(const array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * src_1,const run_container_t * src_2,run_container_t * dst)
array_run_container_union	sylar/sylar/ds/roaring.c	/^void array_run_container_union(const array_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const array_container_t * src_1,const run_container_t * src_2,run_container_t * dst)
array_run_container_union	sylar/sylar/ds/roaring.h	/^void array_run_container_union(const array_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const array_container_t * src_1,const run_container_t * src_2,run_container_t * dst)
array_run_container_xor	sylar/sylar/ds/roaring.c	/^int array_run_container_xor(const array_container_t *src_1,$/;"	f	typeref:typename:int	signature:(const array_container_t * src_1,const run_container_t * src_2,void ** dst)
array_run_container_xor	sylar/sylar/ds/roaring.h	/^int array_run_container_xor(const array_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const array_container_t * src_1,const run_container_t * src_2,void ** dst)
at	sylar/sylar/ds/array.h	/^    T& at(uint64_t idx) {$/;"	f	class:sylar::ds::Array	typeref:typename:T &	access:public	signature:(uint64_t idx)
at	sylar/sylar/ds/array.h	/^    const T& at(uint64_t idx) const {$/;"	f	class:sylar::ds::Array	typeref:typename:const T &	access:public	signature:(uint64_t idx) const
avx2_harley_seal_popcount256	sylar/sylar/ds/roaring.h	/^inline static uint64_t avx2_harley_seal_popcount256(const __m256i *data,$/;"	f	typeref:typename:uint64_t	signature:(const __m256i * data,const uint64_t size)
back	sylar/sylar/fiber.cc	/^void Fiber::back() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
back	sylar/sylar/fiber.h	/^    void back();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
base64decode	sylar/sylar/util/hash_util.cc	/^std::string base64decode(const std::string &src) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & src)
base64decode	sylar/sylar/util/hash_util.h	/^std::string base64decode(const std::string &src);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & src)
base64encode	sylar/sylar/util/hash_util.cc	/^std::string base64encode(const std::string& data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
base64encode	sylar/sylar/util/hash_util.cc	/^std::string base64encode(const void* data, size_t len) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
base64encode	sylar/sylar/util/hash_util.h	/^std::string base64encode(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
base64encode	sylar/sylar/util/hash_util.h	/^std::string base64encode(const void *data, size_t len);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
base_type	sylar/sylar/ds/bitmap.h	/^    typedef uint16_t base_type;$/;"	t	class:sylar::ds::Bitmap	typeref:typename:uint16_t	access:public
base_type	sylar/sylar/ds/bitmap.h	/^    typedef uint32_t base_type;$/;"	t	class:sylar::ds::Bitmap	typeref:typename:uint32_t	access:public
base_type	sylar/sylar/ds/bitmap.h	/^    typedef uint64_t base_type;$/;"	t	class:sylar::ds::Bitmap	typeref:typename:uint64_t	access:public
base_type	sylar/sylar/ds/bitmap.h	/^    typedef uint8_t base_type;$/;"	t	class:sylar::ds::Bitmap	typeref:typename:uint8_t	access:public
basket	sylar/sylar/ds/util.h	/^inline int basket(const int &  n) {$/;"	f	namespace:sylar::ds	typeref:typename:int	signature:(const int & n)
batchDispatch	sylar/sylar/db/fox_thread.cc	/^bool FoxThread::batchDispatch(const std::vector<callback>& cbs) {$/;"	f	class:sylar::FoxThread	typeref:typename:bool	signature:(const std::vector<callback> & cbs)
batchDispatch	sylar/sylar/db/fox_thread.cc	/^bool FoxThreadPool::batchDispatch(const std::vector<callback>& cbs) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:bool	signature:(const std::vector<callback> & cbs)
batchDispatch	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::batchDispatch(const std::string& name, const std::vector<callback>& cbs) /;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:(const std::string & name,const std::vector<callback> & cbs)
batchDispatch	sylar/sylar/db/fox_thread.h	/^    bool batchDispatch(const std::vector<callback>& cb);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:bool	access:public	signature:(const std::vector<callback> & cb)
batchDispatch	sylar/sylar/db/fox_thread.h	/^    virtual bool batchDispatch(const std::vector<callback>& cbs) = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:bool	access:public	signature:(const std::vector<callback> & cbs)
batchDispatch	sylar/sylar/db/fox_thread.h	/^    virtual bool batchDispatch(const std::vector<callback>& cbs);$/;"	p	class:sylar::FoxThread	typeref:typename:bool	access:public	signature:(const std::vector<callback> & cbs)
batchDispatch	sylar/sylar/db/fox_thread.h	/^    void batchDispatch(const std::string& name, const std::vector<callback>& cbs);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:(const std::string & name,const std::vector<callback> & cbs)
begin	sylar/sylar/db/db.h	/^    virtual bool begin() = 0;$/;"	p	class:sylar::ITransaction	typeref:typename:bool	access:public	signature:()
begin	sylar/sylar/db/mysql.cc	/^bool MySQLTransaction::begin() {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:bool	signature:()
begin	sylar/sylar/db/mysql.h	/^    bool begin() override;$/;"	p	class:sylar::MySQLTransaction	typeref:typename:bool	access:public	signature:()
begin	sylar/sylar/db/sqlite3.cc	/^bool SQLite3Transaction::begin() {$/;"	f	class:sylar::SQLite3Transaction	typeref:typename:bool	signature:()
begin	sylar/sylar/db/sqlite3.h	/^    bool begin() override;$/;"	p	class:sylar::SQLite3Transaction	typeref:typename:bool	access:public	signature:()
begin	sylar/sylar/ds/array.h	/^    T* begin() {$/;"	f	class:sylar::ds::Array	typeref:typename:T *	access:public	signature:()
begin	sylar/sylar/ds/array.h	/^    const T* begin() const {$/;"	f	class:sylar::ds::Array	typeref:typename:const T *	access:public	signature:() const
begin	sylar/sylar/ds/bitmap.h	/^    iterator begin() { return iterator(this);}$/;"	f	class:sylar::ds::Bitmap	typeref:typename:iterator	access:public	signature:()
begin	sylar/sylar/ds/roaring.hh	/^    const_iterator begin() const;$/;"	p	class:Roaring	typeref:typename:const_iterator	access:public	signature:() const
begin	sylar/sylar/ds/roaring.hh	/^    const_iterator begin() const;$/;"	p	class:Roaring64Map	typeref:typename:const_iterator	access:public	signature:() const
begin	sylar/sylar/ds/roaring.hh	/^inline Roaring64MapSetBitForwardIterator Roaring64Map::begin() const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64MapSetBitForwardIterator	signature:() const
begin	sylar/sylar/ds/roaring.hh	/^inline RoaringSetBitForwardIterator Roaring::begin() const {$/;"	f	class:Roaring	typeref:typename:RoaringSetBitForwardIterator	signature:() const
begin	sylar/sylar/ds/roaring_bitmap.h	/^    iterator begin() const { return m_bitmap.begin();}$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:iterator	access:public	signature:() const
begin_new	sylar/sylar/ds/bitmap.cc	/^Bitmap::iterator_base::ptr Bitmap::begin_new() {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap::iterator_base::ptr	signature:()
begin_new	sylar/sylar/ds/bitmap.h	/^    typename iterator_base::ptr begin_new();$/;"	p	class:sylar::ds::Bitmap	typeref:typename:iterator_base::ptr	access:public	signature:()
bin_sylar	build/Makefile	/^bin_sylar: cmake_check_build_system$/;"	t
bin_sylar	build/sylar/Makefile	/^bin_sylar: sylar\/CMakeFiles\/bin_sylar.dir\/rule$/;"	t
bin_sylar/fast	build/Makefile	/^bin_sylar\/fast:$/;"	t
bin_sylar/fast	build/sylar/Makefile	/^bin_sylar\/fast:$/;"	t
binarySearch	sylar/sylar/ds/roaring.c	/^extern inline int32_t binarySearch(const uint16_t *array, int32_t lenarray,$/;"	p	typeref:typename:int32_t	file:	signature:(const uint16_t * array,int32_t lenarray,uint16_t ikey)
binarySearch	sylar/sylar/ds/roaring.h	/^inline int32_t binarySearch(const uint16_t *array, int32_t lenarray,$/;"	f	typeref:typename:int32_t	signature:(const uint16_t * array,int32_t lenarray,uint16_t ikey)
binarySearch2	sylar/sylar/ds/roaring.c	/^static void binarySearch2(const uint16_t *array, int32_t n, uint16_t target1,$/;"	f	typeref:typename:void	file:	signature:(const uint16_t * array,int32_t n,uint16_t target1,uint16_t target2,int32_t * index1,int32_t * index2)
binarySearch4	sylar/sylar/ds/roaring.c	/^static void binarySearch4(const uint16_t *array, int32_t n, uint16_t target1,$/;"	f	typeref:typename:void	file:	signature:(const uint16_t * array,int32_t n,uint16_t target1,uint16_t target2,uint16_t target3,uint16_t target4,int32_t * index1,int32_t * index2,int32_t * index3,int32_t * index4)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const char* value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const char * value)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const double& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const double & value)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const float& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const float & value)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const int16_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int16_t & value)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const int32_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int32_t & value)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const int64_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int64_t & value)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const int8_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int8_t & value)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const std::string& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const std::string & value)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const uint16_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint16_t & value)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const uint32_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint32_t & value)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const uint64_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint64_t & value)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const uint8_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint8_t & value)
bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const void* value, int len) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const void * value,int len)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const char* value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const char * value)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const double& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const double & value)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const float& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const float & value)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const int16_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int16_t & value)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const int32_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int32_t & value)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const int64_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int64_t & value)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const int8_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int8_t & value)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const std::string& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const uint16_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint16_t & value)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const uint32_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint32_t & value)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const uint64_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint64_t & value)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const uint8_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint8_t & value)
bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const void* value, int len);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const void * value,int len)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, const char* value, Type type) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,const char * value,Type type)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, const std::string& value, Type type) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,const std::string & value,Type type)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, const void* value, int len, Type type) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,const void * value,int len,Type type)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, double value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,double value)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, int32_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,int32_t value)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, int64_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,int64_t value)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, uint32_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,uint32_t value)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, uint64_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,uint64_t value)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, const char* value, Type type) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const char * value,Type type)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, const std::string& value, Type type) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const std::string & value,Type type)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, const void* value, int len, Type type) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const void * value,int len,Type type)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, double value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,double value)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, int32_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,int32_t value)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, int64_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,int64_t value)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, uint32_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,uint32_t value)
bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, uint64_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,uint64_t value)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, const char* value, Type type = COPY);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,const char * value,Type type=COPY)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, const std::string& value, Type type = COPY);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,const std::string & value,Type type=COPY)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, const void* value, int len, Type type = COPY);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,const void * value,int len,Type type=COPY)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, double value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,double value)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, int32_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,int32_t value)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, int64_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,int64_t value)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, uint32_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,uint32_t value)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, uint64_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,uint64_t value)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, const char* value, Type type = COPY);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const char * value,Type type=COPY)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, const std::string& value, Type type = COPY);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value,Type type=COPY)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, const void* value, int len, Type type = COPY);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const void * value,int len,Type type=COPY)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, double value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,double value)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, int32_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,int32_t value)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, int64_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,int64_t value)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, uint32_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,uint32_t value)
bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, uint64_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,uint64_t value)
bind	sylar/sylar/socket.cc	/^bool SSLSocket::bind(const Address::ptr addr) {$/;"	f	class:sylar::SSLSocket	typeref:typename:bool	signature:(const Address::ptr addr)
bind	sylar/sylar/socket.cc	/^bool Socket::bind(const Address::ptr addr) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(const Address::ptr addr)
bind	sylar/sylar/socket.h	/^    virtual bool bind(const Address::ptr addr) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:bool	access:public	signature:(const Address::ptr addr)
bind	sylar/sylar/socket.h	/^    virtual bool bind(const Address::ptr addr);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:(const Address::ptr addr)
bind	sylar/sylar/tcp_server.cc	/^bool TcpServer::bind(const std::vector<Address::ptr>& addrs$/;"	f	class:sylar::TcpServer	typeref:typename:bool	signature:(const std::vector<Address::ptr> & addrs,std::vector<Address::ptr> & fails,bool ssl)
bind	sylar/sylar/tcp_server.cc	/^bool TcpServer::bind(sylar::Address::ptr addr, bool ssl) {$/;"	f	class:sylar::TcpServer	typeref:typename:bool	signature:(sylar::Address::ptr addr,bool ssl)
bind	sylar/sylar/tcp_server.h	/^    virtual bool bind(const std::vector<Address::ptr>& addrs$/;"	p	class:sylar::TcpServer	typeref:typename:bool	access:public	signature:(const std::vector<Address::ptr> & addrs,std::vector<Address::ptr> & fails,bool ssl=false)
bind	sylar/sylar/tcp_server.h	/^    virtual bool bind(sylar::Address::ptr addr, bool ssl = false);$/;"	p	class:sylar::TcpServer	typeref:typename:bool	access:public	signature:(sylar::Address::ptr addr,bool ssl=false)
bindBlob	sylar/sylar/db/db.h	/^    virtual int bindBlob(int idx, const std::string& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
bindBlob	sylar/sylar/db/db.h	/^    virtual int bindBlob(int idx, const void* value, int64_t size) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const void * value,int64_t size)
bindBlob	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindBlob(int idx, const std::string& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const std::string & value)
bindBlob	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindBlob(int idx, const void* value, int64_t size) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const void * value,int64_t size)
bindBlob	sylar/sylar/db/mysql.h	/^    int bindBlob(int idx, const std::string& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
bindBlob	sylar/sylar/db/mysql.h	/^    int bindBlob(int idx, const void* value, int64_t size) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const void * value,int64_t size)
bindBlob	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindBlob(int idx, const std::string& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const std::string & value)
bindBlob	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindBlob(int idx, const void* value, int64_t size) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const void * value,int64_t size)
bindBlob	sylar/sylar/db/sqlite3.h	/^    int bindBlob(int idx, const std::string& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
bindBlob	sylar/sylar/db/sqlite3.h	/^    int bindBlob(int idx, const void* value, int64_t size) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const void * value,int64_t size)
bindDouble	sylar/sylar/db/db.h	/^    virtual int bindDouble(int idx, const double& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const double & value)
bindDouble	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindDouble(int idx, const double& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const double & value)
bindDouble	sylar/sylar/db/mysql.h	/^    int bindDouble(int idx, const double& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const double & value)
bindDouble	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindDouble(int idx, const double& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const double & value)
bindDouble	sylar/sylar/db/sqlite3.h	/^    int bindDouble(int idx, const double& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const double & value)
bindFloat	sylar/sylar/db/db.h	/^    virtual int bindFloat(int idx, const float& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const float & value)
bindFloat	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindFloat(int idx, const float& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const float & value)
bindFloat	sylar/sylar/db/mysql.h	/^    int bindFloat(int idx, const float& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const float & value)
bindFloat	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindFloat(int idx, const float& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const float & value)
bindFloat	sylar/sylar/db/sqlite3.h	/^    int bindFloat(int idx, const float& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const float & value)
bindInt16	sylar/sylar/db/db.h	/^    virtual int bindInt16(int idx, const int16_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const int16_t & value)
bindInt16	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindInt16(int idx, const int16_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int16_t & value)
bindInt16	sylar/sylar/db/mysql.h	/^    int bindInt16(int idx, const int16_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int16_t & value)
bindInt16	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindInt16(int idx, const int16_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const int16_t & value)
bindInt16	sylar/sylar/db/sqlite3.h	/^    int bindInt16(int idx, const int16_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const int16_t & value)
bindInt32	sylar/sylar/db/db.h	/^    virtual int bindInt32(int idx, const int32_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const int32_t & value)
bindInt32	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindInt32(int idx, const int32_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int32_t & value)
bindInt32	sylar/sylar/db/mysql.h	/^    int bindInt32(int idx, const int32_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int32_t & value)
bindInt32	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindInt32(int idx, const int32_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const int32_t & value)
bindInt32	sylar/sylar/db/sqlite3.h	/^    int bindInt32(int idx, const int32_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const int32_t & value)
bindInt64	sylar/sylar/db/db.h	/^    virtual int bindInt64(int idx, const int64_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const int64_t & value)
bindInt64	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindInt64(int idx, const int64_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int64_t & value)
bindInt64	sylar/sylar/db/mysql.h	/^    int bindInt64(int idx, const int64_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int64_t & value)
bindInt64	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindInt64(int idx, const int64_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const int64_t & value)
bindInt64	sylar/sylar/db/sqlite3.h	/^    int bindInt64(int idx, const int64_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const int64_t & value)
bindInt8	sylar/sylar/db/db.h	/^    virtual int bindInt8(int idx, const int8_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const int8_t & value)
bindInt8	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindInt8(int idx, const int8_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int8_t & value)
bindInt8	sylar/sylar/db/mysql.h	/^    int bindInt8(int idx, const int8_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int8_t & value)
bindInt8	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindInt8(int idx, const int8_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const int8_t & value)
bindInt8	sylar/sylar/db/sqlite3.h	/^    int bindInt8(int idx, const int8_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const int8_t & value)
bindNull	sylar/sylar/db/db.h	/^    virtual int bindNull(int idx) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx)
bindNull	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindNull(int idx) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx)
bindNull	sylar/sylar/db/mysql.h	/^    int bindNull(int idx) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx)
bindNull	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindNull(int idx) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx)
bindNull	sylar/sylar/db/sqlite3.h	/^    int bindNull(int idx) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx)
bindString	sylar/sylar/db/db.h	/^    virtual int bindString(int idx, const char* value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const char * value)
bindString	sylar/sylar/db/db.h	/^    virtual int bindString(int idx, const std::string& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
bindString	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindString(int idx, const char* value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const char * value)
bindString	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindString(int idx, const std::string& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const std::string & value)
bindString	sylar/sylar/db/mysql.h	/^    int bindString(int idx, const char* value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const char * value)
bindString	sylar/sylar/db/mysql.h	/^    int bindString(int idx, const std::string& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
bindString	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindString(int idx, const char* value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const char * value)
bindString	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindString(int idx, const std::string& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const std::string & value)
bindString	sylar/sylar/db/sqlite3.h	/^    int bindString(int idx, const char* value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const char * value)
bindString	sylar/sylar/db/sqlite3.h	/^    int bindString(int idx, const std::string& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
bindTime	sylar/sylar/db/db.h	/^    virtual int bindTime(int idx, const time_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const time_t & value)
bindTime	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindTime(int idx, const time_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const time_t & value)
bindTime	sylar/sylar/db/mysql.h	/^    int bindTime(int idx, const time_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const time_t & value)
bindTime	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindTime(int idx, const time_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const time_t & value)
bindTime	sylar/sylar/db/sqlite3.h	/^    int bindTime(int idx, const time_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const time_t & value)
bindUint16	sylar/sylar/db/db.h	/^    virtual int bindUint16(int idx, const uint16_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const uint16_t & value)
bindUint16	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindUint16(int idx, const uint16_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint16_t & value)
bindUint16	sylar/sylar/db/mysql.h	/^    int bindUint16(int idx, const uint16_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint16_t & value)
bindUint16	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindUint16(int idx, const uint16_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const uint16_t & value)
bindUint16	sylar/sylar/db/sqlite3.h	/^    int bindUint16(int idx, const uint16_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const uint16_t & value)
bindUint32	sylar/sylar/db/db.h	/^    virtual int bindUint32(int idx, const uint32_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const uint32_t & value)
bindUint32	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindUint32(int idx, const uint32_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint32_t & value)
bindUint32	sylar/sylar/db/mysql.h	/^    int bindUint32(int idx, const uint32_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint32_t & value)
bindUint32	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindUint32(int idx, const uint32_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const uint32_t & value)
bindUint32	sylar/sylar/db/sqlite3.h	/^    int bindUint32(int idx, const uint32_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const uint32_t & value)
bindUint64	sylar/sylar/db/db.h	/^    virtual int bindUint64(int idx, const uint64_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const uint64_t & value)
bindUint64	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindUint64(int idx, const uint64_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint64_t & value)
bindUint64	sylar/sylar/db/mysql.h	/^    int bindUint64(int idx, const uint64_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint64_t & value)
bindUint64	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindUint64(int idx, const uint64_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const uint64_t & value)
bindUint64	sylar/sylar/db/sqlite3.h	/^    int bindUint64(int idx, const uint64_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const uint64_t & value)
bindUint8	sylar/sylar/db/db.h	/^    virtual int bindUint8(int idx, const uint8_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const uint8_t & value)
bindUint8	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindUint8(int idx, const uint8_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint8_t & value)
bindUint8	sylar/sylar/db/mysql.h	/^    int bindUint8(int idx, const uint8_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint8_t & value)
bindUint8	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindUint8(int idx, const uint8_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const uint8_t & value)
bindUint8	sylar/sylar/db/sqlite3.h	/^    int bindUint8(int idx, const uint8_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const uint8_t & value)
bindX	sylar/sylar/db/mysql.h	/^int bindX(MySQLStmt::ptr stmt, Args&... args) {$/;"	f	namespace:sylar::__anonb8e76c1a0110	typeref:typename:int	signature:(MySQLStmt::ptr stmt,Args &...args)
bindX	sylar/sylar/db/sqlite3.h	/^int bindX(SQLite3Stmt::ptr stmt, const Args&... args) {$/;"	f	namespace:sylar::__anonbc7bfd090210	typeref:typename:int	signature:(SQLite3Stmt::ptr stmt,const Args &...args)
bitmap	sylar/sylar/ds/roaring.c	/^    roaring_bitmap_t *bitmap;$/;"	m	struct:roaring_pq_element_s	typeref:typename:roaring_bitmap_t *	file:	access:public
bitmapOf	sylar/sylar/ds/roaring.hh	/^    static Roaring bitmapOf(size_t n, ...) {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(size_t n,...)
bitmapOf	sylar/sylar/ds/roaring.hh	/^    static Roaring64Map bitmapOf(size_t n...) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(size_t n...)
bitset_array_container_andnot	sylar/sylar/ds/roaring.c	/^bool bitset_array_container_andnot(const bitset_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * src_1,const array_container_t * src_2,void ** dst)
bitset_array_container_andnot	sylar/sylar/ds/roaring.h	/^bool bitset_array_container_andnot(const bitset_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * src_1,const array_container_t * src_2,void ** dst)
bitset_array_container_iandnot	sylar/sylar/ds/roaring.c	/^bool bitset_array_container_iandnot(bitset_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(bitset_container_t * src_1,const array_container_t * src_2,void ** dst)
bitset_array_container_iandnot	sylar/sylar/ds/roaring.h	/^bool bitset_array_container_iandnot(bitset_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(bitset_container_t * src_1,const array_container_t * src_2,void ** dst)
bitset_array_container_ixor	sylar/sylar/ds/roaring.c	/^bool bitset_array_container_ixor(bitset_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(bitset_container_t * src_1,const array_container_t * src_2,void ** dst)
bitset_array_container_ixor	sylar/sylar/ds/roaring.h	/^bool bitset_array_container_ixor(bitset_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(bitset_container_t * src_1,const array_container_t * src_2,void ** dst)
bitset_bitset_container_andnot	sylar/sylar/ds/roaring.c	/^bool bitset_bitset_container_andnot(const bitset_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,void ** dst)
bitset_bitset_container_andnot	sylar/sylar/ds/roaring.h	/^bool bitset_bitset_container_andnot(const bitset_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,void ** dst)
bitset_bitset_container_iandnot	sylar/sylar/ds/roaring.c	/^bool bitset_bitset_container_iandnot(bitset_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(bitset_container_t * src_1,const bitset_container_t * src_2,void ** dst)
bitset_bitset_container_iandnot	sylar/sylar/ds/roaring.h	/^bool bitset_bitset_container_iandnot(bitset_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(bitset_container_t * src_1,const bitset_container_t * src_2,void ** dst)
bitset_bitset_container_intersection	sylar/sylar/ds/roaring.c	/^bool bitset_bitset_container_intersection(const bitset_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,void ** dst)
bitset_bitset_container_intersection	sylar/sylar/ds/roaring.h	/^bool bitset_bitset_container_intersection(const bitset_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,void ** dst)
bitset_bitset_container_intersection_inplace	sylar/sylar/ds/roaring.c	/^bool bitset_bitset_container_intersection_inplace($/;"	f	typeref:typename:bool	signature:(bitset_container_t * src_1,const bitset_container_t * src_2,void ** dst)
bitset_bitset_container_intersection_inplace	sylar/sylar/ds/roaring.h	/^bool bitset_bitset_container_intersection_inplace($/;"	p	typeref:typename:bool	signature:(bitset_container_t * src_1,const bitset_container_t * src_2,void ** dst)
bitset_bitset_container_ixor	sylar/sylar/ds/roaring.c	/^bool bitset_bitset_container_ixor(bitset_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(bitset_container_t * src_1,const bitset_container_t * src_2,void ** dst)
bitset_bitset_container_ixor	sylar/sylar/ds/roaring.h	/^bool bitset_bitset_container_ixor(bitset_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(bitset_container_t * src_1,const bitset_container_t * src_2,void ** dst)
bitset_bitset_container_xor	sylar/sylar/ds/roaring.c	/^bool bitset_bitset_container_xor(const bitset_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,void ** dst)
bitset_bitset_container_xor	sylar/sylar/ds/roaring.h	/^bool bitset_bitset_container_xor(const bitset_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,void ** dst)
bitset_clear_list	sylar/sylar/ds/roaring.c	/^uint64_t bitset_clear_list(void *bitset, uint64_t card, const uint16_t *list,$/;"	f	typeref:typename:uint64_t	signature:(void * bitset,uint64_t card,const uint16_t * list,uint64_t length)
bitset_clear_list	sylar/sylar/ds/roaring.h	/^uint64_t bitset_clear_list(void *bitset, uint64_t card, const uint16_t *list,$/;"	p	typeref:typename:uint64_t	signature:(void * bitset,uint64_t card,const uint16_t * list,uint64_t length)
bitset_container_add	sylar/sylar/ds/roaring.c	/^extern inline bool bitset_container_add(bitset_container_t *bitset, uint16_t pos);$/;"	p	typeref:typename:bool	file:	signature:(bitset_container_t * bitset,uint16_t pos)
bitset_container_add	sylar/sylar/ds/roaring.h	/^static inline bool bitset_container_add(bitset_container_t *bitset,$/;"	f	typeref:typename:bool	signature:(bitset_container_t * bitset,uint16_t pos)
bitset_container_add_from_range	sylar/sylar/ds/roaring.c	/^void bitset_container_add_from_range(bitset_container_t *bitset, uint32_t min,$/;"	f	typeref:typename:void	signature:(bitset_container_t * bitset,uint32_t min,uint32_t max,uint16_t step)
bitset_container_add_from_range	sylar/sylar/ds/roaring.h	/^void bitset_container_add_from_range(bitset_container_t *bitset, uint32_t min,$/;"	p	typeref:typename:void	signature:(bitset_container_t * bitset,uint32_t min,uint32_t max,uint16_t step)
bitset_container_and	sylar/sylar/ds/roaring.h	/^int bitset_container_and(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
bitset_container_and_justcard	sylar/sylar/ds/roaring.h	/^int bitset_container_and_justcard(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2)
bitset_container_and_nocard	sylar/sylar/ds/roaring.h	/^int bitset_container_and_nocard(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
bitset_container_andnot	sylar/sylar/ds/roaring.h	/^int bitset_container_andnot(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
bitset_container_andnot_justcard	sylar/sylar/ds/roaring.h	/^int bitset_container_andnot_justcard(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2)
bitset_container_andnot_nocard	sylar/sylar/ds/roaring.h	/^int bitset_container_andnot_nocard(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
bitset_container_cardinality	sylar/sylar/ds/roaring.c	/^extern inline int bitset_container_cardinality(const bitset_container_t *bitset);$/;"	p	typeref:typename:int	file:	signature:(const bitset_container_t * bitset)
bitset_container_cardinality	sylar/sylar/ds/roaring.h	/^static inline int bitset_container_cardinality($/;"	f	typeref:typename:int	signature:(const bitset_container_t * bitset)
bitset_container_clear	sylar/sylar/ds/roaring.c	/^void bitset_container_clear(bitset_container_t *bitset) {$/;"	f	typeref:typename:void	signature:(bitset_container_t * bitset)
bitset_container_clear	sylar/sylar/ds/roaring.h	/^void bitset_container_clear(bitset_container_t *bitset);$/;"	p	typeref:typename:void	signature:(bitset_container_t * bitset)
bitset_container_clone	sylar/sylar/ds/roaring.c	/^bitset_container_t *bitset_container_clone(const bitset_container_t *src) {$/;"	f	typeref:typename:bitset_container_t *	signature:(const bitset_container_t * src)
bitset_container_clone	sylar/sylar/ds/roaring.h	/^bitset_container_t *bitset_container_clone(const bitset_container_t *src);$/;"	p	typeref:typename:bitset_container_t *	signature:(const bitset_container_t * src)
bitset_container_compute_cardinality	sylar/sylar/ds/roaring.c	/^int bitset_container_compute_cardinality(const bitset_container_t *bitset) {$/;"	f	typeref:typename:int	signature:(const bitset_container_t * bitset)
bitset_container_compute_cardinality	sylar/sylar/ds/roaring.h	/^int bitset_container_compute_cardinality(const bitset_container_t *bitset);$/;"	p	typeref:typename:int	signature:(const bitset_container_t * bitset)
bitset_container_const_nonzero_cardinality	sylar/sylar/ds/roaring.h	/^static inline bool bitset_container_const_nonzero_cardinality($/;"	f	typeref:typename:bool	signature:(const bitset_container_t * bitset)
bitset_container_contains	sylar/sylar/ds/roaring.c	/^extern inline bool bitset_container_contains(const bitset_container_t *bitset,$/;"	p	typeref:typename:bool	file:	signature:(const bitset_container_t * bitset,uint16_t pos)
bitset_container_contains	sylar/sylar/ds/roaring.h	/^inline bool bitset_container_contains(const bitset_container_t *bitset,$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * bitset,uint16_t pos)
bitset_container_contains_range	sylar/sylar/ds/roaring.h	/^static inline bool bitset_container_contains_range(const bitset_container_t *bitset,$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * bitset,uint32_t pos_start,uint32_t pos_end)
bitset_container_copy	sylar/sylar/ds/roaring.c	/^void bitset_container_copy(const bitset_container_t *source,$/;"	f	typeref:typename:void	signature:(const bitset_container_t * source,bitset_container_t * dest)
bitset_container_copy	sylar/sylar/ds/roaring.h	/^void bitset_container_copy(const bitset_container_t *source,$/;"	p	typeref:typename:void	signature:(const bitset_container_t * source,bitset_container_t * dest)
bitset_container_create	sylar/sylar/ds/roaring.c	/^bitset_container_t *bitset_container_create(void) {$/;"	f	typeref:typename:bitset_container_t *	signature:(void)
bitset_container_create	sylar/sylar/ds/roaring.h	/^bitset_container_t *bitset_container_create(void);$/;"	p	typeref:typename:bitset_container_t *	signature:(void)
bitset_container_deserialize	sylar/sylar/ds/roaring.c	/^void* bitset_container_deserialize(const char *buf, size_t buf_len) {$/;"	f	typeref:typename:void *	signature:(const char * buf,size_t buf_len)
bitset_container_deserialize	sylar/sylar/ds/roaring.h	/^void *bitset_container_deserialize(const char *buf, size_t buf_len);$/;"	p	typeref:typename:void *	signature:(const char * buf,size_t buf_len)
bitset_container_empty	sylar/sylar/ds/roaring.h	/^static inline bool bitset_container_empty($/;"	f	typeref:typename:bool	signature:(const bitset_container_t * bitset)
bitset_container_equals	sylar/sylar/ds/roaring.c	/^bool bitset_container_equals(const bitset_container_t *container1, const bitset_container_t *con/;"	f	typeref:typename:bool	signature:(const bitset_container_t * container1,const bitset_container_t * container2)
bitset_container_equals	sylar/sylar/ds/roaring.h	/^bool bitset_container_equals(const bitset_container_t *container1,$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * container1,const bitset_container_t * container2)
bitset_container_free	sylar/sylar/ds/roaring.c	/^void bitset_container_free(bitset_container_t *bitset) {$/;"	f	typeref:typename:void	signature:(bitset_container_t * bitset)
bitset_container_free	sylar/sylar/ds/roaring.h	/^void bitset_container_free(bitset_container_t *bitset);$/;"	p	typeref:typename:void	signature:(bitset_container_t * bitset)
bitset_container_from_array	sylar/sylar/ds/roaring.c	/^bitset_container_t *bitset_container_from_array(const array_container_t *a) {$/;"	f	typeref:typename:bitset_container_t *	signature:(const array_container_t * a)
bitset_container_from_array	sylar/sylar/ds/roaring.h	/^bitset_container_t *bitset_container_from_array(const array_container_t *arr);$/;"	p	typeref:typename:bitset_container_t *	signature:(const array_container_t * arr)
bitset_container_from_run	sylar/sylar/ds/roaring.c	/^bitset_container_t *bitset_container_from_run(const run_container_t *arr) {$/;"	f	typeref:typename:bitset_container_t *	signature:(const run_container_t * arr)
bitset_container_from_run	sylar/sylar/ds/roaring.h	/^bitset_container_t *bitset_container_from_run(const run_container_t *arr);$/;"	p	typeref:typename:bitset_container_t *	signature:(const run_container_t * arr)
bitset_container_from_run_range	sylar/sylar/ds/roaring.c	/^bitset_container_t *bitset_container_from_run_range(const run_container_t *run,$/;"	f	typeref:typename:bitset_container_t *	signature:(const run_container_t * run,uint32_t min,uint32_t max)
bitset_container_from_run_range	sylar/sylar/ds/roaring.h	/^bitset_container_t *bitset_container_from_run_range(const run_container_t *run,$/;"	p	typeref:typename:bitset_container_t *	signature:(const run_container_t * run,uint32_t min,uint32_t max)
bitset_container_get	sylar/sylar/ds/roaring.c	/^extern inline bool bitset_container_get(const bitset_container_t *bitset,$/;"	p	typeref:typename:bool	file:	signature:(const bitset_container_t * bitset,uint16_t pos)
bitset_container_get	sylar/sylar/ds/roaring.h	/^inline bool bitset_container_get(const bitset_container_t *bitset,$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * bitset,uint16_t pos)
bitset_container_get_range	sylar/sylar/ds/roaring.h	/^static inline bool bitset_container_get_range(const bitset_container_t *bitset,$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * bitset,uint32_t pos_start,uint32_t pos_end)
bitset_container_index_equalorlarger	sylar/sylar/ds/roaring.c	/^int bitset_container_index_equalorlarger(const bitset_container_t *container, uint16_t x) {$/;"	f	typeref:typename:int	signature:(const bitset_container_t * container,uint16_t x)
bitset_container_index_equalorlarger	sylar/sylar/ds/roaring.h	/^int bitset_container_index_equalorlarger(const bitset_container_t *container, uint16_t x);$/;"	p	typeref:typename:int	signature:(const bitset_container_t * container,uint16_t x)
bitset_container_intersect	sylar/sylar/ds/roaring.c	/^bool bitset_container_intersect(const bitset_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2)
bitset_container_intersect	sylar/sylar/ds/roaring.h	/^bool bitset_container_intersect(const bitset_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2)
bitset_container_intersection	sylar/sylar/ds/roaring.h	/^int bitset_container_intersection(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
bitset_container_intersection_justcard	sylar/sylar/ds/roaring.h	/^int bitset_container_intersection_justcard(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2)
bitset_container_is_subset	sylar/sylar/ds/roaring.c	/^bool bitset_container_is_subset(const bitset_container_t *container1,$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * container1,const bitset_container_t * container2)
bitset_container_is_subset	sylar/sylar/ds/roaring.h	/^bool bitset_container_is_subset(const bitset_container_t *container1,$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * container1,const bitset_container_t * container2)
bitset_container_is_subset_run	sylar/sylar/ds/roaring.c	/^bool bitset_container_is_subset_run(const bitset_container_t* container1,$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * container1,const run_container_t * container2)
bitset_container_is_subset_run	sylar/sylar/ds/roaring.h	/^bool bitset_container_is_subset_run(const bitset_container_t* container1,$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * container1,const run_container_t * container2)
bitset_container_iterate	sylar/sylar/ds/roaring.c	/^bool bitset_container_iterate(const bitset_container_t *cont, uint32_t base, roaring_iterator it/;"	f	typeref:typename:bool	signature:(const bitset_container_t * cont,uint32_t base,roaring_iterator iterator,void * ptr)
bitset_container_iterate	sylar/sylar/ds/roaring.h	/^bool bitset_container_iterate(const bitset_container_t *cont, uint32_t base,$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * cont,uint32_t base,roaring_iterator iterator,void * ptr)
bitset_container_iterate64	sylar/sylar/ds/roaring.c	/^bool bitset_container_iterate64(const bitset_container_t *cont, uint32_t base, roaring_iterator6/;"	f	typeref:typename:bool	signature:(const bitset_container_t * cont,uint32_t base,roaring_iterator64 iterator,uint64_t high_bits,void * ptr)
bitset_container_iterate64	sylar/sylar/ds/roaring.h	/^bool bitset_container_iterate64(const bitset_container_t *cont, uint32_t base,$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * cont,uint32_t base,roaring_iterator64 iterator,uint64_t high_bits,void * ptr)
bitset_container_maximum	sylar/sylar/ds/roaring.c	/^uint16_t bitset_container_maximum(const bitset_container_t *container) {$/;"	f	typeref:typename:uint16_t	signature:(const bitset_container_t * container)
bitset_container_maximum	sylar/sylar/ds/roaring.h	/^uint16_t bitset_container_maximum(const bitset_container_t *container);$/;"	p	typeref:typename:uint16_t	signature:(const bitset_container_t * container)
bitset_container_minimum	sylar/sylar/ds/roaring.c	/^uint16_t bitset_container_minimum(const bitset_container_t *container) {$/;"	f	typeref:typename:uint16_t	signature:(const bitset_container_t * container)
bitset_container_minimum	sylar/sylar/ds/roaring.h	/^uint16_t bitset_container_minimum(const bitset_container_t *container);$/;"	p	typeref:typename:uint16_t	signature:(const bitset_container_t * container)
bitset_container_negation	sylar/sylar/ds/roaring.c	/^bool bitset_container_negation(const bitset_container_t *src, void **dst) {$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * src,void ** dst)
bitset_container_negation	sylar/sylar/ds/roaring.h	/^bool bitset_container_negation(const bitset_container_t *src, void **dst);$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * src,void ** dst)
bitset_container_negation_inplace	sylar/sylar/ds/roaring.c	/^bool bitset_container_negation_inplace(bitset_container_t *src, void **dst) {$/;"	f	typeref:typename:bool	signature:(bitset_container_t * src,void ** dst)
bitset_container_negation_inplace	sylar/sylar/ds/roaring.h	/^bool bitset_container_negation_inplace(bitset_container_t *src, void **dst);$/;"	p	typeref:typename:bool	signature:(bitset_container_t * src,void ** dst)
bitset_container_negation_range	sylar/sylar/ds/roaring.c	/^bool bitset_container_negation_range(const bitset_container_t *src,$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * src,const int range_start,const int range_end,void ** dst)
bitset_container_negation_range	sylar/sylar/ds/roaring.h	/^bool bitset_container_negation_range(const bitset_container_t *src,$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * src,const int range_start,const int range_end,void ** dst)
bitset_container_negation_range_inplace	sylar/sylar/ds/roaring.c	/^bool bitset_container_negation_range_inplace(bitset_container_t *src,$/;"	f	typeref:typename:bool	signature:(bitset_container_t * src,const int range_start,const int range_end,void ** dst)
bitset_container_negation_range_inplace	sylar/sylar/ds/roaring.h	/^bool bitset_container_negation_range_inplace(bitset_container_t *src,$/;"	p	typeref:typename:bool	signature:(bitset_container_t * src,const int range_start,const int range_end,void ** dst)
bitset_container_nonzero_cardinality	sylar/sylar/ds/roaring.c	/^extern inline bool bitset_container_nonzero_cardinality(bitset_container_t *bitset);$/;"	p	typeref:typename:bool	file:	signature:(bitset_container_t * bitset)
bitset_container_nonzero_cardinality	sylar/sylar/ds/roaring.h	/^static inline bool bitset_container_nonzero_cardinality($/;"	f	typeref:typename:bool	signature:(bitset_container_t * bitset)
bitset_container_number_of_runs	sylar/sylar/ds/roaring.c	/^int bitset_container_number_of_runs(bitset_container_t *b) {$/;"	f	typeref:typename:int	signature:(bitset_container_t * b)
bitset_container_number_of_runs	sylar/sylar/ds/roaring.h	/^int bitset_container_number_of_runs(bitset_container_t *b);$/;"	p	typeref:typename:int	signature:(bitset_container_t * b)
bitset_container_or	sylar/sylar/ds/roaring.h	/^int bitset_container_or(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
bitset_container_or_justcard	sylar/sylar/ds/roaring.h	/^int bitset_container_or_justcard(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2)
bitset_container_or_nocard	sylar/sylar/ds/roaring.h	/^int bitset_container_or_nocard(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
bitset_container_printf	sylar/sylar/ds/roaring.c	/^void bitset_container_printf(const bitset_container_t * v) {$/;"	f	typeref:typename:void	signature:(const bitset_container_t * v)
bitset_container_printf	sylar/sylar/ds/roaring.h	/^void bitset_container_printf(const bitset_container_t *v);$/;"	p	typeref:typename:void	signature:(const bitset_container_t * v)
bitset_container_printf_as_uint32_array	sylar/sylar/ds/roaring.c	/^void bitset_container_printf_as_uint32_array(const bitset_container_t * v, uint32_t base) {$/;"	f	typeref:typename:void	signature:(const bitset_container_t * v,uint32_t base)
bitset_container_printf_as_uint32_array	sylar/sylar/ds/roaring.h	/^void bitset_container_printf_as_uint32_array(const bitset_container_t *v,$/;"	p	typeref:typename:void	signature:(const bitset_container_t * v,uint32_t base)
bitset_container_rank	sylar/sylar/ds/roaring.c	/^int bitset_container_rank(const bitset_container_t *container, uint16_t x) {$/;"	f	typeref:typename:int	signature:(const bitset_container_t * container,uint16_t x)
bitset_container_rank	sylar/sylar/ds/roaring.h	/^int bitset_container_rank(const bitset_container_t *container, uint16_t x);$/;"	p	typeref:typename:int	signature:(const bitset_container_t * container,uint16_t x)
bitset_container_read	sylar/sylar/ds/roaring.c	/^int32_t bitset_container_read(int32_t cardinality, bitset_container_t *container,$/;"	f	typeref:typename:int32_t	signature:(int32_t cardinality,bitset_container_t * container,const char * buf)
bitset_container_read	sylar/sylar/ds/roaring.h	/^int32_t bitset_container_read(int32_t cardinality,$/;"	p	typeref:typename:int32_t	signature:(int32_t cardinality,bitset_container_t * container,const char * buf)
bitset_container_remove	sylar/sylar/ds/roaring.c	/^extern inline bool bitset_container_remove(bitset_container_t *bitset, uint16_t pos);$/;"	p	typeref:typename:bool	file:	signature:(bitset_container_t * bitset,uint16_t pos)
bitset_container_remove	sylar/sylar/ds/roaring.h	/^static inline bool bitset_container_remove(bitset_container_t *bitset,$/;"	f	typeref:typename:bool	signature:(bitset_container_t * bitset,uint16_t pos)
bitset_container_s	sylar/sylar/ds/roaring.h	/^struct bitset_container_s {$/;"	s
bitset_container_s::array	sylar/sylar/ds/roaring.h	/^    uint64_t *array;$/;"	m	struct:bitset_container_s	typeref:typename:uint64_t *	access:public
bitset_container_s::cardinality	sylar/sylar/ds/roaring.h	/^    int32_t cardinality;$/;"	m	struct:bitset_container_s	typeref:typename:int32_t	access:public
bitset_container_select	sylar/sylar/ds/roaring.c	/^bool bitset_container_select(const bitset_container_t *container, uint32_t *start_rank, uint32_t/;"	f	typeref:typename:bool	signature:(const bitset_container_t * container,uint32_t * start_rank,uint32_t rank,uint32_t * element)
bitset_container_select	sylar/sylar/ds/roaring.h	/^bool bitset_container_select(const bitset_container_t *container,$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * container,uint32_t * start_rank,uint32_t rank,uint32_t * element)
bitset_container_serialization_len	sylar/sylar/ds/roaring.c	/^uint32_t bitset_container_serialization_len() {$/;"	f	typeref:typename:uint32_t	signature:()
bitset_container_serialization_len	sylar/sylar/ds/roaring.h	/^uint32_t bitset_container_serialization_len(void);$/;"	p	typeref:typename:uint32_t	signature:(void)
bitset_container_serialize	sylar/sylar/ds/roaring.c	/^int32_t bitset_container_serialize(const bitset_container_t *container, char *buf) {$/;"	f	typeref:typename:int32_t	signature:(const bitset_container_t * container,char * buf)
bitset_container_serialize	sylar/sylar/ds/roaring.h	/^int32_t bitset_container_serialize(const bitset_container_t *container,$/;"	p	typeref:typename:int32_t	signature:(const bitset_container_t * container,char * buf)
bitset_container_serialized_size_in_bytes	sylar/sylar/ds/roaring.c	/^extern inline int32_t bitset_container_serialized_size_in_bytes(void);$/;"	p	typeref:typename:int32_t	file:	signature:(void)
bitset_container_serialized_size_in_bytes	sylar/sylar/ds/roaring.h	/^static inline int32_t bitset_container_serialized_size_in_bytes(void) {$/;"	f	typeref:typename:int32_t	signature:(void)
bitset_container_set	sylar/sylar/ds/roaring.c	/^extern inline void bitset_container_set(bitset_container_t *bitset, uint16_t pos);$/;"	p	typeref:typename:void	file:	signature:(bitset_container_t * bitset,uint16_t pos)
bitset_container_set	sylar/sylar/ds/roaring.h	/^static inline void bitset_container_set(bitset_container_t *bitset,$/;"	f	typeref:typename:void	signature:(bitset_container_t * bitset,uint16_t pos)
bitset_container_set_all	sylar/sylar/ds/roaring.c	/^void bitset_container_set_all(bitset_container_t *bitset) {$/;"	f	typeref:typename:void	signature:(bitset_container_t * bitset)
bitset_container_set_all	sylar/sylar/ds/roaring.h	/^void bitset_container_set_all(bitset_container_t *bitset);$/;"	p	typeref:typename:void	signature:(bitset_container_t * bitset)
bitset_container_set_range	sylar/sylar/ds/roaring.c	/^void bitset_container_set_range(bitset_container_t *bitset, uint32_t begin,$/;"	f	typeref:typename:void	signature:(bitset_container_t * bitset,uint32_t begin,uint32_t end)
bitset_container_set_range	sylar/sylar/ds/roaring.h	/^void bitset_container_set_range(bitset_container_t *bitset, uint32_t begin,$/;"	p	typeref:typename:void	signature:(bitset_container_t * bitset,uint32_t begin,uint32_t end)
bitset_container_size_in_bytes	sylar/sylar/ds/roaring.h	/^static inline int32_t bitset_container_size_in_bytes($/;"	f	typeref:typename:int32_t	signature:(const bitset_container_t * container)
bitset_container_t	sylar/sylar/ds/roaring.h	/^typedef struct bitset_container_s bitset_container_t;$/;"	t	typeref:struct:bitset_container_s
bitset_container_to_uint32_array	sylar/sylar/ds/roaring.h	/^int bitset_container_to_uint32_array(void *out, const bitset_container_t *cont,$/;"	p	typeref:typename:int	signature:(void * out,const bitset_container_t * cont,uint32_t base)
bitset_container_union	sylar/sylar/ds/roaring.h	/^int bitset_container_union(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
bitset_container_union_justcard	sylar/sylar/ds/roaring.h	/^int bitset_container_union_justcard(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2)
bitset_container_unset	sylar/sylar/ds/roaring.c	/^extern inline void bitset_container_unset(bitset_container_t *bitset, uint16_t pos);$/;"	p	typeref:typename:void	file:	signature:(bitset_container_t * bitset,uint16_t pos)
bitset_container_unset	sylar/sylar/ds/roaring.h	/^static inline void bitset_container_unset(bitset_container_t *bitset,$/;"	f	typeref:typename:void	signature:(bitset_container_t * bitset,uint16_t pos)
bitset_container_write	sylar/sylar/ds/roaring.c	/^int32_t bitset_container_write(const bitset_container_t *container,$/;"	f	typeref:typename:int32_t	signature:(const bitset_container_t * container,char * buf)
bitset_container_write	sylar/sylar/ds/roaring.h	/^int32_t bitset_container_write(const bitset_container_t *container, char *buf);$/;"	p	typeref:typename:int32_t	signature:(const bitset_container_t * container,char * buf)
bitset_container_xor	sylar/sylar/ds/roaring.h	/^int bitset_container_xor(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
bitset_container_xor_justcard	sylar/sylar/ds/roaring.h	/^int bitset_container_xor_justcard(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2)
bitset_container_xor_nocard	sylar/sylar/ds/roaring.h	/^int bitset_container_xor_nocard(const bitset_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const bitset_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
bitset_extract_intersection_setbits_uint16	sylar/sylar/ds/roaring.c	/^size_t bitset_extract_intersection_setbits_uint16(const uint64_t * __restrict__ bitset1,$/;"	f	typeref:typename:size_t	signature:(const uint64_t * __restrict__ bitset1,const uint64_t * __restrict__ bitset2,size_t length,uint16_t * out,uint16_t base)
bitset_extract_intersection_setbits_uint16	sylar/sylar/ds/roaring.h	/^size_t bitset_extract_intersection_setbits_uint16(const uint64_t * __restrict__ bitset1,$/;"	p	typeref:typename:size_t	signature:(const uint64_t * __restrict__ bitset1,const uint64_t * __restrict__ bitset2,size_t length,uint16_t * out,uint16_t base)
bitset_extract_setbits	sylar/sylar/ds/roaring.c	/^size_t bitset_extract_setbits(uint64_t *bitset, size_t length, void *vout,$/;"	f	typeref:typename:size_t	signature:(uint64_t * bitset,size_t length,void * vout,uint32_t base)
bitset_extract_setbits	sylar/sylar/ds/roaring.h	/^size_t bitset_extract_setbits(uint64_t *bitset, size_t length, void *vout,$/;"	p	typeref:typename:size_t	signature:(uint64_t * bitset,size_t length,void * vout,uint32_t base)
bitset_extract_setbits_avx2	sylar/sylar/ds/roaring.c	/^size_t bitset_extract_setbits_avx2(uint64_t *array, size_t length, void *vout,$/;"	f	typeref:typename:size_t	signature:(uint64_t * array,size_t length,void * vout,size_t outcapacity,uint32_t base)
bitset_extract_setbits_avx2	sylar/sylar/ds/roaring.h	/^size_t bitset_extract_setbits_avx2(uint64_t *bitset, size_t length, void *vout,$/;"	p	typeref:typename:size_t	signature:(uint64_t * bitset,size_t length,void * vout,size_t outcapacity,uint32_t base)
bitset_extract_setbits_sse_uint16	sylar/sylar/ds/roaring.c	/^size_t bitset_extract_setbits_sse_uint16(const uint64_t *bitset, size_t length,$/;"	f	typeref:typename:size_t	signature:(const uint64_t * bitset,size_t length,uint16_t * out,size_t outcapacity,uint16_t base)
bitset_extract_setbits_sse_uint16	sylar/sylar/ds/roaring.h	/^size_t bitset_extract_setbits_sse_uint16(const uint64_t *bitset, size_t length,$/;"	p	typeref:typename:size_t	signature:(const uint64_t * bitset,size_t length,uint16_t * out,size_t outcapacity,uint16_t base)
bitset_extract_setbits_uint16	sylar/sylar/ds/roaring.c	/^size_t bitset_extract_setbits_uint16(const uint64_t *bitset, size_t length,$/;"	f	typeref:typename:size_t	signature:(const uint64_t * bitset,size_t length,uint16_t * out,uint16_t base)
bitset_extract_setbits_uint16	sylar/sylar/ds/roaring.h	/^size_t bitset_extract_setbits_uint16(const uint64_t *bitset, size_t length,$/;"	p	typeref:typename:size_t	signature:(const uint64_t * bitset,size_t length,uint16_t * out,uint16_t base)
bitset_flip_list	sylar/sylar/ds/roaring.c	/^void bitset_flip_list(void *bitset, const uint16_t *list, uint64_t length) {$/;"	f	typeref:typename:void	signature:(void * bitset,const uint16_t * list,uint64_t length)
bitset_flip_list	sylar/sylar/ds/roaring.h	/^void bitset_flip_list(void *bitset, const uint16_t *list, uint64_t length);$/;"	p	typeref:typename:void	signature:(void * bitset,const uint16_t * list,uint64_t length)
bitset_flip_list_withcard	sylar/sylar/ds/roaring.c	/^uint64_t bitset_flip_list_withcard(void *bitset, uint64_t card,$/;"	f	typeref:typename:uint64_t	signature:(void * bitset,uint64_t card,const uint16_t * list,uint64_t length)
bitset_flip_list_withcard	sylar/sylar/ds/roaring.h	/^uint64_t bitset_flip_list_withcard(void *bitset, uint64_t card,$/;"	p	typeref:typename:uint64_t	signature:(void * bitset,uint64_t card,const uint16_t * list,uint64_t length)
bitset_flip_range	sylar/sylar/ds/roaring.h	/^static inline void bitset_flip_range(uint64_t *bitmap, uint32_t start,$/;"	f	typeref:typename:void	signature:(uint64_t * bitmap,uint32_t start,uint32_t end)
bitset_lenrange_cardinality	sylar/sylar/ds/roaring.h	/^static inline int bitset_lenrange_cardinality(uint64_t *bitmap, uint32_t start,$/;"	f	typeref:typename:int	signature:(uint64_t * bitmap,uint32_t start,uint32_t lenminusone)
bitset_lenrange_empty	sylar/sylar/ds/roaring.h	/^static inline bool bitset_lenrange_empty(uint64_t *bitmap, uint32_t start,$/;"	f	typeref:typename:bool	signature:(uint64_t * bitmap,uint32_t start,uint32_t lenminusone)
bitset_reset_range	sylar/sylar/ds/roaring.h	/^static inline void bitset_reset_range(uint64_t *bitmap, uint32_t start,$/;"	f	typeref:typename:void	signature:(uint64_t * bitmap,uint32_t start,uint32_t end)
bitset_run_container_andnot	sylar/sylar/ds/roaring.c	/^bool bitset_run_container_andnot(const bitset_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const bitset_container_t * src_1,const run_container_t * src_2,void ** dst)
bitset_run_container_andnot	sylar/sylar/ds/roaring.h	/^bool bitset_run_container_andnot(const bitset_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const bitset_container_t * src_1,const run_container_t * src_2,void ** dst)
bitset_run_container_iandnot	sylar/sylar/ds/roaring.c	/^bool bitset_run_container_iandnot(bitset_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(bitset_container_t * src_1,const run_container_t * src_2,void ** dst)
bitset_run_container_iandnot	sylar/sylar/ds/roaring.h	/^bool bitset_run_container_iandnot(bitset_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(bitset_container_t * src_1,const run_container_t * src_2,void ** dst)
bitset_run_container_ixor	sylar/sylar/ds/roaring.c	/^bool bitset_run_container_ixor(bitset_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(bitset_container_t * src_1,const run_container_t * src_2,void ** dst)
bitset_run_container_ixor	sylar/sylar/ds/roaring.h	/^bool bitset_run_container_ixor(bitset_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(bitset_container_t * src_1,const run_container_t * src_2,void ** dst)
bitset_set_lenrange	sylar/sylar/ds/roaring.h	/^static inline void bitset_set_lenrange(uint64_t *bitmap, uint32_t start,$/;"	f	typeref:typename:void	signature:(uint64_t * bitmap,uint32_t start,uint32_t lenminusone)
bitset_set_list	sylar/sylar/ds/roaring.c	/^void bitset_set_list(void *bitset, const uint16_t *list, uint64_t length) {$/;"	f	typeref:typename:void	signature:(void * bitset,const uint16_t * list,uint64_t length)
bitset_set_list	sylar/sylar/ds/roaring.h	/^void bitset_set_list(void *bitset, const uint16_t *list, uint64_t length);$/;"	p	typeref:typename:void	signature:(void * bitset,const uint16_t * list,uint64_t length)
bitset_set_list_withcard	sylar/sylar/ds/roaring.c	/^uint64_t bitset_set_list_withcard(void *bitset, uint64_t card,$/;"	f	typeref:typename:uint64_t	signature:(void * bitset,uint64_t card,const uint16_t * list,uint64_t length)
bitset_set_list_withcard	sylar/sylar/ds/roaring.h	/^uint64_t bitset_set_list_withcard(void *bitset, uint64_t card,$/;"	p	typeref:typename:uint64_t	signature:(void * bitset,uint64_t card,const uint16_t * list,uint64_t length)
bitset_set_range	sylar/sylar/ds/roaring.h	/^static inline void bitset_set_range(uint64_t *bitmap, uint32_t start,$/;"	f	typeref:typename:void	signature:(uint64_t * bitmap,uint32_t start,uint32_t end)
body_start	sylar/sylar/http/http11_parser.h	/^  size_t body_start;$/;"	m	struct:http_parser	typeref:typename:size_t	access:public
body_start	sylar/sylar/http/httpclient_parser.h	/^  size_t body_start;$/;"	m	struct:httpclient_parser	typeref:typename:size_t	access:public
broadcast	sylar/sylar/db/fox_thread.cc	/^void FoxThread::broadcast(callback cb) {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:(callback cb)
broadcast	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::broadcast(const std::string& name, callback cb) {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:(const std::string & name,callback cb)
broadcast	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::broadcast(callback cb) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:(callback cb)
broadcast	sylar/sylar/db/fox_thread.h	/^    virtual void broadcast(callback cb) = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:void	access:public	signature:(callback cb)
broadcast	sylar/sylar/db/fox_thread.h	/^    virtual void broadcast(callback cb);$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:(callback cb)
broadcast	sylar/sylar/db/fox_thread.h	/^    void broadcast(callback cb);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:public	signature:(callback cb)
broadcast	sylar/sylar/db/fox_thread.h	/^    void broadcast(const std::string& name, callback cb);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:(const std::string & name,callback cb)
broadcastAddress	sylar/sylar/address.cc	/^IPAddress::ptr IPv4Address::broadcastAddress(uint32_t prefix_len) {$/;"	f	class:sylar::IPv4Address	typeref:typename:IPAddress::ptr	signature:(uint32_t prefix_len)
broadcastAddress	sylar/sylar/address.cc	/^IPAddress::ptr IPv6Address::broadcastAddress(uint32_t prefix_len) {$/;"	f	class:sylar::IPv6Address	typeref:typename:IPAddress::ptr	signature:(uint32_t prefix_len)
broadcastAddress	sylar/sylar/address.h	/^    IPAddress::ptr broadcastAddress(uint32_t prefix_len) override;$/;"	p	class:sylar::IPv4Address	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
broadcastAddress	sylar/sylar/address.h	/^    IPAddress::ptr broadcastAddress(uint32_t prefix_len) override;$/;"	p	class:sylar::IPv6Address	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
broadcastAddress	sylar/sylar/address.h	/^    virtual IPAddress::ptr broadcastAddress(uint32_t prefix_len) = 0;$/;"	p	class:sylar::IPAddress	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
byteswap	sylar/sylar/endian.h	/^byteswap(T value) {$/;"	f	namespace:sylar	typeref:typename:std::enable_if<sizeof (T)==sizeof (uint16_t),T>::type	signature:(T value)
byteswap	sylar/sylar/endian.h	/^byteswap(T value) {$/;"	f	namespace:sylar	typeref:typename:std::enable_if<sizeof (T)==sizeof (uint32_t),T>::type	signature:(T value)
byteswap	sylar/sylar/endian.h	/^byteswap(T value) {$/;"	f	namespace:sylar	typeref:typename:std::enable_if<sizeof (T)==sizeof (uint64_t),T>::type	signature:(T value)
byteswapOnBigEndian	sylar/sylar/endian.h	/^T byteswapOnBigEndian(T t) {$/;"	f	namespace:sylar	typeref:typename:T	signature:(T t)
byteswapOnLittleEndian	sylar/sylar/endian.h	/^T byteswapOnLittleEndian(T t) {$/;"	f	namespace:sylar	typeref:typename:T	signature:(T t)
cache_type	sylar/sylar/ds/lru_cache.h	/^    typedef LruCache<K, V, MutexType> cache_type;$/;"	t	class:sylar::ds::HashLruCache	typeref:typename:LruCache<K,V,MutexType>	access:public
cache_type	sylar/sylar/ds/timed_cache.h	/^    typedef TimedCache<K, V, RWMutexType> cache_type;$/;"	t	class:sylar::ds::HashTimedCache	typeref:typename:TimedCache<K,V,RWMutexType>	access:public
cache_type	sylar/sylar/ds/timed_lru_cache.h	/^    typedef TimedLruCache<K, V, MutexType> cache_type;$/;"	t	class:sylar::ds::HashTimedLruCache	typeref:typename:TimedLruCache<K,V,MutexType>	access:public
call	sylar/sylar/fiber.cc	/^void Fiber::call() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
call	sylar/sylar/fiber.h	/^    void call();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
callback	sylar/sylar/db/fox_thread.h	/^    typedef IFoxThread::callback callback;$/;"	t	class:sylar::FoxThread	typeref:typename:IFoxThread::callback	access:public
callback	sylar/sylar/db/fox_thread.h	/^    typedef IFoxThread::callback callback;$/;"	t	class:sylar::FoxThreadManager	typeref:typename:IFoxThread::callback	access:public
callback	sylar/sylar/db/fox_thread.h	/^    typedef IFoxThread::callback callback;$/;"	t	class:sylar::FoxThreadPool	typeref:typename:IFoxThread::callback	access:public
callback	sylar/sylar/db/fox_thread.h	/^    typedef std::function<void()> callback;$/;"	t	class:sylar::IFoxThread	access:public
callback	sylar/sylar/ds/dict.h	/^    typedef std::function<bool(const K& k, const V* v, size_t size)> callback;$/;"	t	class:sylar::ds::Dict	access:public
callback	sylar/sylar/http/servlet.h	/^                   , sylar::http::HttpSession::ptr session)> callback;$/;"	t	class:sylar::http::FunctionServlet	access:public
callback	sylar/sylar/http/ws_servlet.h	/^                           ,sylar::http::WSSession::ptr session)> callback;$/;"	t	class:sylar::http::FunctionWSServlet	access:public
cancel	sylar/sylar/timer.cc	/^bool Timer::cancel() {$/;"	f	class:sylar::Timer	typeref:typename:bool	signature:()
cancel	sylar/sylar/timer.h	/^    bool cancel();$/;"	p	class:sylar::Timer	typeref:typename:bool	access:public	signature:()
cancelAccept	sylar/sylar/socket.cc	/^bool Socket::cancelAccept() {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:()
cancelAccept	sylar/sylar/socket.h	/^    bool cancelAccept();$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:()
cancelAll	sylar/sylar/iomanager.cc	/^bool IOManager::cancelAll(int fd) {$/;"	f	class:sylar::IOManager	typeref:typename:bool	signature:(int fd)
cancelAll	sylar/sylar/iomanager.h	/^    bool cancelAll(int fd);$/;"	p	class:sylar::IOManager	typeref:typename:bool	access:public	signature:(int fd)
cancelAll	sylar/sylar/socket.cc	/^bool Socket::cancelAll() {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:()
cancelAll	sylar/sylar/socket.h	/^    bool cancelAll();$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:()
cancelEvent	sylar/sylar/db/redis.cc	/^void FoxRedis::Ctx::cancelEvent() {$/;"	f	class:sylar::FoxRedis::Ctx	typeref:typename:void	signature:()
cancelEvent	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::Ctx::cancelEvent() {$/;"	f	class:sylar::FoxRedisCluster::Ctx	typeref:typename:void	signature:()
cancelEvent	sylar/sylar/db/redis.h	/^        void cancelEvent();$/;"	p	struct:sylar::FoxRedis::Ctx	typeref:typename:void	access:public	signature:()
cancelEvent	sylar/sylar/db/redis.h	/^        void cancelEvent();$/;"	p	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:void	access:public	signature:()
cancelEvent	sylar/sylar/iomanager.cc	/^bool IOManager::cancelEvent(int fd, Event event) {$/;"	f	class:sylar::IOManager	typeref:typename:bool	signature:(int fd,Event event)
cancelEvent	sylar/sylar/iomanager.h	/^    bool cancelEvent(int fd, Event event);$/;"	p	class:sylar::IOManager	typeref:typename:bool	access:public	signature:(int fd,Event event)
cancelRead	sylar/sylar/socket.cc	/^bool Socket::cancelRead() {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:()
cancelRead	sylar/sylar/socket.h	/^    bool cancelRead();$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:()
cancelWrite	sylar/sylar/socket.cc	/^bool Socket::cancelWrite() {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:()
cancelWrite	sylar/sylar/socket.h	/^    bool cancelWrite();$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:()
cancelled	sylar/sylar/hook.cc	/^    int cancelled = 0;$/;"	m	struct:timer_info	typeref:typename:int	file:	access:public
capacity	sylar/sylar/ds/roaring.h	/^    int32_t capacity;$/;"	m	struct:array_container_s	typeref:typename:int32_t	access:public
capacity	sylar/sylar/ds/roaring.h	/^    int32_t capacity;$/;"	m	struct:run_container_s	typeref:typename:int32_t	access:public
cardinality	sylar/sylar/ds/roaring.h	/^    int32_t cardinality;$/;"	m	struct:array_container_s	typeref:typename:int32_t	access:public
cardinality	sylar/sylar/ds/roaring.h	/^    int32_t cardinality;$/;"	m	struct:bitset_container_s	typeref:typename:int32_t	access:public
cardinality	sylar/sylar/ds/roaring.h	/^    uint64_t cardinality; \/* total number of values stored in the bitmap *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint64_t	access:public
cardinality	sylar/sylar/ds/roaring.hh	/^    uint64_t cardinality() const {$/;"	f	class:Roaring	typeref:typename:uint64_t	access:public	signature:() const
cardinality	sylar/sylar/ds/roaring.hh	/^    uint64_t cardinality() const {$/;"	f	class:Roaring64Map	typeref:typename:uint64_t	access:public	signature:() const
cb	sylar/sylar/iomanager.h	/^            std::function<void()> cb;$/;"	m	struct:sylar::IOManager::FdContext::EventContext	typeref:typename:std::function<void ()>	access:public
cb	sylar/sylar/scheduler.h	/^        std::function<void()> cb;$/;"	m	struct:sylar::Scheduler::FiberAndThread	typeref:typename:std::function<void ()>	access:public
cert_file	sylar/sylar/tcp_server.h	/^    std::string cert_file;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
chat	chat/my_module.cc	/^namespace chat {$/;"	n	file:
chat	chat/my_module.h	/^namespace chat {$/;"	n
chat/my_module.cc.i	build/Makefile	/^chat\/my_module.cc.i:$/;"	t
chat/my_module.cc.o	build/Makefile	/^chat\/my_module.cc.o:$/;"	t
chat/my_module.cc.s	build/Makefile	/^chat\/my_module.cc.s:$/;"	t
chat/my_module.i	build/Makefile	/^chat\/my_module.i: chat\/my_module.cc.i$/;"	t
chat/my_module.o	build/Makefile	/^chat\/my_module.o: chat\/my_module.cc.o$/;"	t
chat/my_module.s	build/Makefile	/^chat\/my_module.s: chat\/my_module.cc.s$/;"	t
chat::MyModule	chat/my_module.h	/^class MyModule : public sylar::Module {$/;"	c	namespace:chat	inherits:sylar::Module
chat::MyModule::MyModule	chat/my_module.cc	/^MyModule::MyModule()$/;"	f	class:chat::MyModule	signature:()
chat::MyModule::MyModule	chat/my_module.h	/^    MyModule();$/;"	p	class:chat::MyModule	access:public	signature:()
chat::MyModule::onLoad	chat/my_module.cc	/^bool MyModule::onLoad() {$/;"	f	class:chat::MyModule	typeref:typename:bool	signature:()
chat::MyModule::onLoad	chat/my_module.h	/^    bool onLoad() override;$/;"	p	class:chat::MyModule	typeref:typename:bool	access:public	signature:()
chat::MyModule::onServerReady	chat/my_module.cc	/^bool MyModule::onServerReady() {$/;"	f	class:chat::MyModule	typeref:typename:bool	signature:()
chat::MyModule::onServerReady	chat/my_module.h	/^    bool onServerReady() override;$/;"	p	class:chat::MyModule	typeref:typename:bool	access:public	signature:()
chat::MyModule::onServerUp	chat/my_module.cc	/^bool MyModule::onServerUp() {$/;"	f	class:chat::MyModule	typeref:typename:bool	signature:()
chat::MyModule::onServerUp	chat/my_module.h	/^    bool onServerUp() override;$/;"	p	class:chat::MyModule	typeref:typename:bool	access:public	signature:()
chat::MyModule::onUnload	chat/my_module.cc	/^bool MyModule::onUnload() {$/;"	f	class:chat::MyModule	typeref:typename:bool	signature:()
chat::MyModule::onUnload	chat/my_module.h	/^    bool onUnload() override;$/;"	p	class:chat::MyModule	typeref:typename:bool	access:public	signature:()
chat::MyModule::ptr	chat/my_module.h	/^    typedef std::shared_ptr<MyModule> ptr;$/;"	t	class:chat::MyModule	typeref:typename:std::shared_ptr<MyModule>	access:public
chat::g_logger	chat/my_module.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	namespace:chat	typeref:typename:sylar::Logger::ptr	file:
chat_room	CMakeLists.txt	/^add_library(chat_room SHARED ${LIB_SRC})$/;"	t
chat_room	CMakeLists.txt	/^project(chat_room)$/;"	p
chat_room	build/Makefile	/^chat_room: cmake_check_build_system$/;"	t
chat_room/fast	build/Makefile	/^chat_room\/fast:$/;"	t
check	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::check() {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:()
check	sylar/sylar/db/fox_thread.h	/^    void check();$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:private	signature:()
check	sylar/sylar/http/httpclient_parser.rl.cc	/^#define check(/;"	d	file:	signature:(A,M,...)
check	sylar/sylar/http/session_data.cc	/^void SessionDataManager::check(int64_t ts) {$/;"	f	class:sylar::http::SessionDataManager	typeref:typename:void	signature:(int64_t ts)
check	sylar/sylar/http/session_data.h	/^    void check(int64_t ts = 3600);$/;"	p	class:sylar::http::SessionDataManager	typeref:typename:void	access:public	signature:(int64_t ts=3600)
check	sylar/tests/test_bitmap.cc	/^void check() {$/;"	f	typeref:typename:void	signature:()
checkConnection	sylar/sylar/db/mysql.cc	/^void MySQLManager::checkConnection(int sec) {$/;"	f	class:sylar::MySQLManager	typeref:typename:void	signature:(int sec)
checkConnection	sylar/sylar/db/mysql.h	/^    void checkConnection(int sec = 30);$/;"	p	class:sylar::MySQLManager	typeref:typename:void	access:public	signature:(int sec=30)
checkConnection	sylar/sylar/db/sqlite3.cc	/^void SQLite3Manager::checkConnection(int sec) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:void	signature:(int sec)
checkConnection	sylar/sylar/db/sqlite3.h	/^    void checkConnection(int sec = 30);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:void	access:public	signature:(int sec=30)
checkGetAs	sylar/sylar/http/http.h	/^bool checkGetAs(const MapType& m, const std::string& key, T& val, const T& def = T()) {$/;"	f	namespace:sylar::http	typeref:typename:bool	signature:(const MapType & m,const std::string & key,T & val,const T & def=T ())
checkGetCookieAs	sylar/sylar/http/http.h	/^    bool checkGetCookieAs(const std::string& key, T& val, const T& def = T()) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:(const std::string & key,T & val,const T & def=T ())
checkGetHeaderAs	sylar/sylar/http/http.h	/^    bool checkGetHeaderAs(const std::string& key, T& val, const T& def = T()) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:(const std::string & key,T & val,const T & def=T ())
checkGetHeaderAs	sylar/sylar/http/http.h	/^    bool checkGetHeaderAs(const std::string& key, T& val, const T& def = T()) {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:bool	access:public	signature:(const std::string & key,T & val,const T & def=T ())
checkGetParamAs	sylar/sylar/http/http.h	/^    bool checkGetParamAs(const std::string& key, T& val, const T& def = T()) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:(const std::string & key,T & val,const T & def=T ())
checkInit	sylar/sylar/streams/load_balance.cc	/^void LoadBalance::checkInit() {$/;"	f	class:sylar::LoadBalance	typeref:typename:void	signature:()
checkInit	sylar/sylar/streams/load_balance.h	/^    void checkInit();$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:protected	signature:()
checkTimeout	sylar/sylar/ds/timed_cache.h	/^    size_t checkTimeout(const uint64_t& ts = sylar::GetCurrentMS()) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:public	signature:(const uint64_t & ts=sylar::GetCurrentMS ())
checkTimeout	sylar/sylar/ds/timed_cache.h	/^    size_t checkTimeout(const uint64_t& ts = sylar::GetCurrentMS()) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:public	signature:(const uint64_t & ts=sylar::GetCurrentMS ())
checkTimeout	sylar/sylar/ds/timed_lru_cache.h	/^    size_t checkTimeout(const uint64_t& ts = sylar::GetCurrentMS()) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:public	signature:(const uint64_t & ts=sylar::GetCurrentMS ())
checkTimeout	sylar/sylar/ds/timed_lru_cache.h	/^    size_t checkTimeout(const uint64_t& ts = sylar::GetCurrentMS()) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:public	signature:(const uint64_t & ts=sylar::GetCurrentMS ())
chunk_size	sylar/sylar/http/httpclient_parser.h	/^  element_cb chunk_size;$/;"	m	struct:httpclient_parser	typeref:typename:element_cb	access:public
chunked	sylar/sylar/http/httpclient_parser.h	/^  int chunked;$/;"	m	struct:httpclient_parser	typeref:typename:int	access:public
chunks_done	sylar/sylar/http/httpclient_parser.h	/^  int chunks_done;$/;"	m	struct:httpclient_parser	typeref:typename:int	access:public
clamp	sylar/sylar/ds/roaring.c	/^static inline int32_t clamp(int32_t val, int32_t min, int32_t max) {$/;"	f	typeref:typename:int32_t	file:	signature:(int32_t val,int32_t min,int32_t max)
clean	build/Makefile	/^clean:$/;"	t
clean	build/sylar/Makefile	/^clean:$/;"	t
clean/fast	build/Makefile	/^clean\/fast: clean$/;"	t
clean/fast	build/sylar/Makefile	/^clean\/fast: clean$/;"	t
clear	sylar/sylar/bytearray.cc	/^void ByteArray::clear() {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:()
clear	sylar/sylar/bytearray.h	/^    void clear();$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:()
clear	sylar/sylar/ds/hash_map.h	/^    void clear() {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:public	signature:()
clear	sylar/sylar/ds/lru_cache.h	/^    bool clear() {$/;"	f	class:sylar::ds::LruCache	typeref:typename:bool	access:public	signature:()
clear	sylar/sylar/ds/lru_cache.h	/^    void clear() {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:void	access:public	signature:()
clear	sylar/sylar/ds/roaring.hh	/^	void clear() {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:()
clear	sylar/sylar/ds/timed_cache.h	/^    bool clear() {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:bool	access:public	signature:()
clear	sylar/sylar/ds/timed_cache.h	/^    void clear() {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:void	access:public	signature:()
clear	sylar/sylar/ds/timed_lru_cache.h	/^    bool clear() {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:bool	access:public	signature:()
clear	sylar/sylar/ds/timed_lru_cache.h	/^    void clear() {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:void	access:public	signature:()
clear	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStreamManager::clear() {$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:void	signature:()
clear	sylar/sylar/streams/async_socket_stream.h	/^    void clear();$/;"	p	class:sylar::AsyncSocketStreamManager	typeref:typename:void	access:public	signature:()
clear	sylar/sylar/streams/load_balance.cc	/^void HolderStats::clear() {$/;"	f	class:sylar::HolderStats	typeref:typename:void	signature:()
clear	sylar/sylar/streams/load_balance.h	/^    void clear();$/;"	p	class:sylar::FairLoadBalanceItem	typeref:typename:void	access:public	signature:()
clear	sylar/sylar/streams/load_balance.h	/^    void clear();$/;"	p	class:sylar::HolderStats	typeref:typename:void	access:public	signature:()
clearAppenders	sylar/sylar/log.cc	/^void Logger::clearAppenders() {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:()
clearAppenders	sylar/sylar/log.h	/^    void clearAppenders();$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:()
clearListener	sylar/sylar/config.h	/^    void clearListener() {$/;"	f	class:sylar::ConfigVar	typeref:typename:void	access:public	signature:()
clear_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_cmd();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:()
clear_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::clear_cmd() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:()
clear_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_cmds();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:()
clear_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::clear_cmds() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:()
clear_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_dels();$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:public	signature:()
clear_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NotifyMessage::clear_dels() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:()
clear_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_domain();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:()
clear_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_domain();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:()
clear_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::clear_domain() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:()
clear_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::clear_domain() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:()
clear_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_domains();$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:()
clear_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::clear_domains() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:()
clear_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_infos();$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:public	signature:()
clear_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_infos();$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:public	signature:()
clear_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryResponse::clear_infos() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:()
clear_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterRequest::clear_infos() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:()
clear_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_ip();$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:()
clear_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::clear_ip() {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:()
clear_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_node();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:()
clear_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::clear_node() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:()
clear_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_nodes();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:()
clear_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::clear_nodes() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:()
clear_port	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_port();$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:()
clear_port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::clear_port() {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:()
clear_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_updates();$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:public	signature:()
clear_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NotifyMessage::clear_updates() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:()
clear_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_weight();$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:()
clear_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::clear_weight() {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:()
close	sylar/sylar/db/sqlite3.cc	/^int SQLite3::close() {$/;"	f	class:sylar::SQLite3	typeref:typename:int	signature:()
close	sylar/sylar/db/sqlite3.h	/^    int close();$/;"	p	class:sylar::SQLite3	typeref:typename:int	access:public	signature:()
close	sylar/sylar/hook.cc	/^int close(int fd) {$/;"	f	typeref:typename:int	signature:(int fd)
close	sylar/sylar/http/httpclient_parser.h	/^  int close;$/;"	m	struct:httpclient_parser	typeref:typename:int	access:public
close	sylar/sylar/socket.cc	/^bool SSLSocket::close() {$/;"	f	class:sylar::SSLSocket	typeref:typename:bool	signature:()
close	sylar/sylar/socket.cc	/^bool Socket::close() {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:()
close	sylar/sylar/socket.h	/^    virtual bool close() override;$/;"	p	class:sylar::SSLSocket	typeref:typename:bool	access:public	signature:()
close	sylar/sylar/socket.h	/^    virtual bool close();$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:()
close	sylar/sylar/stream.h	/^    virtual void close() = 0;$/;"	p	class:sylar::Stream	typeref:typename:void	access:public	signature:()
close	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::close() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	signature:()
close	sylar/sylar/streams/async_socket_stream.h	/^    virtual void close() override;$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:()
close	sylar/sylar/streams/load_balance.cc	/^void LoadBalanceItem::close() {$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:void	signature:()
close	sylar/sylar/streams/load_balance.h	/^    void close();$/;"	p	class:sylar::LoadBalanceItem	typeref:typename:void	access:public	signature:()
close	sylar/sylar/streams/socket_stream.cc	/^void SocketStream::close() {$/;"	f	class:sylar::SocketStream	typeref:typename:void	signature:()
close	sylar/sylar/streams/socket_stream.h	/^    virtual void close() override;$/;"	p	class:sylar::SocketStream	typeref:typename:void	access:public	signature:()
close	sylar/sylar/streams/zlib_stream.cc	/^void ZlibStream::close() {$/;"	f	class:sylar::ZlibStream	typeref:typename:void	signature:()
close	sylar/sylar/streams/zlib_stream.h	/^    virtual void close() override;$/;"	p	class:sylar::ZlibStream	typeref:typename:void	access:public	signature:()
close	sylar/sylar/zk_client.cc	/^int32_t ZKClient::close() {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:()
close	sylar/sylar/zk_client.h	/^    int32_t close();$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:()
close_fun	sylar/sylar/hook.h	/^typedef int (*close_fun)(int fd);$/;"	t	typeref:typename:int (*)(int fd)
cmake_check_build_system	build/Makefile	/^cmake_check_build_system:$/;"	t
cmake_check_build_system	build/sylar/Makefile	/^cmake_check_build_system:$/;"	t
cmake_force	build/Makefile	/^cmake_force:$/;"	t
cmake_force	build/sylar/Makefile	/^cmake_force:$/;"	t
cmd	sylar/sylar/db/mysql.cc	/^const char* MySQL::cmd() {$/;"	f	class:sylar::MySQL	typeref:typename:const char *	signature:()
cmd	sylar/sylar/db/mysql.h	/^    const char* cmd();$/;"	p	class:sylar::MySQL	typeref:typename:const char *	access:public	signature:()
cmd	sylar/sylar/db/redis.cc	/^ReplyPtr FoxRedis::cmd(const char* fmt, ...) {$/;"	f	class:sylar::FoxRedis	typeref:typename:ReplyPtr	signature:(const char * fmt,...)
cmd	sylar/sylar/db/redis.cc	/^ReplyPtr FoxRedis::cmd(const char* fmt, va_list ap) {$/;"	f	class:sylar::FoxRedis	typeref:typename:ReplyPtr	signature:(const char * fmt,va_list ap)
cmd	sylar/sylar/db/redis.cc	/^ReplyPtr FoxRedis::cmd(const std::vector<std::string>& argv) {$/;"	f	class:sylar::FoxRedis	typeref:typename:ReplyPtr	signature:(const std::vector<std::string> & argv)
cmd	sylar/sylar/db/redis.cc	/^ReplyPtr FoxRedisCluster::cmd(const char* fmt, ...) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:ReplyPtr	signature:(const char * fmt,...)
cmd	sylar/sylar/db/redis.cc	/^ReplyPtr FoxRedisCluster::cmd(const char* fmt, va_list ap) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:ReplyPtr	signature:(const char * fmt,va_list ap)
cmd	sylar/sylar/db/redis.cc	/^ReplyPtr FoxRedisCluster::cmd(const std::vector<std::string>& argv) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:ReplyPtr	signature:(const std::vector<std::string> & argv)
cmd	sylar/sylar/db/redis.cc	/^ReplyPtr Redis::cmd(const char* fmt, ...) {$/;"	f	class:sylar::Redis	typeref:typename:ReplyPtr	signature:(const char * fmt,...)
cmd	sylar/sylar/db/redis.cc	/^ReplyPtr Redis::cmd(const char* fmt, va_list ap) {$/;"	f	class:sylar::Redis	typeref:typename:ReplyPtr	signature:(const char * fmt,va_list ap)
cmd	sylar/sylar/db/redis.cc	/^ReplyPtr Redis::cmd(const std::vector<std::string>& argv) {$/;"	f	class:sylar::Redis	typeref:typename:ReplyPtr	signature:(const std::vector<std::string> & argv)
cmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisCluster::cmd(const char* fmt, ...) {$/;"	f	class:sylar::RedisCluster	typeref:typename:ReplyPtr	signature:(const char * fmt,...)
cmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisCluster::cmd(const char* fmt, va_list ap) {$/;"	f	class:sylar::RedisCluster	typeref:typename:ReplyPtr	signature:(const char * fmt,va_list ap)
cmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisCluster::cmd(const std::vector<std::string>& argv) {$/;"	f	class:sylar::RedisCluster	typeref:typename:ReplyPtr	signature:(const std::vector<std::string> & argv)
cmd	sylar/sylar/db/redis.h	/^        std::string cmd;$/;"	m	struct:sylar::FoxRedis::Ctx	typeref:typename:std::string	access:public
cmd	sylar/sylar/db/redis.h	/^        std::string cmd;$/;"	m	struct:sylar::FoxRedis::FCtx	typeref:typename:std::string	access:public
cmd	sylar/sylar/db/redis.h	/^        std::string cmd;$/;"	m	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:std::string	access:public
cmd	sylar/sylar/db/redis.h	/^        std::string cmd;$/;"	m	struct:sylar::FoxRedisCluster::FCtx	typeref:typename:std::string	access:public
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, ...) = 0;$/;"	p	class:sylar::IRedis	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,...)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, ...);$/;"	p	class:sylar::FoxRedis	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,...)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, ...);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,...)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, ...);$/;"	p	class:sylar::Redis	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,...)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, ...);$/;"	p	class:sylar::RedisCluster	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,...)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, va_list ap) = 0;$/;"	p	class:sylar::IRedis	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,va_list ap)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, va_list ap);$/;"	p	class:sylar::FoxRedis	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,va_list ap)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, va_list ap);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,va_list ap)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, va_list ap);$/;"	p	class:sylar::Redis	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,va_list ap)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, va_list ap);$/;"	p	class:sylar::RedisCluster	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,va_list ap)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const std::vector<std::string>& argv) = 0;$/;"	p	class:sylar::IRedis	typeref:typename:ReplyPtr	access:public	signature:(const std::vector<std::string> & argv)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const std::vector<std::string>& argv);$/;"	p	class:sylar::FoxRedis	typeref:typename:ReplyPtr	access:public	signature:(const std::vector<std::string> & argv)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const std::vector<std::string>& argv);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:ReplyPtr	access:public	signature:(const std::vector<std::string> & argv)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const std::vector<std::string>& argv);$/;"	p	class:sylar::Redis	typeref:typename:ReplyPtr	access:public	signature:(const std::vector<std::string> & argv)
cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const std::vector<std::string>& argv);$/;"	p	class:sylar::RedisCluster	typeref:typename:ReplyPtr	access:public	signature:(const std::vector<std::string> & argv)
cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t cmd() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:uint32_t	access:public	signature:() const
cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t NodeInfo::cmd() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:uint32_t	signature:() const
cmd	sylar/sylar/ns/ns_protobuf.proto	/^    optional uint32 cmd = 2;$/;"	f
cmd_	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t cmd_;$/;"	m	class:sylar::ns::NodeInfo	typeref:typename:uint32_t	access:private
cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^      cmds() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedField<uint32_t> &	access:public	signature:() const
cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t cmds(int index) const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:uint32_t	access:public	signature:(int index) const
cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^RegisterInfo::cmds() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedField<uint32_t> &	signature:() const
cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t RegisterInfo::cmds(int index) const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:uint32_t	signature:(int index) const
cmds	sylar/sylar/ns/ns_protobuf.proto	/^    repeated uint32 cmds = 2;  \/\/命令字$/;"	f
cmds_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int cmds_size() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:int	access:public	signature:() const
cmds_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int RegisterInfo::cmds_size() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:int	signature:() const
command_error_exit	sylar/generate.sh	/^command_error_exit() {$/;"	f
commit	sylar/sylar/db/db.h	/^    virtual bool commit() = 0;$/;"	p	class:sylar::ITransaction	typeref:typename:bool	access:public	signature:()
commit	sylar/sylar/db/mysql.cc	/^bool MySQLTransaction::commit() {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:bool	signature:()
commit	sylar/sylar/db/mysql.h	/^    bool commit() override;$/;"	p	class:sylar::MySQLTransaction	typeref:typename:bool	access:public	signature:()
commit	sylar/sylar/db/sqlite3.cc	/^bool SQLite3Transaction::commit() {$/;"	f	class:sylar::SQLite3Transaction	typeref:typename:bool	signature:()
commit	sylar/sylar/db/sqlite3.h	/^    bool commit() override;$/;"	p	class:sylar::SQLite3Transaction	typeref:typename:bool	access:public	signature:()
compare	sylar/sylar/ds/roaring.c	/^static inline bool compare(roaring_pq_element_t *t1, roaring_pq_element_t *t2) {$/;"	f	typeref:typename:bool	file:	signature:(roaring_pq_element_t * t1,roaring_pq_element_t * t2)
compareAndSwap	sylar/sylar/util.h	/^    static T compareAndSwap(volatile T& t, S old_val, S new_val) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S old_val,S new_val)
compareAndSwapBool	sylar/sylar/util.h	/^    static bool compareAndSwapBool(volatile T& t, S old_val, S new_val) {$/;"	f	class:sylar::Atomic	typeref:typename:bool	access:public	signature:(volatile T & t,S old_val,S new_val)
compress	sylar/sylar/ds/bitmap.cc	/^Bitmap::ptr Bitmap::compress() const{$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap::ptr	signature:() const
compress	sylar/sylar/ds/bitmap.h	/^    Bitmap::ptr compress() const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap::ptr	access:public	signature:() const
compress	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::ptr RoaringBitmap::compress() const{$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap::ptr	signature:() const
compress	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap::ptr compress() const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap::ptr	access:public	signature:() const
compressCross	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::compressCross(const Bitmap& b) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(const Bitmap & b) const
compressCross	sylar/sylar/ds/bitmap.h	/^    bool compressCross(const Bitmap& b) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:private	signature:(const Bitmap & b) const
computecacheline	sylar/sylar/ds/roaring.h	/^static inline int computecacheline() {$/;"	f	typeref:typename:int	signature:()
conn	sylar/tests/test_rock.cc	/^sylar::RockConnection::ptr conn(new sylar::RockConnection);$/;"	p	typeref:typename:sylar::RockConnection::ptr	file:	signature:(new sylar::RockConnection)
connect	sylar/sylar/db/mysql.cc	/^bool MySQL::connect() {$/;"	f	class:sylar::MySQL	typeref:typename:bool	signature:()
connect	sylar/sylar/db/mysql.h	/^    bool connect();$/;"	p	class:sylar::MySQL	typeref:typename:bool	access:public	signature:()
connect	sylar/sylar/db/redis.cc	/^bool Redis::connect() {$/;"	f	class:sylar::Redis	typeref:typename:bool	signature:()
connect	sylar/sylar/db/redis.cc	/^bool Redis::connect(const std::string& ip, int port, uint64_t ms) {$/;"	f	class:sylar::Redis	typeref:typename:bool	signature:(const std::string & ip,int port,uint64_t ms)
connect	sylar/sylar/db/redis.cc	/^bool RedisCluster::connect() {$/;"	f	class:sylar::RedisCluster	typeref:typename:bool	signature:()
connect	sylar/sylar/db/redis.cc	/^bool RedisCluster::connect(const std::string& ip, int port, uint64_t ms) {$/;"	f	class:sylar::RedisCluster	typeref:typename:bool	signature:(const std::string & ip,int port,uint64_t ms)
connect	sylar/sylar/db/redis.h	/^    virtual bool connect() = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:bool	access:public	signature:()
connect	sylar/sylar/db/redis.h	/^    virtual bool connect();$/;"	p	class:sylar::Redis	typeref:typename:bool	access:public	signature:()
connect	sylar/sylar/db/redis.h	/^    virtual bool connect();$/;"	p	class:sylar::RedisCluster	typeref:typename:bool	access:public	signature:()
connect	sylar/sylar/db/redis.h	/^    virtual bool connect(const std::string& ip, int port, uint64_t ms = 0) = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:bool	access:public	signature:(const std::string & ip,int port,uint64_t ms=0)
connect	sylar/sylar/db/redis.h	/^    virtual bool connect(const std::string& ip, int port, uint64_t ms = 0);$/;"	p	class:sylar::Redis	typeref:typename:bool	access:public	signature:(const std::string & ip,int port,uint64_t ms=0)
connect	sylar/sylar/db/redis.h	/^    virtual bool connect(const std::string& ip, int port, uint64_t ms = 0);$/;"	p	class:sylar::RedisCluster	typeref:typename:bool	access:public	signature:(const std::string & ip,int port,uint64_t ms=0)
connect	sylar/sylar/hook.cc	/^int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen) {$/;"	f	typeref:typename:int	signature:(int sockfd,const struct sockaddr * addr,socklen_t addrlen)
connect	sylar/sylar/rock/rock_stream.cc	/^bool RockConnection::connect(sylar::Address::ptr addr) {$/;"	f	class:sylar::RockConnection	typeref:typename:bool	signature:(sylar::Address::ptr addr)
connect	sylar/sylar/rock/rock_stream.h	/^    bool connect(sylar::Address::ptr addr);$/;"	p	class:sylar::RockConnection	typeref:typename:bool	access:public	signature:(sylar::Address::ptr addr)
connect	sylar/sylar/socket.cc	/^bool SSLSocket::connect(const Address::ptr addr, uint64_t timeout_ms) {$/;"	f	class:sylar::SSLSocket	typeref:typename:bool	signature:(const Address::ptr addr,uint64_t timeout_ms)
connect	sylar/sylar/socket.cc	/^bool Socket::connect(const Address::ptr addr, uint64_t timeout_ms) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(const Address::ptr addr,uint64_t timeout_ms)
connect	sylar/sylar/socket.h	/^    virtual bool connect(const Address::ptr addr, uint64_t timeout_ms = -1) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:bool	access:public	signature:(const Address::ptr addr,uint64_t timeout_ms=-1)
connect	sylar/sylar/socket.h	/^    virtual bool connect(const Address::ptr addr, uint64_t timeout_ms = -1);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:(const Address::ptr addr,uint64_t timeout_ms=-1)
connect_callback	sylar/sylar/streams/async_socket_stream.h	/^    typedef AsyncSocketStream::connect_callback connect_callback;$/;"	t	class:sylar::AsyncSocketStreamManager	typeref:typename:AsyncSocketStream::connect_callback	access:public
connect_callback	sylar/sylar/streams/async_socket_stream.h	/^    typedef std::function<bool(AsyncSocketStream::ptr)> connect_callback;$/;"	t	class:sylar::AsyncSocketStream	access:public
connect_fun	sylar/sylar/hook.h	/^typedef int (*connect_fun)(int sockfd, const struct sockaddr *addr, socklen_t addrlen);$/;"	t	typeref:typename:int (*)(int sockfd,const struct sockaddr * addr,socklen_t addrlen)
connect_with_timeout	sylar/sylar/hook.cc	/^int connect_with_timeout(int fd, const struct sockaddr* addr, socklen_t addrlen, uint64_t timeou/;"	f	typeref:typename:int	signature:(int fd,const struct sockaddr * addr,socklen_t addrlen,uint64_t timeout_ms)
connect_with_timeout	sylar/sylar/hook.h	/^extern int connect_with_timeout(int fd, const struct sockaddr* addr, socklen_t addrlen, uint64_t/;"	p	typeref:typename:int	signature:(int fd,const struct sockaddr * addr,socklen_t addrlen,uint64_t timeout_ms)
const	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
const_bidirectional_iterator	sylar/sylar/ds/roaring.hh	/^    typedef Roaring64MapSetBitBiDirectionalIterator const_bidirectional_iterator;	$/;"	t	class:Roaring64Map	typeref:typename:Roaring64MapSetBitBiDirectionalIterator	access:public
const_iterator	sylar/sylar/ds/roaring.hh	/^    typedef Roaring64MapSetBitForwardIterator const_iterator;$/;"	t	class:Roaring64Map	typeref:typename:Roaring64MapSetBitForwardIterator	access:public
const_iterator	sylar/sylar/ds/roaring.hh	/^    typedef RoaringSetBitForwardIterator const_iterator;$/;"	t	class:Roaring	typeref:typename:RoaringSetBitForwardIterator	access:public
const_reverse_iterator	sylar/sylar/ds/roaring.hh	/^    typedef Roaring64MapSetBitReverseIterator const_reverse_iterator;	$/;"	t	class:Roaring64Map	typeref:typename:Roaring64MapSetBitReverseIterator	access:public
const_reverse_iterator	sylar/sylar/ds/roaring.hh	/^    typedef RoaringSetBitReverseIterator const_reverse_iterator;$/;"	t	class:Roaring	typeref:typename:RoaringSetBitReverseIterator	access:public
container	sylar/sylar/ds/roaring.h	/^        *container;  \/\/ should be:$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:const void *	access:public
container	sylar/sylar/ds/roaring.h	/^    void *container;$/;"	m	struct:shared_container_s	typeref:typename:void *	access:public
container_add	sylar/sylar/ds/roaring.c	/^extern inline void *container_add(void *container, uint16_t val, uint8_t typecode,$/;"	p	typeref:typename:void *	file:	signature:(void * container,uint16_t val,uint8_t typecode,uint8_t * new_typecode)
container_add	sylar/sylar/ds/roaring.h	/^static inline void *container_add(void *container, uint16_t val,$/;"	f	typeref:typename:void *	signature:(void * container,uint16_t val,uint8_t typecode,uint8_t * new_typecode)
container_add_range	sylar/sylar/ds/roaring.h	/^static inline void *container_add_range(void *container, uint8_t type,$/;"	f	typeref:typename:void *	signature:(void * container,uint8_t type,uint32_t min,uint32_t max,uint8_t * result_type)
container_and	sylar/sylar/ds/roaring.c	/^extern inline void *container_and(const void *c1, uint8_t type1, const void *c2,$/;"	p	typeref:typename:void *	file:	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_and	sylar/sylar/ds/roaring.h	/^static inline void *container_and(const void *c1, uint8_t type1, const void *c2,$/;"	f	typeref:typename:void *	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_and_cardinality	sylar/sylar/ds/roaring.h	/^static inline int container_and_cardinality(const void *c1, uint8_t type1,$/;"	f	typeref:typename:int	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2)
container_andnot	sylar/sylar/ds/roaring.c	/^extern inline void *container_andnot(const void *c1, uint8_t type1, const void *c2,$/;"	p	typeref:typename:void *	file:	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_andnot	sylar/sylar/ds/roaring.h	/^static inline void *container_andnot(const void *c1, uint8_t type1,$/;"	f	typeref:typename:void *	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_clone	sylar/sylar/ds/roaring.c	/^extern inline void *container_clone(const void *container, uint8_t typecode);$/;"	p	typeref:typename:void *	file:	signature:(const void * container,uint8_t typecode)
container_clone	sylar/sylar/ds/roaring.c	/^void *container_clone(const void *container, uint8_t typecode) {$/;"	f	typeref:typename:void *	signature:(const void * container,uint8_t typecode)
container_clone	sylar/sylar/ds/roaring.h	/^void *container_clone(const void *container, uint8_t typecode);$/;"	p	typeref:typename:void *	signature:(const void * container,uint8_t typecode)
container_contains	sylar/sylar/ds/roaring.c	/^extern inline bool container_contains(const void *container, uint16_t val,$/;"	p	typeref:typename:bool	file:	signature:(const void * container,uint16_t val,uint8_t typecode)
container_contains	sylar/sylar/ds/roaring.h	/^inline bool container_contains(const void *container, uint16_t val,$/;"	f	typeref:typename:bool	signature:(const void * container,uint16_t val,uint8_t typecode)
container_contains_range	sylar/sylar/ds/roaring.h	/^static inline bool container_contains_range(const void *container, uint32_t range_start,$/;"	f	typeref:typename:bool	signature:(const void * container,uint32_t range_start,uint32_t range_end,uint8_t typecode)
container_deserialize	sylar/sylar/ds/roaring.c	/^void *container_deserialize(uint8_t typecode, const char *buf, size_t buf_len) {$/;"	f	typeref:typename:void *	signature:(uint8_t typecode,const char * buf,size_t buf_len)
container_deserialize	sylar/sylar/ds/roaring.h	/^void *container_deserialize(uint8_t typecode, const char *buf, size_t buf_len);$/;"	p	typeref:typename:void *	signature:(uint8_t typecode,const char * buf,size_t buf_len)
container_equals	sylar/sylar/ds/roaring.h	/^static inline bool container_equals(const void *c1, uint8_t type1,$/;"	f	typeref:typename:bool	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2)
container_free	sylar/sylar/ds/roaring.c	/^void container_free(void *container, uint8_t typecode) {$/;"	f	typeref:typename:void	signature:(void * container,uint8_t typecode)
container_free	sylar/sylar/ds/roaring.h	/^void container_free(void *container, uint8_t typecode);$/;"	p	typeref:typename:void	signature:(void * container,uint8_t typecode)
container_from_range	sylar/sylar/ds/roaring.h	/^static inline void *container_from_range(uint8_t *type, uint32_t min,$/;"	f	typeref:typename:void *	signature:(uint8_t * type,uint32_t min,uint32_t max,uint16_t step)
container_get_cardinality	sylar/sylar/ds/roaring.c	/^extern inline int container_get_cardinality(const void *container, uint8_t typecode);$/;"	p	typeref:typename:int	file:	signature:(const void * container,uint8_t typecode)
container_get_cardinality	sylar/sylar/ds/roaring.h	/^static inline int container_get_cardinality(const void *container,$/;"	f	typeref:typename:int	signature:(const void * container,uint8_t typecode)
container_iand	sylar/sylar/ds/roaring.c	/^extern inline void *container_iand(void *c1, uint8_t type1, const void *c2,$/;"	p	typeref:typename:void *	file:	signature:(void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_iand	sylar/sylar/ds/roaring.h	/^static inline void *container_iand(void *c1, uint8_t type1, const void *c2,$/;"	f	typeref:typename:void *	signature:(void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_iandnot	sylar/sylar/ds/roaring.c	/^extern inline void *container_iandnot(void *c1, uint8_t type1, const void *c2,$/;"	p	typeref:typename:void *	file:	signature:(void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_iandnot	sylar/sylar/ds/roaring.h	/^static inline void *container_iandnot(void *c1, uint8_t type1, const void *c2,$/;"	f	typeref:typename:void *	signature:(void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_index	sylar/sylar/ds/roaring.h	/^    int32_t container_index;         \/\/ point to the current container index$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:int32_t	access:public
container_inot	sylar/sylar/ds/roaring.c	/^extern inline void *container_inot(void *c1, uint8_t type1, uint8_t *result_type);$/;"	p	typeref:typename:void *	file:	signature:(void * c1,uint8_t type1,uint8_t * result_type)
container_inot	sylar/sylar/ds/roaring.h	/^static inline void *container_inot(void *c, uint8_t typ, uint8_t *result_type) {$/;"	f	typeref:typename:void *	signature:(void * c,uint8_t typ,uint8_t * result_type)
container_inot_range	sylar/sylar/ds/roaring.c	/^extern inline void *container_inot_range(void *c1, uint8_t type1, uint32_t range_start,$/;"	p	typeref:typename:void *	file:	signature:(void * c1,uint8_t type1,uint32_t range_start,uint32_t range_end,uint8_t * result_type)
container_inot_range	sylar/sylar/ds/roaring.h	/^static inline void *container_inot_range(void *c, uint8_t typ,$/;"	f	typeref:typename:void *	signature:(void * c,uint8_t typ,uint32_t range_start,uint32_t range_end,uint8_t * result_type)
container_intersect	sylar/sylar/ds/roaring.h	/^static inline bool container_intersect(const void *c1, uint8_t type1, const void *c2,$/;"	f	typeref:typename:bool	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2)
container_ior	sylar/sylar/ds/roaring.c	/^extern inline void *container_ior(void *c1, uint8_t type1, const void *c2,$/;"	p	typeref:typename:void *	file:	signature:(void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_ior	sylar/sylar/ds/roaring.h	/^static inline void *container_ior(void *c1, uint8_t type1, const void *c2,$/;"	f	typeref:typename:void *	signature:(void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_is_full	sylar/sylar/ds/roaring.h	/^static inline bool container_is_full(const void *container, uint8_t typecode) {$/;"	f	typeref:typename:bool	signature:(const void * container,uint8_t typecode)
container_is_subset	sylar/sylar/ds/roaring.h	/^static inline bool container_is_subset(const void *c1, uint8_t type1,$/;"	f	typeref:typename:bool	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2)
container_iterate	sylar/sylar/ds/roaring.h	/^static inline bool container_iterate(const void *container, uint8_t typecode,$/;"	f	typeref:typename:bool	signature:(const void * container,uint8_t typecode,uint32_t base,roaring_iterator iterator,void * ptr)
container_iterate64	sylar/sylar/ds/roaring.h	/^static inline bool container_iterate64(const void *container, uint8_t typecode,$/;"	f	typeref:typename:bool	signature:(const void * container,uint8_t typecode,uint32_t base,roaring_iterator64 iterator,uint64_t high_bits,void * ptr)
container_ixor	sylar/sylar/ds/roaring.c	/^extern inline void *container_ixor(void *c1, uint8_t type1, const void *c2,$/;"	p	typeref:typename:void *	file:	signature:(void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_ixor	sylar/sylar/ds/roaring.h	/^static inline void *container_ixor(void *c1, uint8_t type1, const void *c2,$/;"	f	typeref:typename:void *	signature:(void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_lazy_ior	sylar/sylar/ds/roaring.h	/^static inline void *container_lazy_ior(void *c1, uint8_t type1, const void *c2,$/;"	f	typeref:typename:void *	signature:(void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_lazy_ixor	sylar/sylar/ds/roaring.c	/^extern inline void *container_lazy_ixor(void *c1, uint8_t type1, const void *c2,$/;"	p	typeref:typename:void *	file:	signature:(void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_lazy_ixor	sylar/sylar/ds/roaring.h	/^static inline void *container_lazy_ixor(void *c1, uint8_t type1, const void *c2,$/;"	f	typeref:typename:void *	signature:(void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_lazy_or	sylar/sylar/ds/roaring.h	/^static inline void *container_lazy_or(const void *c1, uint8_t type1,$/;"	f	typeref:typename:void *	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_lazy_xor	sylar/sylar/ds/roaring.c	/^extern inline void *container_lazy_xor(const void *c1, uint8_t type1, const void *c2,$/;"	p	typeref:typename:void *	file:	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_lazy_xor	sylar/sylar/ds/roaring.h	/^static inline void *container_lazy_xor(const void *c1, uint8_t type1,$/;"	f	typeref:typename:void *	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_maximum	sylar/sylar/ds/roaring.h	/^static inline uint16_t container_maximum(const void *container,$/;"	f	typeref:typename:uint16_t	signature:(const void * container,uint8_t typecode)
container_minimum	sylar/sylar/ds/roaring.h	/^static inline uint16_t container_minimum(const void *container,$/;"	f	typeref:typename:uint16_t	signature:(const void * container,uint8_t typecode)
container_mutable_unwrap_shared	sylar/sylar/ds/roaring.c	/^extern inline void *container_mutable_unwrap_shared($/;"	p	typeref:typename:void *	file:	signature:(void * candidate_shared_container,uint8_t * type)
container_mutable_unwrap_shared	sylar/sylar/ds/roaring.h	/^inline void *container_mutable_unwrap_shared($/;"	f	typeref:typename:void *	signature:(void * candidate_shared_container,uint8_t * type)
container_names	sylar/sylar/ds/roaring.h	/^static const char *container_names[] = {"bitset", "array", "run", "shared"};$/;"	v	typeref:typename:const char * []
container_nonzero_cardinality	sylar/sylar/ds/roaring.c	/^extern inline bool container_nonzero_cardinality(const void *container,$/;"	p	typeref:typename:bool	file:	signature:(const void * container,uint8_t typecode)
container_nonzero_cardinality	sylar/sylar/ds/roaring.h	/^static inline bool container_nonzero_cardinality(const void *container,$/;"	f	typeref:typename:bool	signature:(const void * container,uint8_t typecode)
container_not	sylar/sylar/ds/roaring.c	/^extern inline void *container_not(const void *c1, uint8_t type1, uint8_t *result_type);$/;"	p	typeref:typename:void *	file:	signature:(const void * c1,uint8_t type1,uint8_t * result_type)
container_not	sylar/sylar/ds/roaring.h	/^static inline void *container_not(const void *c, uint8_t typ,$/;"	f	typeref:typename:void *	signature:(const void * c,uint8_t typ,uint8_t * result_type)
container_not_range	sylar/sylar/ds/roaring.c	/^extern inline void *container_not_range(const void *c1, uint8_t type1,$/;"	p	typeref:typename:void *	file:	signature:(const void * c1,uint8_t type1,uint32_t range_start,uint32_t range_end,uint8_t * result_type)
container_not_range	sylar/sylar/ds/roaring.h	/^static inline void *container_not_range(const void *c, uint8_t typ,$/;"	f	typeref:typename:void *	signature:(const void * c,uint8_t typ,uint32_t range_start,uint32_t range_end,uint8_t * result_type)
container_or	sylar/sylar/ds/roaring.c	/^extern inline void *container_or(const void *c1, uint8_t type1, const void *c2,$/;"	p	typeref:typename:void *	file:	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_or	sylar/sylar/ds/roaring.h	/^static inline void *container_or(const void *c1, uint8_t type1, const void *c2,$/;"	f	typeref:typename:void *	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_printf	sylar/sylar/ds/roaring.c	/^void container_printf(const void *container, uint8_t typecode) {$/;"	f	typeref:typename:void	signature:(const void * container,uint8_t typecode)
container_printf	sylar/sylar/ds/roaring.h	/^void container_printf(const void *container, uint8_t typecode);$/;"	p	typeref:typename:void	signature:(const void * container,uint8_t typecode)
container_printf_as_uint32_array	sylar/sylar/ds/roaring.c	/^void container_printf_as_uint32_array(const void *container, uint8_t typecode,$/;"	f	typeref:typename:void	signature:(const void * container,uint8_t typecode,uint32_t base)
container_printf_as_uint32_array	sylar/sylar/ds/roaring.h	/^void container_printf_as_uint32_array(const void *container, uint8_t typecode,$/;"	p	typeref:typename:void	signature:(const void * container,uint8_t typecode,uint32_t base)
container_range_of_ones	sylar/sylar/ds/roaring.c	/^extern inline void *container_range_of_ones(uint32_t range_start, uint32_t range_end,$/;"	p	typeref:typename:void *	file:	signature:(uint32_t range_start,uint32_t range_end,uint8_t * result_type)
container_range_of_ones	sylar/sylar/ds/roaring.h	/^static inline void *container_range_of_ones(uint32_t range_start,$/;"	f	typeref:typename:void *	signature:(uint32_t range_start,uint32_t range_end,uint8_t * result_type)
container_rank	sylar/sylar/ds/roaring.h	/^static inline int container_rank(const void *container, uint8_t typecode,$/;"	f	typeref:typename:int	signature:(const void * container,uint8_t typecode,uint16_t x)
container_remove	sylar/sylar/ds/roaring.h	/^static inline void *container_remove(void *container, uint16_t val,$/;"	f	typeref:typename:void *	signature:(void * container,uint16_t val,uint8_t typecode,uint8_t * new_typecode)
container_remove_range	sylar/sylar/ds/roaring.h	/^static inline void *container_remove_range(void *container, uint8_t type,$/;"	f	typeref:typename:void *	signature:(void * container,uint8_t type,uint32_t min,uint32_t max,uint8_t * result_type)
container_repair_after_lazy	sylar/sylar/ds/roaring.h	/^static inline void *container_repair_after_lazy(void *container,$/;"	f	typeref:typename:void *	signature:(void * container,uint8_t * typecode)
container_select	sylar/sylar/ds/roaring.h	/^static inline bool container_select(const void *container, uint8_t typecode,$/;"	f	typeref:typename:bool	signature:(const void * container,uint8_t typecode,uint32_t * start_rank,uint32_t rank,uint32_t * element)
container_serialization_len	sylar/sylar/ds/roaring.c	/^uint32_t container_serialization_len(const void *container, uint8_t typecode) {$/;"	f	typeref:typename:uint32_t	signature:(const void * container,uint8_t typecode)
container_serialization_len	sylar/sylar/ds/roaring.h	/^uint32_t container_serialization_len(const void *container, uint8_t typecode);$/;"	p	typeref:typename:uint32_t	signature:(const void * container,uint8_t typecode)
container_serialize	sylar/sylar/ds/roaring.c	/^int32_t container_serialize(const void *container, uint8_t typecode,$/;"	f	typeref:typename:int32_t	signature:(const void * container,uint8_t typecode,char * buf)
container_serialize	sylar/sylar/ds/roaring.h	/^int32_t container_serialize(const void *container, uint8_t typecode,$/;"	p	typeref:typename:int32_t	signature:(const void * container,uint8_t typecode,char * buf)
container_shrink_to_fit	sylar/sylar/ds/roaring.h	/^static inline int container_shrink_to_fit(void *container, uint8_t typecode) {$/;"	f	typeref:typename:int	signature:(void * container,uint8_t typecode)
container_size_in_bytes	sylar/sylar/ds/roaring.h	/^static inline int32_t container_size_in_bytes(const void *container,$/;"	f	typeref:typename:int32_t	signature:(const void * container,uint8_t typecode)
container_to_bitset	sylar/sylar/ds/roaring.h	/^static inline void *container_to_bitset(void *container, uint8_t typecode) {$/;"	f	typeref:typename:void *	signature:(void * container,uint8_t typecode)
container_to_uint32_array	sylar/sylar/ds/roaring.c	/^extern inline int container_to_uint32_array(uint32_t *output, const void *container,$/;"	p	typeref:typename:int	file:	signature:(uint32_t * output,const void * container,uint8_t typecode,uint32_t base)
container_to_uint32_array	sylar/sylar/ds/roaring.h	/^static inline int container_to_uint32_array(uint32_t *output,$/;"	f	typeref:typename:int	signature:(uint32_t * output,const void * container,uint8_t typecode,uint32_t base)
container_unwrap_shared	sylar/sylar/ds/roaring.c	/^extern inline const void *container_unwrap_shared($/;"	p	typeref:typename:const void *	file:	signature:(const void * candidate_shared_container,uint8_t * type)
container_unwrap_shared	sylar/sylar/ds/roaring.h	/^inline const void *container_unwrap_shared($/;"	f	typeref:typename:const void *	signature:(const void * candidate_shared_container,uint8_t * type)
container_write	sylar/sylar/ds/roaring.h	/^static inline int32_t container_write(const void *container, uint8_t typecode,$/;"	f	typeref:typename:int32_t	signature:(const void * container,uint8_t typecode,char * buf)
container_xor	sylar/sylar/ds/roaring.c	/^extern inline void *container_xor(const void *c1, uint8_t type1, const void *c2,$/;"	p	typeref:typename:void *	file:	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
container_xor	sylar/sylar/ds/roaring.h	/^static inline void *container_xor(const void *c1, uint8_t type1, const void *c2,$/;"	f	typeref:typename:void *	signature:(const void * c1,uint8_t type1,const void * c2,uint8_t type2,uint8_t * result_type)
containerptr_roaring_bitmap_add	sylar/sylar/ds/roaring.c	/^static inline void *containerptr_roaring_bitmap_add(roaring_bitmap_t *r,$/;"	f	typeref:typename:void *	file:	signature:(roaring_bitmap_t * r,uint32_t val,uint8_t * typecode,int * index)
containers	sylar/sylar/ds/roaring.h	/^    void **containers;$/;"	m	struct:roaring_array_s	typeref:typename:void **	access:public
contains	sylar/sylar/ds/roaring.hh	/^    bool contains(uint32_t x) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(uint32_t x) const
contains	sylar/sylar/ds/roaring.hh	/^    bool contains(uint32_t x) const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint32_t x) const
contains	sylar/sylar/ds/roaring.hh	/^    bool contains(uint64_t x) const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint64_t x) const
containsRange	sylar/sylar/ds/roaring.hh	/^    bool containsRange(const uint64_t x, const uint64_t y) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(const uint64_t x,const uint64_t y) const
content_len	sylar/sylar/http/http11_parser.h	/^  int content_len;$/;"	m	struct:http_parser	typeref:typename:int	access:public
content_len	sylar/sylar/http/httpclient_parser.h	/^  int content_len;$/;"	m	struct:httpclient_parser	typeref:typename:int	access:public
contextResize	sylar/sylar/iomanager.cc	/^void IOManager::contextResize(size_t size) {$/;"	f	class:sylar::IOManager	typeref:typename:void	signature:(size_t size)
contextResize	sylar/sylar/iomanager.h	/^    void contextResize(size_t size);$/;"	p	class:sylar::IOManager	typeref:typename:void	access:protected	signature:(size_t size)
convert	sylar/sylar/ds/util.h	/^    inline void convert(const V* v) {$/;"	f	struct:sylar::ds::Ivt	typeref:typename:void	access:public	signature:(const V * v)
convert	sylar/sylar/ds/util.h	/^    inline void convert(const size_t& offset) {$/;"	f	struct:sylar::ds::Ivt	typeref:typename:void	access:public	signature:(const size_t & offset)
convert_run_optimize	sylar/sylar/ds/roaring.c	/^void *convert_run_optimize(void *c, uint8_t typecode_original,$/;"	f	typeref:typename:void *	signature:(void * c,uint8_t typecode_original,uint8_t * typecode_after)
convert_run_optimize	sylar/sylar/ds/roaring.h	/^void *convert_run_optimize(void *c, uint8_t typecode_original,$/;"	p	typeref:typename:void *	signature:(void * c,uint8_t typecode_original,uint8_t * typecode_after)
convert_run_to_efficient_container	sylar/sylar/ds/roaring.c	/^void *convert_run_to_efficient_container(run_container_t *c,$/;"	f	typeref:typename:void *	signature:(run_container_t * c,uint8_t * typecode_after)
convert_run_to_efficient_container	sylar/sylar/ds/roaring.h	/^void *convert_run_to_efficient_container(run_container_t *c,$/;"	p	typeref:typename:void *	signature:(run_container_t * c,uint8_t * typecode_after)
convert_run_to_efficient_container_and_free	sylar/sylar/ds/roaring.c	/^void *convert_run_to_efficient_container_and_free(run_container_t *c,$/;"	f	typeref:typename:void *	signature:(run_container_t * c,uint8_t * typecode_after)
convert_run_to_efficient_container_and_free	sylar/sylar/ds/roaring.h	/^void *convert_run_to_efficient_container_and_free(run_container_t *c,$/;"	p	typeref:typename:void *	signature:(run_container_t * c,uint8_t * typecode_after)
convert_to_bitset_or_array_container	sylar/sylar/ds/roaring.c	/^void *convert_to_bitset_or_array_container(run_container_t *r, int32_t card,$/;"	f	typeref:typename:void *	signature:(run_container_t * r,int32_t card,uint8_t * resulttype)
convert_to_bitset_or_array_container	sylar/sylar/ds/roaring.h	/^void *convert_to_bitset_or_array_container(run_container_t *r, int32_t card,$/;"	p	typeref:typename:void *	signature:(run_container_t * r,int32_t card,uint8_t * resulttype)
copyOnWrite	sylar/sylar/ds/roaring.hh	/^    bool copyOnWrite = false;$/;"	m	class:Roaring64Map	typeref:typename:bool	access:private
count	sylar/sylar/ds/util.h	/^    int count;$/;"	m	struct:sylar::ds::Ivt	typeref:typename:int	access:public
count	sylar/tests/test_thread.cc	/^int count = 0;$/;"	v	typeref:typename:int
count_bits	sylar/sylar/ds/bitmap.cc	/^T count_bits(const T& v) {$/;"	f	namespace:sylar::ds	typeref:typename:T	signature:(const T & v)
count_bits	sylar/sylar/ds/bitmap.cc	/^uint64_t count_bits(const uint64_t& v) {$/;"	f	namespace:sylar::ds	typeref:typename:uint64_t	signature:(const uint64_t & v)
count_greater	sylar/sylar/ds/roaring.h	/^static inline int32_t count_greater(const uint16_t *array, int32_t lenarray,$/;"	f	typeref:typename:int32_t	signature:(const uint16_t * array,int32_t lenarray,uint16_t ikey)
count_less	sylar/sylar/ds/roaring.h	/^static inline int32_t count_less(const uint16_t *array, int32_t lenarray,$/;"	f	typeref:typename:int32_t	signature:(const uint16_t * array,int32_t lenarray,uint16_t ikey)
counter	sylar/sylar/ds/roaring.h	/^    uint32_t counter;  \/\/ to be managed atomically$/;"	m	struct:shared_container_s	typeref:typename:uint32_t	access:public
cpuinfo	sylar/sylar/ds/roaring.h	/^static inline void cpuinfo(int code, int *eax, int *ebx, int *ecx, int *edx) {$/;"	f	typeref:typename:void	signature:(int code,int * eax,int * ebx,int * ecx,int * edx)
create	sylar/sylar/zk_client.cc	/^int32_t ZKClient::create(const std::string& path, const std::string& val, std::string& new_path$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & path,const std::string & val,std::string & new_path,const struct ACL_vector * acl,int flags)
create	sylar/sylar/zk_client.h	/^    int32_t create(const std::string& path, const std::string& val, std::string& new_path$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & path,const std::string & val,std::string & new_path,const struct ACL_vector * acl=& ZOO_OPEN_ACL_UNSAFE,int flags=0)
createAddress	sylar/sylar/uri.h	/^    Address::ptr createAddress() const;$/;"	p	class:sylar::Uri	typeref:typename:Address::ptr	access:public	signature:() const
createAddress	sylar/sylar/uri.rl.cc	/^Address::ptr Uri::createAddress() const {$/;"	f	class:sylar::Uri	typeref:typename:Address::ptr	signature:() const
createLoadBalance	sylar/sylar/streams/load_balance.cc	/^LoadBalance::ptr SDLoadBalance::createLoadBalance(ILoadBalance::Type type) {$/;"	f	class:sylar::SDLoadBalance	typeref:typename:LoadBalance::ptr	signature:(ILoadBalance::Type type)
createLoadBalance	sylar/sylar/streams/load_balance.h	/^    LoadBalance::ptr createLoadBalance(ILoadBalance::Type type);$/;"	p	class:sylar::SDLoadBalance	typeref:typename:LoadBalance::ptr	access:private	signature:(ILoadBalance::Type type)
createLoadBalanceItem	sylar/sylar/streams/load_balance.cc	/^LoadBalanceItem::ptr SDLoadBalance::createLoadBalanceItem(ILoadBalance::Type type) {$/;"	f	class:sylar::SDLoadBalance	typeref:typename:LoadBalanceItem::ptr	signature:(ILoadBalance::Type type)
createLoadBalanceItem	sylar/sylar/streams/load_balance.h	/^    LoadBalanceItem::ptr createLoadBalanceItem(ILoadBalance::Type type);$/;"	p	class:sylar::SDLoadBalance	typeref:typename:LoadBalanceItem::ptr	access:private	signature:(ILoadBalance::Type type)
createResponse	sylar/sylar/http/http.cc	/^std::shared_ptr<HttpResponse> HttpRequest::createResponse() {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:std::shared_ptr<HttpResponse>	signature:()
createResponse	sylar/sylar/http/http.h	/^    std::shared_ptr<HttpResponse> createResponse();$/;"	p	class:sylar::http::HttpRequest	typeref:typename:std::shared_ptr<HttpResponse>	access:public	signature:()
createResponse	sylar/sylar/rock/rock_protocol.cc	/^std::shared_ptr<RockResponse> RockRequest::createResponse() {$/;"	f	class:sylar::RockRequest	typeref:typename:std::shared_ptr<RockResponse>	signature:()
createResponse	sylar/sylar/rock/rock_protocol.h	/^    std::shared_ptr<RockResponse> createResponse();$/;"	p	class:sylar::RockRequest	typeref:typename:std::shared_ptr<RockResponse>	access:public	signature:()
create_module	sylar/sylar/library.cc	/^typedef Module* (*create_module)();$/;"	t	namespace:sylar	typeref:typename:Module * (*)()	file:
create_pq	sylar/sylar/ds/roaring.c	/^static roaring_pq_t *create_pq(const roaring_bitmap_t **arr, uint32_t length) {$/;"	f	typeref:typename:roaring_pq_t *	file:	signature:(const roaring_bitmap_t ** arr,uint32_t length)
create_rock_stream	sylar/sylar/rock/rock_stream.cc	/^static SocketStream::ptr create_rock_stream(ServiceItemInfo::ptr info) {$/;"	f	namespace:sylar	typeref:typename:SocketStream::ptr	file:	signature:(ServiceItemInfo::ptr info)
cross	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::cross(const Bitmap& b) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(const Bitmap & b) const
cross	sylar/sylar/ds/bitmap.h	/^    bool cross(const Bitmap& b) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:(const Bitmap & b) const
cross	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::cross(const RoaringBitmap& b) const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:(const RoaringBitmap & b) const
cross	sylar/sylar/ds/roaring_bitmap.h	/^    bool cross(const RoaringBitmap& b) const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:(const RoaringBitmap & b) const
cs	sylar/sylar/http/http11_parser.h	/^  int cs;$/;"	m	struct:http_parser	typeref:typename:int	access:public
cs	sylar/sylar/http/httpclient_parser.h	/^  int cs;$/;"	m	struct:httpclient_parser	typeref:typename:int	access:public
ctx	sylar/sylar/db/redis.cc	/^    redisAsyncContext* ctx;$/;"	m	struct:sylar::Res	typeref:typename:redisAsyncContext *	file:	access:public
current_value	sylar/sylar/ds/roaring.h	/^    uint32_t current_value;$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:uint32_t	access:public
data	sylar/sylar/db/mysql.h	/^        char* data;$/;"	m	struct:sylar::MySQLStmtRes::Data	typeref:typename:char *	access:public
data	sylar/sylar/ds/array.h	/^    T* data() {$/;"	f	class:sylar::ds::Array	typeref:typename:T *	access:public	signature:()
data	sylar/sylar/ds/array.h	/^    const T* data() const {$/;"	f	class:sylar::ds::Array	typeref:typename:const T *	access:public	signature:() const
data	sylar/sylar/ds/util.h	/^    V* data;$/;"	m	struct:sylar::ds::Ivt	typeref:typename:V *	access:public
data	sylar/sylar/http/http11_parser.h	/^  void *data;$/;"	m	struct:http_parser	typeref:typename:void *	access:public
data	sylar/sylar/http/httpclient_parser.h	/^  void *data;$/;"	m	struct:httpclient_parser	typeref:typename:void *	access:public
data_cb	sylar/sylar/db/mysql.h	/^                ,int field_count, int row_no)> data_cb;$/;"	t	class:sylar::MySQLRes	access:public
data_from_hexstring	sylar/sylar/util/hash_util.cc	/^std::string data_from_hexstring(const char *hexstring, size_t length) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const char * hexstring,size_t length)
data_from_hexstring	sylar/sylar/util/hash_util.cc	/^std::string data_from_hexstring(const std::string &hexstring) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & hexstring)
data_from_hexstring	sylar/sylar/util/hash_util.cc	/^void data_from_hexstring(const char *hexstring, size_t length, void *output) {$/;"	f	namespace:sylar	typeref:typename:void	signature:(const char * hexstring,size_t length,void * output)
data_from_hexstring	sylar/sylar/util/hash_util.h	/^std::string data_from_hexstring(const char *hexstring, size_t length);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const char * hexstring,size_t length)
data_from_hexstring	sylar/sylar/util/hash_util.h	/^std::string data_from_hexstring(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
data_from_hexstring	sylar/sylar/util/hash_util.h	/^void data_from_hexstring(const char *hexstring, size_t length, void *output);$/;"	p	namespace:sylar	typeref:typename:void	signature:(const char * hexstring,size_t length,void * output)
data_length	sylar/sylar/db/mysql.h	/^        int32_t data_length;$/;"	m	struct:sylar::MySQLStmtRes::Data	typeref:typename:int32_t	access:public
debug	sylar/sylar/log.cc	/^void Logger::debug(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
debug	sylar/sylar/log.h	/^    void debug(LogEvent::ptr event);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
decDel	sylar/sylar/ds/cache_status.h	/^    int64_t decDel(int64_t v = 1) { return Atomic::subFetch(m_del, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
decDoing	sylar/sylar/streams/load_balance.h	/^    uint32_t decDoing(uint32_t v) { return sylar::Atomic::subFetch(m_doing, v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
decGet	sylar/sylar/ds/cache_status.h	/^    int64_t decGet(int64_t v = 1) { return Atomic::subFetch(m_get, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
decHit	sylar/sylar/ds/cache_status.h	/^    int64_t decHit(int64_t v = 1) { return Atomic::subFetch(m_hit, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
decPrune	sylar/sylar/ds/cache_status.h	/^    int64_t decPrune(int64_t v = 1) { return Atomic::subFetch(m_prune, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
decSet	sylar/sylar/ds/cache_status.h	/^    int64_t decSet(int64_t v = 1) { return Atomic::subFetch(m_set, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
decTimeout	sylar/sylar/ds/cache_status.h	/^    int64_t decTimeout(int64_t v = 1) { return Atomic::subFetch(m_timeout, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
decode	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::decode(const iovec* v, const uint64_t& size, bool finish) {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(const iovec * v,const uint64_t & size,bool finish)
decode	sylar/sylar/streams/zlib_stream.h	/^    int decode(const iovec* v, const uint64_t& size, bool finish);$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:private	signature:(const iovec * v,const uint64_t & size,bool finish)
default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const Node& default_instance() {$/;"	f	class:sylar::ns::Node	typeref:typename:const Node &	access:public	signature:()
default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const NodeInfo& default_instance() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const NodeInfo &	access:public	signature:()
default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const NotifyMessage& default_instance() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const NotifyMessage &	access:public	signature:()
default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const QueryRequest& default_instance() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const QueryRequest &	access:public	signature:()
default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const QueryResponse& default_instance() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const QueryResponse &	access:public	signature:()
default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const RegisterInfo& default_instance() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const RegisterInfo &	access:public	signature:()
default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const RegisterRequest& default_instance() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const RegisterRequest &	access:public	signature:()
default_target	build/Makefile	/^default_target: all$/;"	t
default_target	build/sylar/Makefile	/^default_target: all$/;"	t
del	sylar/sylar/ds/dict.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:public	signature:(const K & k)
del	sylar/sylar/ds/hash_map.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:public	signature:(const K & k)
del	sylar/sylar/ds/hash_multimap.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k)
del	sylar/sylar/ds/hash_multimap.h	/^    bool del(const K& k, const V& v) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,const V & v)
del	sylar/sylar/ds/lru_cache.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:bool	access:public	signature:(const K & k)
del	sylar/sylar/ds/lru_cache.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:bool	access:public	signature:(const K & k)
del	sylar/sylar/ds/timed_cache.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:bool	access:public	signature:(const K & k)
del	sylar/sylar/ds/timed_cache.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:bool	access:public	signature:(const K & k)
del	sylar/sylar/ds/timed_lru_cache.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:bool	access:public	signature:(const K & k)
del	sylar/sylar/ds/timed_lru_cache.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:bool	access:public	signature:(const K & k)
del	sylar/sylar/env.cc	/^void Env::del(const std::string& key) {$/;"	f	class:sylar::Env	typeref:typename:void	signature:(const std::string & key)
del	sylar/sylar/env.h	/^    void del(const std::string& key);$/;"	p	class:sylar::Env	typeref:typename:void	access:public	signature:(const std::string & key)
del	sylar/sylar/fd_manager.cc	/^void FdManager::del(int fd) {$/;"	f	class:sylar::FdManager	typeref:typename:void	signature:(int fd)
del	sylar/sylar/fd_manager.h	/^    void del(int fd);$/;"	p	class:sylar::FdManager	typeref:typename:void	access:public	signature:(int fd)
del	sylar/sylar/http/session_data.cc	/^void SessionData::del(const std::string& key) {$/;"	f	class:sylar::http::SessionData	typeref:typename:void	signature:(const std::string & key)
del	sylar/sylar/http/session_data.cc	/^void SessionDataManager::del(const std::string& id) {$/;"	f	class:sylar::http::SessionDataManager	typeref:typename:void	signature:(const std::string & id)
del	sylar/sylar/http/session_data.h	/^    void del(const std::string& id);$/;"	p	class:sylar::http::SessionDataManager	typeref:typename:void	access:public	signature:(const std::string & id)
del	sylar/sylar/http/session_data.h	/^    void del(const std::string& key);$/;"	p	class:sylar::http::SessionData	typeref:typename:void	access:public	signature:(const std::string & key)
del	sylar/sylar/module.cc	/^void ModuleManager::del(const std::string& name) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(const std::string & name)
del	sylar/sylar/module.h	/^    void del(const std::string& name);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(const std::string & name)
del	sylar/sylar/ns/ns_protocol.cc	/^NSNode::ptr NSDomain::del(uint32_t cmd, uint64_t id) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:NSNode::ptr	signature:(uint32_t cmd,uint64_t id)
del	sylar/sylar/ns/ns_protocol.cc	/^NSNode::ptr NSNodeSet::del(uint64_t id) {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:NSNode::ptr	signature:(uint64_t id)
del	sylar/sylar/ns/ns_protocol.cc	/^void NSDomain::del(uint32_t cmd) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:void	signature:(uint32_t cmd)
del	sylar/sylar/ns/ns_protocol.cc	/^void NSDomainSet::del(const std::string& domain) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:void	signature:(const std::string & domain)
del	sylar/sylar/ns/ns_protocol.cc	/^void NSDomainSet::del(const std::string& domain, uint32_t cmd, uint64_t id) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:void	signature:(const std::string & domain,uint32_t cmd,uint64_t id)
del	sylar/sylar/ns/ns_protocol.h	/^    NSNode::ptr del(uint32_t cmd, uint64_t id);$/;"	p	class:sylar::ns::NSDomain	typeref:typename:NSNode::ptr	access:public	signature:(uint32_t cmd,uint64_t id)
del	sylar/sylar/ns/ns_protocol.h	/^    NSNode::ptr del(uint64_t id);$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:NSNode::ptr	access:public	signature:(uint64_t id)
del	sylar/sylar/ns/ns_protocol.h	/^    void del(const std::string& domain);$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:void	access:public	signature:(const std::string & domain)
del	sylar/sylar/ns/ns_protocol.h	/^    void del(const std::string& domain, uint32_t cmd, uint64_t id);$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:void	access:public	signature:(const std::string & domain,uint32_t cmd,uint64_t id)
del	sylar/sylar/ns/ns_protocol.h	/^    void del(uint32_t cmd);$/;"	p	class:sylar::ns::NSDomain	typeref:typename:void	access:public	signature:(uint32_t cmd)
del	sylar/sylar/streams/load_balance.cc	/^void LoadBalance::del(LoadBalanceItem::ptr v) {$/;"	f	class:sylar::LoadBalance	typeref:typename:void	signature:(LoadBalanceItem::ptr v)
del	sylar/sylar/streams/load_balance.h	/^    void del(LoadBalanceItem::ptr v);$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:public	signature:(LoadBalanceItem::ptr v)
del	sylar/sylar/zk_client.cc	/^int32_t ZKClient::del(const std::string& path, int version) {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & path,int version)
del	sylar/sylar/zk_client.h	/^    int32_t del(const std::string& path, int version = -1);$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & path,int version=-1)
delAll	sylar/sylar/module.cc	/^void ModuleManager::delAll() {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:()
delAll	sylar/sylar/module.h	/^    void delAll();$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:()
delAppender	sylar/sylar/log.cc	/^void Logger::delAppender(LogAppender::ptr appender) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogAppender::ptr appender)
delAppender	sylar/sylar/log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogAppender::ptr appender)
delCookie	sylar/sylar/http/http.cc	/^void HttpRequest::delCookie(const std::string& key) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:(const std::string & key)
delCookie	sylar/sylar/http/http.h	/^    void delCookie(const std::string& key);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & key)
delEvent	sylar/sylar/iomanager.cc	/^bool IOManager::delEvent(int fd, Event event) {$/;"	f	class:sylar::IOManager	typeref:typename:bool	signature:(int fd,Event event)
delEvent	sylar/sylar/iomanager.h	/^    bool delEvent(int fd, Event event);$/;"	p	class:sylar::IOManager	typeref:typename:bool	access:public	signature:(int fd,Event event)
delGlobServlet	sylar/sylar/http/servlet.cc	/^void ServletDispatch::delGlobServlet(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri)
delGlobServlet	sylar/sylar/http/servlet.h	/^    void delGlobServlet(const std::string& uri);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri)
delHeader	sylar/sylar/http/http.cc	/^void HttpRequest::delHeader(const std::string& key) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:(const std::string & key)
delHeader	sylar/sylar/http/http.cc	/^void HttpResponse::delHeader(const std::string& key) {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	signature:(const std::string & key)
delHeader	sylar/sylar/http/http.h	/^    void delHeader(const std::string& key);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & key)
delHeader	sylar/sylar/http/http.h	/^    void delHeader(const std::string& key);$/;"	p	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const std::string & key)
delListener	sylar/sylar/config.h	/^    void delListener(uint64_t key) {$/;"	f	class:sylar::ConfigVar	typeref:typename:void	access:public	signature:(uint64_t key)
delParam	sylar/sylar/http/http.cc	/^void HttpRequest::delParam(const std::string& key) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:(const std::string & key)
delParam	sylar/sylar/http/http.h	/^    void delParam(const std::string& key);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & key)
delQueryDomain	sylar/sylar/ns/ns_client.cc	/^void NSClient::delQueryDomain(const std::string& domain) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:(const std::string & domain)
delQueryDomain	sylar/sylar/ns/ns_client.h	/^    void delQueryDomain(const std::string& domain);$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:public	signature:(const std::string & domain)
delServlet	sylar/sylar/http/servlet.cc	/^void ServletDispatch::delServlet(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri)
delServlet	sylar/sylar/http/servlet.h	/^    void delServlet(const std::string& uri);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri)
delayDelete	sylar/sylar/db/redis.cc	/^void FoxRedis::delayDelete(redisAsyncContext* c) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(redisAsyncContext * c)
delayDelete	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::delayDelete(redisAsyncContext* c) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(redisAsyncContext * c)
delayDelete	sylar/sylar/db/redis.h	/^    void delayDelete(redisAsyncContext* c);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(redisAsyncContext * c)
delayDelete	sylar/sylar/db/redis.h	/^    void delayDelete(redisAsyncContext* c);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(redisAsyncContext * c)
delete_array	sylar/sylar/util.h	/^void delete_array(T* v) {$/;"	f	namespace:sylar	typeref:typename:void	signature:(T * v)
dels	sylar/sylar/ns/ns_protobuf.pb.h	/^      dels() const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> &	access:public	signature:() const
dels	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::NodeInfo& dels(int index) const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	access:public	signature:(int index) const
dels	sylar/sylar/ns/ns_protobuf.pb.h	/^NotifyMessage::dels() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> &	signature:() const
dels	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::NodeInfo& NotifyMessage::dels(int index) const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	signature:(int index) const
dels	sylar/sylar/ns/ns_protobuf.proto	/^    repeated NodeInfo dels = 1;$/;"	f
dels_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int dels_size() const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:int	access:public	signature:() const
dels_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int NotifyMessage::dels_size() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:int	signature:() const
demangle	sylar/sylar/util.cc	/^static std::string demangle(const char* str) {$/;"	f	namespace:sylar	typeref:typename:std::string	file:	signature:(const char * str)
depend	build/Makefile	/^depend:$/;"	t
depend	build/sylar/Makefile	/^depend:$/;"	t
descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sylar_2fns_2fns_5fprot/;"	v	typeref:typename:const::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto_getter	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_tab/;"	f	typeref:typename:PROTOBUF_ATTRIBUTE_WEAK const::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *	signature:()
destory_module	sylar/sylar/library.cc	/^typedef void (*destory_module)(Module*);$/;"	t	namespace:sylar	typeref:typename:void (*)(Module *)	file:
detectClockRollover	sylar/sylar/timer.cc	/^bool TimerManager::detectClockRollover(uint64_t now_ms) {$/;"	f	class:sylar::TimerManager	typeref:typename:bool	signature:(uint64_t now_ms)
detectClockRollover	sylar/sylar/timer.h	/^    bool detectClockRollover(uint64_t now_ms);$/;"	p	class:sylar::TimerManager	typeref:typename:bool	access:private	signature:(uint64_t now_ms)
diff	sylar/sylar/ns/name_server_module.cc	/^void diff(const std::map<std::string, std::set<uint32_t> >& old_value,$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(const std::map<std::string,std::set<uint32_t>> & old_value,const std::map<std::string,std::set<uint32_t>> & new_value,std::map<std::string,std::set<uint32_t>> & dels,std::map<std::string,std::set<uint32_t>> & news,std::map<std::string,std::set<uint32_t>> & comms)
difference_type	sylar/sylar/ds/roaring.hh	/^    typedef int32_t difference_type;$/;"	t	class:RoaringSetBitForwardIterator	typeref:typename:int32_t	access:public
difference_type	sylar/sylar/ds/roaring.hh	/^    typedef int32_t difference_type;$/;"	t	class:RoaringSetBitReverseIterator	typeref:typename:int32_t	access:public
difference_type	sylar/sylar/ds/roaring.hh	/^    typedef int64_t difference_type;$/;"	t	class:Roaring64MapSetBitForwardIterator	typeref:typename:int64_t	access:public
difference_type	sylar/sylar/ds/roaring.hh	/^    typedef int64_t difference_type;$/;"	t	class:Roaring64MapSetBitReverseIterator	typeref:typename:int64_t	access:public
difference_uint16	sylar/sylar/ds/roaring.c	/^int difference_uint16(const uint16_t *a1, int length1, const uint16_t *a2,$/;"	f	typeref:typename:int	signature:(const uint16_t * a1,int length1,const uint16_t * a2,int length2,uint16_t * a_out)
difference_uint16	sylar/sylar/ds/roaring.h	/^int difference_uint16(const uint16_t *a1, int length1, const uint16_t *a2,$/;"	p	typeref:typename:int	signature:(const uint16_t * a1,int length1,const uint16_t * a2,int length2,uint16_t * a_out)
difference_vector16	sylar/sylar/ds/roaring.c	/^int32_t difference_vector16(const uint16_t *__restrict__ A, size_t s_a,$/;"	f	typeref:typename:int32_t	signature:(const uint16_t * __restrict__ A,size_t s_a,const uint16_t * __restrict__ B,size_t s_b,uint16_t * C)
difference_vector16	sylar/sylar/ds/roaring.h	/^int32_t difference_vector16(const uint16_t *__restrict__ A, size_t s_a,$/;"	p	typeref:typename:int32_t	signature:(const uint16_t * __restrict__ A,size_t s_a,const uint16_t * __restrict__ B,size_t s_b,uint16_t * C)
disconnect_callback	sylar/sylar/streams/async_socket_stream.h	/^    typedef AsyncSocketStream::disconnect_callback disconnect_callback;$/;"	t	class:sylar::AsyncSocketStreamManager	typeref:typename:AsyncSocketStream::disconnect_callback	access:public
disconnect_callback	sylar/sylar/streams/async_socket_stream.h	/^    typedef std::function<void(AsyncSocketStream::ptr)> disconnect_callback;$/;"	t	class:sylar::AsyncSocketStream	access:public
dispatch	sylar/sylar/db/fox_thread.cc	/^bool FoxThread::dispatch(callback cb) {$/;"	f	class:sylar::FoxThread	typeref:typename:bool	signature:(callback cb)
dispatch	sylar/sylar/db/fox_thread.cc	/^bool FoxThread::dispatch(uint32_t id, callback cb) {$/;"	f	class:sylar::FoxThread	typeref:typename:bool	signature:(uint32_t id,callback cb)
dispatch	sylar/sylar/db/fox_thread.cc	/^bool FoxThreadPool::dispatch(callback cb) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:bool	signature:(callback cb)
dispatch	sylar/sylar/db/fox_thread.cc	/^bool FoxThreadPool::dispatch(uint32_t id, callback cb) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:bool	signature:(uint32_t id,callback cb)
dispatch	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::dispatch(const std::string& name, callback cb) {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:(const std::string & name,callback cb)
dispatch	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::dispatch(const std::string& name, uint32_t id, callback cb) {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:(const std::string & name,uint32_t id,callback cb)
dispatch	sylar/sylar/db/fox_thread.h	/^    bool dispatch(callback cb);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:bool	access:public	signature:(callback cb)
dispatch	sylar/sylar/db/fox_thread.h	/^    bool dispatch(uint32_t id, callback cb);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:bool	access:public	signature:(uint32_t id,callback cb)
dispatch	sylar/sylar/db/fox_thread.h	/^    virtual bool dispatch(callback cb) = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:bool	access:public	signature:(callback cb)
dispatch	sylar/sylar/db/fox_thread.h	/^    virtual bool dispatch(callback cb);$/;"	p	class:sylar::FoxThread	typeref:typename:bool	access:public	signature:(callback cb)
dispatch	sylar/sylar/db/fox_thread.h	/^    virtual bool dispatch(uint32_t id, callback cb) = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:bool	access:public	signature:(uint32_t id,callback cb)
dispatch	sylar/sylar/db/fox_thread.h	/^    virtual bool dispatch(uint32_t id, callback cb);$/;"	p	class:sylar::FoxThread	typeref:typename:bool	access:public	signature:(uint32_t id,callback cb)
dispatch	sylar/sylar/db/fox_thread.h	/^    void dispatch(const std::string& name, callback cb);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:(const std::string & name,callback cb)
dispatch	sylar/sylar/db/fox_thread.h	/^    void dispatch(const std::string& name, uint32_t id, callback cb);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:(const std::string & name,uint32_t id,callback cb)
doCmd	sylar/sylar/email/smtp.cc	/^SmtpResult::ptr SmtpClient::doCmd(const std::string& cmd, bool debug) {$/;"	f	class:sylar::SmtpClient	typeref:typename:SmtpResult::ptr	signature:(const std::string & cmd,bool debug)
doCmd	sylar/sylar/email/smtp.h	/^    SmtpResult::ptr doCmd(const std::string& cmd, bool debug);$/;"	p	class:sylar::SmtpClient	typeref:typename:SmtpResult::ptr	access:private	signature:(const std::string & cmd,bool debug)
doGet	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doGet(Uri::ptr uri$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
doGet	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doGet(const std::string& url$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
doGet	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doGet(Uri::ptr uri$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
doGet	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doGet(const std::string& url$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
doNotify	sylar/sylar/ns/name_server_module.cc	/^void NameServerModule::doNotify(std::set<std::string>& domains, std::shared_ptr<NotifyMessage> n/;"	f	class:sylar::ns::NameServerModule	typeref:typename:void	signature:(std::set<std::string> & domains,std::shared_ptr<NotifyMessage> nty)
doNotify	sylar/sylar/ns/name_server_module.h	/^    void doNotify(std::set<std::string>& domains, std::shared_ptr<NotifyMessage> nty);$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:void	access:private	signature:(std::set<std::string> & domains,std::shared_ptr<NotifyMessage> nty)
doPost	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doPost(Uri::ptr uri$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
doPost	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doPost(const std::string& url$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
doPost	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doPost(Uri::ptr uri$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
doPost	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doPost(const std::string& url$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
doRead	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::doRead() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	signature:()
doRead	sylar/sylar/streams/async_socket_stream.h	/^    virtual void doRead();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:void	access:protected	signature:()
doRecv	sylar/sylar/rock/rock_stream.cc	/^AsyncSocketStream::Ctx::ptr RockStream::doRecv() {$/;"	f	class:sylar::RockStream	typeref:typename:AsyncSocketStream::Ctx::ptr	signature:()
doRecv	sylar/sylar/rock/rock_stream.h	/^    virtual Ctx::ptr doRecv() override;$/;"	p	class:sylar::RockStream	typeref:typename:Ctx::ptr	access:protected	signature:()
doRecv	sylar/sylar/streams/async_socket_stream.h	/^    virtual Ctx::ptr doRecv() = 0;$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:Ctx::ptr	access:protected	signature:()
doRequest	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doRequest(HttpMethod method$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
doRequest	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doRequest(HttpMethod method$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(HttpMethod method,const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
doRequest	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doRequest(HttpRequest::ptr req$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(HttpRequest::ptr req,uint64_t timeout_ms)
doRequest	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doRequest(HttpMethod method$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
doRequest	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doRequest(HttpMethod method$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(HttpMethod method,const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
doRequest	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doRequest(HttpRequest::ptr req$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(HttpRequest::ptr req,uint64_t timeout_ms)
doRsp	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::Ctx::doRsp() {$/;"	f	class:sylar::AsyncSocketStream::Ctx	typeref:typename:void	signature:()
doRsp	sylar/sylar/streams/async_socket_stream.h	/^        virtual void doRsp();$/;"	p	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:void	access:public	signature:()
doSend	sylar/sylar/rock/rock_stream.cc	/^bool RockStream::RockCtx::doSend(AsyncSocketStream::ptr stream) {$/;"	f	class:sylar::RockStream::RockCtx	typeref:typename:bool	signature:(AsyncSocketStream::ptr stream)
doSend	sylar/sylar/rock/rock_stream.cc	/^bool RockStream::RockSendCtx::doSend(AsyncSocketStream::ptr stream) {$/;"	f	class:sylar::RockStream::RockSendCtx	typeref:typename:bool	signature:(AsyncSocketStream::ptr stream)
doSend	sylar/sylar/rock/rock_stream.h	/^        virtual bool doSend(AsyncSocketStream::ptr stream) override;$/;"	p	struct:sylar::RockStream::RockCtx	typeref:typename:bool	access:public	signature:(AsyncSocketStream::ptr stream)
doSend	sylar/sylar/rock/rock_stream.h	/^        virtual bool doSend(AsyncSocketStream::ptr stream) override;$/;"	p	struct:sylar::RockStream::RockSendCtx	typeref:typename:bool	access:public	signature:(AsyncSocketStream::ptr stream)
doSend	sylar/sylar/streams/async_socket_stream.h	/^        virtual bool doSend(AsyncSocketStream::ptr stream) = 0;$/;"	p	struct:sylar::AsyncSocketStream::SendCtx	typeref:typename:bool	access:public	signature:(AsyncSocketStream::ptr stream)
doWork	sylar/sylar/worker.cc	/^void WorkerGroup::doWork(std::function<void()> cb) {$/;"	f	class:sylar::WorkerGroup	typeref:typename:void	signature:(std::function<void ()> cb)
doWork	sylar/sylar/worker.h	/^    void doWork(std::function<void()> cb);$/;"	p	class:sylar::WorkerGroup	typeref:typename:void	access:private	signature:(std::function<void ()> cb)
doWrite	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::doWrite() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	signature:()
doWrite	sylar/sylar/streams/async_socket_stream.h	/^    virtual void doWrite();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:void	access:protected	signature:()
do_io	sylar/sylar/hook.cc	/^static ssize_t do_io(int fd, OriginFun fun, const char* hook_fun_name,$/;"	f	typeref:typename:ssize_t	file:	signature:(int fd,OriginFun fun,const char * hook_fun_name,uint32_t event,int timeout_so,Args &&...args)
domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& domain() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const std::string &	access:public	signature:() const
domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& domain() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const std::string &	access:public	signature:() const
domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& NodeInfo::domain() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const std::string &	signature:() const
domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& RegisterInfo::domain() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const std::string &	signature:() const
domain	sylar/sylar/ns/ns_protobuf.proto	/^    optional string domain = 1; \/\/域名$/;"	f
domain	sylar/sylar/ns/ns_protobuf.proto	/^    optional string domain = 1;$/;"	f
domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& domains() const;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &	access:public	signature:() const
domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& domains(int index) const;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:const std::string &	access:public	signature:(int index) const
domains	sylar/sylar/ns/ns_protobuf.pb.h	/^QueryRequest::domains() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &	signature:() const
domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& QueryRequest::domains(int index) const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const std::string &	signature:(int index) const
domains	sylar/sylar/ns/ns_protobuf.proto	/^    repeated string domains = 1;         \/\/域名$/;"	f
domains_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int domains_size() const;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:int	access:public	signature:() const
domains_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int QueryRequest::domains_size() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:int	signature:() const
ds	sylar/sylar/ds/array.h	/^namespace ds {$/;"	n	namespace:sylar
ds	sylar/sylar/ds/bitmap.cc	/^namespace ds {$/;"	n	namespace:sylar	file:
ds	sylar/sylar/ds/bitmap.h	/^namespace ds {$/;"	n	namespace:sylar
ds	sylar/sylar/ds/cache_status.h	/^namespace ds {$/;"	n	namespace:sylar
ds	sylar/sylar/ds/dict.h	/^namespace ds {$/;"	n	namespace:sylar
ds	sylar/sylar/ds/hash_map.h	/^namespace ds {$/;"	n	namespace:sylar
ds	sylar/sylar/ds/hash_multimap.h	/^namespace ds {$/;"	n	namespace:sylar
ds	sylar/sylar/ds/lru_cache.h	/^namespace ds {$/;"	n	namespace:sylar
ds	sylar/sylar/ds/roaring_bitmap.cc	/^namespace ds {$/;"	n	namespace:sylar	file:
ds	sylar/sylar/ds/roaring_bitmap.h	/^namespace ds {$/;"	n	namespace:sylar
ds	sylar/sylar/ds/timed_cache.h	/^namespace ds {$/;"	n	namespace:sylar
ds	sylar/sylar/ds/timed_lru_cache.h	/^namespace ds {$/;"	n	namespace:sylar
ds	sylar/sylar/ds/util.cc	/^namespace ds {$/;"	n	namespace:sylar	file:
ds	sylar/sylar/ds/util.h	/^namespace ds {$/;"	n	namespace:sylar
dump	sylar/sylar/db/fox_thread.cc	/^void FoxThread::dump(std::ostream& os) {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:(std::ostream & os)
dump	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::dump(std::ostream& os) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:(std::ostream & os)
dump	sylar/sylar/db/fox_thread.h	/^    virtual void dump(std::ostream& os) = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:void	access:public	signature:(std::ostream & os)
dump	sylar/sylar/db/fox_thread.h	/^    void dump(std::ostream& os);$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:(std::ostream & os)
dump	sylar/sylar/db/fox_thread.h	/^    void dump(std::ostream& os);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:public	signature:(std::ostream & os)
dump	sylar/sylar/db/redis.cc	/^std::ostream& RedisManager::dump(std::ostream& os) {$/;"	f	class:sylar::RedisManager	typeref:typename:std::ostream &	signature:(std::ostream & os)
dump	sylar/sylar/db/redis.h	/^    std::ostream& dump(std::ostream& os);$/;"	p	class:sylar::RedisManager	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
dump	sylar/sylar/ds/dict.h	/^    std::ostream& dump(std::ostream& os) {$/;"	f	class:sylar::ds::Dict	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
dump	sylar/sylar/ds/dict.h	/^    std::ostream& dump(std::ostream& os) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
dump	sylar/sylar/ds/hash_map.h	/^    std::ostream& dump(std::ostream& os) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
dump	sylar/sylar/ds/hash_multimap.h	/^    std::ostream& dump(std::ostream& os) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
dump	sylar/sylar/http/http.cc	/^std::ostream& HttpRequest::dump(std::ostream& os) const {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:std::ostream &	signature:(std::ostream & os) const
dump	sylar/sylar/http/http.cc	/^std::ostream& HttpResponse::dump(std::ostream& os) const {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:std::ostream &	signature:(std::ostream & os) const
dump	sylar/sylar/http/http.h	/^    std::ostream& dump(std::ostream& os) const;$/;"	p	class:sylar::http::HttpRequest	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
dump	sylar/sylar/http/http.h	/^    std::ostream& dump(std::ostream& os) const;$/;"	p	class:sylar::http::HttpResponse	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
dump	sylar/sylar/ns/ns_protocol.cc	/^std::ostream& NSDomain::dump(std::ostream& os, const std::string& prefix) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:std::ostream &	signature:(std::ostream & os,const std::string & prefix)
dump	sylar/sylar/ns/ns_protocol.cc	/^std::ostream& NSDomainSet::dump(std::ostream& os, const std::string& prefix) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:std::ostream &	signature:(std::ostream & os,const std::string & prefix)
dump	sylar/sylar/ns/ns_protocol.cc	/^std::ostream& NSNode::dump(std::ostream& os, const std::string& prefix) {$/;"	f	class:sylar::ns::NSNode	typeref:typename:std::ostream &	signature:(std::ostream & os,const std::string & prefix)
dump	sylar/sylar/ns/ns_protocol.cc	/^std::ostream& NSNodeSet::dump(std::ostream& os, const std::string& prefix) {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:std::ostream &	signature:(std::ostream & os,const std::string & prefix)
dump	sylar/sylar/ns/ns_protocol.h	/^    std::ostream& dump(std::ostream& os, const std::string& prefix = "");$/;"	p	class:sylar::ns::NSDomain	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os,const std::string & prefix="")
dump	sylar/sylar/ns/ns_protocol.h	/^    std::ostream& dump(std::ostream& os, const std::string& prefix = "");$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os,const std::string & prefix="")
dump	sylar/sylar/ns/ns_protocol.h	/^    std::ostream& dump(std::ostream& os, const std::string& prefix = "");$/;"	p	class:sylar::ns::NSNode	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os,const std::string & prefix="")
dump	sylar/sylar/ns/ns_protocol.h	/^    std::ostream& dump(std::ostream& os, const std::string& prefix = "");$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os,const std::string & prefix="")
dump	sylar/sylar/scheduler.cc	/^std::ostream& Scheduler::dump(std::ostream& os) {$/;"	f	class:sylar::Scheduler	typeref:typename:std::ostream &	signature:(std::ostream & os)
dump	sylar/sylar/scheduler.h	/^    std::ostream& dump(std::ostream& os);$/;"	p	class:sylar::Scheduler	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
dump	sylar/sylar/socket.cc	/^std::ostream& SSLSocket::dump(std::ostream& os) const {$/;"	f	class:sylar::SSLSocket	typeref:typename:std::ostream &	signature:(std::ostream & os) const
dump	sylar/sylar/socket.cc	/^std::ostream& Socket::dump(std::ostream& os) const {$/;"	f	class:sylar::Socket	typeref:typename:std::ostream &	signature:(std::ostream & os) const
dump	sylar/sylar/socket.h	/^    virtual std::ostream& dump(std::ostream& os) const override;$/;"	p	class:sylar::SSLSocket	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
dump	sylar/sylar/socket.h	/^    virtual std::ostream& dump(std::ostream& os) const;$/;"	p	class:sylar::Socket	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
dump	sylar/sylar/uri.h	/^    std::ostream& dump(std::ostream& os) const;$/;"	p	class:sylar::Uri	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
dump	sylar/sylar/uri.rl.cc	/^std::ostream& Uri::dump(std::ostream& os) const {$/;"	f	class:sylar::Uri	typeref:typename:std::ostream &	signature:(std::ostream & os) const
dump	sylar/sylar/worker.cc	/^std::ostream& WorkerManager::dump(std::ostream& os) {$/;"	f	class:sylar::WorkerManager	typeref:typename:std::ostream &	signature:(std::ostream & os)
dump	sylar/sylar/worker.h	/^    std::ostream& dump(std::ostream& os);$/;"	p	class:sylar::WorkerManager	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
dumpFoxThreadStatus	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::dumpFoxThreadStatus(std::ostream& os) {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:(std::ostream & os)
dumpFoxThreadStatus	sylar/sylar/db/fox_thread.h	/^    void dumpFoxThreadStatus(std::ostream& os);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:(std::ostream & os)
duplicate	sylar/sylar/ds/util.h	/^    inline void duplicate(const Ivt<K, V>& v) {$/;"	f	struct:sylar::ds::Ivt	typeref:typename:void	access:public	signature:(const Ivt<K,V> & v)
duplicate	sylar/sylar/ds/util.h	/^    inline void duplicate(const V* v, const int& cnt) {$/;"	f	struct:sylar::ds::Ivt	typeref:typename:void	access:public	signature:(const V * v,const int & cnt)
duplicate	sylar/sylar/ds/util.h	/^    inline void duplicate(const std::vector<V>& v) {$/;"	f	struct:sylar::ds::Ivt	typeref:typename:void	access:public	signature:(const std::vector<V> & v)
dynamic_init_dummy_sylar_2fns_2fns_5fprotobuf_2eproto	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner /;"	v	typeref:typename:PROTOBUF_ATTRIBUTE_INIT_PRIORITY::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner	file:
edit_cache	build/Makefile	/^edit_cache:$/;"	t
edit_cache	build/sylar/Makefile	/^edit_cache:$/;"	t
edit_cache/fast	build/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
edit_cache/fast	build/sylar/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
element_cb	sylar/sylar/http/http11_common.h	/^typedef void (*element_cb)(void *data, const char *at, size_t length);$/;"	t	typeref:typename:void (*)(void * data,const char * at,size_t length)
elements	sylar/sylar/ds/roaring.c	/^    roaring_pq_element_t *elements;$/;"	m	struct:roaring_pq_s	typeref:typename:roaring_pq_element_t *	file:	access:public
emplaceOrInsert	sylar/sylar/ds/roaring.hh	/^    void emplaceOrInsert(const uint32_t key, const Roaring &value) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:private	signature:(const uint32_t key,const Roaring & value)
empty	sylar/sylar/ds/lru_cache.h	/^    bool empty() {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:bool	access:public	signature:()
empty	sylar/sylar/ds/lru_cache.h	/^    bool empty() {$/;"	f	class:sylar::ds::LruCache	typeref:typename:bool	access:public	signature:()
empty	sylar/sylar/ds/timed_cache.h	/^    bool empty() {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:bool	access:public	signature:()
empty	sylar/sylar/ds/timed_cache.h	/^    size_t empty() {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:public	signature:()
empty	sylar/sylar/ds/timed_lru_cache.h	/^    bool empty() {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:bool	access:public	signature:()
empty	sylar/sylar/ds/timed_lru_cache.h	/^    bool empty() {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:bool	access:public	signature:()
encode	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::encode(const iovec* v, const uint64_t& size, bool finish) {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(const iovec * v,const uint64_t & size,bool finish)
encode	sylar/sylar/streams/zlib_stream.h	/^    int encode(const iovec* v, const uint64_t& size, bool finish);$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:private	signature:(const iovec * v,const uint64_t & size,bool finish)
end	sylar/sylar/ds/array.h	/^    T* end() {$/;"	f	class:sylar::ds::Array	typeref:typename:T *	access:public	signature:()
end	sylar/sylar/ds/array.h	/^    const T* end() const {$/;"	f	class:sylar::ds::Array	typeref:typename:const T *	access:public	signature:() const
end	sylar/sylar/ds/roaring.hh	/^    const_iterator &end() const;$/;"	p	class:Roaring	typeref:typename:const_iterator &	access:public	signature:() const
end	sylar/sylar/ds/roaring.hh	/^    const_iterator end() const;$/;"	p	class:Roaring64Map	typeref:typename:const_iterator	access:public	signature:() const
end	sylar/sylar/ds/roaring.hh	/^inline Roaring64MapSetBitForwardIterator Roaring64Map::end() const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64MapSetBitForwardIterator	signature:() const
end	sylar/sylar/ds/roaring.hh	/^inline RoaringSetBitForwardIterator &Roaring::end() const {$/;"	f	class:Roaring	typeref:typename:RoaringSetBitForwardIterator &	signature:() const
end	sylar/sylar/ds/roaring_bitmap.h	/^    iterator end() const { return m_bitmap.end(); }$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:iterator	access:public	signature:() const
enqueue	sylar/sylar/streams/async_socket_stream.cc	/^bool AsyncSocketStream::enqueue(SendCtx::ptr ctx) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:bool	signature:(SendCtx::ptr ctx)
enqueue	sylar/sylar/streams/async_socket_stream.h	/^    bool enqueue(SendCtx::ptr ctx);$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:bool	access:protected	signature:(SendCtx::ptr ctx)
equalorlarger	sylar/sylar/ds/roaring.hh	/^    void equalorlarger(uint32_t val) {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:void	access:public	signature:(uint32_t val)
equalorlarger	sylar/sylar/ds/roaring.hh	/^    void equalorlarger(uint32_t val) {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:void	access:public	signature:(uint32_t val)
erase	sylar/sylar/ds/array.h	/^    bool erase(int64_t idx) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(int64_t idx)
error	sylar/sylar/db/mysql.h	/^        bool error;$/;"	m	struct:sylar::MySQLStmtRes::Data	typeref:typename:bool	access:public
error	sylar/sylar/http/http_connection.h	/^    std::string error;$/;"	m	struct:sylar::http::HttpResult	typeref:typename:std::string	access:public
error	sylar/sylar/log.cc	/^void Logger::error(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
error	sylar/sylar/log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
ev	sylar/sylar/db/redis.h	/^        event* ev;$/;"	m	struct:sylar::FoxRedis::Ctx	typeref:typename:event *	access:public
ev	sylar/sylar/db/redis.h	/^        event* ev;$/;"	m	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:event *	access:public
event	sylar/sylar/db/redis.cc	/^    struct event* event;$/;"	m	struct:sylar::Res	typeref:struct:event *	file:	access:public
events	sylar/sylar/iomanager.h	/^        Event events = NONE;$/;"	m	struct:sylar::IOManager::FdContext	typeref:typename:Event	access:public
execStmt	sylar/sylar/db/mysql.h	/^    int execStmt(const char* stmt, Args&&... args);$/;"	p	class:sylar::MySQL	typeref:typename:int	access:public	signature:(const char * stmt,Args &&...args)
execStmt	sylar/sylar/db/mysql.h	/^int MySQL::execStmt(const char* stmt, Args&&... args) {$/;"	f	class:sylar::MySQL	typeref:typename:int	signature:(const char * stmt,Args &&...args)
execStmt	sylar/sylar/db/sqlite3.h	/^    int execStmt(const char* stmt, Args&&... args);$/;"	p	class:sylar::SQLite3	typeref:typename:int	access:public	signature:(const char * stmt,Args &&...args)
execStmt	sylar/sylar/db/sqlite3.h	/^int SQLite3::execStmt(const char* stmt, Args&&... args) {$/;"	f	class:sylar::SQLite3	typeref:typename:int	signature:(const char * stmt,Args &&...args)
execute	sylar/sylar/db/db.h	/^    virtual int execute() = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:()
execute	sylar/sylar/db/db.h	/^    virtual int execute(const char* format, ...) = 0;$/;"	p	class:sylar::ISQLUpdate	typeref:typename:int	access:public	signature:(const char * format,...)
execute	sylar/sylar/db/db.h	/^    virtual int execute(const std::string& sql) = 0;$/;"	p	class:sylar::ISQLUpdate	typeref:typename:int	access:public	signature:(const std::string & sql)
execute	sylar/sylar/db/mysql.cc	/^int MySQL::execute(const char* format, ...) {$/;"	f	class:sylar::MySQL	typeref:typename:int	signature:(const char * format,...)
execute	sylar/sylar/db/mysql.cc	/^int MySQL::execute(const char* format, va_list ap) {$/;"	f	class:sylar::MySQL	typeref:typename:int	signature:(const char * format,va_list ap)
execute	sylar/sylar/db/mysql.cc	/^int MySQL::execute(const std::string& sql) {$/;"	f	class:sylar::MySQL	typeref:typename:int	signature:(const std::string & sql)
execute	sylar/sylar/db/mysql.cc	/^int MySQLManager::execute(const std::string& name, const char* format, ...) {$/;"	f	class:sylar::MySQLManager	typeref:typename:int	signature:(const std::string & name,const char * format,...)
execute	sylar/sylar/db/mysql.cc	/^int MySQLManager::execute(const std::string& name, const char* format, va_list ap) {$/;"	f	class:sylar::MySQLManager	typeref:typename:int	signature:(const std::string & name,const char * format,va_list ap)
execute	sylar/sylar/db/mysql.cc	/^int MySQLManager::execute(const std::string& name, const std::string& sql) {$/;"	f	class:sylar::MySQLManager	typeref:typename:int	signature:(const std::string & name,const std::string & sql)
execute	sylar/sylar/db/mysql.cc	/^int MySQLStmt::execute() {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:()
execute	sylar/sylar/db/mysql.cc	/^int MySQLTransaction::execute(const char* format, ...) {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:int	signature:(const char * format,...)
execute	sylar/sylar/db/mysql.cc	/^int MySQLTransaction::execute(const char* format, va_list ap) {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:int	signature:(const char * format,va_list ap)
execute	sylar/sylar/db/mysql.cc	/^int MySQLTransaction::execute(const std::string& sql) {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:int	signature:(const std::string & sql)
execute	sylar/sylar/db/mysql.h	/^    int execute() override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:()
execute	sylar/sylar/db/mysql.h	/^    int execute(const char* format, va_list ap);$/;"	p	class:sylar::MySQL	typeref:typename:int	access:public	signature:(const char * format,va_list ap)
execute	sylar/sylar/db/mysql.h	/^    int execute(const char* format, va_list ap);$/;"	p	class:sylar::MySQLTransaction	typeref:typename:int	access:public	signature:(const char * format,va_list ap)
execute	sylar/sylar/db/mysql.h	/^    int execute(const std::string& name, const char* format, ...);$/;"	p	class:sylar::MySQLManager	typeref:typename:int	access:public	signature:(const std::string & name,const char * format,...)
execute	sylar/sylar/db/mysql.h	/^    int execute(const std::string& name, const char* format, va_list ap);$/;"	p	class:sylar::MySQLManager	typeref:typename:int	access:public	signature:(const std::string & name,const char * format,va_list ap)
execute	sylar/sylar/db/mysql.h	/^    int execute(const std::string& name, const std::string& sql);$/;"	p	class:sylar::MySQLManager	typeref:typename:int	access:public	signature:(const std::string & name,const std::string & sql)
execute	sylar/sylar/db/mysql.h	/^    virtual int execute(const char* format, ...) override;$/;"	p	class:sylar::MySQL	typeref:typename:int	access:public	signature:(const char * format,...)
execute	sylar/sylar/db/mysql.h	/^    virtual int execute(const char* format, ...) override;$/;"	p	class:sylar::MySQLTransaction	typeref:typename:int	access:public	signature:(const char * format,...)
execute	sylar/sylar/db/mysql.h	/^    virtual int execute(const std::string& sql) override;$/;"	p	class:sylar::MySQL	typeref:typename:int	access:public	signature:(const std::string & sql)
execute	sylar/sylar/db/mysql.h	/^    virtual int execute(const std::string& sql) override;$/;"	p	class:sylar::MySQLTransaction	typeref:typename:int	access:public	signature:(const std::string & sql)
execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3::execute(const char* format, ...) {$/;"	f	class:sylar::SQLite3	typeref:typename:int	signature:(const char * format,...)
execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3::execute(const char* format, va_list ap) {$/;"	f	class:sylar::SQLite3	typeref:typename:int	signature:(const char * format,va_list ap)
execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3::execute(const std::string& sql) {$/;"	f	class:sylar::SQLite3	typeref:typename:int	signature:(const std::string & sql)
execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3Manager::execute(const std::string& name, const char* format, ...) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:int	signature:(const std::string & name,const char * format,...)
execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3Manager::execute(const std::string& name, const char* format, va_list ap) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:int	signature:(const std::string & name,const char * format,va_list ap)
execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3Manager::execute(const std::string& name, const std::string& sql) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:int	signature:(const std::string & name,const std::string & sql)
execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::execute() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:()
execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3Transaction::execute(const char* format, ...) {$/;"	f	class:sylar::SQLite3Transaction	typeref:typename:int	signature:(const char * format,...)
execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3Transaction::execute(const std::string& sql) {$/;"	f	class:sylar::SQLite3Transaction	typeref:typename:int	signature:(const std::string & sql)
execute	sylar/sylar/db/sqlite3.h	/^    int execute() override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:()
execute	sylar/sylar/db/sqlite3.h	/^    int execute(const char* format, ...) override;$/;"	p	class:sylar::SQLite3	typeref:typename:int	access:public	signature:(const char * format,...)
execute	sylar/sylar/db/sqlite3.h	/^    int execute(const char* format, ...) override;$/;"	p	class:sylar::SQLite3Transaction	typeref:typename:int	access:public	signature:(const char * format,...)
execute	sylar/sylar/db/sqlite3.h	/^    int execute(const char* format, va_list ap);$/;"	p	class:sylar::SQLite3	typeref:typename:int	access:public	signature:(const char * format,va_list ap)
execute	sylar/sylar/db/sqlite3.h	/^    int execute(const std::string& name, const char* format, ...);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:int	access:public	signature:(const std::string & name,const char * format,...)
execute	sylar/sylar/db/sqlite3.h	/^    int execute(const std::string& name, const char* format, va_list ap);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:int	access:public	signature:(const std::string & name,const char * format,va_list ap)
execute	sylar/sylar/db/sqlite3.h	/^    int execute(const std::string& name, const std::string& sql);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:int	access:public	signature:(const std::string & name,const std::string & sql)
execute	sylar/sylar/db/sqlite3.h	/^    int execute(const std::string& sql) override;$/;"	p	class:sylar::SQLite3	typeref:typename:int	access:public	signature:(const std::string & sql)
execute	sylar/sylar/db/sqlite3.h	/^    int execute(const std::string& sql) override;$/;"	p	class:sylar::SQLite3Transaction	typeref:typename:int	access:public	signature:(const std::string & sql)
execute	sylar/sylar/http/http_parser.cc	/^size_t HttpRequestParser::execute(char* data, size_t len) {$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:size_t	signature:(char * data,size_t len)
execute	sylar/sylar/http/http_parser.cc	/^size_t HttpResponseParser::execute(char* data, size_t len, bool chunck) {$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:size_t	signature:(char * data,size_t len,bool chunck)
execute	sylar/sylar/http/http_parser.h	/^    size_t execute(char* data, size_t len);$/;"	p	class:sylar::http::HttpRequestParser	typeref:typename:size_t	access:public	signature:(char * data,size_t len)
execute	sylar/sylar/http/http_parser.h	/^    size_t execute(char* data, size_t len, bool chunck);$/;"	p	class:sylar::http::HttpResponseParser	typeref:typename:size_t	access:public	signature:(char * data,size_t len,bool chunck)
exists	sylar/sylar/ds/array.h	/^    int64_t exists(const T& v) {$/;"	f	class:sylar::ds::Array	typeref:typename:int64_t	access:public	signature:(const T & v)
exists	sylar/sylar/ds/array.h	/^    int64_t exists(const T& v, std::function<bool(const T&, const T&)> cmp) {$/;"	f	class:sylar::ds::Array	typeref:typename:int64_t	access:public	signature:(const T & v,std::function<bool (const T &,const T &)> cmp)
exists	sylar/sylar/ds/dict.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:public	signature:(const K & k)
exists	sylar/sylar/ds/hash_map.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:public	signature:(const K & k)
exists	sylar/sylar/ds/hash_multimap.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k)
exists	sylar/sylar/ds/hash_multimap.h	/^    bool exists(const K& k, const V& v) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,const V & v)
exists	sylar/sylar/ds/lru_cache.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:bool	access:public	signature:(const K & k)
exists	sylar/sylar/ds/lru_cache.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:bool	access:public	signature:(const K & k)
exists	sylar/sylar/ds/timed_cache.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:bool	access:public	signature:(const K & k)
exists	sylar/sylar/ds/timed_cache.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:bool	access:public	signature:(const K & k)
exists	sylar/sylar/ds/timed_lru_cache.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:bool	access:public	signature:(const K & k)
exists	sylar/sylar/ds/timed_lru_cache.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:bool	access:public	signature:(const K & k)
exists	sylar/sylar/zk_client.cc	/^int32_t ZKClient::exists(const std::string& path, bool watch, Stat* stat) {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & path,bool watch,Stat * stat)
exists	sylar/sylar/zk_client.h	/^    int32_t exists(const std::string& path, bool watch, Stat* stat = nullptr);$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & path,bool watch,Stat * stat=nullptr)
existsOrCreate	sylar/sylar/streams/service_discovery.cc	/^bool ZKServiceDiscovery::existsOrCreate(const std::string& path) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:bool	signature:(const std::string & path)
existsOrCreate	sylar/sylar/streams/service_discovery.h	/^    bool existsOrCreate(const std::string& path);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:bool	access:private	signature:(const std::string & path)
expired	sylar/sylar/ds/timed_cache.h	/^    bool expired(const K& k, const uint64_t& ts) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:bool	access:public	signature:(const K & k,const uint64_t & ts)
expired	sylar/sylar/ds/timed_cache.h	/^    bool expired(const K& k, const uint64_t& ts) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:bool	access:public	signature:(const K & k,const uint64_t & ts)
expired	sylar/sylar/ds/timed_lru_cache.h	/^    bool expired(const K& k, const uint64_t& ts) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:bool	access:public	signature:(const K & k,const uint64_t & ts)
extend_array	sylar/sylar/ds/roaring.c	/^bool extend_array(roaring_array_t *ra, int32_t k) {$/;"	f	typeref:typename:bool	signature:(roaring_array_t * ra,int32_t k)
extend_array	sylar/sylar/ds/roaring.h	/^bool extend_array(roaring_array_t *ra, int32_t k);$/;"	p	typeref:typename:bool	signature:(roaring_array_t * ra,int32_t k)
fast_union_uint16	sylar/sylar/ds/roaring.c	/^size_t fast_union_uint16(const uint16_t *set_1, size_t size_1, const uint16_t *set_2,$/;"	f	typeref:typename:size_t	signature:(const uint16_t * set_1,size_t size_1,const uint16_t * set_2,size_t size_2,uint16_t * buffer)
fast_union_uint16	sylar/sylar/ds/roaring.h	/^size_t fast_union_uint16(const uint16_t *set_1, size_t size_1, const uint16_t *set_2,$/;"	p	typeref:typename:size_t	signature:(const uint16_t * set_1,size_t size_1,const uint16_t * set_2,size_t size_2,uint16_t * buffer)
fastunion	sylar/sylar/ds/roaring.hh	/^    static Roaring fastunion(size_t n, const Roaring **inputs) {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(size_t n,const Roaring ** inputs)
fastunion	sylar/sylar/ds/roaring.hh	/^    static Roaring64Map fastunion(size_t n, const Roaring64Map **inputs) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(size_t n,const Roaring64Map ** inputs)
fatal	sylar/sylar/log.cc	/^void Logger::fatal(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
fatal	sylar/sylar/log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
fcntl	sylar/sylar/hook.cc	/^int fcntl(int fd, int cmd, ... \/* arg *\/ ) {$/;"	f	typeref:typename:int	signature:(int fd,int cmd,...)
fcntl_fun	sylar/sylar/hook.h	/^typedef int (*fcntl_fun)(int fd, int cmd, ... \/* arg *\/ );$/;"	t	typeref:typename:int (*)(int fd,int cmd,...)
fctx	sylar/sylar/db/redis.h	/^        FCtx* fctx;$/;"	m	struct:sylar::FoxRedis::Ctx	typeref:typename:FCtx *	access:public
fctx	sylar/sylar/db/redis.h	/^        FCtx* fctx;$/;"	m	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:FCtx *	access:public
fd	sylar/sylar/iomanager.h	/^        int fd = 0;$/;"	m	struct:sylar::IOManager::FdContext	typeref:typename:int	access:public
fetchAdd	sylar/sylar/util.h	/^    static T fetchAdd(volatile T& t, S v = 1) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v=1)
fetchAnd	sylar/sylar/util.h	/^    static T fetchAnd(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
fetchNand	sylar/sylar/util.h	/^    static T fetchNand(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
fetchOr	sylar/sylar/util.h	/^    static T fetchOr(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
fetchSub	sylar/sylar/util.h	/^    static T fetchSub(volatile T& t, S v = 1) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v=1)
fetchXor	sylar/sylar/util.h	/^    static T fetchXor(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
fiber	sylar/sylar/db/redis.h	/^        sylar::Fiber::ptr fiber;$/;"	m	struct:sylar::FoxRedis::FCtx	typeref:typename:sylar::Fiber::ptr	access:public
fiber	sylar/sylar/db/redis.h	/^        sylar::Fiber::ptr fiber;$/;"	m	struct:sylar::FoxRedisCluster::FCtx	typeref:typename:sylar::Fiber::ptr	access:public
fiber	sylar/sylar/iomanager.h	/^            Fiber::ptr fiber;$/;"	m	struct:sylar::IOManager::FdContext::EventContext	typeref:typename:Fiber::ptr	access:public
fiber	sylar/sylar/scheduler.h	/^        Fiber::ptr fiber;$/;"	m	struct:sylar::Scheduler::FiberAndThread	typeref:typename:Fiber::ptr	access:public
fiber	sylar/sylar/streams/async_socket_stream.h	/^        Fiber::ptr fiber;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:Fiber::ptr	access:public
field_cb	sylar/sylar/http/http11_common.h	/^typedef void (*field_cb)(void *data, const char *field, size_t flen, const char *value, size_t v/;"	t	typeref:typename:void (*)(void * data,const char * field,size_t flen,const char * value,size_t vlen)
field_len	sylar/sylar/http/http11_parser.h	/^  size_t field_len;$/;"	m	struct:http_parser	typeref:typename:size_t	access:public
field_len	sylar/sylar/http/httpclient_parser.h	/^  size_t field_len;$/;"	m	struct:httpclient_parser	typeref:typename:size_t	access:public
field_metadata	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];$/;"	m	struct:TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto	typeref:typename:const::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata[]	access:public
field_start	sylar/sylar/http/http11_parser.h	/^  size_t field_start;$/;"	m	struct:http_parser	typeref:typename:size_t	access:public
field_start	sylar/sylar/http/httpclient_parser.h	/^  size_t field_start;$/;"	m	struct:httpclient_parser	typeref:typename:size_t	access:public
file	sylar/sylar/log.cc	/^    std::string file;$/;"	m	struct:sylar::LogAppenderDefine	typeref:typename:std::string	file:	access:public
file_level_enum_descriptors_sylar_2fns_2fns_5fprotobuf_2eproto	sylar/sylar/ns/ns_protobuf.pb.cc	/^static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_syl/;"	v	typeref:typename:::PROTOBUF_NAMESPACE_ID::EnumDescriptor const **	file:
file_level_service_descriptors_sylar_2fns_2fns_5fprotobuf_2eproto	sylar/sylar/ns/ns_protobuf.pb.cc	/^static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descripto/;"	v	typeref:typename:::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **	file:
fin	sylar/sylar/http/ws_session.h	/^    bool fin: 1;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:bool:1	access:public
finish	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::finish() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:()
finish	sylar/sylar/db/sqlite3.h	/^    int finish();$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:()
first	sylar/sylar/ds/util.h	/^    K first;$/;"	m	struct:sylar::ds::MultiPair	typeref:typename:K	access:public
first	sylar/sylar/ds/util.h	/^    K first;$/;"	m	struct:sylar::ds::Pair	typeref:typename:K	access:public
first_char	sylar/sylar/ds/roaring.hh	/^                char first_char = '{';$/;"	m	struct:Roaring64Map::printf::iter_data	typeref:typename:char	access:public
first_char	sylar/sylar/ds/roaring.hh	/^            char first_char = '{';$/;"	m	struct:Roaring64Map::toString::iter_data	typeref:typename:char	access:public
first_char	sylar/sylar/ds/roaring.hh	/^            char first_char = '{';$/;"	m	struct:Roaring::toString::iter_data	typeref:typename:char	access:public
flag	sylar/sylar/rock/rock_protocol.h	/^    uint8_t flag;$/;"	m	struct:sylar::RockMsgHeader	typeref:typename:uint8_t	access:public
flags	sylar/sylar/ds/roaring.h	/^    uint8_t flags;$/;"	m	struct:roaring_array_s	typeref:typename:uint8_t	access:public
flip	sylar/sylar/ds/roaring.hh	/^    void flip(uint64_t range_start, uint64_t range_end) {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(uint64_t range_start,uint64_t range_end)
flip	sylar/sylar/ds/roaring.hh	/^    void flip(uint64_t range_start, uint64_t range_end) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(uint64_t range_start,uint64_t range_end)
flush	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::flush() {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:()
flush	sylar/sylar/streams/zlib_stream.h	/^    int flush();$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:public	signature:()
fmix32	sylar/sylar/util/hash_util.cc	/^static inline uint32_t fmix32(uint32_t h)$/;"	f	namespace:sylar	typeref:typename:uint32_t	file:	signature:(uint32_t h)
force_redefine_file_macro_for_sources	sylar/cmake/utils.cmake	/^function(force_redefine_file_macro_for_sources targetname)$/;"	f
foreach	sylar/sylar/db/mysql.cc	/^bool MySQLRes::foreach(data_cb cb) {$/;"	f	class:sylar::MySQLRes	typeref:typename:bool	signature:(data_cb cb)
foreach	sylar/sylar/db/mysql.h	/^    bool foreach(data_cb cb);$/;"	p	class:sylar::MySQLRes	typeref:typename:bool	access:public	signature:(data_cb cb)
foreach	sylar/sylar/ds/bitmap.cc	/^void Bitmap::foreach(std::function<bool(uint32_t)> cb) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(std::function<bool (uint32_t)> cb)
foreach	sylar/sylar/ds/bitmap.h	/^    void foreach(std::function<bool(uint32_t)> cb);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(std::function<bool (uint32_t)> cb)
foreach	sylar/sylar/ds/dict.h	/^    void foreach(callback cb) {$/;"	f	class:sylar::ds::Dict	typeref:typename:void	access:public	signature:(callback cb)
foreach	sylar/sylar/ds/dict.h	/^    void foreach(std::function<bool(const uint64_t& k, const char* v, size_t size)> cb) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:void	access:public	signature:(std::function<bool (const uint64_t & k,const char * v,size_t size)> cb)
foreach	sylar/sylar/ds/lru_cache.h	/^    void foreach(F& f) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:void	access:public	signature:(F & f)
foreach	sylar/sylar/ds/lru_cache.h	/^    void foreach(F& f) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:void	access:public	signature:(F & f)
foreach	sylar/sylar/ds/roaring_bitmap.cc	/^void RoaringBitmap::foreach(std::function<bool(uint32_t)> cb) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:void	signature:(std::function<bool (uint32_t)> cb)
foreach	sylar/sylar/ds/roaring_bitmap.h	/^    void foreach(std::function<bool(uint32_t)> cb);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:void	access:public	signature:(std::function<bool (uint32_t)> cb)
foreach	sylar/sylar/ds/timed_cache.h	/^    void foreach(F& f) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:void	access:public	signature:(F & f)
foreach	sylar/sylar/ds/timed_cache.h	/^    void foreach(F& f) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:void	access:public	signature:(F & f)
foreach	sylar/sylar/ds/timed_lru_cache.h	/^    void foreach(F& f) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:void	access:public	signature:(F & f)
foreach	sylar/sylar/ds/timed_lru_cache.h	/^    void foreach(F& f) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:void	access:public	signature:(F & f)
foreach	sylar/sylar/module.cc	/^void ModuleManager::foreach(uint32_t type, std::function<void(Module::ptr)> cb) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(uint32_t type,std::function<void (Module::ptr)> cb)
foreach	sylar/sylar/module.h	/^    void foreach(uint32_t type, std::function<void(Module::ptr)> cb);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(uint32_t type,std::function<void (Module::ptr)> cb)
format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::DateTimeFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::ElapseFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::FiberIdFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::FilenameFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::LevelFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::LineFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::MessageFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::NameFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::NewLineFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::StringFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::TabFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::ThreadIdFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::ThreadNameFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^std::ostream& LogFormatter::format(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::/;"	f	class:sylar::LogFormatter	typeref:typename:std::ostream &	signature:(std::ostream & ofs,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^std::string LogFormatter::format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent/;"	f	class:sylar::LogFormatter	typeref:typename:std::string	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.cc	/^void LogEvent::format(const char* fmt, ...) {$/;"	f	class:sylar::LogEvent	typeref:typename:void	signature:(const char * fmt,...)
format	sylar/sylar/log.cc	/^void LogEvent::format(const char* fmt, va_list al) {$/;"	f	class:sylar::LogEvent	typeref:typename:void	signature:(const char * fmt,va_list al)
format	sylar/sylar/log.h	/^        virtual void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level le/;"	p	class:sylar::LogFormatter::FormatItem	typeref:typename:void	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.h	/^    std::ostream& format(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level leve/;"	p	class:sylar::LogFormatter	typeref:typename:std::ostream &	access:public	signature:(std::ostream & ofs,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.h	/^    std::string format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr even/;"	p	class:sylar::LogFormatter	typeref:typename:std::string	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
format	sylar/sylar/log.h	/^    void format(const char* fmt, ...);$/;"	p	class:sylar::LogEvent	typeref:typename:void	access:public	signature:(const char * fmt,...)
format	sylar/sylar/log.h	/^    void format(const char* fmt, va_list al);$/;"	p	class:sylar::LogEvent	typeref:typename:void	access:public	signature:(const char * fmt,va_list al)
format_used_time	sylar/sylar/http/servlets/status_servlet.cc	/^std::string format_used_time(int64_t ts) {$/;"	f	namespace:sylar::http	typeref:typename:std::string	signature:(int64_t ts)
formatter	sylar/sylar/log.cc	/^    std::string formatter;$/;"	m	struct:sylar::LogAppenderDefine	typeref:typename:std::string	file:	access:public
formatter	sylar/sylar/log.cc	/^    std::string formatter;$/;"	m	struct:sylar::LogDefine	typeref:typename:std::string	file:	access:public
fragment	sylar/sylar/http/http11_parser.h	/^  element_cb fragment;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
free	sylar/sylar/ds/util.h	/^    inline void free() {$/;"	f	struct:sylar::ds::Ivt	typeref:typename:void	access:public	signature:()
freeDatas	sylar/sylar/ds/dict.h	/^    void freeDatas(std::vector<Node>*& datas, uint64_t size) {$/;"	f	class:sylar::ds::Dict	typeref:typename:void	access:private	signature:(std::vector<Node> * & datas,uint64_t size)
freeDatas	sylar/sylar/ds/hash_map.h	/^    void freeDatas(std::vector<Node>*& datas, uint64_t size) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:private	signature:(std::vector<Node> * & datas,uint64_t size)
freeDatas	sylar/sylar/ds/hash_multimap.h	/^    void freeDatas(std::vector<Node>*& datas, uint64_t size) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:void	access:private	signature:(std::vector<Node> * & datas,uint64_t size)
freeMySQL	sylar/sylar/db/mysql.cc	/^void MySQLManager::freeMySQL(const std::string& name, MySQL* m) {$/;"	f	class:sylar::MySQLManager	typeref:typename:void	signature:(const std::string & name,MySQL * m)
freeMySQL	sylar/sylar/db/mysql.h	/^    void freeMySQL(const std::string& name, MySQL* m);$/;"	p	class:sylar::MySQLManager	typeref:typename:void	access:private	signature:(const std::string & name,MySQL * m)
freeRedis	sylar/sylar/db/redis.cc	/^void RedisManager::freeRedis(IRedis* r) {$/;"	f	class:sylar::RedisManager	typeref:typename:void	signature:(IRedis * r)
freeRedis	sylar/sylar/db/redis.h	/^    void freeRedis(IRedis* r);$/;"	p	class:sylar::RedisManager	typeref:typename:void	access:private	signature:(IRedis * r)
freeSQLite3	sylar/sylar/db/sqlite3.cc	/^void SQLite3Manager::freeSQLite3(const std::string& name, SQLite3* m) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:void	signature:(const std::string & name,SQLite3 * m)
freeSQLite3	sylar/sylar/db/sqlite3.h	/^    void freeSQLite3(const std::string& name, SQLite3* m);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:void	access:private	signature:(const std::string & name,SQLite3 * m)
fromString	sylar/sylar/config.h	/^    bool fromString(const std::string& val) override {$/;"	f	class:sylar::ConfigVar	typeref:typename:bool	access:public	signature:(const std::string & val)
fromString	sylar/sylar/config.h	/^    virtual bool fromString(const std::string& val) = 0;$/;"	p	class:sylar::ConfigVarBase	typeref:typename:bool	access:public	signature:(const std::string & val)
fun1	sylar/tests/test_thread.cc	/^void fun1() {$/;"	f	typeref:typename:void	signature:()
fun2	sylar/tests/test_thread.cc	/^void fun2() {$/;"	f	typeref:typename:void	signature:()
fun3	sylar/tests/test_thread.cc	/^void fun3() {$/;"	f	typeref:typename:void	signature:()
g_argc	sylar/tests/test_zookeeper.cc	/^int g_argc;$/;"	v	typeref:typename:int
g_daemon_restart_interval	sylar/sylar/daemon.cc	/^static sylar::ConfigVar<uint32_t>::ptr g_daemon_restart_interval$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<uint32_t>::ptr	file:
g_fiber_stack_size	sylar/sylar/fiber.cc	/^static ConfigVar<uint32_t>::ptr g_fiber_stack_size =$/;"	v	namespace:sylar	typeref:typename:ConfigVar<uint32_t>::ptr	file:
g_float_value_config	sylar/tests/test_config.cc	/^sylar::ConfigVar<float>::ptr g_float_value_config =$/;"	v	typeref:typename:sylar::ConfigVar<float>::ptr
g_http_request_buffer_size	sylar/sylar/http/http_parser.cc	/^static sylar::ConfigVar<uint64_t>::ptr g_http_request_buffer_size =$/;"	v	namespace:sylar::http	typeref:typename:sylar::ConfigVar<uint64_t>::ptr	file:
g_http_request_max_body_size	sylar/sylar/http/http_parser.cc	/^static sylar::ConfigVar<uint64_t>::ptr g_http_request_max_body_size =$/;"	v	namespace:sylar::http	typeref:typename:sylar::ConfigVar<uint64_t>::ptr	file:
g_http_response_buffer_size	sylar/sylar/http/http_parser.cc	/^static sylar::ConfigVar<uint64_t>::ptr g_http_response_buffer_size =$/;"	v	namespace:sylar::http	typeref:typename:sylar::ConfigVar<uint64_t>::ptr	file:
g_http_response_max_body_size	sylar/sylar/http/http_parser.cc	/^static sylar::ConfigVar<uint64_t>::ptr g_http_response_max_body_size =$/;"	v	namespace:sylar::http	typeref:typename:sylar::ConfigVar<uint64_t>::ptr	file:
g_int_list_value_config	sylar/tests/test_config.cc	/^sylar::ConfigVar<std::list<int> >::ptr g_int_list_value_config =$/;"	v	typeref:typename:sylar::ConfigVar<std::list<int>>::ptr
g_int_set_value_config	sylar/tests/test_config.cc	/^sylar::ConfigVar<std::set<int> >::ptr g_int_set_value_config =$/;"	v	typeref:typename:sylar::ConfigVar<std::set<int>>::ptr
g_int_uset_value_config	sylar/tests/test_config.cc	/^sylar::ConfigVar<std::unordered_set<int> >::ptr g_int_uset_value_config =$/;"	v	typeref:typename:sylar::ConfigVar<std::unordered_set<int>>::ptr
g_int_value_config	sylar/tests/test_config.cc	/^sylar::ConfigVar<int>::ptr g_int_value_config =$/;"	v	typeref:typename:sylar::ConfigVar<int>::ptr
g_int_valuex_config	sylar/tests/test_config.cc	/^sylar::ConfigVar<float>::ptr g_int_valuex_config =$/;"	v	typeref:typename:sylar::ConfigVar<float>::ptr
g_int_vec_value_config	sylar/tests/test_config.cc	/^sylar::ConfigVar<std::vector<int> >::ptr g_int_vec_value_config =$/;"	v	typeref:typename:sylar::ConfigVar<std::vector<int>>::ptr
g_log_defines	sylar/sylar/log.cc	/^sylar::ConfigVar<std::set<LogDefine> >::ptr g_log_defines =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::set<LogDefine>>::ptr
g_logger	chat/my_module.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	namespace:chat	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/examples/echo_server.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/examples/echo_server_udp.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/examples/echo_udp_client.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/samples/my_http_server.cc	/^sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr
g_logger	sylar/sylar/address.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/application.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/bytearray.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/config.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/daemon.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/db/fox_thread.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/db/mysql.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/db/redis.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/db/sqlite3.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/email/smtp.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/env.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/fiber.cc	/^static Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:Logger::ptr	file:
g_logger	sylar/sylar/hook.cc	/^sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	typeref:typename:sylar::Logger::ptr
g_logger	sylar/sylar/http/http_connection.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::http	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/http/http_parser.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::http	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/http/http_server.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::http	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/http/ws_server.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::http	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/http/ws_session.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::http	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/iomanager.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/library.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/module.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/ns/name_server_module.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::ns	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/ns/ns_client.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::ns	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/orm/column.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("orm");$/;"	v	namespace:sylar::orm	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/orm/index.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("orm");$/;"	v	namespace:sylar::orm	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/orm/orm.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("orm");$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/orm/table.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("orm");$/;"	v	namespace:sylar::orm	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/rock/rock_protocol.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/rock/rock_server.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/rock/rock_stream.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/scheduler.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/socket.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/streams/async_socket_stream.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/streams/load_balance.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/streams/service_discovery.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/tcp_server.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/thread.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/sylar/util.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/template/template/my_module.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	namespace:name_space	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_address.cc	/^sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr
g_logger	sylar/tests/test_array.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_bitmap.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_bytearray.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_daemon.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_dict.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_fiber.cc	/^sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr
g_logger	sylar/tests/test_hashmap.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_hashmultimap.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_hook.cc	/^sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr
g_logger	sylar/tests/test_http_connection.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_http_parser.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_http_server.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_iomanager.cc	/^sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr
g_logger	sylar/tests/test_module.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_nameserver.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_rock.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_scheduler.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_service_discovery.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_sqlite3.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_tcp_server.cc	/^sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr
g_logger	sylar/tests/test_thread.cc	/^sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr
g_logger	sylar/tests/test_util.cc	/^sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr
g_logger	sylar/tests/test_ws_server.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_logger	sylar/tests/test_zookeeper.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_looger	sylar/tests/test_socket.cc	/^static sylar::Logger::ptr g_looger = SYLAR_LOG_ROOT();$/;"	v	typeref:typename:sylar::Logger::ptr	file:
g_module_path	sylar/sylar/module.cc	/^static sylar::ConfigVar<std::string>::ptr g_module_path$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::string>::ptr	file:
g_mysql_dbs	sylar/sylar/db/mysql.cc	/^static sylar::ConfigVar<std::map<std::string, std::map<std::string, std::string> > >::ptr g_mysq/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::map<std::string,std::map<std::string,std::string>>>::ptr	file:
g_person	sylar/tests/test_config.cc	/^sylar::ConfigVar<Person>::ptr g_person =$/;"	v	typeref:typename:sylar::ConfigVar<Person>::ptr
g_person_map	sylar/tests/test_config.cc	/^sylar::ConfigVar<std::map<std::string, Person> >::ptr g_person_map =$/;"	v	typeref:typename:sylar::ConfigVar<std::map<std::string,Person>>::ptr
g_person_vec_map	sylar/tests/test_config.cc	/^sylar::ConfigVar<std::map<std::string, std::vector<Person> > >::ptr g_person_vec_map =$/;"	v	typeref:typename:sylar::ConfigVar<std::map<std::string,std::vector<Person>>>::ptr
g_redis	sylar/sylar/db/redis.cc	/^static sylar::ConfigVar<std::map<std::string, std::map<std::string, std::string> > >::ptr g_redi/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::map<std::string,std::map<std::string,std::string>>>::ptr	file:
g_rock_protocol_gzip_min_length	sylar/sylar/rock/rock_protocol.cc	/^static sylar::ConfigVar<uint32_t>::ptr g_rock_protocol_gzip_min_length$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<uint32_t>::ptr	file:
g_rock_protocol_max_length	sylar/sylar/rock/rock_protocol.cc	/^static sylar::ConfigVar<uint32_t>::ptr g_rock_protocol_max_length$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<uint32_t>::ptr	file:
g_rock_services	sylar/sylar/rock/rock_stream.cc	/^    ,std::unordered_map<std::string, std::string> > >::ptr g_rock_services =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>::ptr	file:
g_server_pid_file	sylar/sylar/application.cc	/^static sylar::ConfigVar<std::string>::ptr g_server_pid_file =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::string>::ptr	file:
g_server_work_path	sylar/sylar/application.cc	/^static sylar::ConfigVar<std::string>::ptr g_server_work_path =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::string>::ptr	file:
g_servers_conf	sylar/sylar/application.cc	/^static sylar::ConfigVar<std::vector<TcpServerConf> >::ptr g_servers_conf$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::vector<TcpServerConf>>::ptr	file:
g_service_discovery_zk	sylar/sylar/application.cc	/^static sylar::ConfigVar<std::string>::ptr g_service_discovery_zk =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::string>::ptr	file:
g_sqlite3_dbs	sylar/sylar/db/sqlite3.cc	/^static sylar::ConfigVar<std::map<std::string, std::map<std::string, std::string> > >::ptr g_sqli/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::map<std::string,std::map<std::string,std::string>>>::ptr	file:
g_str_int_map_value_config	sylar/tests/test_config.cc	/^sylar::ConfigVar<std::map<std::string, int> >::ptr g_str_int_map_value_config =$/;"	v	typeref:typename:sylar::ConfigVar<std::map<std::string,int>>::ptr
g_str_int_umap_value_config	sylar/tests/test_config.cc	/^sylar::ConfigVar<std::unordered_map<std::string, int> >::ptr g_str_int_umap_value_config =$/;"	v	typeref:typename:sylar::ConfigVar<std::unordered_map<std::string,int>>::ptr
g_tcp_connect_timeout	sylar/sylar/hook.cc	/^static sylar::ConfigVar<int>::ptr g_tcp_connect_timeout =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<int>::ptr	file:
g_tcp_server_read_timeout	sylar/sylar/tcp_server.cc	/^static sylar::ConfigVar<uint64_t>::ptr g_tcp_server_read_timeout =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<uint64_t>::ptr	file:
g_thread_info_set	sylar/sylar/db/fox_thread.cc	/^static sylar::ConfigVar<std::map<std::string, std::map<std::string, std::string> > >::ptr g_thre/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::map<std::string,std::map<std::string,std::string>>>::ptr	file:
g_websocket_message_max_size	sylar/sylar/http/ws_session.cc	/^sylar::ConfigVar<uint32_t>::ptr g_websocket_message_max_size$/;"	v	namespace:sylar::http	typeref:typename:sylar::ConfigVar<uint32_t>::ptr
g_worker_config	sylar/sylar/worker.cc	/^static sylar::ConfigVar<std::map<std::string, std::map<std::string, std::string> > >::ptr g_work/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::map<std::string,std::map<std::string,std::string>>>::ptr	file:
gen	sylar/sylar/orm/table.cc	/^void Table::gen(const std::string& path) {$/;"	f	class:sylar::orm::Table	typeref:typename:void	signature:(const std::string & path)
gen	sylar/sylar/orm/table.h	/^    void gen(const std::string& path);$/;"	p	class:sylar::orm::Table	typeref:typename:void	access:public	signature:(const std::string & path)
gen	sylar/tests/test_array.cc	/^void gen() {$/;"	f	typeref:typename:void	signature:()
gen	sylar/tests/test_dict.cc	/^void gen() {$/;"	f	typeref:typename:void	signature:()
gen	sylar/tests/test_hashmap.cc	/^void gen() {$/;"	f	typeref:typename:void	signature:()
gen	sylar/tests/test_hashmultimap.cc	/^void gen() {$/;"	f	typeref:typename:void	signature:()
genToDeleteSQL	sylar/sylar/orm/table.cc	/^std::string Table::genToDeleteSQL(const std::string& class_name) {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:(const std::string & class_name)
genToDeleteSQL	sylar/sylar/orm/table.h	/^    std::string genToDeleteSQL(const std::string& class_name);$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:private	signature:(const std::string & class_name)
genToInsertSQL	sylar/sylar/orm/table.cc	/^std::string Table::genToInsertSQL(const std::string& class_name) {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:(const std::string & class_name)
genToInsertSQL	sylar/sylar/orm/table.h	/^    std::string genToInsertSQL(const std::string& class_name);$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:private	signature:(const std::string & class_name)
genToStringInc	sylar/sylar/orm/table.cc	/^std::string Table::genToStringInc() {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:()
genToStringInc	sylar/sylar/orm/table.h	/^    std::string genToStringInc();$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:private	signature:()
genToStringSrc	sylar/sylar/orm/table.cc	/^std::string Table::genToStringSrc(const std::string& class_name) {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:(const std::string & class_name)
genToStringSrc	sylar/sylar/orm/table.h	/^    std::string genToStringSrc(const std::string& class_name);$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:private	signature:(const std::string & class_name)
genToUpdateSQL	sylar/sylar/orm/table.cc	/^std::string Table::genToUpdateSQL(const std::string& class_name) {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:(const std::string & class_name)
genToUpdateSQL	sylar/sylar/orm/table.h	/^    std::string genToUpdateSQL(const std::string& class_name);$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:private	signature:(const std::string & class_name)
genWhere	sylar/sylar/orm/table.cc	/^std::string Table::genWhere() const {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:() const
genWhere	sylar/sylar/orm/table.h	/^    std::string genWhere() const;$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:private	signature:() const
gen_cmake	sylar/sylar/orm/orm.cc	/^void gen_cmake(const std::string& path, const std::map<std::string, sylar::orm::Table::ptr>& tbs/;"	f	typeref:typename:void	signature:(const std::string & path,const std::map<std::string,sylar::orm::Table::ptr> & tbs)
gen_dao_inc	sylar/sylar/orm/table.cc	/^void Table::gen_dao_inc(std::ofstream& ofs) {$/;"	f	class:sylar::orm::Table	typeref:typename:void	signature:(std::ofstream & ofs)
gen_dao_inc	sylar/sylar/orm/table.h	/^    void gen_dao_inc(std::ofstream& ofs);$/;"	p	class:sylar::orm::Table	typeref:typename:void	access:private	signature:(std::ofstream & ofs)
gen_dao_src	sylar/sylar/orm/table.cc	/^void Table::gen_dao_src(std::ofstream& ofs) {$/;"	f	class:sylar::orm::Table	typeref:typename:void	signature:(std::ofstream & ofs)
gen_dao_src	sylar/sylar/orm/table.h	/^    void gen_dao_src(std::ofstream& ofs);$/;"	p	class:sylar::orm::Table	typeref:typename:void	access:private	signature:(std::ofstream & ofs)
gen_inc	sylar/sylar/orm/table.cc	/^void Table::gen_inc(const std::string& path) {$/;"	f	class:sylar::orm::Table	typeref:typename:void	signature:(const std::string & path)
gen_inc	sylar/sylar/orm/table.h	/^    void gen_inc(const std::string& path);$/;"	p	class:sylar::orm::Table	typeref:typename:void	access:private	signature:(const std::string & path)
gen_src	sylar/sylar/orm/table.cc	/^void Table::gen_src(const std::string& path) {$/;"	f	class:sylar::orm::Table	typeref:typename:void	signature:(const std::string & path)
gen_src	sylar/sylar/orm/table.h	/^    void gen_src(const std::string& path);$/;"	p	class:sylar::orm::Table	typeref:typename:void	access:private	signature:(const std::string & path)
get	sylar/sylar/db/fox_thread.cc	/^IFoxThread::ptr FoxThreadManager::get(const std::string& name) {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:IFoxThread::ptr	signature:(const std::string & name)
get	sylar/sylar/db/fox_thread.h	/^    IFoxThread::ptr get(const std::string& name);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:IFoxThread::ptr	access:public	signature:(const std::string & name)
get	sylar/sylar/db/mysql.cc	/^MySQL::ptr MySQLManager::get(const std::string& name) {$/;"	f	class:sylar::MySQLManager	typeref:typename:MySQL::ptr	signature:(const std::string & name)
get	sylar/sylar/db/mysql.h	/^    MYSQL_RES* get() const { return m_data.get();}$/;"	f	class:sylar::MySQLRes	typeref:typename:MYSQL_RES *	access:public	signature:() const
get	sylar/sylar/db/mysql.h	/^    MySQL::ptr get(const std::string& name);$/;"	p	class:sylar::MySQLManager	typeref:typename:MySQL::ptr	access:public	signature:(const std::string & name)
get	sylar/sylar/db/redis.cc	/^IRedis::ptr RedisManager::get(const std::string& name) {$/;"	f	class:sylar::RedisManager	typeref:typename:IRedis::ptr	signature:(const std::string & name)
get	sylar/sylar/db/redis.h	/^    IRedis::ptr get(const std::string& name);$/;"	p	class:sylar::RedisManager	typeref:typename:IRedis::ptr	access:public	signature:(const std::string & name)
get	sylar/sylar/db/sqlite3.cc	/^SQLite3::ptr SQLite3Manager::get(const std::string& name) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:SQLite3::ptr	signature:(const std::string & name)
get	sylar/sylar/db/sqlite3.h	/^    SQLite3::ptr get(const std::string& name);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:SQLite3::ptr	access:public	signature:(const std::string & name)
get	sylar/sylar/ds/array.h	/^    const T& get(uint64_t idx) {$/;"	f	class:sylar::ds::Array	typeref:typename:const T &	access:public	signature:(uint64_t idx)
get	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::get(uint32_t from, uint32_t size, bool v) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(uint32_t from,uint32_t size,bool v) const
get	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::get(uint32_t idx) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(uint32_t idx) const
get	sylar/sylar/ds/bitmap.h	/^    bool get(uint32_t from, uint32_t size, bool v) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:(uint32_t from,uint32_t size,bool v) const
get	sylar/sylar/ds/bitmap.h	/^    bool get(uint32_t idx) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:(uint32_t idx) const
get	sylar/sylar/ds/dict.h	/^    SharedArray<V> get(const K& k, bool duplicate = true) {$/;"	f	class:sylar::ds::Dict	typeref:typename:SharedArray<V>	access:public	signature:(const K & k,bool duplicate=true)
get	sylar/sylar/ds/dict.h	/^    bool get(const K& k, std::vector<V>& v) {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:public	signature:(const K & k,std::vector<V> & v)
get	sylar/sylar/ds/dict.h	/^    std::string get(const uint64_t& id) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:std::string	access:public	signature:(const uint64_t & id)
get	sylar/sylar/ds/hash_map.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:public	signature:(const K & k,V & v)
get	sylar/sylar/ds/hash_multimap.h	/^    SharedArray<V> get(const K& k, bool duplicate = true) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:SharedArray<V>	access:public	signature:(const K & k,bool duplicate=true)
get	sylar/sylar/ds/hash_multimap.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,V & v)
get	sylar/sylar/ds/hash_multimap.h	/^    bool get(const K& k, std::vector<V>& v) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,std::vector<V> & v)
get	sylar/sylar/ds/lru_cache.h	/^    V get(const K& k) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:V	access:public	signature:(const K & k)
get	sylar/sylar/ds/lru_cache.h	/^    V get(const K& k) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:V	access:public	signature:(const K & k)
get	sylar/sylar/ds/lru_cache.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:bool	access:public	signature:(const K & k,V & v)
get	sylar/sylar/ds/lru_cache.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:bool	access:public	signature:(const K & k,V & v)
get	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::get(uint32_t from, uint32_t size, bool v) const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:(uint32_t from,uint32_t size,bool v) const
get	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::get(uint32_t idx) const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:(uint32_t idx) const
get	sylar/sylar/ds/roaring_bitmap.h	/^    bool get(uint32_t from, uint32_t size, bool v) const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:(uint32_t from,uint32_t size,bool v) const
get	sylar/sylar/ds/roaring_bitmap.h	/^    bool get(uint32_t idx) const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:(uint32_t idx) const
get	sylar/sylar/ds/timed_cache.h	/^    V get(const K& k) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:V	access:public	signature:(const K & k)
get	sylar/sylar/ds/timed_cache.h	/^    V get(const K& k) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:V	access:public	signature:(const K & k)
get	sylar/sylar/ds/timed_cache.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:bool	access:public	signature:(const K & k,V & v)
get	sylar/sylar/ds/timed_cache.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:bool	access:public	signature:(const K & k,V & v)
get	sylar/sylar/ds/timed_lru_cache.h	/^    V get(const K& k) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:V	access:public	signature:(const K & k)
get	sylar/sylar/ds/timed_lru_cache.h	/^    V get(const K& k) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:V	access:public	signature:(const K & k)
get	sylar/sylar/ds/timed_lru_cache.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:bool	access:public	signature:(const K & k,V & v)
get	sylar/sylar/ds/timed_lru_cache.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:bool	access:public	signature:(const K & k,V & v)
get	sylar/sylar/env.cc	/^std::string Env::get(const std::string& key, const std::string& default_value) {$/;"	f	class:sylar::Env	typeref:typename:std::string	signature:(const std::string & key,const std::string & default_value)
get	sylar/sylar/env.h	/^    std::string get(const std::string& key, const std::string& default_value = "");$/;"	p	class:sylar::Env	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & default_value="")
get	sylar/sylar/fd_manager.cc	/^FdCtx::ptr FdManager::get(int fd, bool auto_create) {$/;"	f	class:sylar::FdManager	typeref:typename:FdCtx::ptr	signature:(int fd,bool auto_create)
get	sylar/sylar/fd_manager.h	/^    FdCtx::ptr get(int fd, bool auto_create = false);$/;"	p	class:sylar::FdManager	typeref:typename:FdCtx::ptr	access:public	signature:(int fd,bool auto_create=false)
get	sylar/sylar/http/servlet.h	/^    Servlet::ptr get() const override {$/;"	f	class:sylar::http::HoldServletCreator	typeref:typename:Servlet::ptr	access:public	signature:() const
get	sylar/sylar/http/servlet.h	/^    Servlet::ptr get() const override {$/;"	f	class:sylar::http::ServletCreator	typeref:typename:Servlet::ptr	access:public	signature:() const
get	sylar/sylar/http/servlet.h	/^    virtual Servlet::ptr get() const = 0;$/;"	p	class:sylar::http::IServletCreator	typeref:typename:Servlet::ptr	access:public	signature:() const
get	sylar/sylar/http/session_data.cc	/^SessionData::ptr SessionDataManager::get(const std::string& id) {$/;"	f	class:sylar::http::SessionDataManager	typeref:typename:SessionData::ptr	signature:(const std::string & id)
get	sylar/sylar/http/session_data.h	/^    SessionData::ptr get(const std::string& id);$/;"	p	class:sylar::http::SessionDataManager	typeref:typename:SessionData::ptr	access:public	signature:(const std::string & id)
get	sylar/sylar/module.cc	/^Module::ptr ModuleManager::get(const std::string& name) {$/;"	f	class:sylar::ModuleManager	typeref:typename:Module::ptr	signature:(const std::string & name)
get	sylar/sylar/module.h	/^    Module::ptr get(const std::string& name);$/;"	p	class:sylar::ModuleManager	typeref:typename:Module::ptr	access:public	signature:(const std::string & name)
get	sylar/sylar/ns/name_server_module.cc	/^NSClientInfo::ptr NameServerModule::get(sylar::RockStream::ptr rs) {$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:NSClientInfo::ptr	signature:(sylar::RockStream::ptr rs)
get	sylar/sylar/ns/name_server_module.h	/^    NSClientInfo::ptr get(sylar::RockStream::ptr rs);$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:NSClientInfo::ptr	access:private	signature:(sylar::RockStream::ptr rs)
get	sylar/sylar/ns/ns_protocol.cc	/^NSDomain::ptr NSDomainSet::get(const std::string& domain, bool auto_create) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:NSDomain::ptr	signature:(const std::string & domain,bool auto_create)
get	sylar/sylar/ns/ns_protocol.cc	/^NSNode::ptr NSNodeSet::get(uint64_t id) {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:NSNode::ptr	signature:(uint64_t id)
get	sylar/sylar/ns/ns_protocol.cc	/^NSNodeSet::ptr NSDomain::get(uint32_t cmd) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:NSNodeSet::ptr	signature:(uint32_t cmd)
get	sylar/sylar/ns/ns_protocol.h	/^    NSDomain::ptr get(const std::string& domain, bool auto_create = false);$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:NSDomain::ptr	access:public	signature:(const std::string & domain,bool auto_create=false)
get	sylar/sylar/ns/ns_protocol.h	/^    NSNode::ptr get(uint64_t id);$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:NSNode::ptr	access:public	signature:(uint64_t id)
get	sylar/sylar/ns/ns_protocol.h	/^    NSNodeSet::ptr get(uint32_t cmd);$/;"	p	class:sylar::ns::NSDomain	typeref:typename:NSNodeSet::ptr	access:public	signature:(uint32_t cmd)
get	sylar/sylar/streams/async_socket_stream.cc	/^AsyncSocketStream::ptr AsyncSocketStreamManager::get() {$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:AsyncSocketStream::ptr	signature:()
get	sylar/sylar/streams/async_socket_stream.h	/^    AsyncSocketStream::ptr get();$/;"	p	class:sylar::AsyncSocketStreamManager	typeref:typename:AsyncSocketStream::ptr	access:public	signature:()
get	sylar/sylar/streams/load_balance.cc	/^HolderStats& HolderStatsSet::get(const uint32_t& now) {$/;"	f	class:sylar::HolderStatsSet	typeref:typename:HolderStats &	signature:(const uint32_t & now)
get	sylar/sylar/streams/load_balance.cc	/^HolderStats& LoadBalanceItem::get(const uint32_t& now) {$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:HolderStats &	signature:(const uint32_t & now)
get	sylar/sylar/streams/load_balance.cc	/^LoadBalance::ptr SDLoadBalance::get(const std::string& domain, const std::string& service, bool /;"	f	class:sylar::SDLoadBalance	typeref:typename:LoadBalance::ptr	signature:(const std::string & domain,const std::string & service,bool auto_create)
get	sylar/sylar/streams/load_balance.cc	/^LoadBalanceItem::ptr RoundRobinLoadBalance::get(uint64_t v) {$/;"	f	class:sylar::RoundRobinLoadBalance	typeref:typename:LoadBalanceItem::ptr	signature:(uint64_t v)
get	sylar/sylar/streams/load_balance.cc	/^LoadBalanceItem::ptr WeightLoadBalance::get(uint64_t v) {$/;"	f	class:sylar::WeightLoadBalance	typeref:typename:LoadBalanceItem::ptr	signature:(uint64_t v)
get	sylar/sylar/streams/load_balance.h	/^    HolderStats& get(const uint32_t& now = time(0));$/;"	p	class:sylar::HolderStatsSet	typeref:typename:HolderStats &	access:public	signature:(const uint32_t & now=time (0))
get	sylar/sylar/streams/load_balance.h	/^    HolderStats& get(const uint32_t& now = time(0));$/;"	p	class:sylar::LoadBalanceItem	typeref:typename:HolderStats &	access:public	signature:(const uint32_t & now=time (0))
get	sylar/sylar/streams/load_balance.h	/^    LoadBalance::ptr get(const std::string& domain, const std::string& service, bool auto_create/;"	p	class:sylar::SDLoadBalance	typeref:typename:LoadBalance::ptr	access:public	signature:(const std::string & domain,const std::string & service,bool auto_create=false)
get	sylar/sylar/streams/load_balance.h	/^    virtual LoadBalanceItem::ptr get(uint64_t v = -1) = 0;$/;"	p	class:sylar::ILoadBalance	typeref:typename:LoadBalanceItem::ptr	access:public	signature:(uint64_t v=-1)
get	sylar/sylar/streams/load_balance.h	/^    virtual LoadBalanceItem::ptr get(uint64_t v = -1) override;$/;"	p	class:sylar::RoundRobinLoadBalance	typeref:typename:LoadBalanceItem::ptr	access:public	signature:(uint64_t v=-1)
get	sylar/sylar/streams/load_balance.h	/^    virtual LoadBalanceItem::ptr get(uint64_t v = -1) override;$/;"	p	class:sylar::WeightLoadBalance	typeref:typename:LoadBalanceItem::ptr	access:public	signature:(uint64_t v=-1)
get	sylar/sylar/worker.cc	/^Scheduler::ptr WorkerManager::get(const std::string& name) {$/;"	f	class:sylar::WorkerManager	typeref:typename:Scheduler::ptr	signature:(const std::string & name)
get	sylar/sylar/worker.h	/^    Scheduler::ptr get(const std::string& name);$/;"	p	class:sylar::WorkerManager	typeref:typename:Scheduler::ptr	access:public	signature:(const std::string & name)
get	sylar/sylar/zk_client.cc	/^int32_t ZKClient::get(const std::string& path, std::string& val, bool watch, Stat* stat) {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & path,std::string & val,bool watch,Stat * stat)
get	sylar/sylar/zk_client.h	/^    int32_t get(const std::string& path, std::string& val, bool watch, Stat* stat = nullptr);$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & path,std::string & val,bool watch,Stat * stat=nullptr)
getAbsolutePath	sylar/sylar/env.cc	/^std::string Env::getAbsolutePath(const std::string& path) const {$/;"	f	class:sylar::Env	typeref:typename:std::string	signature:(const std::string & path) const
getAbsolutePath	sylar/sylar/env.h	/^    std::string getAbsolutePath(const std::string& path) const;$/;"	p	class:sylar::Env	typeref:typename:std::string	access:public	signature:(const std::string & path) const
getAbsoluteWorkPath	sylar/sylar/env.cc	/^std::string Env::getAbsoluteWorkPath(const std::string& path) const {$/;"	f	class:sylar::Env	typeref:typename:std::string	signature:(const std::string & path) const
getAbsoluteWorkPath	sylar/sylar/env.h	/^    std::string getAbsoluteWorkPath(const std::string& path) const;$/;"	p	class:sylar::Env	typeref:typename:std::string	access:public	signature:(const std::string & path) const
getAddr	sylar/sylar/address.cc	/^const sockaddr* IPv4Address::getAddr() const {$/;"	f	class:sylar::IPv4Address	typeref:typename:const sockaddr *	signature:() const
getAddr	sylar/sylar/address.cc	/^const sockaddr* IPv6Address::getAddr() const {$/;"	f	class:sylar::IPv6Address	typeref:typename:const sockaddr *	signature:() const
getAddr	sylar/sylar/address.cc	/^const sockaddr* UnixAddress::getAddr() const {$/;"	f	class:sylar::UnixAddress	typeref:typename:const sockaddr *	signature:() const
getAddr	sylar/sylar/address.cc	/^const sockaddr* UnknownAddress::getAddr() const {$/;"	f	class:sylar::UnknownAddress	typeref:typename:const sockaddr *	signature:() const
getAddr	sylar/sylar/address.cc	/^sockaddr* IPv4Address::getAddr() {$/;"	f	class:sylar::IPv4Address	typeref:typename:sockaddr *	signature:()
getAddr	sylar/sylar/address.cc	/^sockaddr* IPv6Address::getAddr() {$/;"	f	class:sylar::IPv6Address	typeref:typename:sockaddr *	signature:()
getAddr	sylar/sylar/address.cc	/^sockaddr* UnixAddress::getAddr() {$/;"	f	class:sylar::UnixAddress	typeref:typename:sockaddr *	signature:()
getAddr	sylar/sylar/address.cc	/^sockaddr* UnknownAddress::getAddr() {$/;"	f	class:sylar::UnknownAddress	typeref:typename:sockaddr *	signature:()
getAddr	sylar/sylar/address.h	/^    const sockaddr* getAddr() const override;$/;"	p	class:sylar::IPv4Address	typeref:typename:const sockaddr *	access:public	signature:() const
getAddr	sylar/sylar/address.h	/^    const sockaddr* getAddr() const override;$/;"	p	class:sylar::IPv6Address	typeref:typename:const sockaddr *	access:public	signature:() const
getAddr	sylar/sylar/address.h	/^    const sockaddr* getAddr() const override;$/;"	p	class:sylar::UnixAddress	typeref:typename:const sockaddr *	access:public	signature:() const
getAddr	sylar/sylar/address.h	/^    const sockaddr* getAddr() const override;$/;"	p	class:sylar::UnknownAddress	typeref:typename:const sockaddr *	access:public	signature:() const
getAddr	sylar/sylar/address.h	/^    sockaddr* getAddr() override;$/;"	p	class:sylar::IPv4Address	typeref:typename:sockaddr *	access:public	signature:()
getAddr	sylar/sylar/address.h	/^    sockaddr* getAddr() override;$/;"	p	class:sylar::IPv6Address	typeref:typename:sockaddr *	access:public	signature:()
getAddr	sylar/sylar/address.h	/^    sockaddr* getAddr() override;$/;"	p	class:sylar::UnixAddress	typeref:typename:sockaddr *	access:public	signature:()
getAddr	sylar/sylar/address.h	/^    sockaddr* getAddr() override;$/;"	p	class:sylar::UnknownAddress	typeref:typename:sockaddr *	access:public	signature:()
getAddr	sylar/sylar/address.h	/^    virtual const sockaddr* getAddr() const = 0;$/;"	p	class:sylar::Address	typeref:typename:const sockaddr *	access:public	signature:() const
getAddr	sylar/sylar/address.h	/^    virtual sockaddr* getAddr() = 0;$/;"	p	class:sylar::Address	typeref:typename:sockaddr *	access:public	signature:()
getAddrLen	sylar/sylar/address.cc	/^socklen_t IPv4Address::getAddrLen() const {$/;"	f	class:sylar::IPv4Address	typeref:typename:socklen_t	signature:() const
getAddrLen	sylar/sylar/address.cc	/^socklen_t IPv6Address::getAddrLen() const {$/;"	f	class:sylar::IPv6Address	typeref:typename:socklen_t	signature:() const
getAddrLen	sylar/sylar/address.cc	/^socklen_t UnixAddress::getAddrLen() const {$/;"	f	class:sylar::UnixAddress	typeref:typename:socklen_t	signature:() const
getAddrLen	sylar/sylar/address.cc	/^socklen_t UnknownAddress::getAddrLen() const {$/;"	f	class:sylar::UnknownAddress	typeref:typename:socklen_t	signature:() const
getAddrLen	sylar/sylar/address.h	/^    socklen_t getAddrLen() const override;$/;"	p	class:sylar::IPv4Address	typeref:typename:socklen_t	access:public	signature:() const
getAddrLen	sylar/sylar/address.h	/^    socklen_t getAddrLen() const override;$/;"	p	class:sylar::IPv6Address	typeref:typename:socklen_t	access:public	signature:() const
getAddrLen	sylar/sylar/address.h	/^    socklen_t getAddrLen() const override;$/;"	p	class:sylar::UnixAddress	typeref:typename:socklen_t	access:public	signature:() const
getAddrLen	sylar/sylar/address.h	/^    socklen_t getAddrLen() const override;$/;"	p	class:sylar::UnknownAddress	typeref:typename:socklen_t	access:public	signature:() const
getAddrLen	sylar/sylar/address.h	/^    virtual socklen_t getAddrLen() const = 0;$/;"	p	class:sylar::Address	typeref:typename:socklen_t	access:public	signature:() const
getAffectedRows	sylar/sylar/db/mysql.cc	/^uint64_t MySQL::getAffectedRows() {$/;"	f	class:sylar::MySQL	typeref:typename:uint64_t	signature:()
getAffectedRows	sylar/sylar/db/mysql.h	/^    uint64_t getAffectedRows();$/;"	p	class:sylar::MySQL	typeref:typename:uint64_t	access:public	signature:()
getAndDelCtx	sylar/sylar/streams/async_socket_stream.cc	/^AsyncSocketStream::Ctx::ptr AsyncSocketStream::getAndDelCtx(uint32_t sn) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:AsyncSocketStream::Ctx::ptr	signature:(uint32_t sn)
getAndDelCtx	sylar/sylar/streams/async_socket_stream.h	/^    Ctx::ptr getAndDelCtx(uint32_t sn);$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:Ctx::ptr	access:protected	signature:(uint32_t sn)
getAndDelCtxAs	sylar/sylar/streams/async_socket_stream.h	/^    std::shared_ptr<T> getAndDelCtxAs(uint32_t sn) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:std::shared_ptr<T>	access:protected	signature:(uint32_t sn)
getAs	sylar/sylar/http/http.h	/^T getAs(const MapType& m, const std::string& key, const T& def = T()) {$/;"	f	namespace:sylar::http	typeref:typename:T	signature:(const MapType & m,const std::string & key,const T & def=T ())
getAs	sylar/sylar/streams/async_socket_stream.h	/^    std::shared_ptr<T> getAs() {$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:std::shared_ptr<T>	access:public	signature:()
getAsFair	sylar/sylar/streams/load_balance.cc	/^FairLoadBalanceItem::ptr WeightLoadBalance::getAsFair() {$/;"	f	class:sylar::WeightLoadBalance	typeref:typename:FairLoadBalanceItem::ptr	signature:()
getAsFair	sylar/sylar/streams/load_balance.h	/^    FairLoadBalanceItem::ptr getAsFair();$/;"	p	class:sylar::WeightLoadBalance	typeref:typename:FairLoadBalanceItem::ptr	access:public	signature:()
getAsIOManager	sylar/sylar/worker.cc	/^IOManager::ptr WorkerManager::getAsIOManager(const std::string& name) {$/;"	f	class:sylar::WorkerManager	typeref:typename:IOManager::ptr	signature:(const std::string & name)
getAsIOManager	sylar/sylar/worker.h	/^    IOManager::ptr getAsIOManager(const std::string& name);$/;"	p	class:sylar::WorkerManager	typeref:typename:IOManager::ptr	access:public	signature:(const std::string & name)
getAsPB	sylar/sylar/rock/rock_protocol.h	/^    std::shared_ptr<T> getAsPB() const {$/;"	f	class:sylar::RockBody	typeref:typename:std::shared_ptr<T>	access:public	signature:() const
getBase	sylar/sylar/db/fox_thread.h	/^    struct event_base* getBase() { return m_base;}$/;"	f	class:sylar::FoxThread	typeref:struct:event_base *	access:public	signature:()
getBaseSize	sylar/sylar/bytearray.h	/^    size_t getBaseSize() const { return m_baseSize;}$/;"	f	class:sylar::ByteArray	typeref:typename:size_t	access:public	signature:() const
getBccEMailAddress	sylar/sylar/email/email.h	/^    const std::vector<std::string>& getBccEMailAddress() const { return m_bccEMailAddress;}$/;"	f	class:sylar::EMail	typeref:typename:const std::vector<std::string> &	access:public	signature:() const
getBindString	sylar/sylar/orm/column.cc	/^std::string Column::getBindString() {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:()
getBindString	sylar/sylar/orm/column.h	/^    std::string getBindString();$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
getBlob	sylar/sylar/db/db.h	/^    virtual std::string getBlob(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:std::string	access:public	signature:(int idx)
getBlob	sylar/sylar/db/mysql.cc	/^std::string MySQLRes::getBlob(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:std::string	signature:(int idx)
getBlob	sylar/sylar/db/mysql.cc	/^std::string MySQLStmtRes::getBlob(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:std::string	signature:(int idx)
getBlob	sylar/sylar/db/mysql.h	/^    std::string getBlob(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:std::string	access:public	signature:(int idx)
getBlob	sylar/sylar/db/mysql.h	/^    std::string getBlob(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:std::string	access:public	signature:(int idx)
getBlob	sylar/sylar/db/sqlite3.cc	/^std::string SQLite3Data::getBlob(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:std::string	signature:(int idx)
getBlob	sylar/sylar/db/sqlite3.h	/^    std::string getBlob(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:std::string	access:public	signature:(int idx)
getBody	sylar/sylar/email/email.h	/^    const std::string& getBody() const { return m_body;}$/;"	f	class:sylar::EMail	typeref:typename:const std::string &	access:public	signature:() const
getBody	sylar/sylar/http/http.h	/^    const std::string& getBody() const { return m_body;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:const std::string &	access:public	signature:() const
getBody	sylar/sylar/http/http.h	/^    const std::string& getBody() const { return m_body;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:const std::string &	access:public	signature:() const
getBody	sylar/sylar/rock/rock_protocol.h	/^    const std::string& getBody() const { return m_body;}$/;"	f	class:sylar::RockBody	typeref:typename:const std::string &	access:public	signature:() const
getBucket	sylar/sylar/ds/lru_cache.h	/^    size_t getBucket() const { return m_bucket;}$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:public	signature:() const
getBucket	sylar/sylar/ds/timed_cache.h	/^    size_t getBucket() const { return m_bucket;}$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:public	signature:() const
getBucket	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getBucket() const { return m_bucket;}$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:public	signature:() const
getBuffers	sylar/sylar/streams/zlib_stream.h	/^    std::vector<iovec>& getBuffers() { return m_buffs;}$/;"	f	class:sylar::ZlibStream	typeref:typename:std::vector<iovec> &	access:public	signature:()
getById	sylar/sylar/streams/load_balance.cc	/^LoadBalanceItem::ptr LoadBalance::getById(uint64_t id) {$/;"	f	class:sylar::LoadBalance	typeref:typename:LoadBalanceItem::ptr	signature:(uint64_t id)
getById	sylar/sylar/streams/load_balance.h	/^    LoadBalanceItem::ptr getById(uint64_t id);$/;"	p	class:sylar::LoadBalance	typeref:typename:LoadBalanceItem::ptr	access:public	signature:(uint64_t id)
getByteArray	sylar/sylar/streams/zlib_stream.cc	/^sylar::ByteArray::ptr ZlibStream::getByteArray() {$/;"	f	class:sylar::ZlibStream	typeref:typename:sylar::ByteArray::ptr	signature:()
getByteArray	sylar/sylar/streams/zlib_stream.h	/^    sylar::ByteArray::ptr getByteArray();$/;"	p	class:sylar::ZlibStream	typeref:typename:sylar::ByteArray::ptr	access:public	signature:()
getCapacity	sylar/sylar/bytearray.h	/^    size_t getCapacity() const { return m_capacity - m_position;}$/;"	f	class:sylar::ByteArray	typeref:typename:size_t	access:private	signature:() const
getCb	sylar/sylar/streams/load_balance.h	/^    stream_callback getCb() const { return m_cb;}$/;"	f	class:sylar::SDLoadBalance	typeref:typename:stream_callback	access:public	signature:() const
getCcEMailAddress	sylar/sylar/email/email.h	/^    const std::vector<std::string>& getCcEMailAddress() const { return m_ccEMailAddress;}$/;"	f	class:sylar::EMail	typeref:typename:const std::vector<std::string> &	access:public	signature:() const
getChildren	sylar/sylar/streams/service_discovery.cc	/^bool ZKServiceDiscovery::getChildren(const std::string& path) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:bool	signature:(const std::string & path)
getChildren	sylar/sylar/streams/service_discovery.h	/^    bool getChildren(const std::string& path);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:bool	access:private	signature:(const std::string & path)
getChildren	sylar/sylar/zk_client.cc	/^int32_t ZKClient::getChildren(const std::string& path, std::vector<std::string>& val, bool watch/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & path,std::vector<std::string> & val,bool watch,Stat * stat)
getChildren	sylar/sylar/zk_client.h	/^    int32_t getChildren(const std::string& path, std::vector<std::string>& val, bool watch, Stat/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & path,std::vector<std::string> & val,bool watch,Stat * stat=nullptr)
getCmd	sylar/sylar/ns/ns_protocol.h	/^    uint32_t getCmd() const { return m_cmd;}$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:uint32_t	access:public	signature:() const
getCmd	sylar/sylar/protocol.h	/^    uint32_t getCmd() const { return m_cmd;}$/;"	f	class:sylar::Request	typeref:typename:uint32_t	access:public	signature:() const
getCmd	sylar/sylar/protocol.h	/^    uint32_t getCmd() const { return m_cmd;}$/;"	f	class:sylar::Response	typeref:typename:uint32_t	access:public	signature:() const
getCol	sylar/sylar/orm/table.cc	/^Column::ptr Table::getCol(const std::string& name) const {$/;"	f	class:sylar::orm::Table	typeref:typename:Column::ptr	signature:(const std::string & name) const
getCol	sylar/sylar/orm/table.h	/^    Column::ptr getCol(const std::string& name) const;$/;"	p	class:sylar::orm::Table	typeref:typename:Column::ptr	access:private	signature:(const std::string & name) const
getCols	sylar/sylar/orm/index.h	/^    const std::vector<std::string>& getCols() const { return m_cols;}$/;"	f	class:sylar::orm::Index	typeref:typename:const std::vector<std::string> &	access:public	signature:() const
getCols	sylar/sylar/orm/table.h	/^    const std::vector<Column::ptr>& getCols() const { return m_cols;}$/;"	f	class:sylar::orm::Table	typeref:typename:const std::vector<Column::ptr> &	access:public	signature:() const
getColumnBytes	sylar/sylar/db/db.h	/^    virtual int getColumnBytes(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int	access:public	signature:(int idx)
getColumnBytes	sylar/sylar/db/mysql.cc	/^int MySQLRes::getColumnBytes(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:int	signature:(int idx)
getColumnBytes	sylar/sylar/db/mysql.cc	/^int MySQLStmtRes::getColumnBytes(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int	signature:(int idx)
getColumnBytes	sylar/sylar/db/mysql.h	/^    int getColumnBytes(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int	access:public	signature:(int idx)
getColumnBytes	sylar/sylar/db/mysql.h	/^    int getColumnBytes(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int	access:public	signature:(int idx)
getColumnBytes	sylar/sylar/db/sqlite3.cc	/^int SQLite3Data::getColumnBytes(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int	signature:(int idx)
getColumnBytes	sylar/sylar/db/sqlite3.h	/^    int getColumnBytes(int idx);$/;"	p	class:sylar::SQLite3Data	typeref:typename:int	access:public	signature:(int idx)
getColumnCount	sylar/sylar/db/db.h	/^    virtual int getColumnCount() = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int	access:public	signature:()
getColumnCount	sylar/sylar/db/mysql.cc	/^int MySQLRes::getColumnCount() {$/;"	f	class:sylar::MySQLRes	typeref:typename:int	signature:()
getColumnCount	sylar/sylar/db/mysql.cc	/^int MySQLStmtRes::getColumnCount() {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int	signature:()
getColumnCount	sylar/sylar/db/mysql.h	/^    int getColumnCount() override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int	access:public	signature:()
getColumnCount	sylar/sylar/db/mysql.h	/^    int getColumnCount() override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int	access:public	signature:()
getColumnCount	sylar/sylar/db/sqlite3.cc	/^int SQLite3Data::getColumnCount() {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int	signature:()
getColumnCount	sylar/sylar/db/sqlite3.h	/^    int getColumnCount() override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:int	access:public	signature:()
getColumnName	sylar/sylar/db/db.h	/^    virtual std::string getColumnName(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:std::string	access:public	signature:(int idx)
getColumnName	sylar/sylar/db/mysql.cc	/^std::string MySQLRes::getColumnName(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:std::string	signature:(int idx)
getColumnName	sylar/sylar/db/mysql.cc	/^std::string MySQLStmtRes::getColumnName(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:std::string	signature:(int idx)
getColumnName	sylar/sylar/db/mysql.h	/^    std::string getColumnName(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:std::string	access:public	signature:(int idx)
getColumnName	sylar/sylar/db/mysql.h	/^    std::string getColumnName(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:std::string	access:public	signature:(int idx)
getColumnName	sylar/sylar/db/sqlite3.cc	/^std::string SQLite3Data::getColumnName(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:std::string	signature:(int idx)
getColumnName	sylar/sylar/db/sqlite3.h	/^    std::string getColumnName(int idx);$/;"	p	class:sylar::SQLite3Data	typeref:typename:std::string	access:public	signature:(int idx)
getColumnType	sylar/sylar/db/db.h	/^    virtual int getColumnType(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int	access:public	signature:(int idx)
getColumnType	sylar/sylar/db/mysql.cc	/^int MySQLRes::getColumnType(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:int	signature:(int idx)
getColumnType	sylar/sylar/db/mysql.cc	/^int MySQLStmtRes::getColumnType(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int	signature:(int idx)
getColumnType	sylar/sylar/db/mysql.h	/^    int getColumnType(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int	access:public	signature:(int idx)
getColumnType	sylar/sylar/db/mysql.h	/^    int getColumnType(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int	access:public	signature:(int idx)
getColumnType	sylar/sylar/db/sqlite3.cc	/^int SQLite3Data::getColumnType(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int	signature:(int idx)
getColumnType	sylar/sylar/db/sqlite3.h	/^    int getColumnType(int idx);$/;"	p	class:sylar::SQLite3Data	typeref:typename:int	access:public	signature:(int idx)
getCompressRate	sylar/sylar/ds/bitmap.cc	/^float Bitmap::getCompressRate() const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:float	signature:() const
getCompressRate	sylar/sylar/ds/bitmap.h	/^    float getCompressRate() const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:float	access:public	signature:() const
getCompressRate	sylar/sylar/ds/roaring_bitmap.cc	/^float RoaringBitmap::getCompressRate() const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:float	signature:() const
getCompressRate	sylar/sylar/ds/roaring_bitmap.h	/^    float getCompressRate() const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:float	access:public	signature:() const
getConcurrency	sylar/sylar/mutex.h	/^    size_t getConcurrency() const { return m_concurrency;}$/;"	f	class:sylar::FiberSemaphore	typeref:typename:size_t	access:public	signature:() const
getConf	sylar/sylar/tcp_server.h	/^    TcpServerConf::ptr getConf() const { return m_conf;}$/;"	f	class:sylar::TcpServer	typeref:typename:TcpServerConf::ptr	access:public	signature:() const
getConfig	sylar/sylar/zk_client.cc	/^int32_t ZKClient::getConfig(std::string& val, bool watch, Stat* stat) {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(std::string & val,bool watch,Stat * stat)
getConfig	sylar/sylar/zk_client.h	/^    int32_t getConfig(std::string& val, bool watch, Stat* stat = nullptr);$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(std::string & val,bool watch,Stat * stat=nullptr)
getConfigPath	sylar/sylar/env.cc	/^std::string Env::getConfigPath() {$/;"	f	class:sylar::Env	typeref:typename:std::string	signature:()
getConfigPath	sylar/sylar/env.h	/^    std::string getConfigPath();$/;"	p	class:sylar::Env	typeref:typename:std::string	access:public	signature:()
getConnectCb	sylar/sylar/streams/async_socket_stream.h	/^    connect_callback getConnectCb() const { return m_connectCb;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:connect_callback	access:public	signature:() const
getConnectCb	sylar/sylar/streams/async_socket_stream.h	/^    connect_callback getConnectCb() const { return m_connectCb;}$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:connect_callback	access:public	signature:() const
getConnection	sylar/sylar/http/http_connection.cc	/^HttpConnection::ptr HttpConnectionPool::getConnection() {$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpConnection::ptr	signature:()
getConnection	sylar/sylar/http/http_connection.h	/^    HttpConnection::ptr getConnection();$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpConnection::ptr	access:public	signature:()
getContent	sylar/sylar/email/email.h	/^    const std::string& getContent() const { return m_content;}$/;"	f	class:sylar::EMailEntity	typeref:typename:const std::string &	access:public	signature:() const
getContent	sylar/sylar/log.h	/^    std::string getContent() const { return m_ss.str();}$/;"	f	class:sylar::LogEvent	typeref:typename:std::string	access:public	signature:() const
getContentLength	sylar/sylar/http/http_parser.cc	/^uint64_t HttpRequestParser::getContentLength() {$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:uint64_t	signature:()
getContentLength	sylar/sylar/http/http_parser.cc	/^uint64_t HttpResponseParser::getContentLength() {$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:uint64_t	signature:()
getContentLength	sylar/sylar/http/http_parser.h	/^    uint64_t getContentLength();$/;"	p	class:sylar::http::HttpRequestParser	typeref:typename:uint64_t	access:public	signature:()
getContentLength	sylar/sylar/http/http_parser.h	/^    uint64_t getContentLength();$/;"	p	class:sylar::http::HttpResponseParser	typeref:typename:uint64_t	access:public	signature:()
getContext	sylar/sylar/iomanager.cc	/^IOManager::FdContext::EventContext& IOManager::FdContext::getContext(IOManager::Event event) {$/;"	f	class:sylar::IOManager::FdContext	typeref:typename:IOManager::FdContext::EventContext &	signature:(IOManager::Event event)
getContext	sylar/sylar/iomanager.h	/^        EventContext& getContext(Event event);$/;"	p	struct:sylar::IOManager::FdContext	typeref:typename:EventContext &	access:public	signature:(Event event)
getCookie	sylar/sylar/http/http.cc	/^std::string HttpRequest::getCookie(const std::string& key$/;"	f	class:sylar::http::HttpRequest	typeref:typename:std::string	signature:(const std::string & key,const std::string & def)
getCookie	sylar/sylar/http/http.h	/^    std::string getCookie(const std::string& key, const std::string& def = "");$/;"	p	class:sylar::http::HttpRequest	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & def="")
getCookieAs	sylar/sylar/http/http.h	/^    T getCookieAs(const std::string& key, const T& def = T()) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:T	access:public	signature:(const std::string & key,const T & def=T ())
getCookies	sylar/sylar/http/http.h	/^    const MapType& getCookies() const { return m_cookies;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:const MapType &	access:public	signature:() const
getCopyOnWrite	sylar/sylar/ds/roaring.hh	/^    bool getCopyOnWrite() const { return copyOnWrite; }$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:() const
getCopyOnWrite	sylar/sylar/ds/roaring.hh	/^    bool getCopyOnWrite() const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:() const
getCount	sylar/sylar/ds/bitmap.cc	/^uint32_t Bitmap::getCount() const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:uint32_t	signature:() const
getCount	sylar/sylar/ds/bitmap.h	/^    uint32_t getCount() const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:uint32_t	access:public	signature:() const
getCount	sylar/sylar/ds/roaring_bitmap.cc	/^uint32_t RoaringBitmap::getCount() const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:uint32_t	signature:() const
getCount	sylar/sylar/ds/roaring_bitmap.h	/^    uint32_t getCount() const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:uint32_t	access:public	signature:() const
getCount	sylar/sylar/worker.cc	/^uint32_t WorkerManager::getCount() {$/;"	f	class:sylar::WorkerManager	typeref:typename:uint32_t	signature:()
getCount	sylar/sylar/worker.h	/^    uint32_t getCount();$/;"	p	class:sylar::WorkerManager	typeref:typename:uint32_t	access:public	signature:()
getCtx	sylar/sylar/streams/async_socket_stream.cc	/^AsyncSocketStream::Ctx::ptr AsyncSocketStream::getCtx(uint32_t sn) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:AsyncSocketStream::Ctx::ptr	signature:(uint32_t sn)
getCtx	sylar/sylar/streams/async_socket_stream.h	/^    Ctx::ptr getCtx(uint32_t sn);$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:Ctx::ptr	access:protected	signature:(uint32_t sn)
getCtxAs	sylar/sylar/streams/async_socket_stream.h	/^    std::shared_ptr<T> getCtxAs(uint32_t sn) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:std::shared_ptr<T>	access:protected	signature:(uint32_t sn)
getCtxCount	sylar/sylar/db/redis.h	/^    int getCtxCount() const { return m_ctxCount;}$/;"	f	class:sylar::FoxRedis	typeref:typename:int	access:public	signature:() const
getCtxCount	sylar/sylar/db/redis.h	/^    int getCtxCount() const { return m_ctxCount;}$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:int	access:public	signature:() const
getCurrentServer	sylar/sylar/zk_client.cc	/^std::string  ZKClient::getCurrentServer() {$/;"	f	class:sylar::ZKClient	typeref:typename:std::string	signature:()
getCurrentServer	sylar/sylar/zk_client.h	/^    std::string  getCurrentServer();$/;"	p	class:sylar::ZKClient	typeref:typename:std::string	access:public	signature:()
getCwd	sylar/sylar/env.h	/^    const std::string& getCwd() const { return m_cwd;}$/;"	f	class:sylar::Env	typeref:typename:const std::string &	access:public	signature:() const
getDB	sylar/sylar/db/sqlite3.h	/^    sqlite3* getDB() const { return m_db;}$/;"	f	class:sylar::SQLite3	typeref:typename:sqlite3 *	access:public	signature:() const
getDType	sylar/sylar/orm/column.h	/^    Type getDType() const { return m_dtype;}$/;"	f	class:sylar::orm::Column	typeref:typename:Type	access:public	signature:() const
getDType	sylar/sylar/orm/index.h	/^    Type getDType() const { return m_dtype;}$/;"	f	class:sylar::orm::Index	typeref:typename:Type	access:public	signature:() const
getDTypeString	sylar/sylar/orm/column.h	/^    std::string getDTypeString() { return TypeToString(m_dtype);}$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
getData	sylar/sylar/db/fox_thread.cc	/^void* FoxThread::getData(const std::string& name) {$/;"	f	class:sylar::FoxThread	typeref:typename:void *	signature:(const std::string & name)
getData	sylar/sylar/db/fox_thread.h	/^    T* getData(const std::string& name) {$/;"	f	class:sylar::FoxThread	typeref:typename:T *	access:public	signature:(const std::string & name)
getData	sylar/sylar/db/fox_thread.h	/^    void* getData(const std::string& name);$/;"	p	class:sylar::FoxThread	typeref:typename:void *	access:public	signature:(const std::string & name)
getData	sylar/sylar/http/http_parser.h	/^    HttpRequest::ptr getData() const { return m_data;}$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:HttpRequest::ptr	access:public	signature:() const
getData	sylar/sylar/http/http_parser.h	/^    HttpResponse::ptr getData() const { return m_data;}$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:HttpResponse::ptr	access:public	signature:() const
getData	sylar/sylar/http/session_data.h	/^    T getData(const std::string& key, const T& def = T()) {$/;"	f	class:sylar::http::SessionData	typeref:typename:T	access:public	signature:(const std::string & key,const T & def=T ())
getData	sylar/sylar/http/ws_session.h	/^    const std::string& getData() const { return m_data;}$/;"	f	class:sylar::http::WSFrameMessage	typeref:typename:const std::string &	access:public	signature:() const
getData	sylar/sylar/http/ws_session.h	/^    std::string& getData() { return m_data;}$/;"	f	class:sylar::http::WSFrameMessage	typeref:typename:std::string &	access:public	signature:()
getData	sylar/sylar/rock/rock_stream.h	/^    T getData() {$/;"	f	class:sylar::RockStream	typeref:typename:T	access:public	signature:()
getData	sylar/sylar/streams/async_socket_stream.h	/^    T getData() const {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:T	access:public	signature:() const
getData	sylar/sylar/streams/service_discovery.h	/^    const std::string& getData() const { return m_data;}$/;"	f	class:sylar::ServiceItemInfo	typeref:typename:const std::string &	access:public	signature:() const
getDataCount	sylar/sylar/db/db.h	/^    virtual int getDataCount() = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int	access:public	signature:()
getDataCount	sylar/sylar/db/mysql.cc	/^int MySQLRes::getDataCount() {$/;"	f	class:sylar::MySQLRes	typeref:typename:int	signature:()
getDataCount	sylar/sylar/db/mysql.cc	/^int MySQLStmtRes::getDataCount() {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int	signature:()
getDataCount	sylar/sylar/db/mysql.h	/^    int getDataCount() override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int	access:public	signature:()
getDataCount	sylar/sylar/db/mysql.h	/^    int getDataCount() override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int	access:public	signature:()
getDataCount	sylar/sylar/db/sqlite3.cc	/^int SQLite3Data::getDataCount() {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int	signature:()
getDataCount	sylar/sylar/db/sqlite3.h	/^    int getDataCount() override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:int	access:public	signature:()
getDataSize	sylar/sylar/ds/bitmap.h	/^    uint32_t getDataSize() const { return m_dataSize;}$/;"	f	class:sylar::ds::Bitmap	typeref:typename:uint32_t	access:public	signature:() const
getDebugInfo	sylar/sylar/email/smtp.cc	/^std::string SmtpClient::getDebugInfo() {$/;"	f	class:sylar::SmtpClient	typeref:typename:std::string	signature:()
getDebugInfo	sylar/sylar/email/smtp.h	/^    std::string getDebugInfo();$/;"	p	class:sylar::SmtpClient	typeref:typename:std::string	access:public	signature:()
getDefault	sylar/sylar/http/servlet.h	/^    Servlet::ptr getDefault() const { return m_default;}$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	access:public	signature:() const
getDefault	sylar/sylar/orm/column.h	/^    const std::string& getDefault() const { return m_default;}$/;"	f	class:sylar::orm::Column	typeref:typename:const std::string &	access:public	signature:() const
getDefaultValueString	sylar/sylar/orm/column.cc	/^std::string Column::getDefaultValueString() {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:()
getDefaultValueString	sylar/sylar/orm/column.h	/^    std::string getDefaultValueString();$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
getDel	sylar/sylar/ds/cache_status.h	/^    int64_t getDel() const { return m_del;}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:() const
getDesc	sylar/sylar/orm/column.h	/^    const std::string& getDesc() const { return m_desc;}$/;"	f	class:sylar::orm::Column	typeref:typename:const std::string &	access:public	signature:() const
getDesc	sylar/sylar/orm/index.h	/^    const std::string& getDesc() const { return m_desc;}$/;"	f	class:sylar::orm::Index	typeref:typename:const std::string &	access:public	signature:() const
getDesc	sylar/sylar/orm/table.h	/^    const std::string& getDesc() const { return m_desc;}$/;"	f	class:sylar::orm::Table	typeref:typename:const std::string &	access:public	signature:() const
getDescription	sylar/sylar/config.h	/^    const std::string& getDescription() const { return m_description;}$/;"	f	class:sylar::ConfigVarBase	typeref:typename:const std::string &	access:public	signature:() const
getDisconnectCb	sylar/sylar/streams/async_socket_stream.h	/^    disconnect_callback getDisconnectCb() const { return m_disconnectCb;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:disconnect_callback	access:public	signature:() const
getDisconnectCb	sylar/sylar/streams/async_socket_stream.h	/^    disconnect_callback getDisconnectCb() const { return m_disconnectCb;}$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:disconnect_callback	access:public	signature:() const
getDoing	sylar/sylar/streams/load_balance.h	/^    uint32_t getDoing() const { return m_doing; }$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:() const
getDomain	sylar/sylar/ns/ns_protocol.h	/^    const std::string& getDomain() const { return m_domain;}$/;"	f	class:sylar::ns::NSDomain	typeref:typename:const std::string &	access:public	signature:() const
getDomains	sylar/sylar/ns/ns_client.h	/^    NSDomainSet::ptr getDomains() const { return m_domains;}$/;"	f	class:sylar::ns::NSClient	typeref:typename:NSDomainSet::ptr	access:public	signature:() const
getDouble	sylar/sylar/db/db.h	/^    virtual double getDouble(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:double	access:public	signature:(int idx)
getDouble	sylar/sylar/db/mysql.cc	/^double MySQLRes::getDouble(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:double	signature:(int idx)
getDouble	sylar/sylar/db/mysql.cc	/^double MySQLStmtRes::getDouble(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:double	signature:(int idx)
getDouble	sylar/sylar/db/mysql.h	/^    double getDouble(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:double	access:public	signature:(int idx)
getDouble	sylar/sylar/db/mysql.h	/^    double getDouble(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:double	access:public	signature:(int idx)
getDouble	sylar/sylar/db/sqlite3.cc	/^double SQLite3Data::getDouble(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:double	signature:(int idx)
getDouble	sylar/sylar/db/sqlite3.h	/^    double getDouble(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:double	access:public	signature:(int idx)
getElapse	sylar/sylar/log.h	/^    uint32_t getElapse() const { return m_elapse;}$/;"	f	class:sylar::LogEvent	typeref:typename:uint32_t	access:public	signature:() const
getElasticity	sylar/sylar/ds/lru_cache.h	/^    size_t getElasticity() const { return m_elasticity;}$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:public	signature:() const
getElasticity	sylar/sylar/ds/lru_cache.h	/^    size_t getElasticity() const { return m_elasticity;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:size_t	access:public	signature:() const
getElasticity	sylar/sylar/ds/timed_cache.h	/^    size_t getElasticity() const { return m_elasticity;}$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:public	signature:() const
getElasticity	sylar/sylar/ds/timed_cache.h	/^    size_t getElasticity() const { return m_elasticity;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:public	signature:() const
getElasticity	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getElasticity() const { return m_elasticity;}$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:public	signature:() const
getElasticity	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getElasticity() const { return m_elasticity;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:public	signature:() const
getElements	sylar/sylar/ds/hash_multimap.h	/^    uint64_t getElements() const { return m_elements;}$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:uint64_t	access:public	signature:() const
getEntitys	sylar/sylar/email/email.h	/^    const std::vector<EMailEntity::ptr>& getEntitys() const { return m_entitys;}$/;"	f	class:sylar::EMail	typeref:typename:const std::vector<EMailEntity::ptr> &	access:public	signature:() const
getEnv	sylar/sylar/env.cc	/^std::string Env::getEnv(const std::string& key, const std::string& default_value) {$/;"	f	class:sylar::Env	typeref:typename:std::string	signature:(const std::string & key,const std::string & default_value)
getEnv	sylar/sylar/env.h	/^    std::string getEnv(const std::string& key, const std::string& default_value = "");$/;"	p	class:sylar::Env	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & default_value="")
getErrStr	sylar/sylar/db/db.h	/^    virtual const std::string& getErrStr() const = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:const std::string &	access:public	signature:() const
getErrStr	sylar/sylar/db/db.h	/^    virtual std::string getErrStr() = 0;$/;"	p	class:sylar::IDB	typeref:typename:std::string	access:public	signature:()
getErrStr	sylar/sylar/db/db.h	/^    virtual std::string getErrStr() = 0;$/;"	p	class:sylar::IStmt	typeref:typename:std::string	access:public	signature:()
getErrStr	sylar/sylar/db/mysql.cc	/^std::string MySQL::getErrStr() {$/;"	f	class:sylar::MySQL	typeref:typename:std::string	signature:()
getErrStr	sylar/sylar/db/mysql.cc	/^std::string MySQLStmt::getErrStr() {$/;"	f	class:sylar::MySQLStmt	typeref:typename:std::string	signature:()
getErrStr	sylar/sylar/db/mysql.h	/^    const std::string& getErrStr() const { return m_errstr;}$/;"	f	class:sylar::MySQLRes	typeref:typename:const std::string &	access:public	signature:() const
getErrStr	sylar/sylar/db/mysql.h	/^    const std::string& getErrStr() const { return m_errstr;}$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:const std::string &	access:public	signature:() const
getErrStr	sylar/sylar/db/mysql.h	/^    std::string getErrStr() override;$/;"	p	class:sylar::MySQL	typeref:typename:std::string	access:public	signature:()
getErrStr	sylar/sylar/db/mysql.h	/^    std::string getErrStr() override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:std::string	access:public	signature:()
getErrStr	sylar/sylar/db/sqlite3.cc	/^std::string SQLite3::getErrStr() {$/;"	f	class:sylar::SQLite3	typeref:typename:std::string	signature:()
getErrStr	sylar/sylar/db/sqlite3.cc	/^std::string SQLite3Stmt::getErrStr() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:std::string	signature:()
getErrStr	sylar/sylar/db/sqlite3.h	/^    const std::string& getErrStr() const override { return m_errstr;}$/;"	f	class:sylar::SQLite3Data	typeref:typename:const std::string &	access:public	signature:() const
getErrStr	sylar/sylar/db/sqlite3.h	/^    std::string getErrStr() override;$/;"	p	class:sylar::SQLite3	typeref:typename:std::string	access:public	signature:()
getErrStr	sylar/sylar/db/sqlite3.h	/^    std::string getErrStr() override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:std::string	access:public	signature:()
getErrno	sylar/sylar/db/db.h	/^    virtual int getErrno() = 0;$/;"	p	class:sylar::IDB	typeref:typename:int	access:public	signature:()
getErrno	sylar/sylar/db/db.h	/^    virtual int getErrno() = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:()
getErrno	sylar/sylar/db/db.h	/^    virtual int getErrno() const = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int	access:public	signature:() const
getErrno	sylar/sylar/db/mysql.cc	/^int MySQL::getErrno() {$/;"	f	class:sylar::MySQL	typeref:typename:int	signature:()
getErrno	sylar/sylar/db/mysql.cc	/^int MySQLStmt::getErrno() {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:()
getErrno	sylar/sylar/db/mysql.h	/^    int getErrno() const { return m_errno;}$/;"	f	class:sylar::MySQLRes	typeref:typename:int	access:public	signature:() const
getErrno	sylar/sylar/db/mysql.h	/^    int getErrno() const { return m_errno;}$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int	access:public	signature:() const
getErrno	sylar/sylar/db/mysql.h	/^    int getErrno() override;$/;"	p	class:sylar::MySQL	typeref:typename:int	access:public	signature:()
getErrno	sylar/sylar/db/mysql.h	/^    int getErrno() override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:()
getErrno	sylar/sylar/db/sqlite3.cc	/^int SQLite3::getErrno() {$/;"	f	class:sylar::SQLite3	typeref:typename:int	signature:()
getErrno	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::getErrno() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:()
getErrno	sylar/sylar/db/sqlite3.h	/^    int getErrno() const override { return m_errno;}$/;"	f	class:sylar::SQLite3Data	typeref:typename:int	access:public	signature:() const
getErrno	sylar/sylar/db/sqlite3.h	/^    int getErrno() override;$/;"	p	class:sylar::SQLite3	typeref:typename:int	access:public	signature:()
getErrno	sylar/sylar/db/sqlite3.h	/^    int getErrno() override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:()
getError	sylar/sylar/socket.cc	/^int Socket::getError() {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:()
getError	sylar/sylar/socket.h	/^    int getError();$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:()
getErrs	sylar/sylar/streams/load_balance.h	/^    uint32_t getErrs() const { return m_errs; }$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:() const
getEvent	sylar/sylar/log.h	/^    LogEvent::ptr getEvent() const { return m_event;}$/;"	f	class:sylar::LogEventWrap	typeref:typename:LogEvent::ptr	access:public	signature:() const
getExe	sylar/sylar/env.h	/^    const std::string& getExe() const { return m_exe;}$/;"	f	class:sylar::Env	typeref:typename:const std::string &	access:public	signature:() const
getFamily	sylar/sylar/address.cc	/^int Address::getFamily() const {$/;"	f	class:sylar::Address	typeref:typename:int	signature:() const
getFamily	sylar/sylar/address.h	/^    int getFamily() const;$/;"	p	class:sylar::Address	typeref:typename:int	access:public	signature:() const
getFamily	sylar/sylar/socket.h	/^    int getFamily() const { return m_family;}$/;"	f	class:sylar::Socket	typeref:typename:int	access:public	signature:() const
getFiberId	sylar/sylar/log.h	/^    uint32_t getFiberId() const { return m_fiberId;}$/;"	f	class:sylar::LogEvent	typeref:typename:uint32_t	access:public	signature:() const
getFile	sylar/sylar/log.h	/^    const char* getFile() const { return m_file;}$/;"	f	class:sylar::LogEvent	typeref:typename:const char *	access:public	signature:() const
getFilename	sylar/sylar/module.h	/^    const std::string& getFilename() const { return m_filename;}$/;"	f	class:sylar::Module	typeref:typename:const std::string &	access:public	signature:() const
getFilename	sylar/sylar/orm/table.cc	/^std::string Table::getFilename() const {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:() const
getFilename	sylar/sylar/orm/table.h	/^    std::string getFilename() const;$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:public	signature:() const
getFloat	sylar/sylar/db/db.h	/^    virtual float getFloat(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:float	access:public	signature:(int idx)
getFloat	sylar/sylar/db/mysql.cc	/^float MySQLRes::getFloat(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:float	signature:(int idx)
getFloat	sylar/sylar/db/mysql.cc	/^float MySQLStmtRes::getFloat(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:float	signature:(int idx)
getFloat	sylar/sylar/db/mysql.h	/^    float getFloat(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:float	access:public	signature:(int idx)
getFloat	sylar/sylar/db/mysql.h	/^    float getFloat(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:float	access:public	signature:(int idx)
getFloat	sylar/sylar/db/sqlite3.cc	/^float SQLite3Data::getFloat(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:float	signature:(int idx)
getFloat	sylar/sylar/db/sqlite3.h	/^    float getFloat(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:float	access:public	signature:(int idx)
getFormatter	sylar/sylar/log.cc	/^LogFormatter::ptr LogAppender::getFormatter() {$/;"	f	class:sylar::LogAppender	typeref:typename:LogFormatter::ptr	signature:()
getFormatter	sylar/sylar/log.cc	/^LogFormatter::ptr Logger::getFormatter() {$/;"	f	class:sylar::Logger	typeref:typename:LogFormatter::ptr	signature:()
getFormatter	sylar/sylar/log.h	/^    LogFormatter::ptr getFormatter();$/;"	p	class:sylar::LogAppender	typeref:typename:LogFormatter::ptr	access:public	signature:()
getFormatter	sylar/sylar/log.h	/^    LogFormatter::ptr getFormatter();$/;"	p	class:sylar::Logger	typeref:typename:LogFormatter::ptr	access:public	signature:()
getFragment	sylar/sylar/uri.h	/^    const std::string& getFragment() const { return m_fragment;}$/;"	f	class:sylar::Uri	typeref:typename:const std::string &	access:public	signature:() const
getFromEMailAddress	sylar/sylar/email/email.h	/^    const std::string& getFromEMailAddress() const { return m_fromEMailAddress;}$/;"	f	class:sylar::EMail	typeref:typename:const std::string &	access:public	signature:() const
getFromEMailPasswd	sylar/sylar/email/email.h	/^    const std::string& getFromEMailPasswd() const { return m_fromEMailPasswd;}$/;"	f	class:sylar::EMail	typeref:typename:const std::string &	access:public	signature:() const
getGet	sylar/sylar/ds/cache_status.h	/^    int64_t getGet() const { return m_get;}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:() const
getGetFunDefine	sylar/sylar/orm/column.cc	/^std::string Column::getGetFunDefine() const {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:() const
getGetFunDefine	sylar/sylar/orm/column.h	/^    std::string getGetFunDefine() const;$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:() const
getGetString	sylar/sylar/orm/column.cc	/^std::string Column::getGetString() {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:()
getGetString	sylar/sylar/orm/column.h	/^    std::string getGetString();$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
getGlobServlet	sylar/sylar/http/servlet.cc	/^Servlet::ptr ServletDispatch::getGlobServlet(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	signature:(const std::string & uri)
getGlobServlet	sylar/sylar/http/servlet.h	/^    Servlet::ptr getGlobServlet(const std::string& uri);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	access:public	signature:(const std::string & uri)
getHeader	sylar/sylar/email/email.cc	/^std::string EMailEntity::getHeader(const std::string& key, const std::string& def) {$/;"	f	class:sylar::EMailEntity	typeref:typename:std::string	signature:(const std::string & key,const std::string & def)
getHeader	sylar/sylar/email/email.h	/^    std::string getHeader(const std::string& key, const std::string& def = "");$/;"	p	class:sylar::EMailEntity	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & def="")
getHeader	sylar/sylar/http/http.cc	/^std::string HttpRequest::getHeader(const std::string& key$/;"	f	class:sylar::http::HttpRequest	typeref:typename:std::string	signature:(const std::string & key,const std::string & def) const
getHeader	sylar/sylar/http/http.cc	/^std::string HttpResponse::getHeader(const std::string& key, const std::string& def) const {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:std::string	signature:(const std::string & key,const std::string & def) const
getHeader	sylar/sylar/http/http.h	/^    std::string getHeader(const std::string& key, const std::string& def = "") const;$/;"	p	class:sylar::http::HttpRequest	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & def="") const
getHeader	sylar/sylar/http/http.h	/^    std::string getHeader(const std::string& key, const std::string& def = "") const;$/;"	p	class:sylar::http::HttpResponse	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & def="") const
getHeaderAs	sylar/sylar/http/http.h	/^    T getHeaderAs(const std::string& key, const T& def = T()) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:T	access:public	signature:(const std::string & key,const T & def=T ())
getHeaderAs	sylar/sylar/http/http.h	/^    T getHeaderAs(const std::string& key, const T& def = T()) {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:T	access:public	signature:(const std::string & key,const T & def=T ())
getHeaders	sylar/sylar/http/http.h	/^    const MapType& getHeaders() const { return m_headers;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:const MapType &	access:public	signature:() const
getHeaders	sylar/sylar/http/http.h	/^    const MapType& getHeaders() const { return m_headers;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:const MapType &	access:public	signature:() const
getHit	sylar/sylar/ds/cache_status.h	/^    int64_t getHit() const { return m_hit;}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:() const
getHitRate	sylar/sylar/ds/cache_status.h	/^    double getHitRate() const {$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:double	access:public	signature:() const
getHost	sylar/sylar/uri.h	/^    const std::string& getHost() const { return m_host;}$/;"	f	class:sylar::Uri	typeref:typename:const std::string &	access:public	signature:() const
getIOManager	sylar/sylar/streams/async_socket_stream.h	/^    sylar::IOManager* getIOManager() const { return m_iomanager;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:sylar::IOManager *	access:public	signature:() const
getId	sylar/sylar/db/fox_thread.cc	/^std::thread::id FoxThread::getId() const {$/;"	f	class:sylar::FoxThread	typeref:typename:std::thread::id	signature:() const
getId	sylar/sylar/db/fox_thread.h	/^    std::thread::id getId() const;$/;"	p	class:sylar::FoxThread	typeref:typename:std::thread::id	access:public	signature:() const
getId	sylar/sylar/fiber.h	/^    uint64_t getId() const { return m_id;}$/;"	f	class:sylar::Fiber	typeref:typename:uint64_t	access:public	signature:() const
getId	sylar/sylar/http/session_data.h	/^    const std::string& getId() const { return m_id;}$/;"	f	class:sylar::http::SessionData	typeref:typename:const std::string &	access:public	signature:() const
getId	sylar/sylar/module.h	/^    const std::string& getId() const { return m_id;}$/;"	f	class:sylar::Module	typeref:typename:const std::string &	access:public	signature:() const
getId	sylar/sylar/ns/ns_protocol.h	/^    uint64_t getId() const { return m_id;}$/;"	f	class:sylar::ns::NSNode	typeref:typename:uint64_t	access:public	signature:() const
getId	sylar/sylar/streams/load_balance.h	/^    uint64_t getId() const { return m_id;}$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:uint64_t	access:public	signature:() const
getId	sylar/sylar/streams/service_discovery.h	/^    uint64_t getId() const { return m_id;}$/;"	f	class:sylar::ServiceItemInfo	typeref:typename:uint64_t	access:public	signature:() const
getId	sylar/sylar/thread.h	/^    pid_t getId() const { return m_id;}$/;"	f	class:sylar::Thread	typeref:typename:pid_t	access:public	signature:() const
getIdx	sylar/sylar/streams/load_balance.cc	/^int32_t WeightLoadBalance::getIdx(uint64_t v) {$/;"	f	class:sylar::WeightLoadBalance	typeref:typename:int32_t	signature:(uint64_t v)
getIdx	sylar/sylar/streams/load_balance.h	/^    int32_t getIdx(uint64_t v = -1);$/;"	p	class:sylar::WeightLoadBalance	typeref:typename:int32_t	access:private	signature:(uint64_t v=-1)
getIdxs	sylar/sylar/orm/table.h	/^    const std::vector<Index::ptr>& getIdxs() const { return  m_idxs;}$/;"	f	class:sylar::orm::Table	typeref:typename:const std::vector<Index::ptr> &	access:public	signature:() const
getIndex	sylar/sylar/ds/util.cc	/^uint32_t PrimeGenerator::getIndex() const {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	signature:() const
getIndex	sylar/sylar/ds/util.h	/^    uint32_t getIndex() const;$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	access:public	signature:() const
getIndex	sylar/sylar/orm/column.h	/^    int getIndex() const { return m_index;}$/;"	f	class:sylar::orm::Column	typeref:typename:int	access:public	signature:() const
getInsertId	sylar/sylar/db/mysql.cc	/^uint64_t MySQL::getInsertId() {$/;"	f	class:sylar::MySQL	typeref:typename:uint64_t	signature:()
getInsertId	sylar/sylar/db/mysql.h	/^    uint64_t getInsertId();$/;"	p	class:sylar::MySQL	typeref:typename:uint64_t	access:public	signature:()
getInt16	sylar/sylar/db/db.h	/^    virtual int16_t getInt16(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int16_t	access:public	signature:(int idx)
getInt16	sylar/sylar/db/mysql.cc	/^int16_t MySQLRes::getInt16(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:int16_t	signature:(int idx)
getInt16	sylar/sylar/db/mysql.cc	/^int16_t MySQLStmtRes::getInt16(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int16_t	signature:(int idx)
getInt16	sylar/sylar/db/mysql.h	/^    int16_t getInt16(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int16_t	access:public	signature:(int idx)
getInt16	sylar/sylar/db/mysql.h	/^    int16_t getInt16(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int16_t	access:public	signature:(int idx)
getInt16	sylar/sylar/db/sqlite3.cc	/^int16_t SQLite3Data::getInt16(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int16_t	signature:(int idx)
getInt16	sylar/sylar/db/sqlite3.h	/^    int16_t getInt16(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:int16_t	access:public	signature:(int idx)
getInt32	sylar/sylar/db/db.h	/^    virtual int32_t getInt32(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int32_t	access:public	signature:(int idx)
getInt32	sylar/sylar/db/mysql.cc	/^int32_t MySQLRes::getInt32(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:int32_t	signature:(int idx)
getInt32	sylar/sylar/db/mysql.cc	/^int32_t MySQLStmtRes::getInt32(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int32_t	signature:(int idx)
getInt32	sylar/sylar/db/mysql.h	/^    int32_t getInt32(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int32_t	access:public	signature:(int idx)
getInt32	sylar/sylar/db/mysql.h	/^    int32_t getInt32(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int32_t	access:public	signature:(int idx)
getInt32	sylar/sylar/db/sqlite3.cc	/^int32_t SQLite3Data::getInt32(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int32_t	signature:(int idx)
getInt32	sylar/sylar/db/sqlite3.h	/^    int32_t getInt32(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:int32_t	access:public	signature:(int idx)
getInt64	sylar/sylar/db/db.h	/^    virtual int64_t getInt64(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int64_t	access:public	signature:(int idx)
getInt64	sylar/sylar/db/mysql.cc	/^int64_t MySQLRes::getInt64(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:int64_t	signature:(int idx)
getInt64	sylar/sylar/db/mysql.cc	/^int64_t MySQLStmtRes::getInt64(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int64_t	signature:(int idx)
getInt64	sylar/sylar/db/mysql.h	/^    int64_t getInt64(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int64_t	access:public	signature:(int idx)
getInt64	sylar/sylar/db/mysql.h	/^    int64_t getInt64(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int64_t	access:public	signature:(int idx)
getInt64	sylar/sylar/db/sqlite3.cc	/^int64_t SQLite3Data::getInt64(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int64_t	signature:(int idx)
getInt64	sylar/sylar/db/sqlite3.h	/^    int64_t getInt64(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:int64_t	access:public	signature:(int idx)
getInt8	sylar/sylar/db/db.h	/^    virtual int8_t getInt8(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int8_t	access:public	signature:(int idx)
getInt8	sylar/sylar/db/mysql.cc	/^int8_t MySQLRes::getInt8(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:int8_t	signature:(int idx)
getInt8	sylar/sylar/db/mysql.cc	/^int8_t MySQLStmtRes::getInt8(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int8_t	signature:(int idx)
getInt8	sylar/sylar/db/mysql.h	/^    int8_t getInt8(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int8_t	access:public	signature:(int idx)
getInt8	sylar/sylar/db/mysql.h	/^    int8_t getInt8(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int8_t	access:public	signature:(int idx)
getInt8	sylar/sylar/db/sqlite3.cc	/^int8_t SQLite3Data::getInt8(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int8_t	signature:(int idx)
getInt8	sylar/sylar/db/sqlite3.h	/^    int8_t getInt8(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:int8_t	access:public	signature:(int idx)
getIp	sylar/sylar/ns/ns_protocol.h	/^    const std::string& getIp() const { return m_ip;}$/;"	f	class:sylar::ns::NSNode	typeref:typename:const std::string &	access:public	signature:() const
getIp	sylar/sylar/streams/service_discovery.h	/^    const std::string& getIp() const { return m_ip;}$/;"	f	class:sylar::ServiceItemInfo	typeref:typename:const std::string &	access:public	signature:() const
getLastAccessTime	sylar/sylar/http/session_data.h	/^    uint64_t getLastAccessTime() const { return m_lastAccessTime;}$/;"	f	class:sylar::http::SessionData	typeref:typename:uint64_t	access:public	signature:() const
getLastActiveTime	sylar/sylar/db/redis.h	/^    uint64_t getLastActiveTime() const { return m_lastActiveTime;}$/;"	f	class:sylar::ISyncRedis	typeref:typename:uint64_t	access:public	signature:() const
getLastInsertId	sylar/sylar/db/db.h	/^    virtual int64_t getLastInsertId() = 0;$/;"	p	class:sylar::ISQLUpdate	typeref:typename:int64_t	access:public	signature:()
getLastInsertId	sylar/sylar/db/db.h	/^    virtual int64_t getLastInsertId() = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int64_t	access:public	signature:()
getLastInsertId	sylar/sylar/db/mysql.cc	/^int64_t MySQL::getLastInsertId() {$/;"	f	class:sylar::MySQL	typeref:typename:int64_t	signature:()
getLastInsertId	sylar/sylar/db/mysql.cc	/^int64_t MySQLStmt::getLastInsertId() {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int64_t	signature:()
getLastInsertId	sylar/sylar/db/mysql.cc	/^int64_t MySQLTransaction::getLastInsertId() {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:int64_t	signature:()
getLastInsertId	sylar/sylar/db/mysql.h	/^    int64_t getLastInsertId() override;$/;"	p	class:sylar::MySQL	typeref:typename:int64_t	access:public	signature:()
getLastInsertId	sylar/sylar/db/mysql.h	/^    int64_t getLastInsertId() override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int64_t	access:public	signature:()
getLastInsertId	sylar/sylar/db/mysql.h	/^    int64_t getLastInsertId() override;$/;"	p	class:sylar::MySQLTransaction	typeref:typename:int64_t	access:public	signature:()
getLastInsertId	sylar/sylar/db/sqlite3.cc	/^int64_t SQLite3::getLastInsertId() {$/;"	f	class:sylar::SQLite3	typeref:typename:int64_t	signature:()
getLastInsertId	sylar/sylar/db/sqlite3.cc	/^int64_t SQLite3Stmt::getLastInsertId() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int64_t	signature:()
getLastInsertId	sylar/sylar/db/sqlite3.cc	/^int64_t SQLite3Transaction::getLastInsertId() {$/;"	f	class:sylar::SQLite3Transaction	typeref:typename:int64_t	signature:()
getLastInsertId	sylar/sylar/db/sqlite3.h	/^    int64_t getLastInsertId() override;$/;"	p	class:sylar::SQLite3	typeref:typename:int64_t	access:public	signature:()
getLastInsertId	sylar/sylar/db/sqlite3.h	/^    int64_t getLastInsertId() override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int64_t	access:public	signature:()
getLastInsertId	sylar/sylar/db/sqlite3.h	/^    int64_t getLastInsertId() override;$/;"	p	class:sylar::SQLite3Transaction	typeref:typename:int64_t	access:public	signature:()
getLevel	sylar/sylar/log.h	/^    LogLevel::Level getLevel() const { return m_level;}$/;"	f	class:sylar::LogAppender	typeref:typename:LogLevel::Level	access:public	signature:() const
getLevel	sylar/sylar/log.h	/^    LogLevel::Level getLevel() const { return m_level;}$/;"	f	class:sylar::LogEvent	typeref:typename:LogLevel::Level	access:public	signature:() const
getLevel	sylar/sylar/log.h	/^    LogLevel::Level getLevel() const { return m_level;}$/;"	f	class:sylar::Logger	typeref:typename:LogLevel::Level	access:public	signature:() const
getLine	sylar/sylar/log.h	/^    int32_t getLine() const { return m_line;}$/;"	f	class:sylar::LogEvent	typeref:typename:int32_t	access:public	signature:() const
getListener	sylar/sylar/config.h	/^    on_change_cb getListener(uint64_t key) {$/;"	f	class:sylar::ConfigVar	typeref:typename:on_change_cb	access:public	signature:(uint64_t key)
getLocalAddress	sylar/sylar/socket.cc	/^Address::ptr Socket::getLocalAddress() {$/;"	f	class:sylar::Socket	typeref:typename:Address::ptr	signature:()
getLocalAddress	sylar/sylar/socket.h	/^    Address::ptr getLocalAddress();$/;"	p	class:sylar::Socket	typeref:typename:Address::ptr	access:public	signature:()
getLocalAddress	sylar/sylar/streams/socket_stream.cc	/^Address::ptr SocketStream::getLocalAddress() {$/;"	f	class:sylar::SocketStream	typeref:typename:Address::ptr	signature:()
getLocalAddress	sylar/sylar/streams/socket_stream.h	/^    Address::ptr getLocalAddress();$/;"	p	class:sylar::SocketStream	typeref:typename:Address::ptr	access:public	signature:()
getLocalAddressString	sylar/sylar/streams/socket_stream.cc	/^std::string SocketStream::getLocalAddressString() {$/;"	f	class:sylar::SocketStream	typeref:typename:std::string	signature:()
getLocalAddressString	sylar/sylar/streams/socket_stream.h	/^    std::string getLocalAddressString();$/;"	p	class:sylar::SocketStream	typeref:typename:std::string	access:public	signature:()
getLogger	sylar/sylar/log.cc	/^Logger::ptr LoggerManager::getLogger(const std::string& name) {$/;"	f	class:sylar::LoggerManager	typeref:typename:Logger::ptr	signature:(const std::string & name)
getLogger	sylar/sylar/log.h	/^    Logger::ptr getLogger(const std::string& name);$/;"	p	class:sylar::LoggerManager	typeref:typename:Logger::ptr	access:public	signature:(const std::string & name)
getLogger	sylar/sylar/log.h	/^    std::shared_ptr<Logger> getLogger() const { return m_logger;}$/;"	f	class:sylar::LogEvent	typeref:typename:std::shared_ptr<Logger>	access:public	signature:() const
getMatchedServlet	sylar/sylar/http/servlet.cc	/^Servlet::ptr ServletDispatch::getMatchedServlet(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	signature:(const std::string & uri)
getMatchedServlet	sylar/sylar/http/servlet.h	/^    Servlet::ptr getMatchedServlet(const std::string& uri);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	access:public	signature:(const std::string & uri)
getMaxAllowedSize	sylar/sylar/ds/lru_cache.h	/^    size_t getMaxAllowedSize() const { return m_maxSize + m_elasticity;}$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:public	signature:() const
getMaxAllowedSize	sylar/sylar/ds/lru_cache.h	/^    size_t getMaxAllowedSize() const { return m_maxSize + m_elasticity;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:size_t	access:public	signature:() const
getMaxAllowedSize	sylar/sylar/ds/timed_cache.h	/^    size_t getMaxAllowedSize() const { return m_maxSize + m_elasticity;}$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:public	signature:() const
getMaxAllowedSize	sylar/sylar/ds/timed_cache.h	/^    size_t getMaxAllowedSize() const { return m_maxSize + m_elasticity;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:public	signature:() const
getMaxAllowedSize	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getMaxAllowedSize() const { return m_maxSize + m_elasticity;}$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:public	signature:() const
getMaxAllowedSize	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getMaxAllowedSize() const { return m_maxSize + m_elasticity;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:public	signature:() const
getMaxConn	sylar/sylar/db/mysql.h	/^    uint32_t getMaxConn() const { return m_maxConn;}$/;"	f	class:sylar::MySQLManager	typeref:typename:uint32_t	access:public	signature:() const
getMaxConn	sylar/sylar/db/sqlite3.h	/^    uint32_t getMaxConn() const { return m_maxConn;}$/;"	f	class:sylar::SQLite3Manager	typeref:typename:uint32_t	access:public	signature:() const
getMaxSize	sylar/sylar/ds/lru_cache.h	/^    size_t getMaxSize() const { return m_maxSize;}$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:public	signature:() const
getMaxSize	sylar/sylar/ds/lru_cache.h	/^    size_t getMaxSize() const { return m_maxSize;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:size_t	access:public	signature:() const
getMaxSize	sylar/sylar/ds/timed_cache.h	/^    size_t getMaxSize() const { return m_maxSize;}$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:public	signature:() const
getMaxSize	sylar/sylar/ds/timed_cache.h	/^    size_t getMaxSize() const { return m_maxSize;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:public	signature:() const
getMaxSize	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getMaxSize() const { return m_maxSize;}$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:public	signature:() const
getMaxSize	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getMaxSize() const { return m_maxSize;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:public	signature:() const
getMemberDefine	sylar/sylar/orm/column.cc	/^std::string Column::getMemberDefine() const {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:() const
getMemberDefine	sylar/sylar/orm/column.h	/^    std::string getMemberDefine() const;$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:() const
getMethod	sylar/sylar/http/http.h	/^    HttpMethod getMethod() const { return m_method;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:HttpMethod	access:public	signature:() const
getMySQL	sylar/sylar/db/mysql.cc	/^std::shared_ptr<MySQL> MySQL::getMySQL() {$/;"	f	class:sylar::MySQL	typeref:typename:std::shared_ptr<MySQL>	signature:()
getMySQL	sylar/sylar/db/mysql.cc	/^std::shared_ptr<MySQL> MySQLTransaction::getMySQL() {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:std::shared_ptr<MySQL>	signature:()
getMySQL	sylar/sylar/db/mysql.h	/^    std::shared_ptr<MySQL> getMySQL();$/;"	p	class:sylar::MySQL	typeref:typename:std::shared_ptr<MySQL>	access:public	signature:()
getMySQL	sylar/sylar/db/mysql.h	/^    std::shared_ptr<MySQL> getMySQL();$/;"	p	class:sylar::MySQLTransaction	typeref:typename:std::shared_ptr<MySQL>	access:public	signature:()
getMySQLTypeString	sylar/sylar/orm/column.cc	/^std::string Column::getMySQLTypeString() {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:()
getMySQLTypeString	sylar/sylar/orm/column.h	/^    std::string getMySQLTypeString();$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
getName	sylar/sylar/config.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::ConfigVarBase	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/db/redis.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::IRedis	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/http/servlet.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::http::Servlet	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/http/servlet.h	/^    std::string getName() const override {$/;"	f	class:sylar::http::HoldServletCreator	typeref:typename:std::string	access:public	signature:() const
getName	sylar/sylar/http/servlet.h	/^    std::string getName() const override {$/;"	f	class:sylar::http::ServletCreator	typeref:typename:std::string	access:public	signature:() const
getName	sylar/sylar/http/servlet.h	/^    virtual std::string getName() const = 0;$/;"	p	class:sylar::http::IServletCreator	typeref:typename:std::string	access:public	signature:() const
getName	sylar/sylar/http/ws_servlet.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::http::WSServlet	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/log.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::Logger	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/module.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::Module	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/orm/column.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::orm::Column	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/orm/index.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::orm::Index	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/orm/table.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::orm::Table	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/protocol.h	/^    virtual const std::string& getName() const = 0;$/;"	p	class:sylar::Message	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/rock/rock_protocol.cc	/^const std::string& RockNotify::getName() const {$/;"	f	class:sylar::RockNotify	typeref:typename:const std::string &	signature:() const
getName	sylar/sylar/rock/rock_protocol.cc	/^const std::string& RockRequest::getName() const {$/;"	f	class:sylar::RockRequest	typeref:typename:const std::string &	signature:() const
getName	sylar/sylar/rock/rock_protocol.cc	/^const std::string& RockResponse::getName() const {$/;"	f	class:sylar::RockResponse	typeref:typename:const std::string &	signature:() const
getName	sylar/sylar/rock/rock_protocol.h	/^    virtual const std::string& getName() const override;$/;"	p	class:sylar::RockNotify	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/rock/rock_protocol.h	/^    virtual const std::string& getName() const override;$/;"	p	class:sylar::RockRequest	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/rock/rock_protocol.h	/^    virtual const std::string& getName() const override;$/;"	p	class:sylar::RockResponse	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/scheduler.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::Scheduler	typeref:typename:const std::string &	access:public	signature:() const
getName	sylar/sylar/tcp_server.h	/^    std::string getName() const { return m_name;}$/;"	f	class:sylar::TcpServer	typeref:typename:std::string	access:public	signature:() const
getName	sylar/sylar/thread.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::Thread	typeref:typename:const std::string &	access:public	signature:() const
getNamespace	sylar/sylar/orm/table.h	/^    const std::string& getNamespace() const { return m_namespace;}$/;"	f	class:sylar::orm::Table	typeref:typename:const std::string &	access:public	signature:() const
getNextTimer	sylar/sylar/timer.cc	/^uint64_t TimerManager::getNextTimer() {$/;"	f	class:sylar::TimerManager	typeref:typename:uint64_t	signature:()
getNextTimer	sylar/sylar/timer.h	/^    uint64_t getNextTimer();$/;"	p	class:sylar::TimerManager	typeref:typename:uint64_t	access:public	signature:()
getNotify	sylar/sylar/protocol.h	/^    uint32_t getNotify() const { return m_notify;}$/;"	f	class:sylar::Notify	typeref:typename:uint32_t	access:public	signature:() const
getNotifyHandler	sylar/sylar/rock/rock_stream.h	/^    notify_handler getNotifyHandler() const { return m_notifyHandler;}$/;"	f	class:sylar::RockStream	typeref:typename:notify_handler	access:public	signature:() const
getOks	sylar/sylar/streams/load_balance.h	/^    uint32_t getOks() const { return m_oks; }$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:() const
getOpcode	sylar/sylar/http/ws_session.h	/^    int getOpcode() const { return m_opcode;}$/;"	f	class:sylar::http::WSFrameMessage	typeref:typename:int	access:public	signature:() const
getOption	sylar/sylar/socket.cc	/^bool Socket::getOption(int level, int option, void* result, socklen_t* len) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(int level,int option,void * result,socklen_t * len)
getOption	sylar/sylar/socket.h	/^    bool getOption(int level, int option, T& result) {$/;"	f	class:sylar::Socket	typeref:typename:bool	access:public	signature:(int level,int option,T & result)
getOption	sylar/sylar/socket.h	/^    bool getOption(int level, int option, void* result, socklen_t* len);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:(int level,int option,void * result,socklen_t * len)
getPKs	sylar/sylar/orm/table.cc	/^std::vector<Column::ptr> Table::getPKs() const {$/;"	f	class:sylar::orm::Table	typeref:typename:std::vector<Column::ptr>	signature:() const
getPKs	sylar/sylar/orm/table.h	/^    std::vector<Column::ptr> getPKs() const;$/;"	p	class:sylar::orm::Table	typeref:typename:std::vector<Column::ptr>	access:private	signature:() const
getParam	sylar/sylar/http/http.cc	/^std::string HttpRequest::getParam(const std::string& key$/;"	f	class:sylar::http::HttpRequest	typeref:typename:std::string	signature:(const std::string & key,const std::string & def)
getParam	sylar/sylar/http/http.h	/^    std::string getParam(const std::string& key, const std::string& def = "");$/;"	p	class:sylar::http::HttpRequest	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & def="")
getParamAs	sylar/sylar/http/http.h	/^    T getParamAs(const std::string& key, const T& def = T()) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:T	access:public	signature:(const std::string & key,const T & def=T ())
getParams	sylar/sylar/http/http.h	/^    const MapType& getParams() const { return m_params;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:const MapType &	access:public	signature:() const
getParser	sylar/sylar/http/http_parser.h	/^    const http_parser& getParser() const { return m_parser;}$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:const http_parser &	access:public	signature:() const
getParser	sylar/sylar/http/http_parser.h	/^    const httpclient_parser& getParser() const { return m_parser;}$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:const httpclient_parser &	access:public	signature:() const
getPasswd	sylar/sylar/db/redis.h	/^    const std::string& getPasswd() const { return m_passwd;}$/;"	f	class:sylar::IRedis	typeref:typename:const std::string &	access:public	signature:() const
getPath	sylar/sylar/address.cc	/^std::string UnixAddress::getPath() const {$/;"	f	class:sylar::UnixAddress	typeref:typename:std::string	signature:() const
getPath	sylar/sylar/address.h	/^    std::string getPath() const;$/;"	p	class:sylar::UnixAddress	typeref:typename:std::string	access:public	signature:() const
getPath	sylar/sylar/http/http.h	/^    const std::string& getPath() const { return m_path;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:const std::string &	access:public	signature:() const
getPath	sylar/sylar/uri.h	/^    const std::string& getPath() const;$/;"	p	class:sylar::Uri	typeref:typename:const std::string &	access:public	signature:() const
getPath	sylar/sylar/uri.rl.cc	/^const std::string& Uri::getPath() const {$/;"	f	class:sylar::Uri	typeref:typename:const std::string &	signature:() const
getPattern	sylar/sylar/log.h	/^    const std::string getPattern() const { return m_pattern;}$/;"	f	class:sylar::LogFormatter	typeref:typename:const std::string	access:public	signature:() const
getPort	sylar/sylar/address.cc	/^uint32_t IPv4Address::getPort() const {$/;"	f	class:sylar::IPv4Address	typeref:typename:uint32_t	signature:() const
getPort	sylar/sylar/address.cc	/^uint32_t IPv6Address::getPort() const {$/;"	f	class:sylar::IPv6Address	typeref:typename:uint32_t	signature:() const
getPort	sylar/sylar/address.h	/^    uint32_t getPort() const override;$/;"	p	class:sylar::IPv4Address	typeref:typename:uint32_t	access:public	signature:() const
getPort	sylar/sylar/address.h	/^    uint32_t getPort() const override;$/;"	p	class:sylar::IPv6Address	typeref:typename:uint32_t	access:public	signature:() const
getPort	sylar/sylar/address.h	/^    virtual uint32_t getPort() const = 0;$/;"	p	class:sylar::IPAddress	typeref:typename:uint32_t	access:public	signature:() const
getPort	sylar/sylar/ns/ns_protocol.h	/^    uint16_t getPort() const { return m_port;}$/;"	f	class:sylar::ns::NSNode	typeref:typename:uint16_t	access:public	signature:() const
getPort	sylar/sylar/streams/service_discovery.h	/^    uint16_t getPort() const { return m_port;}$/;"	f	class:sylar::ServiceItemInfo	typeref:typename:uint16_t	access:public	signature:() const
getPort	sylar/sylar/uri.h	/^    int32_t getPort() const;$/;"	p	class:sylar::Uri	typeref:typename:int32_t	access:public	signature:() const
getPort	sylar/sylar/uri.rl.cc	/^int32_t Uri::getPort() const {$/;"	f	class:sylar::Uri	typeref:typename:int32_t	signature:() const
getPosition	sylar/sylar/bytearray.h	/^    size_t getPosition() const { return m_position;}$/;"	f	class:sylar::ByteArray	typeref:typename:size_t	access:public	signature:() const
getPriRSASize	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::getPriRSASize() {$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:()
getPriRSASize	sylar/sylar/util/crypto_util.h	/^    int32_t getPriRSASize();$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:()
getPrikeyStr	sylar/sylar/util/crypto_util.h	/^    const std::string& getPrikeyStr() const { return m_prikeyStr;}$/;"	f	class:sylar::RSACipher	typeref:typename:const std::string &	access:public	signature:() const
getProtocol	sylar/sylar/socket.h	/^    int getProtocol() const { return m_protocol;}$/;"	f	class:sylar::Socket	typeref:typename:int	access:public	signature:() const
getPrune	sylar/sylar/ds/cache_status.h	/^    int64_t getPrune() const { return m_prune;}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:() const
getPubRSASize	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::getPubRSASize() {$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:()
getPubRSASize	sylar/sylar/util/crypto_util.h	/^    int32_t getPubRSASize();$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:()
getPubkeyStr	sylar/sylar/util/crypto_util.h	/^    const std::string& getPubkeyStr() const { return m_pubkeyStr;}$/;"	f	class:sylar::RSACipher	typeref:typename:const std::string &	access:public	signature:() const
getQuery	sylar/sylar/http/http.h	/^    const std::string& getQuery() const { return m_query;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:const std::string &	access:public	signature:() const
getQuery	sylar/sylar/uri.h	/^    const std::string& getQuery() const { return m_query;}$/;"	f	class:sylar::Uri	typeref:typename:const std::string &	access:public	signature:() const
getQueryDomains	sylar/sylar/ns/ns_client.cc	/^const std::set<std::string>& NSClient::getQueryDomains() {$/;"	f	class:sylar::ns::NSClient	typeref:typename:const std::set<std::string> &	signature:()
getQueryDomains	sylar/sylar/ns/ns_client.h	/^    const std::set<std::string>& getQueryDomains();$/;"	p	class:sylar::ns::NSClient	typeref:typename:const std::set<std::string> &	access:public	signature:()
getRandFoxThread	sylar/sylar/db/fox_thread.cc	/^FoxThread* FoxThreadPool::getRandFoxThread() {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:FoxThread *	signature:()
getRandFoxThread	sylar/sylar/db/fox_thread.h	/^    FoxThread* getRandFoxThread();$/;"	p	class:sylar::FoxThreadPool	typeref:typename:FoxThread *	access:public	signature:()
getRate	sylar/sylar/ds/dict.h	/^    float getRate() const {$/;"	f	class:sylar::ds::Dict	typeref:typename:float	access:private	signature:() const
getRate	sylar/sylar/ds/hash_map.h	/^    float getRate() const {$/;"	f	class:sylar::ds::HashMap	typeref:typename:float	access:private	signature:() const
getRate	sylar/sylar/ds/hash_multimap.h	/^    float getRate() const {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:float	access:private	signature:() const
getRaw	sylar/sylar/db/mysql.cc	/^std::shared_ptr<MYSQL> MySQL::getRaw() {$/;"	f	class:sylar::MySQL	typeref:typename:std::shared_ptr<MYSQL>	signature:()
getRaw	sylar/sylar/db/mysql.h	/^    MYSQL_STMT* getRaw() const { return m_stmt;}$/;"	f	class:sylar::MySQLStmt	typeref:typename:MYSQL_STMT *	access:public	signature:() const
getRaw	sylar/sylar/db/mysql.h	/^    std::shared_ptr<MYSQL> getRaw();$/;"	p	class:sylar::MySQL	typeref:typename:std::shared_ptr<MYSQL>	access:public	signature:()
getRaw	sylar/sylar/ds/dict.h	/^    SharedArray<char> getRaw(const uint64_t& id, bool duplicate = true) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:SharedArray<char>	access:public	signature:(const uint64_t & id,bool duplicate=true)
getReadBuffers	sylar/sylar/bytearray.cc	/^uint64_t ByteArray::getReadBuffers(std::vector<iovec>& buffers$/;"	f	class:sylar::ByteArray	typeref:typename:uint64_t	signature:(std::vector<iovec> & buffers,uint64_t len,uint64_t position) const
getReadBuffers	sylar/sylar/bytearray.cc	/^uint64_t ByteArray::getReadBuffers(std::vector<iovec>& buffers, uint64_t len) const {$/;"	f	class:sylar::ByteArray	typeref:typename:uint64_t	signature:(std::vector<iovec> & buffers,uint64_t len) const
getReadBuffers	sylar/sylar/bytearray.h	/^    uint64_t getReadBuffers(std::vector<iovec>& buffers, uint64_t len = ~0ull) const;$/;"	p	class:sylar::ByteArray	typeref:typename:uint64_t	access:public	signature:(std::vector<iovec> & buffers,uint64_t len=~0ull) const
getReadBuffers	sylar/sylar/bytearray.h	/^    uint64_t getReadBuffers(std::vector<iovec>& buffers, uint64_t len, uint64_t position) const;$/;"	p	class:sylar::ByteArray	typeref:typename:uint64_t	access:public	signature:(std::vector<iovec> & buffers,uint64_t len,uint64_t position) const
getReadSize	sylar/sylar/bytearray.h	/^    size_t getReadSize() const { return m_size - m_position;}$/;"	f	class:sylar::ByteArray	typeref:typename:size_t	access:public	signature:() const
getReason	sylar/sylar/http/http.h	/^    const std::string& getReason() const { return m_reason;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:const std::string &	access:public	signature:() const
getRecvTimeout	sylar/sylar/socket.cc	/^int64_t Socket::getRecvTimeout() {$/;"	f	class:sylar::Socket	typeref:typename:int64_t	signature:()
getRecvTimeout	sylar/sylar/socket.h	/^    int64_t getRecvTimeout();$/;"	p	class:sylar::Socket	typeref:typename:int64_t	access:public	signature:()
getRecvTimeout	sylar/sylar/tcp_server.h	/^    uint64_t getRecvTimeout() const { return m_recvTimeout;}$/;"	f	class:sylar::TcpServer	typeref:typename:uint64_t	access:public	signature:() const
getRemoteAddress	sylar/sylar/socket.cc	/^Address::ptr Socket::getRemoteAddress() {$/;"	f	class:sylar::Socket	typeref:typename:Address::ptr	signature:()
getRemoteAddress	sylar/sylar/socket.h	/^    Address::ptr getRemoteAddress();$/;"	p	class:sylar::Socket	typeref:typename:Address::ptr	access:public	signature:()
getRemoteAddress	sylar/sylar/streams/socket_stream.cc	/^Address::ptr SocketStream::getRemoteAddress() {$/;"	f	class:sylar::SocketStream	typeref:typename:Address::ptr	signature:()
getRemoteAddress	sylar/sylar/streams/socket_stream.h	/^    Address::ptr getRemoteAddress();$/;"	p	class:sylar::SocketStream	typeref:typename:Address::ptr	access:public	signature:()
getRemoteAddressString	sylar/sylar/streams/socket_stream.cc	/^std::string SocketStream::getRemoteAddressString() {$/;"	f	class:sylar::SocketStream	typeref:typename:std::string	signature:()
getRemoteAddressString	sylar/sylar/streams/socket_stream.h	/^    std::string getRemoteAddressString();$/;"	p	class:sylar::SocketStream	typeref:typename:std::string	access:public	signature:()
getReply	sylar/sylar/db/redis.cc	/^ReplyPtr Redis::getReply() {$/;"	f	class:sylar::Redis	typeref:typename:ReplyPtr	signature:()
getReply	sylar/sylar/db/redis.cc	/^ReplyPtr RedisCluster::getReply() {$/;"	f	class:sylar::RedisCluster	typeref:typename:ReplyPtr	signature:()
getReply	sylar/sylar/db/redis.h	/^    virtual ReplyPtr getReply() = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:ReplyPtr	access:public	signature:()
getReply	sylar/sylar/db/redis.h	/^    virtual ReplyPtr getReply();$/;"	p	class:sylar::Redis	typeref:typename:ReplyPtr	access:public	signature:()
getReply	sylar/sylar/db/redis.h	/^    virtual ReplyPtr getReply();$/;"	p	class:sylar::RedisCluster	typeref:typename:ReplyPtr	access:public	signature:()
getRequestHandler	sylar/sylar/rock/rock_stream.h	/^    request_handler getRequestHandler() const { return m_requestHandler;}$/;"	f	class:sylar::RockStream	typeref:typename:request_handler	access:public	signature:() const
getResult	sylar/sylar/protocol.h	/^    uint32_t getResult() const { return m_result;}$/;"	f	class:sylar::Response	typeref:typename:uint32_t	access:public	signature:() const
getResult	sylar/sylar/streams/zlib_stream.cc	/^std::string ZlibStream::getResult() const {$/;"	f	class:sylar::ZlibStream	typeref:typename:std::string	signature:() const
getResult	sylar/sylar/streams/zlib_stream.h	/^    std::string getResult() const;$/;"	p	class:sylar::ZlibStream	typeref:typename:std::string	access:public	signature:() const
getResultStr	sylar/sylar/protocol.h	/^    const std::string& getResultStr() const { return m_resultStr;}$/;"	f	class:sylar::Response	typeref:typename:const std::string &	access:public	signature:() const
getRockSDLoadBalance	sylar/sylar/application.h	/^    RockSDLoadBalance::ptr getRockSDLoadBalance() const { return m_rockSDLoadBalance;}$/;"	f	class:sylar::Application	typeref:typename:RockSDLoadBalance::ptr	access:public	signature:() const
getRoot	sylar/sylar/log.h	/^    Logger::ptr getRoot() const { return m_root;}$/;"	f	class:sylar::LoggerManager	typeref:typename:Logger::ptr	access:public	signature:() const
getSQLite3Default	sylar/sylar/orm/column.cc	/^std::string Column::getSQLite3Default() {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:()
getSQLite3Default	sylar/sylar/orm/column.h	/^    std::string getSQLite3Default();$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
getSQLite3TypeString	sylar/sylar/orm/column.cc	/^std::string Column::getSQLite3TypeString() {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:()
getSQLite3TypeString	sylar/sylar/orm/column.h	/^    std::string getSQLite3TypeString();$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
getSS	sylar/sylar/log.cc	/^std::stringstream& LogEventWrap::getSS() {$/;"	f	class:sylar::LogEventWrap	typeref:typename:std::stringstream &	signature:()
getSS	sylar/sylar/log.h	/^    std::stringstream& getSS() { return m_ss;}$/;"	f	class:sylar::LogEvent	typeref:typename:std::stringstream &	access:public	signature:()
getSS	sylar/sylar/log.h	/^    std::stringstream& getSS();$/;"	p	class:sylar::LogEventWrap	typeref:typename:std::stringstream &	access:public	signature:()
getScheme	sylar/sylar/uri.h	/^    const std::string& getScheme() const { return m_scheme;}$/;"	f	class:sylar::Uri	typeref:typename:const std::string &	access:public	signature:() const
getSelfData	sylar/sylar/streams/service_discovery.h	/^    const std::string& getSelfData() const { return m_selfData;}$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:const std::string &	access:public	signature:() const
getSelfInfo	sylar/sylar/streams/service_discovery.h	/^    const std::string& getSelfInfo() const { return m_selfInfo;}$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:const std::string &	access:public	signature:() const
getSendTimeout	sylar/sylar/socket.cc	/^int64_t Socket::getSendTimeout() {$/;"	f	class:sylar::Socket	typeref:typename:int64_t	signature:()
getSendTimeout	sylar/sylar/socket.h	/^    int64_t getSendTimeout();$/;"	p	class:sylar::Socket	typeref:typename:int64_t	access:public	signature:()
getServer	sylar/sylar/application.cc	/^bool Application::getServer(const std::string& type, std::vector<TcpServer::ptr>& svrs) {$/;"	f	class:sylar::Application	typeref:typename:bool	signature:(const std::string & type,std::vector<TcpServer::ptr> & svrs)
getServer	sylar/sylar/application.h	/^    bool getServer(const std::string& type, std::vector<TcpServer::ptr>& svrs);$/;"	p	class:sylar::Application	typeref:typename:bool	access:public	signature:(const std::string & type,std::vector<TcpServer::ptr> & svrs)
getServiceCallback	sylar/sylar/streams/service_discovery.h	/^    service_callback getServiceCallback() const { return m_cb;}$/;"	f	class:sylar::IServiceDiscovery	typeref:typename:service_callback	access:public	signature:() const
getServiceDiscovery	sylar/sylar/application.h	/^    ZKServiceDiscovery::ptr getServiceDiscovery() const { return m_serviceDiscovery;}$/;"	f	class:sylar::Application	typeref:typename:ZKServiceDiscovery::ptr	access:public	signature:() const
getServlet	sylar/sylar/http/servlet.cc	/^Servlet::ptr ServletDispatch::getServlet(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	signature:(const std::string & uri)
getServlet	sylar/sylar/http/servlet.h	/^    Servlet::ptr getServlet(const std::string& uri);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	access:public	signature:(const std::string & uri)
getServletDispatch	sylar/sylar/http/http_server.h	/^    ServletDispatch::ptr getServletDispatch() const { return m_dispatch;}$/;"	f	class:sylar::http::HttpServer	typeref:typename:ServletDispatch::ptr	access:public	signature:() const
getSet	sylar/sylar/ds/cache_status.h	/^    int64_t getSet() const { return m_set;}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:() const
getSetFunDefine	sylar/sylar/orm/column.cc	/^std::string Column::getSetFunDefine() const {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:() const
getSetFunDefine	sylar/sylar/orm/column.h	/^    std::string getSetFunDefine() const;$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:() const
getSetFunImpl	sylar/sylar/orm/column.cc	/^std::string Column::getSetFunImpl(const std::string& class_name, int idx) const {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:(const std::string & class_name,int idx) const
getSetFunImpl	sylar/sylar/orm/column.h	/^    std::string getSetFunImpl(const std::string& class_name, int idx) const;$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:(const std::string & class_name,int idx) const
getSize	sylar/sylar/bytearray.h	/^    size_t getSize() const { return m_size;}$/;"	f	class:sylar::ByteArray	typeref:typename:size_t	access:public	signature:() const
getSize	sylar/sylar/ds/bitmap.h	/^    uint32_t getSize() const { return m_size;}$/;"	f	class:sylar::ds::Bitmap	typeref:typename:uint32_t	access:public	signature:() const
getSizeInBytes	sylar/sylar/ds/roaring.hh	/^    size_t getSizeInBytes(bool portable = true) const {$/;"	f	class:Roaring	typeref:typename:size_t	access:public	signature:(bool portable=true) const
getSizeInBytes	sylar/sylar/ds/roaring.hh	/^    size_t getSizeInBytes(bool portable = true) const {$/;"	f	class:Roaring64Map	typeref:typename:size_t	access:public	signature:(bool portable=true) const
getSn	sylar/sylar/protocol.h	/^    uint32_t getSn() const { return m_sn;}$/;"	f	class:sylar::Request	typeref:typename:uint32_t	access:public	signature:() const
getSn	sylar/sylar/protocol.h	/^    uint32_t getSn() const { return m_sn;}$/;"	f	class:sylar::Response	typeref:typename:uint32_t	access:public	signature:() const
getSocket	sylar/sylar/socket.h	/^    int getSocket() const { return m_sock;}$/;"	f	class:sylar::Socket	typeref:typename:int	access:public	signature:() const
getSocket	sylar/sylar/streams/socket_stream.h	/^    Socket::ptr getSocket() const { return m_socket;}$/;"	f	class:sylar::SocketStream	typeref:typename:Socket::ptr	access:public	signature:() const
getSocks	sylar/sylar/tcp_server.h	/^    std::vector<Socket::ptr> getSocks() const { return m_socks;}$/;"	f	class:sylar::TcpServer	typeref:typename:std::vector<Socket::ptr>	access:public	signature:() const
getState	sylar/sylar/fiber.h	/^    State getState() const { return m_state;}$/;"	f	class:sylar::Fiber	typeref:typename:State	access:public	signature:() const
getState	sylar/sylar/zk_client.cc	/^int32_t ZKClient::getState() {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:()
getState	sylar/sylar/zk_client.h	/^    int32_t getState();$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:()
getStatus	sylar/sylar/ds/lru_cache.h	/^    CacheStatus* getStatus() const { return m_status;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:CacheStatus *	access:public	signature:() const
getStatus	sylar/sylar/ds/lru_cache.h	/^    CacheStatus* getStatus() {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:CacheStatus *	access:public	signature:()
getStatus	sylar/sylar/ds/timed_cache.h	/^    CacheStatus* getStatus() const { return m_status;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:CacheStatus *	access:public	signature:() const
getStatus	sylar/sylar/ds/timed_cache.h	/^    CacheStatus* getStatus() {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:CacheStatus *	access:public	signature:()
getStatus	sylar/sylar/ds/timed_lru_cache.h	/^    CacheStatus* getStatus() const { return m_status;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:CacheStatus *	access:public	signature:() const
getStatus	sylar/sylar/ds/timed_lru_cache.h	/^    CacheStatus* getStatus() {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:CacheStatus *	access:public	signature:()
getStatus	sylar/sylar/http/http.h	/^    HttpStatus getStatus() const { return m_status;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:HttpStatus	access:public	signature:() const
getStream	sylar/sylar/streams/load_balance.h	/^    SocketStream::ptr getStream() const { return m_stream;}$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:SocketStream::ptr	access:public	signature:() const
getStreamAs	sylar/sylar/streams/load_balance.h	/^    std::shared_ptr<T> getStreamAs() {$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:std::shared_ptr<T>	access:public	signature:()
getStreams	sylar/sylar/ns/name_server_module.cc	/^std::set<sylar::RockStream::ptr> NameServerModule::getStreams(const std::string& domain) {$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:std::set<sylar::RockStream::ptr>	signature:(const std::string & domain)
getStreams	sylar/sylar/ns/name_server_module.h	/^    std::set<sylar::RockStream::ptr> getStreams(const std::string& domain);$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:std::set<sylar::RockStream::ptr>	access:private	signature:(const std::string & domain)
getString	sylar/sylar/db/db.h	/^    virtual std::string getString(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:std::string	access:public	signature:(int idx)
getString	sylar/sylar/db/mysql.cc	/^std::string MySQLRes::getString(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:std::string	signature:(int idx)
getString	sylar/sylar/db/mysql.cc	/^std::string MySQLStmtRes::getString(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:std::string	signature:(int idx)
getString	sylar/sylar/db/mysql.h	/^    std::string getString(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:std::string	access:public	signature:(int idx)
getString	sylar/sylar/db/mysql.h	/^    std::string getString(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:std::string	access:public	signature:(int idx)
getString	sylar/sylar/db/sqlite3.cc	/^std::string SQLite3Data::getString(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:std::string	signature:(int idx)
getString	sylar/sylar/db/sqlite3.h	/^    std::string getString(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:std::string	access:public	signature:(int idx)
getString	sylar/sylar/ds/dict.h	/^    std::string getString(const K& k) {$/;"	f	class:sylar::ds::Dict	typeref:typename:std::string	access:private	signature:(const K & k)
getSysNonblock	sylar/sylar/fd_manager.h	/^    bool getSysNonblock() const { return m_sysNonblock;}$/;"	f	class:sylar::FdCtx	typeref:typename:bool	access:public	signature:() const
getThreadId	sylar/sylar/log.h	/^    uint32_t getThreadId() const { return m_threadId;}$/;"	f	class:sylar::LogEvent	typeref:typename:uint32_t	access:public	signature:() const
getThreadName	sylar/sylar/log.h	/^    const std::string& getThreadName() const { return m_threadName;}$/;"	f	class:sylar::LogEvent	typeref:typename:const std::string &	access:public	signature:() const
getTime	sylar/sylar/db/db.h	/^    virtual time_t getTime(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:time_t	access:public	signature:(int idx)
getTime	sylar/sylar/db/mysql.cc	/^time_t MySQLRes::getTime(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:time_t	signature:(int idx)
getTime	sylar/sylar/db/mysql.cc	/^time_t MySQLStmtRes::getTime(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:time_t	signature:(int idx)
getTime	sylar/sylar/db/mysql.h	/^    time_t getTime(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:time_t	access:public	signature:(int idx)
getTime	sylar/sylar/db/mysql.h	/^    time_t getTime(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:time_t	access:public	signature:(int idx)
getTime	sylar/sylar/db/sqlite3.cc	/^time_t SQLite3Data::getTime(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:time_t	signature:(int idx)
getTime	sylar/sylar/db/sqlite3.h	/^    time_t getTime(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:time_t	access:public	signature:(int idx)
getTime	sylar/sylar/log.h	/^    uint64_t getTime() const { return m_time;}$/;"	f	class:sylar::LogEvent	typeref:typename:uint64_t	access:public	signature:() const
getTimeout	sylar/sylar/ds/cache_status.h	/^    int64_t getTimeout() const { return m_timeout;}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:() const
getTimeout	sylar/sylar/fd_manager.cc	/^uint64_t FdCtx::getTimeout(int type) {$/;"	f	class:sylar::FdCtx	typeref:typename:uint64_t	signature:(int type)
getTimeout	sylar/sylar/fd_manager.h	/^    uint64_t getTimeout(int type);$/;"	p	class:sylar::FdCtx	typeref:typename:uint64_t	access:public	signature:(int type)
getTimeouts	sylar/sylar/streams/load_balance.h	/^    uint32_t getTimeouts() const { return m_timeouts; }$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:() const
getTitle	sylar/sylar/email/email.h	/^    const std::string& getTitle() const { return m_title;}$/;"	f	class:sylar::EMail	typeref:typename:const std::string &	access:public	signature:() const
getToEMailAddress	sylar/sylar/email/email.h	/^    const std::vector<std::string>& getToEMailAddress() const { return m_toEMailAddress;}$/;"	f	class:sylar::EMail	typeref:typename:const std::vector<std::string> &	access:public	signature:() const
getTotal	sylar/sylar/db/fox_thread.h	/^    virtual uint64_t getTotal() = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:uint64_t	access:public	signature:()
getTotal	sylar/sylar/db/fox_thread.h	/^    virtual uint64_t getTotal() { return m_total;}$/;"	f	class:sylar::FoxThread	typeref:typename:uint64_t	access:public	signature:()
getTotal	sylar/sylar/db/fox_thread.h	/^    virtual uint64_t getTotal() { return m_total;}$/;"	f	class:sylar::FoxThreadPool	typeref:typename:uint64_t	access:public	signature:()
getTotal	sylar/sylar/ds/dict.h	/^    uint64_t getTotal() const { return m_total;}$/;"	f	class:sylar::ds::Dict	typeref:typename:uint64_t	access:public	signature:() const
getTotal	sylar/sylar/ds/dict.h	/^    uint64_t getTotal() { return m_dict.getTotal();}$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:()
getTotal	sylar/sylar/ds/hash_map.h	/^    uint64_t getTotal() const { return m_total;}$/;"	f	class:sylar::ds::HashMap	typeref:typename:uint64_t	access:public	signature:() const
getTotal	sylar/sylar/ds/hash_multimap.h	/^    uint64_t getTotal() const { return m_total;}$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:uint64_t	access:public	signature:() const
getTotal	sylar/sylar/streams/load_balance.cc	/^HolderStats HolderStatsSet::getTotal() {$/;"	f	class:sylar::HolderStatsSet	typeref:typename:HolderStats	signature:()
getTotal	sylar/sylar/streams/load_balance.h	/^    HolderStats getTotal();$/;"	p	class:sylar::HolderStatsSet	typeref:typename:HolderStats	access:public	signature:()
getTotal	sylar/sylar/streams/load_balance.h	/^    uint32_t getTotal() const { return m_total; }$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:() const
getType	sylar/sylar/db/redis.h	/^    Type getType() const { return m_type;}$/;"	f	class:sylar::IRedis	typeref:typename:Type	access:public	signature:() const
getType	sylar/sylar/module.h	/^    uint32_t getType() const { return m_type;}$/;"	f	class:sylar::Module	typeref:typename:uint32_t	access:public	signature:() const
getType	sylar/sylar/orm/column.h	/^    const std::string& getType() const { return m_type;}$/;"	f	class:sylar::orm::Column	typeref:typename:const std::string &	access:public	signature:() const
getType	sylar/sylar/orm/index.h	/^    const std::string& getType() const { return m_type;}$/;"	f	class:sylar::orm::Index	typeref:typename:const std::string &	access:public	signature:() const
getType	sylar/sylar/protocol.h	/^    virtual int32_t getType() const = 0;$/;"	p	class:sylar::Message	typeref:typename:int32_t	access:public	signature:() const
getType	sylar/sylar/rock/rock_protocol.cc	/^int32_t RockNotify::getType() const {$/;"	f	class:sylar::RockNotify	typeref:typename:int32_t	signature:() const
getType	sylar/sylar/rock/rock_protocol.cc	/^int32_t RockRequest::getType() const {$/;"	f	class:sylar::RockRequest	typeref:typename:int32_t	signature:() const
getType	sylar/sylar/rock/rock_protocol.cc	/^int32_t RockResponse::getType() const {$/;"	f	class:sylar::RockResponse	typeref:typename:int32_t	signature:() const
getType	sylar/sylar/rock/rock_protocol.h	/^    virtual int32_t getType() const override;$/;"	p	class:sylar::RockNotify	typeref:typename:int32_t	access:public	signature:() const
getType	sylar/sylar/rock/rock_protocol.h	/^    virtual int32_t getType() const override;$/;"	p	class:sylar::RockRequest	typeref:typename:int32_t	access:public	signature:() const
getType	sylar/sylar/rock/rock_protocol.h	/^    virtual int32_t getType() const override;$/;"	p	class:sylar::RockResponse	typeref:typename:int32_t	access:public	signature:() const
getType	sylar/sylar/socket.h	/^    int getType() const { return m_type;}$/;"	f	class:sylar::Socket	typeref:typename:int	access:public	signature:() const
getType	sylar/sylar/streams/load_balance.cc	/^ILoadBalance::Type SDLoadBalance::getType(const std::string& domain, const std::string& service)/;"	f	class:sylar::SDLoadBalance	typeref:typename:ILoadBalance::Type	signature:(const std::string & domain,const std::string & service)
getType	sylar/sylar/streams/load_balance.h	/^    ILoadBalance::Type getType(const std::string& domain, const std::string& service);$/;"	p	class:sylar::SDLoadBalance	typeref:typename:ILoadBalance::Type	access:private	signature:(const std::string & domain,const std::string & service)
getTypeName	sylar/sylar/config.h	/^    std::string getTypeName() const override { return TypeToName<T>();}$/;"	f	class:sylar::ConfigVar	typeref:typename:std::string	access:public	signature:() const
getTypeName	sylar/sylar/config.h	/^    virtual std::string getTypeName() const = 0;$/;"	p	class:sylar::ConfigVarBase	typeref:typename:std::string	access:public	signature:() const
getUint16	sylar/sylar/db/db.h	/^    virtual uint16_t getUint16(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:uint16_t	access:public	signature:(int idx)
getUint16	sylar/sylar/db/mysql.cc	/^uint16_t MySQLRes::getUint16(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:uint16_t	signature:(int idx)
getUint16	sylar/sylar/db/mysql.cc	/^uint16_t MySQLStmtRes::getUint16(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:uint16_t	signature:(int idx)
getUint16	sylar/sylar/db/mysql.h	/^    uint16_t getUint16(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:uint16_t	access:public	signature:(int idx)
getUint16	sylar/sylar/db/mysql.h	/^    uint16_t getUint16(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:uint16_t	access:public	signature:(int idx)
getUint16	sylar/sylar/db/sqlite3.cc	/^uint16_t SQLite3Data::getUint16(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:uint16_t	signature:(int idx)
getUint16	sylar/sylar/db/sqlite3.h	/^    uint16_t getUint16(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:uint16_t	access:public	signature:(int idx)
getUint32	sylar/sylar/db/db.h	/^    virtual uint32_t getUint32(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:uint32_t	access:public	signature:(int idx)
getUint32	sylar/sylar/db/mysql.cc	/^uint32_t MySQLRes::getUint32(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:uint32_t	signature:(int idx)
getUint32	sylar/sylar/db/mysql.cc	/^uint32_t MySQLStmtRes::getUint32(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:uint32_t	signature:(int idx)
getUint32	sylar/sylar/db/mysql.h	/^    uint32_t getUint32(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:uint32_t	access:public	signature:(int idx)
getUint32	sylar/sylar/db/mysql.h	/^    uint32_t getUint32(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:uint32_t	access:public	signature:(int idx)
getUint32	sylar/sylar/db/sqlite3.cc	/^uint32_t SQLite3Data::getUint32(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:uint32_t	signature:(int idx)
getUint32	sylar/sylar/db/sqlite3.h	/^    uint32_t getUint32(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:uint32_t	access:public	signature:(int idx)
getUint64	sylar/sylar/db/db.h	/^    virtual uint64_t getUint64(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:uint64_t	access:public	signature:(int idx)
getUint64	sylar/sylar/db/mysql.cc	/^uint64_t MySQLRes::getUint64(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:uint64_t	signature:(int idx)
getUint64	sylar/sylar/db/mysql.cc	/^uint64_t MySQLStmtRes::getUint64(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:uint64_t	signature:(int idx)
getUint64	sylar/sylar/db/mysql.h	/^    uint64_t getUint64(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:uint64_t	access:public	signature:(int idx)
getUint64	sylar/sylar/db/mysql.h	/^    uint64_t getUint64(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:uint64_t	access:public	signature:(int idx)
getUint64	sylar/sylar/db/sqlite3.cc	/^uint64_t SQLite3Data::getUint64(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:uint64_t	signature:(int idx)
getUint64	sylar/sylar/db/sqlite3.h	/^    uint64_t getUint64(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:uint64_t	access:public	signature:(int idx)
getUint8	sylar/sylar/db/db.h	/^    virtual uint8_t getUint8(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:uint8_t	access:public	signature:(int idx)
getUint8	sylar/sylar/db/mysql.cc	/^uint8_t MySQLRes::getUint8(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:uint8_t	signature:(int idx)
getUint8	sylar/sylar/db/mysql.cc	/^uint8_t MySQLStmtRes::getUint8(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:uint8_t	signature:(int idx)
getUint8	sylar/sylar/db/mysql.h	/^    uint8_t getUint8(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:uint8_t	access:public	signature:(int idx)
getUint8	sylar/sylar/db/mysql.h	/^    uint8_t getUint8(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:uint8_t	access:public	signature:(int idx)
getUint8	sylar/sylar/db/sqlite3.cc	/^uint8_t SQLite3Data::getUint8(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:uint8_t	signature:(int idx)
getUint8	sylar/sylar/db/sqlite3.h	/^    uint8_t getUint8(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:uint8_t	access:public	signature:(int idx)
getUpdate	sylar/sylar/orm/column.h	/^    const std::string& getUpdate() const { return m_update;}$/;"	f	class:sylar::orm::Column	typeref:typename:const std::string &	access:public	signature:() const
getUsedTime	sylar/sylar/streams/load_balance.h	/^    uint32_t getUsedTime() const { return m_usedTime; }$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:() const
getUserNonblock	sylar/sylar/fd_manager.h	/^    bool getUserNonblock() const { return m_userNonblock;}$/;"	f	class:sylar::FdCtx	typeref:typename:bool	access:public	signature:() const
getUserinfo	sylar/sylar/uri.h	/^    const std::string& getUserinfo() const { return m_userinfo;}$/;"	f	class:sylar::Uri	typeref:typename:const std::string &	access:public	signature:() const
getValue	sylar/sylar/config.h	/^    const T getValue() {$/;"	f	class:sylar::ConfigVar	typeref:typename:const T	access:public	signature:()
getValue	sylar/sylar/ds/util.cc	/^uint32_t PrimeGenerator::getValue() {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	signature:()
getValue	sylar/sylar/ds/util.h	/^    uint32_t getValue();$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	access:public	signature:()
getVersion	sylar/sylar/http/http.h	/^    uint8_t getVersion() const { return m_version;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:uint8_t	access:public	signature:() const
getVersion	sylar/sylar/http/http.h	/^    uint8_t getVersion() const { return m_version;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:uint8_t	access:public	signature:() const
getVersion	sylar/sylar/module.h	/^    const std::string& getVersion() const { return m_version;}$/;"	f	class:sylar::Module	typeref:typename:const std::string &	access:public	signature:() const
getWSServlet	sylar/sylar/http/ws_servlet.cc	/^WSServlet::ptr WSServletDispatch::getWSServlet(const std::string& uri) {$/;"	f	class:sylar::http::WSServletDispatch	typeref:typename:WSServlet::ptr	signature:(const std::string & uri)
getWSServlet	sylar/sylar/http/ws_servlet.h	/^    WSServlet::ptr getWSServlet(const std::string& uri);$/;"	p	class:sylar::http::WSServletDispatch	typeref:typename:WSServlet::ptr	access:public	signature:(const std::string & uri)
getWSServletDispatch	sylar/sylar/http/ws_server.h	/^    WSServletDispatch::ptr getWSServletDispatch() const { return m_dispatch;}$/;"	f	class:sylar::http::WSServer	typeref:typename:WSServletDispatch::ptr	access:public	signature:() const
getWeight	sylar/sylar/ns/ns_protocol.h	/^    uint32_t getWeight() const { return m_weight;}$/;"	f	class:sylar::ns::NSNode	typeref:typename:uint32_t	access:public	signature:() const
getWeight	sylar/sylar/streams/load_balance.cc	/^float HolderStats::getWeight(float rate) {$/;"	f	class:sylar::HolderStats	typeref:typename:float	signature:(float rate)
getWeight	sylar/sylar/streams/load_balance.cc	/^float HolderStatsSet::getWeight(const uint32_t& now) {$/;"	f	class:sylar::HolderStatsSet	typeref:typename:float	signature:(const uint32_t & now)
getWeight	sylar/sylar/streams/load_balance.cc	/^int32_t FairLoadBalanceItem::getWeight() {$/;"	f	class:sylar::FairLoadBalanceItem	typeref:typename:int32_t	signature:()
getWeight	sylar/sylar/streams/load_balance.h	/^    float getWeight(const uint32_t& now = time(0));$/;"	p	class:sylar::HolderStatsSet	typeref:typename:float	access:public	signature:(const uint32_t & now=time (0))
getWeight	sylar/sylar/streams/load_balance.h	/^    float getWeight(float rate = 1.0f);$/;"	p	class:sylar::HolderStats	typeref:typename:float	access:public	signature:(float rate=1.0f)
getWeight	sylar/sylar/streams/load_balance.h	/^    virtual int32_t getWeight() { return m_weight;}$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:int32_t	access:public	signature:()
getWeight	sylar/sylar/streams/load_balance.h	/^    virtual int32_t getWeight();$/;"	p	class:sylar::FairLoadBalanceItem	typeref:typename:int32_t	access:public	signature:()
getWorker	sylar/sylar/streams/async_socket_stream.h	/^    sylar::IOManager* getWorker() const { return m_worker;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:sylar::IOManager *	access:public	signature:() const
getWriteBuffers	sylar/sylar/bytearray.cc	/^uint64_t ByteArray::getWriteBuffers(std::vector<iovec>& buffers, uint64_t len) {$/;"	f	class:sylar::ByteArray	typeref:typename:uint64_t	signature:(std::vector<iovec> & buffers,uint64_t len)
getWriteBuffers	sylar/sylar/bytearray.h	/^    uint64_t getWriteBuffers(std::vector<iovec>& buffers, uint64_t len);$/;"	p	class:sylar::ByteArray	typeref:typename:uint64_t	access:public	signature:(std::vector<iovec> & buffers,uint64_t len)
get_container_name	sylar/sylar/ds/roaring.c	/^extern inline const char *get_container_name(uint8_t typecode);$/;"	p	typeref:typename:const char *	file:	signature:(uint8_t typecode)
get_container_name	sylar/sylar/ds/roaring.h	/^static inline const char *get_container_name(uint8_t typecode) {$/;"	f	typeref:typename:const char *	signature:(uint8_t typecode)
get_container_type	sylar/sylar/ds/roaring.h	/^static inline uint8_t get_container_type(const void *container, uint8_t type) {$/;"	f	typeref:typename:uint8_t	signature:(const void * container,uint8_t type)
get_copy_of_container	sylar/sylar/ds/roaring.c	/^void *get_copy_of_container(void *container, uint8_t *typecode,$/;"	f	typeref:typename:void *	signature:(void * container,uint8_t * typecode,bool copy_on_write)
get_copy_of_container	sylar/sylar/ds/roaring.h	/^void *get_copy_of_container(void *container, uint8_t *typecode,$/;"	p	typeref:typename:void *	signature:(void * container,uint8_t * typecode,bool copy_on_write)
get_full_container_name	sylar/sylar/ds/roaring.h	/^static inline const char *get_full_container_name(const void *container,$/;"	f	typeref:typename:const char *	signature:(const void * container,uint8_t typecode)
get_value	sylar/sylar/db/redis.cc	/^static std::string get_value(const std::map<std::string, std::string>& m$/;"	f	namespace:sylar	typeref:typename:std::string	file:	signature:(const std::map<std::string,std::string> & m,const std::string & key,const std::string & def="")
get_writable_copy_if_shared	sylar/sylar/ds/roaring.h	/^static inline void *get_writable_copy_if_shared($/;"	f	typeref:typename:void *	signature:(void * candidate_shared_container,uint8_t * type)
getsockopt	sylar/sylar/hook.cc	/^int getsockopt(int sockfd, int level, int optname, void *optval, socklen_t *optlen) {$/;"	f	typeref:typename:int	signature:(int sockfd,int level,int optname,void * optval,socklen_t * optlen)
getsockopt_fun	sylar/sylar/hook.h	/^typedef int (*getsockopt_fun)(int sockfd, int level, int optname, void *optval, socklen_t *optle/;"	t	typeref:typename:int (*)(int sockfd,int level,int optname,void * optval,socklen_t * optlen)
grow_capacity	sylar/sylar/ds/roaring.c	/^static inline int32_t grow_capacity(int32_t capacity) {$/;"	f	typeref:typename:int32_t	file:	signature:(int32_t capacity)
guessprocessor	sylar/sylar/ds/roaring.h	/^static inline const char *guessprocessor() {$/;"	f	typeref:typename:const char *	signature:()
hamming	sylar/sylar/ds/roaring.h	/^static inline int hamming(uint64_t x) {$/;"	f	typeref:typename:int	signature:(uint64_t x)
handle	sylar/sylar/http/servlet.cc	/^int32_t FunctionServlet::handle(sylar::http::HttpRequest::ptr request$/;"	f	class:sylar::http::FunctionServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
handle	sylar/sylar/http/servlet.cc	/^int32_t NotFoundServlet::handle(sylar::http::HttpRequest::ptr request$/;"	f	class:sylar::http::NotFoundServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
handle	sylar/sylar/http/servlet.cc	/^int32_t ServletDispatch::handle(sylar::http::HttpRequest::ptr request$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
handle	sylar/sylar/http/servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	p	class:sylar::http::FunctionServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
handle	sylar/sylar/http/servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	p	class:sylar::http::NotFoundServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
handle	sylar/sylar/http/servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	p	class:sylar::http::Servlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
handle	sylar/sylar/http/servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
handle	sylar/sylar/http/servlets/config_servlet.cc	/^int32_t ConfigServlet::handle(sylar::http::HttpRequest::ptr request$/;"	f	class:sylar::http::ConfigServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
handle	sylar/sylar/http/servlets/config_servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	p	class:sylar::http::ConfigServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
handle	sylar/sylar/http/servlets/status_servlet.cc	/^int32_t StatusServlet::handle(sylar::http::HttpRequest::ptr request$/;"	f	class:sylar::http::StatusServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
handle	sylar/sylar/http/servlets/status_servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	p	class:sylar::http::StatusServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
handle	sylar/sylar/http/ws_servlet.cc	/^int32_t FunctionWSServlet::handle(sylar::http::HttpRequest::ptr header$/;"	f	class:sylar::http::FunctionWSServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSFrameMessage::ptr msg,sylar::http::WSSession::ptr session)
handle	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr header$/;"	p	class:sylar::http::FunctionWSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSFrameMessage::ptr msg,sylar::http::WSSession::ptr session)
handle	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr header$/;"	p	class:sylar::http::WSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSFrameMessage::ptr msg,sylar::http::WSSession::ptr session)
handle	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	f	class:sylar::http::WSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
handleClient	sylar/examples/echo_server.cc	/^    void handleClient(sylar::Socket::ptr client);$/;"	p	class:EchoServer	typeref:typename:void	file:	access:public	signature:(sylar::Socket::ptr client)
handleClient	sylar/examples/echo_server.cc	/^void EchoServer::handleClient(sylar::Socket::ptr client) {$/;"	f	class:EchoServer	typeref:typename:void	signature:(sylar::Socket::ptr client)
handleClient	sylar/sylar/http/http_server.cc	/^void HttpServer::handleClient(Socket::ptr client) {$/;"	f	class:sylar::http::HttpServer	typeref:typename:void	signature:(Socket::ptr client)
handleClient	sylar/sylar/http/http_server.h	/^    virtual void handleClient(Socket::ptr client) override;$/;"	p	class:sylar::http::HttpServer	typeref:typename:void	access:protected	signature:(Socket::ptr client)
handleClient	sylar/sylar/http/ws_server.cc	/^void WSServer::handleClient(Socket::ptr client) {$/;"	f	class:sylar::http::WSServer	typeref:typename:void	signature:(Socket::ptr client)
handleClient	sylar/sylar/http/ws_server.h	/^    virtual void handleClient(Socket::ptr client) override;$/;"	p	class:sylar::http::WSServer	typeref:typename:void	access:protected	signature:(Socket::ptr client)
handleClient	sylar/sylar/rock/rock_server.cc	/^void RockServer::handleClient(Socket::ptr client) {$/;"	f	class:sylar::RockServer	typeref:typename:void	signature:(Socket::ptr client)
handleClient	sylar/sylar/rock/rock_server.h	/^    virtual void handleClient(Socket::ptr client) override;$/;"	p	class:sylar::RockServer	typeref:typename:void	access:protected	signature:(Socket::ptr client)
handleClient	sylar/sylar/tcp_server.cc	/^void TcpServer::handleClient(Socket::ptr client) {$/;"	f	class:sylar::TcpServer	typeref:typename:void	signature:(Socket::ptr client)
handleClient	sylar/sylar/tcp_server.h	/^    virtual void handleClient(Socket::ptr client);$/;"	p	class:sylar::TcpServer	typeref:typename:void	access:protected	signature:(Socket::ptr client)
handleClientShake	sylar/sylar/http/ws_session.h	/^    bool handleClientShake();$/;"	p	class:sylar::http::WSSession	typeref:typename:bool	access:private	signature:()
handleNotify	sylar/sylar/module.cc	/^bool Module::handleNotify(sylar::Message::ptr notify$/;"	f	class:sylar::Module	typeref:typename:bool	signature:(sylar::Message::ptr notify,sylar::Stream::ptr stream)
handleNotify	sylar/sylar/module.cc	/^bool RockModule::handleNotify(sylar::Message::ptr notify$/;"	f	class:sylar::RockModule	typeref:typename:bool	signature:(sylar::Message::ptr notify,sylar::Stream::ptr stream)
handleNotify	sylar/sylar/module.h	/^    virtual bool handleNotify(sylar::Message::ptr notify$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:(sylar::Message::ptr notify,sylar::Stream::ptr stream)
handleNotify	sylar/sylar/module.h	/^    virtual bool handleNotify(sylar::Message::ptr notify$/;"	p	class:sylar::RockModule	typeref:typename:bool	access:public	signature:(sylar::Message::ptr notify,sylar::Stream::ptr stream)
handleNotify	sylar/sylar/rock/rock_stream.cc	/^void RockStream::handleNotify(sylar::RockNotify::ptr nty) {$/;"	f	class:sylar::RockStream	typeref:typename:void	signature:(sylar::RockNotify::ptr nty)
handleNotify	sylar/sylar/rock/rock_stream.h	/^    void handleNotify(sylar::RockNotify::ptr nty);$/;"	p	class:sylar::RockStream	typeref:typename:void	access:protected	signature:(sylar::RockNotify::ptr nty)
handleQuery	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::handleQuery(sylar::RockRequest::ptr request$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
handleQuery	sylar/sylar/ns/name_server_module.h	/^    bool handleQuery(sylar::RockRequest::ptr request$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:private	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
handleRegister	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::handleRegister(sylar::RockRequest::ptr request$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
handleRegister	sylar/sylar/ns/name_server_module.h	/^    bool handleRegister(sylar::RockRequest::ptr request$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:private	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
handleRequest	sylar/sylar/module.cc	/^bool Module::handleRequest(sylar::Message::ptr req$/;"	f	class:sylar::Module	typeref:typename:bool	signature:(sylar::Message::ptr req,sylar::Message::ptr rsp,sylar::Stream::ptr stream)
handleRequest	sylar/sylar/module.cc	/^bool RockModule::handleRequest(sylar::Message::ptr req$/;"	f	class:sylar::RockModule	typeref:typename:bool	signature:(sylar::Message::ptr req,sylar::Message::ptr rsp,sylar::Stream::ptr stream)
handleRequest	sylar/sylar/module.h	/^    virtual bool handleRequest(sylar::Message::ptr req$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:(sylar::Message::ptr req,sylar::Message::ptr rsp,sylar::Stream::ptr stream)
handleRequest	sylar/sylar/module.h	/^    virtual bool handleRequest(sylar::Message::ptr req$/;"	p	class:sylar::RockModule	typeref:typename:bool	access:public	signature:(sylar::Message::ptr req,sylar::Message::ptr rsp,sylar::Stream::ptr stream)
handleRequest	sylar/sylar/rock/rock_stream.cc	/^void RockStream::handleRequest(sylar::RockRequest::ptr req) {$/;"	f	class:sylar::RockStream	typeref:typename:void	signature:(sylar::RockRequest::ptr req)
handleRequest	sylar/sylar/rock/rock_stream.h	/^    void handleRequest(sylar::RockRequest::ptr req);$/;"	p	class:sylar::RockStream	typeref:typename:void	access:protected	signature:(sylar::RockRequest::ptr req)
handleRockNotify	sylar/sylar/module.h	/^    virtual bool handleRockNotify(sylar::RockNotify::ptr notify$/;"	p	class:sylar::RockModule	typeref:typename:bool	access:public	signature:(sylar::RockNotify::ptr notify,sylar::RockStream::ptr stream)
handleRockNotify	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::handleRockNotify(sylar::RockNotify::ptr notify$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::RockNotify::ptr notify,sylar::RockStream::ptr stream)
handleRockNotify	sylar/sylar/ns/name_server_module.h	/^    virtual bool handleRockNotify(sylar::RockNotify::ptr notify$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:public	signature:(sylar::RockNotify::ptr notify,sylar::RockStream::ptr stream)
handleRockNotify	sylar/tests/test_module.cc	/^    bool handleRockNotify(sylar::RockNotify::ptr notify $/;"	f	class:MyModule	typeref:typename:bool	file:	access:public	signature:(sylar::RockNotify::ptr notify,sylar::RockStream::ptr stream)
handleRockRequest	sylar/sylar/module.h	/^    virtual bool handleRockRequest(sylar::RockRequest::ptr request$/;"	p	class:sylar::RockModule	typeref:typename:bool	access:public	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
handleRockRequest	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::handleRockRequest(sylar::RockRequest::ptr request$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
handleRockRequest	sylar/sylar/ns/name_server_module.h	/^    virtual bool handleRockRequest(sylar::RockRequest::ptr request$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:public	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
handleRockRequest	sylar/tests/test_module.cc	/^    bool handleRockRequest(sylar::RockRequest::ptr request$/;"	f	class:MyModule	typeref:typename:bool	file:	access:public	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
handleServerShake	sylar/sylar/http/ws_session.h	/^    bool handleServerShake();$/;"	p	class:sylar::http::WSSession	typeref:typename:bool	access:private	signature:()
handleShake	sylar/sylar/http/ws_session.cc	/^HttpRequest::ptr WSSession::handleShake() {$/;"	f	class:sylar::http::WSSession	typeref:typename:HttpRequest::ptr	signature:()
handleShake	sylar/sylar/http/ws_session.h	/^    HttpRequest::ptr handleShake();$/;"	p	class:sylar::http::WSSession	typeref:typename:HttpRequest::ptr	access:public	signature:()
handleTick	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::handleTick(sylar::RockRequest::ptr request$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
handleTick	sylar/sylar/ns/name_server_module.h	/^    bool handleTick(sylar::RockRequest::ptr request$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:private	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
has	sylar/sylar/env.cc	/^bool Env::has(const std::string& key) {$/;"	f	class:sylar::Env	typeref:typename:bool	signature:(const std::string & key)
has	sylar/sylar/env.h	/^    bool has(const std::string& key);$/;"	p	class:sylar::Env	typeref:typename:bool	access:public	signature:(const std::string & key)
has	sylar/sylar/http/session_data.cc	/^bool SessionData::has(const std::string& key) {$/;"	f	class:sylar::http::SessionData	typeref:typename:bool	signature:(const std::string & key)
has	sylar/sylar/http/session_data.h	/^    bool has(const std::string& key);$/;"	p	class:sylar::http::SessionData	typeref:typename:bool	access:public	signature:(const std::string & key)
hasCookie	sylar/sylar/http/http.cc	/^bool HttpRequest::hasCookie(const std::string& key, std::string* val) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	signature:(const std::string & key,std::string * val)
hasCookie	sylar/sylar/http/http.h	/^    bool hasCookie(const std::string& key, std::string* val = nullptr);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:(const std::string & key,std::string * val=nullptr)
hasError	sylar/sylar/http/http_parser.cc	/^int HttpRequestParser::hasError() {$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:int	signature:()
hasError	sylar/sylar/http/http_parser.cc	/^int HttpResponseParser::hasError() {$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:int	signature:()
hasError	sylar/sylar/http/http_parser.h	/^    int hasError(); $/;"	p	class:sylar::http::HttpRequestParser	typeref:typename:int	access:public	signature:()
hasError	sylar/sylar/http/http_parser.h	/^    int hasError(); $/;"	p	class:sylar::http::HttpResponseParser	typeref:typename:int	access:public	signature:()
hasHeader	sylar/sylar/http/http.cc	/^bool HttpRequest::hasHeader(const std::string& key, std::string* val) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	signature:(const std::string & key,std::string * val)
hasHeader	sylar/sylar/http/http.h	/^    bool hasHeader(const std::string& key, std::string* val = nullptr);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:(const std::string & key,std::string * val=nullptr)
hasIdleThreads	sylar/sylar/scheduler.h	/^    bool hasIdleThreads() { return m_idleThreadCount > 0;}$/;"	f	class:sylar::Scheduler	typeref:typename:bool	access:protected	signature:()
hasNext	sylar/sylar/ds/util.cc	/^bool PrimeGenerator::hasNext() {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:bool	signature:()
hasNext	sylar/sylar/ds/util.cc	/^bool PrimeGenerator::hasNext(uint32_t dist) {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:bool	signature:(uint32_t dist)
hasNext	sylar/sylar/ds/util.h	/^    bool hasNext();$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:bool	access:public	signature:()
hasNext	sylar/sylar/ds/util.h	/^    bool hasNext(uint32_t dist);$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:bool	access:public	signature:(uint32_t dist)
hasParam	sylar/sylar/http/http.cc	/^bool HttpRequest::hasParam(const std::string& key, std::string* val) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	signature:(const std::string & key,std::string * val)
hasParam	sylar/sylar/http/http.h	/^    bool hasParam(const std::string& key, std::string* val = nullptr);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:(const std::string & key,std::string * val=nullptr)
hasPrev	sylar/sylar/ds/util.cc	/^bool PrimeGenerator::hasPrev() {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:bool	signature:()
hasPrev	sylar/sylar/ds/util.h	/^    bool hasPrev();$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:bool	access:public	signature:()
hasQueryDomain	sylar/sylar/ns/ns_client.cc	/^bool NSClient::hasQueryDomain(const std::string& domain) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:bool	signature:(const std::string & domain)
hasQueryDomain	sylar/sylar/ns/ns_client.h	/^    bool hasQueryDomain(const std::string& domain);$/;"	p	class:sylar::ns::NSClient	typeref:typename:bool	access:public	signature:(const std::string & domain)
hasTimer	sylar/sylar/timer.cc	/^bool TimerManager::hasTimer() {$/;"	f	class:sylar::TimerManager	typeref:typename:bool	signature:()
hasTimer	sylar/sylar/timer.h	/^    bool hasTimer();$/;"	p	class:sylar::TimerManager	typeref:typename:bool	access:public	signature:()
has_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_cmd() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:bool	access:public	signature:() const
has_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool NodeInfo::has_cmd() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:bool	signature:() const
has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_domain() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:bool	access:public	signature:() const
has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_domain() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:bool	access:public	signature:() const
has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool NodeInfo::has_domain() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:bool	signature:() const
has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool RegisterInfo::has_domain() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:bool	signature:() const
has_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_ip() const;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:public	signature:() const
has_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool Node::has_ip() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
has_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_node() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:bool	access:public	signature:() const
has_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool RegisterInfo::has_node() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:bool	signature:() const
has_port	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_port() const;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:public	signature:() const
has_port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool Node::has_port() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
has_value	sylar/sylar/ds/roaring.h	/^    bool has_value;$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:bool	access:public
has_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_weight() const;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:public	signature:() const
has_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool Node::has_weight() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
hash	sylar/sylar/ds/util.h	/^    KeyHashType hash;$/;"	m	class:sylar::ds::Murmur3Hash	typeref:typename:KeyHashType	access:public
header_done	sylar/sylar/http/http11_parser.h	/^  element_cb header_done;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
header_done	sylar/sylar/http/httpclient_parser.h	/^  element_cb header_done;$/;"	m	struct:httpclient_parser	typeref:typename:element_cb	access:public
help	build/Makefile	/^help:$/;"	t
help	build/sylar/Makefile	/^help:$/;"	t
hexstring_from_data	sylar/sylar/util/hash_util.cc	/^hexstring_from_data(const void *data, size_t len) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
hexstring_from_data	sylar/sylar/util/hash_util.cc	/^hexstring_from_data(const void *data, size_t len, char *output) {$/;"	f	namespace:sylar	typeref:typename:void	signature:(const void * data,size_t len,char * output)
hexstring_from_data	sylar/sylar/util/hash_util.cc	/^std::string hexstring_from_data(const std::string &data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
hexstring_from_data	sylar/sylar/util/hash_util.h	/^std::string hexstring_from_data(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
hexstring_from_data	sylar/sylar/util/hash_util.h	/^std::string hexstring_from_data(const void *data, size_t len);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
hexstring_from_data	sylar/sylar/util/hash_util.h	/^void hexstring_from_data(const void *data, size_t len, char *output);$/;"	p	namespace:sylar	typeref:typename:void	signature:(const void * data,size_t len,char * output)
highBytes	sylar/sylar/ds/roaring.hh	/^    static uint32_t highBytes(const uint64_t in) { return uint32_t(in >> 32); }$/;"	f	class:Roaring64Map	typeref:typename:uint32_t	access:private	signature:(const uint64_t in)
high_bits	sylar/sylar/ds/roaring.hh	/^                uint32_t high_bits;$/;"	m	struct:Roaring64Map::printf::iter_data	typeref:typename:uint32_t	access:public
high_bits	sylar/sylar/ds/roaring.hh	/^            uint32_t high_bits;$/;"	m	struct:Roaring64Map::toString::iter_data	typeref:typename:uint32_t	access:public
high_low_container	sylar/sylar/ds/roaring.h	/^    roaring_array_t high_low_container;$/;"	m	struct:roaring_bitmap_s	typeref:typename:roaring_array_t	access:public
highbits	sylar/sylar/ds/roaring.h	/^    uint32_t highbits;  \/\/ should be:$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:uint32_t	access:public
hmac	sylar/sylar/util/hash_util.cc	/^std::string hmac(const std::string &text, const std::string &key) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
hmac_md5	sylar/sylar/util/hash_util.cc	/^std::string hmac_md5(const std::string &text, const std::string &key) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
hmac_md5	sylar/sylar/util/hash_util.h	/^std::string hmac_md5(const std::string &text, const std::string &key);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
hmac_sha1	sylar/sylar/util/hash_util.cc	/^std::string hmac_sha1(const std::string &text, const std::string &key) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
hmac_sha1	sylar/sylar/util/hash_util.h	/^std::string hmac_sha1(const std::string &text, const std::string &key);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
hmac_sha256	sylar/sylar/util/hash_util.cc	/^hmac_sha256(const std::string &text, const std::string &key) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
hmac_sha256	sylar/sylar/util/hash_util.h	/^std::string hmac_sha256(const std::string &text, const std::string &key);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
hook_init	sylar/sylar/hook.cc	/^void hook_init() {$/;"	f	namespace:sylar	typeref:typename:void	signature:()
http	sylar/sylar/http/http.cc	/^namespace http {$/;"	n	namespace:sylar	file:
http	sylar/sylar/http/http.h	/^namespace http {$/;"	n	namespace:sylar
http	sylar/sylar/http/http_connection.cc	/^namespace http {$/;"	n	namespace:sylar	file:
http	sylar/sylar/http/http_connection.h	/^namespace http {$/;"	n	namespace:sylar
http	sylar/sylar/http/http_parser.cc	/^namespace http {$/;"	n	namespace:sylar	file:
http	sylar/sylar/http/http_parser.h	/^namespace http {$/;"	n	namespace:sylar
http	sylar/sylar/http/http_server.cc	/^namespace http {$/;"	n	namespace:sylar	file:
http	sylar/sylar/http/http_server.h	/^namespace http {$/;"	n	namespace:sylar
http	sylar/sylar/http/http_session.cc	/^namespace http {$/;"	n	namespace:sylar	file:
http	sylar/sylar/http/http_session.h	/^namespace http {$/;"	n	namespace:sylar
http	sylar/sylar/http/servlet.cc	/^namespace http {$/;"	n	namespace:sylar	file:
http	sylar/sylar/http/servlet.h	/^namespace http {$/;"	n	namespace:sylar
http	sylar/sylar/http/servlets/config_servlet.cc	/^namespace http {$/;"	n	namespace:sylar	file:
http	sylar/sylar/http/servlets/config_servlet.h	/^namespace http {$/;"	n	namespace:sylar
http	sylar/sylar/http/servlets/status_servlet.cc	/^namespace http {$/;"	n	namespace:sylar	file:
http	sylar/sylar/http/servlets/status_servlet.h	/^namespace http {$/;"	n	namespace:sylar
http	sylar/sylar/http/session_data.cc	/^namespace http {$/;"	n	namespace:sylar	file:
http	sylar/sylar/http/session_data.h	/^namespace http {$/;"	n	namespace:sylar
http	sylar/sylar/http/ws_connection.cc	/^namespace http {$/;"	n	namespace:sylar	file:
http	sylar/sylar/http/ws_connection.h	/^namespace http {$/;"	n	namespace:sylar
http	sylar/sylar/http/ws_server.cc	/^namespace http {$/;"	n	namespace:sylar	file:
http	sylar/sylar/http/ws_server.h	/^namespace http {$/;"	n	namespace:sylar
http	sylar/sylar/http/ws_servlet.cc	/^namespace http {$/;"	n	namespace:sylar	file:
http	sylar/sylar/http/ws_servlet.h	/^namespace http {$/;"	n	namespace:sylar
http	sylar/sylar/http/ws_session.cc	/^namespace http {$/;"	n	namespace:sylar	file:
http	sylar/sylar/http/ws_session.h	/^namespace http {$/;"	n	namespace:sylar
http11_parser_h	sylar/sylar/http/http11_parser.h	/^#define http11_parser_h$/;"	d
http_field	sylar/sylar/http/http11_parser.h	/^  field_cb http_field;$/;"	m	struct:http_parser	typeref:typename:field_cb	access:public
http_field	sylar/sylar/http/httpclient_parser.h	/^  field_cb http_field;$/;"	m	struct:httpclient_parser	typeref:typename:field_cb	access:public
http_parser	sylar/sylar/http/http11_parser.h	/^typedef struct http_parser { $/;"	s
http_parser	sylar/sylar/http/http11_parser.h	/^} http_parser;$/;"	t	typeref:struct:http_parser
http_parser::body_start	sylar/sylar/http/http11_parser.h	/^  size_t body_start;$/;"	m	struct:http_parser	typeref:typename:size_t	access:public
http_parser::content_len	sylar/sylar/http/http11_parser.h	/^  int content_len;$/;"	m	struct:http_parser	typeref:typename:int	access:public
http_parser::cs	sylar/sylar/http/http11_parser.h	/^  int cs;$/;"	m	struct:http_parser	typeref:typename:int	access:public
http_parser::data	sylar/sylar/http/http11_parser.h	/^  void *data;$/;"	m	struct:http_parser	typeref:typename:void *	access:public
http_parser::field_len	sylar/sylar/http/http11_parser.h	/^  size_t field_len;$/;"	m	struct:http_parser	typeref:typename:size_t	access:public
http_parser::field_start	sylar/sylar/http/http11_parser.h	/^  size_t field_start;$/;"	m	struct:http_parser	typeref:typename:size_t	access:public
http_parser::fragment	sylar/sylar/http/http11_parser.h	/^  element_cb fragment;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
http_parser::header_done	sylar/sylar/http/http11_parser.h	/^  element_cb header_done;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
http_parser::http_field	sylar/sylar/http/http11_parser.h	/^  field_cb http_field;$/;"	m	struct:http_parser	typeref:typename:field_cb	access:public
http_parser::http_version	sylar/sylar/http/http11_parser.h	/^  element_cb http_version;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
http_parser::json_sent	sylar/sylar/http/http11_parser.h	/^  int json_sent;$/;"	m	struct:http_parser	typeref:typename:int	access:public
http_parser::mark	sylar/sylar/http/http11_parser.h	/^  size_t mark;$/;"	m	struct:http_parser	typeref:typename:size_t	access:public
http_parser::nread	sylar/sylar/http/http11_parser.h	/^  size_t nread;$/;"	m	struct:http_parser	typeref:typename:size_t	access:public
http_parser::query_start	sylar/sylar/http/http11_parser.h	/^  size_t query_start;$/;"	m	struct:http_parser	typeref:typename:size_t	access:public
http_parser::query_string	sylar/sylar/http/http11_parser.h	/^  element_cb query_string;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
http_parser::request_method	sylar/sylar/http/http11_parser.h	/^  element_cb request_method;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
http_parser::request_path	sylar/sylar/http/http11_parser.h	/^  element_cb request_path;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
http_parser::request_uri	sylar/sylar/http/http11_parser.h	/^  element_cb request_uri;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
http_parser::uri_relaxed	sylar/sylar/http/http11_parser.h	/^  int uri_relaxed;$/;"	m	struct:http_parser	typeref:typename:int	access:public
http_parser::xml_sent	sylar/sylar/http/http11_parser.h	/^  int xml_sent;$/;"	m	struct:http_parser	typeref:typename:int	access:public
http_parser_en_main	sylar/sylar/http/http11_parser.rl.cc	/^static const int http_parser_en_main = 1;$/;"	v	typeref:typename:const int	file:
http_parser_error	sylar/sylar/http/http11_parser.rl.cc	/^static const int http_parser_error = 0;$/;"	v	typeref:typename:const int	file:
http_parser_execute	sylar/sylar/http/http11_parser.h	/^size_t http_parser_execute(http_parser *parser, const char *data, size_t len, size_t off);$/;"	p	typeref:typename:size_t	signature:(http_parser * parser,const char * data,size_t len,size_t off)
http_parser_execute	sylar/sylar/http/http11_parser.rl.cc	/^size_t http_parser_execute(http_parser *parser, const char *buffer, size_t len, size_t off)  $/;"	f	typeref:typename:size_t	signature:(http_parser * parser,const char * buffer,size_t len,size_t off)
http_parser_finish	sylar/sylar/http/http11_parser.h	/^int http_parser_finish(http_parser *parser);$/;"	p	typeref:typename:int	signature:(http_parser * parser)
http_parser_finish	sylar/sylar/http/http11_parser.rl.cc	/^int http_parser_finish(http_parser *parser)$/;"	f	typeref:typename:int	signature:(http_parser * parser)
http_parser_first_final	sylar/sylar/http/http11_parser.rl.cc	/^static const int http_parser_first_final = 348;$/;"	v	typeref:typename:const int	file:
http_parser_has_error	sylar/sylar/http/http11_parser.h	/^int http_parser_has_error(http_parser *parser);$/;"	p	typeref:typename:int	signature:(http_parser * parser)
http_parser_has_error	sylar/sylar/http/http11_parser.rl.cc	/^int http_parser_has_error(http_parser *parser) {$/;"	f	typeref:typename:int	signature:(http_parser * parser)
http_parser_init	sylar/sylar/http/http11_parser.h	/^int http_parser_init(http_parser *parser);$/;"	p	typeref:typename:int	signature:(http_parser * parser)
http_parser_init	sylar/sylar/http/http11_parser.rl.cc	/^int http_parser_init(http_parser *parser) {$/;"	f	typeref:typename:int	signature:(http_parser * parser)
http_parser_is_finished	sylar/sylar/http/http11_parser.h	/^int http_parser_is_finished(http_parser *parser);$/;"	p	typeref:typename:int	signature:(http_parser * parser)
http_parser_is_finished	sylar/sylar/http/http11_parser.rl.cc	/^int http_parser_is_finished(http_parser *parser) {$/;"	f	typeref:typename:int	signature:(http_parser * parser)
http_parser_nread	sylar/sylar/http/http11_parser.h	/^#define http_parser_nread(/;"	d	signature:(parser)
http_parser_start	sylar/sylar/http/http11_parser.rl.cc	/^static const int http_parser_start = 1;$/;"	v	typeref:typename:const int	file:
http_version	sylar/sylar/http/http11_parser.h	/^  element_cb http_version;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
http_version	sylar/sylar/http/httpclient_parser.h	/^  element_cb http_version;$/;"	m	struct:httpclient_parser	typeref:typename:element_cb	access:public
httpclient_parser	sylar/sylar/http/httpclient_parser.h	/^typedef struct httpclient_parser { $/;"	s
httpclient_parser	sylar/sylar/http/httpclient_parser.h	/^} httpclient_parser;$/;"	t	typeref:struct:httpclient_parser
httpclient_parser::body_start	sylar/sylar/http/httpclient_parser.h	/^  size_t body_start;$/;"	m	struct:httpclient_parser	typeref:typename:size_t	access:public
httpclient_parser::chunk_size	sylar/sylar/http/httpclient_parser.h	/^  element_cb chunk_size;$/;"	m	struct:httpclient_parser	typeref:typename:element_cb	access:public
httpclient_parser::chunked	sylar/sylar/http/httpclient_parser.h	/^  int chunked;$/;"	m	struct:httpclient_parser	typeref:typename:int	access:public
httpclient_parser::chunks_done	sylar/sylar/http/httpclient_parser.h	/^  int chunks_done;$/;"	m	struct:httpclient_parser	typeref:typename:int	access:public
httpclient_parser::close	sylar/sylar/http/httpclient_parser.h	/^  int close;$/;"	m	struct:httpclient_parser	typeref:typename:int	access:public
httpclient_parser::content_len	sylar/sylar/http/httpclient_parser.h	/^  int content_len;$/;"	m	struct:httpclient_parser	typeref:typename:int	access:public
httpclient_parser::cs	sylar/sylar/http/httpclient_parser.h	/^  int cs;$/;"	m	struct:httpclient_parser	typeref:typename:int	access:public
httpclient_parser::data	sylar/sylar/http/httpclient_parser.h	/^  void *data;$/;"	m	struct:httpclient_parser	typeref:typename:void *	access:public
httpclient_parser::field_len	sylar/sylar/http/httpclient_parser.h	/^  size_t field_len;$/;"	m	struct:httpclient_parser	typeref:typename:size_t	access:public
httpclient_parser::field_start	sylar/sylar/http/httpclient_parser.h	/^  size_t field_start;$/;"	m	struct:httpclient_parser	typeref:typename:size_t	access:public
httpclient_parser::header_done	sylar/sylar/http/httpclient_parser.h	/^  element_cb header_done;$/;"	m	struct:httpclient_parser	typeref:typename:element_cb	access:public
httpclient_parser::http_field	sylar/sylar/http/httpclient_parser.h	/^  field_cb http_field;$/;"	m	struct:httpclient_parser	typeref:typename:field_cb	access:public
httpclient_parser::http_version	sylar/sylar/http/httpclient_parser.h	/^  element_cb http_version;$/;"	m	struct:httpclient_parser	typeref:typename:element_cb	access:public
httpclient_parser::last_chunk	sylar/sylar/http/httpclient_parser.h	/^  element_cb last_chunk;$/;"	m	struct:httpclient_parser	typeref:typename:element_cb	access:public
httpclient_parser::mark	sylar/sylar/http/httpclient_parser.h	/^  size_t mark;$/;"	m	struct:httpclient_parser	typeref:typename:size_t	access:public
httpclient_parser::nread	sylar/sylar/http/httpclient_parser.h	/^  size_t nread;$/;"	m	struct:httpclient_parser	typeref:typename:size_t	access:public
httpclient_parser::reason_phrase	sylar/sylar/http/httpclient_parser.h	/^  element_cb reason_phrase;$/;"	m	struct:httpclient_parser	typeref:typename:element_cb	access:public
httpclient_parser::status	sylar/sylar/http/httpclient_parser.h	/^  int status;$/;"	m	struct:httpclient_parser	typeref:typename:int	access:public
httpclient_parser::status_code	sylar/sylar/http/httpclient_parser.h	/^  element_cb status_code;$/;"	m	struct:httpclient_parser	typeref:typename:element_cb	access:public
httpclient_parser_en_main	sylar/sylar/http/httpclient_parser.rl.cc	/^static const int httpclient_parser_en_main = 1;$/;"	v	typeref:typename:const int	file:
httpclient_parser_error	sylar/sylar/http/httpclient_parser.rl.cc	/^static const int httpclient_parser_error = 0;$/;"	v	typeref:typename:const int	file:
httpclient_parser_execute	sylar/sylar/http/httpclient_parser.h	/^int httpclient_parser_execute(httpclient_parser *parser, const char *data, size_t len, size_t of/;"	p	typeref:typename:int	signature:(httpclient_parser * parser,const char * data,size_t len,size_t off)
httpclient_parser_execute	sylar/sylar/http/httpclient_parser.rl.cc	/^int httpclient_parser_execute(httpclient_parser *parser, const char *buffer, size_t len, size_t /;"	f	typeref:typename:int	signature:(httpclient_parser * parser,const char * buffer,size_t len,size_t off)
httpclient_parser_finish	sylar/sylar/http/httpclient_parser.h	/^int httpclient_parser_finish(httpclient_parser *parser);$/;"	p	typeref:typename:int	signature:(httpclient_parser * parser)
httpclient_parser_finish	sylar/sylar/http/httpclient_parser.rl.cc	/^int httpclient_parser_finish(httpclient_parser *parser)$/;"	f	typeref:typename:int	signature:(httpclient_parser * parser)
httpclient_parser_first_final	sylar/sylar/http/httpclient_parser.rl.cc	/^static const int httpclient_parser_first_final = 120;$/;"	v	typeref:typename:const int	file:
httpclient_parser_h	sylar/sylar/http/httpclient_parser.h	/^#define httpclient_parser_h$/;"	d
httpclient_parser_has_error	sylar/sylar/http/httpclient_parser.h	/^int httpclient_parser_has_error(httpclient_parser *parser);$/;"	p	typeref:typename:int	signature:(httpclient_parser * parser)
httpclient_parser_has_error	sylar/sylar/http/httpclient_parser.rl.cc	/^int httpclient_parser_has_error(httpclient_parser *parser) {$/;"	f	typeref:typename:int	signature:(httpclient_parser * parser)
httpclient_parser_init	sylar/sylar/http/httpclient_parser.h	/^int httpclient_parser_init(httpclient_parser *parser);$/;"	p	typeref:typename:int	signature:(httpclient_parser * parser)
httpclient_parser_init	sylar/sylar/http/httpclient_parser.rl.cc	/^int httpclient_parser_init(httpclient_parser *parser)  {$/;"	f	typeref:typename:int	signature:(httpclient_parser * parser)
httpclient_parser_is_finished	sylar/sylar/http/httpclient_parser.h	/^int httpclient_parser_is_finished(httpclient_parser *parser);$/;"	p	typeref:typename:int	signature:(httpclient_parser * parser)
httpclient_parser_is_finished	sylar/sylar/http/httpclient_parser.rl.cc	/^int httpclient_parser_is_finished(httpclient_parser *parser) {$/;"	f	typeref:typename:int	signature:(httpclient_parser * parser)
httpclient_parser_nread	sylar/sylar/http/httpclient_parser.h	/^#define httpclient_parser_nread(/;"	d	signature:(parser)
httpclient_parser_start	sylar/sylar/http/httpclient_parser.rl.cc	/^static const int httpclient_parser_start = 1;$/;"	v	typeref:typename:const int	file:
i	sylar/sylar/ds/roaring.hh	/^    roaring_uint32_iterator_t i;$/;"	m	class:Roaring64MapSetBitForwardIterator	typeref:typename:roaring_uint32_iterator_t	access:protected
i	sylar/sylar/ds/roaring.hh	/^    roaring_uint32_iterator_t i;$/;"	m	class:Roaring64MapSetBitReverseIterator	typeref:typename:roaring_uint32_iterator_t	access:protected
i	sylar/sylar/ds/roaring.hh	/^    roaring_uint32_iterator_t i;$/;"	m	class:RoaringSetBitForwardIterator	typeref:typename:roaring_uint32_iterator_t	access:public
i	sylar/sylar/ds/roaring.hh	/^    roaring_uint32_iterator_t i;$/;"	m	class:RoaringSetBitReverseIterator	typeref:typename:roaring_uint32_iterator_t	access:public
id	sylar/sylar/ds/util.h	/^    K id;$/;"	m	struct:sylar::ds::Ivt	typeref:typename:K	access:public
id	sylar/sylar/tcp_server.h	/^    std::string id;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
idle	sylar/sylar/iomanager.cc	/^void IOManager::idle() {$/;"	f	class:sylar::IOManager	typeref:typename:void	signature:()
idle	sylar/sylar/iomanager.h	/^    void idle() override;$/;"	p	class:sylar::IOManager	typeref:typename:void	access:protected	signature:()
idle	sylar/sylar/scheduler.cc	/^void Scheduler::idle() {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:()
idle	sylar/sylar/scheduler.h	/^    virtual void idle();$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:protected	signature:()
inValues	sylar/sylar/ds/dict.h	/^    bool inValues(V* ptr) const {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:private	signature:(V * ptr) const
inValues	sylar/sylar/ds/hash_multimap.h	/^    bool inValues(V* ptr) const {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:private	signature:(V * ptr) const
in_container_index	sylar/sylar/ds/roaring.h	/^    int32_t in_container_index;  \/\/ for bitset and array container, this is out$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:int32_t	access:public
incDel	sylar/sylar/ds/cache_status.h	/^    int64_t incDel(int64_t v = 1) { return Atomic::addFetch(m_del, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
incDoing	sylar/sylar/streams/load_balance.h	/^    uint32_t incDoing(uint32_t v) { return sylar::Atomic::addFetch(m_doing, v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
incErrs	sylar/sylar/streams/load_balance.h	/^    uint32_t incErrs(uint32_t v) { return sylar::Atomic::addFetch(m_errs, v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
incGet	sylar/sylar/ds/cache_status.h	/^    int64_t incGet(int64_t v = 1) { return Atomic::addFetch(m_get, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
incHit	sylar/sylar/ds/cache_status.h	/^    int64_t incHit(int64_t v = 1) { return Atomic::addFetch(m_hit, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
incOks	sylar/sylar/streams/load_balance.h	/^    uint32_t incOks(uint32_t v) { return sylar::Atomic::addFetch(m_oks, v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
incPrune	sylar/sylar/ds/cache_status.h	/^    int64_t incPrune(int64_t v = 1) { return Atomic::addFetch(m_prune, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
incSet	sylar/sylar/ds/cache_status.h	/^    int64_t incSet(int64_t v = 1) { return Atomic::addFetch(m_set, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
incTimeout	sylar/sylar/ds/cache_status.h	/^    int64_t incTimeout(int64_t v = 1) { return Atomic::addFetch(m_timeout, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
incTimeouts	sylar/sylar/streams/load_balance.h	/^    uint32_t incTimeouts(uint32_t v) { return sylar::Atomic::addFetch(m_timeouts, v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
incTotal	sylar/sylar/streams/load_balance.h	/^    uint32_t incTotal(uint32_t v) { return sylar::Atomic::addFetch(m_total, v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
incUsedTime	sylar/sylar/streams/load_balance.h	/^    uint32_t incUsedTime(uint32_t v) { return sylar::Atomic::addFetch(m_usedTime ,v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
info	sylar/sylar/log.cc	/^void Logger::info(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
info	sylar/sylar/log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
info_arch	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_language_dialect_default	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v	typeref:typename:const char *
info_language_dialect_default	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v	typeref:typename:const char *
info_platform	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
infos	sylar/sylar/ns/ns_protobuf.pb.h	/^      infos() const;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> &	access:public	signature:() const
infos	sylar/sylar/ns/ns_protobuf.pb.h	/^      infos() const;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::RegisterInfo> &	access:public	signature:() const
infos	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::NodeInfo& infos(int index) const;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:const::sylar::ns::NodeInfo &	access:public	signature:(int index) const
infos	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::RegisterInfo& infos(int index) const;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:const::sylar::ns::RegisterInfo &	access:public	signature:(int index) const
infos	sylar/sylar/ns/ns_protobuf.pb.h	/^QueryResponse::infos() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> &	signature:() const
infos	sylar/sylar/ns/ns_protobuf.pb.h	/^RegisterRequest::infos() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::RegisterInfo> &	signature:() const
infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::NodeInfo& QueryResponse::infos(int index) const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::sylar::ns::NodeInfo &	signature:(int index) const
infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::RegisterInfo& RegisterRequest::infos(int index) const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::sylar::ns::RegisterInfo &	signature:(int index) const
infos	sylar/sylar/ns/ns_protobuf.proto	/^    repeated NodeInfo infos = 1;$/;"	f
infos	sylar/sylar/ns/ns_protobuf.proto	/^    repeated RegisterInfo infos = 1;    \/\/注册信息$/;"	f
infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int infos_size() const;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:int	access:public	signature:() const
infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int infos_size() const;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:int	access:public	signature:() const
infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int QueryResponse::infos_size() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:int	signature:() const
infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int RegisterRequest::infos_size() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:int	signature:() const
init	sylar/sylar/application.cc	/^bool Application::init(int argc, char** argv) {$/;"	f	class:sylar::Application	typeref:typename:bool	signature:(int argc,char ** argv)
init	sylar/sylar/application.h	/^    bool init(int argc, char** argv);$/;"	p	class:sylar::Application	typeref:typename:bool	access:public	signature:(int argc,char ** argv)
init	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::init() {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:()
init	sylar/sylar/db/fox_thread.h	/^    void init();$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:()
init	sylar/sylar/db/redis.cc	/^bool FoxRedis::Ctx::init() {$/;"	f	class:sylar::FoxRedis::Ctx	typeref:typename:bool	signature:()
init	sylar/sylar/db/redis.cc	/^bool FoxRedis::init() {$/;"	f	class:sylar::FoxRedis	typeref:typename:bool	signature:()
init	sylar/sylar/db/redis.cc	/^bool FoxRedisCluster::Ctx::init() {$/;"	f	class:sylar::FoxRedisCluster::Ctx	typeref:typename:bool	signature:()
init	sylar/sylar/db/redis.cc	/^bool FoxRedisCluster::init() {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:bool	signature:()
init	sylar/sylar/db/redis.cc	/^void RedisManager::init() {$/;"	f	class:sylar::RedisManager	typeref:typename:void	signature:()
init	sylar/sylar/db/redis.h	/^        bool init();$/;"	p	struct:sylar::FoxRedis::Ctx	typeref:typename:bool	access:public	signature:()
init	sylar/sylar/db/redis.h	/^        bool init();$/;"	p	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:bool	access:public	signature:()
init	sylar/sylar/db/redis.h	/^    bool init();$/;"	p	class:sylar::FoxRedis	typeref:typename:bool	access:public	signature:()
init	sylar/sylar/db/redis.h	/^    bool init();$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:bool	access:public	signature:()
init	sylar/sylar/db/redis.h	/^    void init();$/;"	p	class:sylar::RedisManager	typeref:typename:void	access:private	signature:()
init	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::init() {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:()
init	sylar/sylar/ds/bitmap.h	/^    static bool init();$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:()
init	sylar/sylar/env.cc	/^bool Env::init(int argc, char** argv) {$/;"	f	class:sylar::Env	typeref:typename:bool	signature:(int argc,char ** argv)
init	sylar/sylar/env.h	/^    bool init(int argc, char** argv);$/;"	p	class:sylar::Env	typeref:typename:bool	access:public	signature:(int argc,char ** argv)
init	sylar/sylar/fd_manager.cc	/^bool FdCtx::init() {$/;"	f	class:sylar::FdCtx	typeref:typename:bool	signature:()
init	sylar/sylar/fd_manager.h	/^    bool init();$/;"	p	class:sylar::FdCtx	typeref:typename:bool	access:private	signature:()
init	sylar/sylar/http/http.cc	/^void HttpRequest::init() {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:()
init	sylar/sylar/http/http.h	/^    void init();$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:()
init	sylar/sylar/log.cc	/^void LogFormatter::init() {$/;"	f	class:sylar::LogFormatter	typeref:typename:void	signature:()
init	sylar/sylar/log.cc	/^void LoggerManager::init() {$/;"	f	class:sylar::LoggerManager	typeref:typename:void	signature:()
init	sylar/sylar/log.h	/^    void init();$/;"	p	class:sylar::LogFormatter	typeref:typename:void	access:public	signature:()
init	sylar/sylar/log.h	/^    void init();$/;"	p	class:sylar::LoggerManager	typeref:typename:void	access:public	signature:()
init	sylar/sylar/module.cc	/^void ModuleManager::init() {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:()
init	sylar/sylar/module.h	/^    void init();$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:()
init	sylar/sylar/ns/ns_client.cc	/^void NSClient::init() {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:()
init	sylar/sylar/ns/ns_client.h	/^    void init();$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:public	signature:()
init	sylar/sylar/orm/column.cc	/^bool Column::init(const tinyxml2::XMLElement& node) {$/;"	f	class:sylar::orm::Column	typeref:typename:bool	signature:(const tinyxml2::XMLElement & node)
init	sylar/sylar/orm/column.h	/^    bool init(const tinyxml2::XMLElement& node);$/;"	p	class:sylar::orm::Column	typeref:typename:bool	access:public	signature:(const tinyxml2::XMLElement & node)
init	sylar/sylar/orm/index.cc	/^bool Index::init(const tinyxml2::XMLElement& node) {$/;"	f	class:sylar::orm::Index	typeref:typename:bool	signature:(const tinyxml2::XMLElement & node)
init	sylar/sylar/orm/index.h	/^    bool init(const tinyxml2::XMLElement& node);$/;"	p	class:sylar::orm::Index	typeref:typename:bool	access:public	signature:(const tinyxml2::XMLElement & node)
init	sylar/sylar/orm/table.cc	/^bool Table::init(const tinyxml2::XMLElement& node) {$/;"	f	class:sylar::orm::Table	typeref:typename:bool	signature:(const tinyxml2::XMLElement & node)
init	sylar/sylar/orm/table.h	/^    bool init(const tinyxml2::XMLElement& node);$/;"	p	class:sylar::orm::Table	typeref:typename:bool	access:public	signature:(const tinyxml2::XMLElement & node)
init	sylar/sylar/socket.cc	/^bool SSLSocket::init(int sock) {$/;"	f	class:sylar::SSLSocket	typeref:typename:bool	signature:(int sock)
init	sylar/sylar/socket.cc	/^bool Socket::init(int sock) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(int sock)
init	sylar/sylar/socket.h	/^    virtual bool init(int sock) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:bool	access:protected	signature:(int sock)
init	sylar/sylar/socket.h	/^    virtual bool init(int sock);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:protected	signature:(int sock)
init	sylar/sylar/streams/load_balance.cc	/^void HolderStatsSet::init(const uint32_t& now) {$/;"	f	class:sylar::HolderStatsSet	typeref:typename:void	signature:(const uint32_t & now)
init	sylar/sylar/streams/load_balance.cc	/^void LoadBalance::init() {$/;"	f	class:sylar::LoadBalance	typeref:typename:void	signature:()
init	sylar/sylar/streams/load_balance.h	/^    void init();$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:public	signature:()
init	sylar/sylar/streams/load_balance.h	/^    void init(const uint32_t& now);$/;"	p	class:sylar::HolderStatsSet	typeref:typename:void	access:private	signature:(const uint32_t & now)
init	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::init(Type type, int level, int window_bits$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(Type type,int level,int window_bits,int memlevel,Strategy strategy)
init	sylar/sylar/streams/zlib_stream.h	/^    int init(Type type = DEFLATE, int level = DEFAULT_COMPRESSION$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:private	signature:(Type type=DEFLATE,int level=DEFAULT_COMPRESSION,int window_bits=15,int memlevel=8,Strategy strategy=DEFAULT)
init	sylar/sylar/worker.cc	/^bool WorkerManager::init() {$/;"	f	class:sylar::WorkerManager	typeref:typename:bool	signature:()
init	sylar/sylar/worker.cc	/^bool WorkerManager::init(const std::map<std::string, std::map<std::string, std::string> >& v) {$/;"	f	class:sylar::WorkerManager	typeref:typename:bool	signature:(const std::map<std::string,std::map<std::string,std::string>> & v)
init	sylar/sylar/worker.h	/^    bool init();$/;"	p	class:sylar::WorkerManager	typeref:typename:bool	access:public	signature:()
init	sylar/sylar/worker.h	/^    bool init(const std::map<std::string, std::map<std::string, std::string> >& v);$/;"	p	class:sylar::WorkerManager	typeref:typename:bool	access:public	signature:(const std::map<std::string,std::map<std::string,std::string>> & v)
init	sylar/sylar/zk_client.cc	/^bool ZKClient::init(const std::string& hosts, int recv_timeout, watcher_callback cb, log_callbac/;"	f	class:sylar::ZKClient	typeref:typename:bool	signature:(const std::string & hosts,int recv_timeout,watcher_callback cb,log_callback lcb)
init	sylar/sylar/zk_client.h	/^    bool init(const std::string& hosts, int recv_timeout, watcher_callback cb, log_callback lcb /;"	p	class:sylar::ZKClient	typeref:typename:bool	access:public	signature:(const std::string & hosts,int recv_timeout,watcher_callback cb,log_callback lcb=nullptr)
init	sylar/tests/test_bitmap.cc	/^void init() {$/;"	f	typeref:typename:void	signature:()
initBodyParam	sylar/sylar/http/http.cc	/^void HttpRequest::initBodyParam() {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:()
initBodyParam	sylar/sylar/http/http.h	/^    void initBodyParam();$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:()
initConf	sylar/sylar/streams/load_balance.cc	/^void SDLoadBalance::initConf(const std::unordered_map<std::string$/;"	f	class:sylar::SDLoadBalance	typeref:typename:void	signature:(const std::unordered_map<std::string,std::unordered_map<std::string,std::string>> & confs)
initConf	sylar/sylar/streams/load_balance.h	/^    void initConf(const std::unordered_map<std::string, std::unordered_map<std::string, std::str/;"	p	class:sylar::SDLoadBalance	typeref:typename:void	access:public	signature:(const std::unordered_map<std::string,std::unordered_map<std::string,std::string>> & confs)
initCookies	sylar/sylar/http/http.cc	/^void HttpRequest::initCookies() {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:()
initCookies	sylar/sylar/http/http.h	/^    void initCookies();$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:()
initModule	sylar/sylar/module.cc	/^void ModuleManager::initModule(const std::string& path) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(const std::string & path)
initModule	sylar/sylar/module.h	/^    void initModule(const std::string& path);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:private	signature:(const std::string & path)
initNolock	sylar/sylar/streams/load_balance.cc	/^void RoundRobinLoadBalance::initNolock() {$/;"	f	class:sylar::RoundRobinLoadBalance	typeref:typename:void	signature:()
initNolock	sylar/sylar/streams/load_balance.cc	/^void WeightLoadBalance::initNolock() {$/;"	f	class:sylar::WeightLoadBalance	typeref:typename:void	signature:()
initNolock	sylar/sylar/streams/load_balance.h	/^    virtual void initNolock() = 0;$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:protected	signature:()
initNolock	sylar/sylar/streams/load_balance.h	/^    virtual void initNolock();$/;"	p	class:sylar::RoundRobinLoadBalance	typeref:typename:void	access:protected	signature:()
initNolock	sylar/sylar/streams/load_balance.h	/^    virtual void initNolock();$/;"	p	class:sylar::WeightLoadBalance	typeref:typename:void	access:protected	signature:()
initParam	sylar/sylar/http/http.cc	/^void HttpRequest::initParam() {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:()
initParam	sylar/sylar/http/http.h	/^    void initParam();$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:()
initQueryParam	sylar/sylar/http/http.cc	/^void HttpRequest::initQueryParam() {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:()
initQueryParam	sylar/sylar/http/http.h	/^    void initQueryParam();$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:()
initSock	sylar/sylar/socket.cc	/^void Socket::initSock() {$/;"	f	class:sylar::Socket	typeref:typename:void	signature:()
initSock	sylar/sylar/socket.h	/^    void initSock();$/;"	p	class:sylar::Socket	typeref:typename:void	access:protected	signature:()
init_cb	sylar/sylar/db/fox_thread.h	/^    typedef std::function<void (FoxThread*)> init_cb;$/;"	t	class:sylar::FoxThread	access:public
innerClose	sylar/sylar/streams/async_socket_stream.cc	/^bool AsyncSocketStream::innerClose() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:bool	signature:()
innerClose	sylar/sylar/streams/async_socket_stream.h	/^    bool innerClose();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:bool	access:protected	signature:()
inplace_flip_container	sylar/sylar/ds/roaring.c	/^static void inplace_flip_container(roaring_array_t *x1_arr, uint16_t hb,$/;"	f	typeref:typename:void	file:	signature:(roaring_array_t * x1_arr,uint16_t hb,uint16_t lb_start,uint16_t lb_end)
inplace_fully_flip_container	sylar/sylar/ds/roaring.c	/^static void inplace_fully_flip_container(roaring_array_t *x1_arr, uint16_t hb) {$/;"	f	typeref:typename:void	file:	signature:(roaring_array_t * x1_arr,uint16_t hb)
insert	sylar/sylar/address.cc	/^std::ostream& IPv4Address::insert(std::ostream& os) const {$/;"	f	class:sylar::IPv4Address	typeref:typename:std::ostream &	signature:(std::ostream & os) const
insert	sylar/sylar/address.cc	/^std::ostream& IPv6Address::insert(std::ostream& os) const {$/;"	f	class:sylar::IPv6Address	typeref:typename:std::ostream &	signature:(std::ostream & os) const
insert	sylar/sylar/address.cc	/^std::ostream& UnixAddress::insert(std::ostream& os) const {$/;"	f	class:sylar::UnixAddress	typeref:typename:std::ostream &	signature:(std::ostream & os) const
insert	sylar/sylar/address.cc	/^std::ostream& UnknownAddress::insert(std::ostream& os) const {$/;"	f	class:sylar::UnknownAddress	typeref:typename:std::ostream &	signature:(std::ostream & os) const
insert	sylar/sylar/address.h	/^    std::ostream& insert(std::ostream& os) const override;$/;"	p	class:sylar::IPv4Address	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
insert	sylar/sylar/address.h	/^    std::ostream& insert(std::ostream& os) const override;$/;"	p	class:sylar::IPv6Address	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
insert	sylar/sylar/address.h	/^    std::ostream& insert(std::ostream& os) const override;$/;"	p	class:sylar::UnixAddress	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
insert	sylar/sylar/address.h	/^    std::ostream& insert(std::ostream& os) const override;$/;"	p	class:sylar::UnknownAddress	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
insert	sylar/sylar/address.h	/^    virtual std::ostream& insert(std::ostream& os) const = 0;$/;"	p	class:sylar::Address	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
insert	sylar/sylar/ds/array.h	/^    bool insert(const T& v) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(const T & v)
insert	sylar/sylar/ds/array.h	/^    bool insert(const T& v, std::function<bool(const T&, const T&)> cmp) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(const T & v,std::function<bool (const T &,const T &)> cmp)
insert	sylar/sylar/ds/array.h	/^    bool insert(int64_t idx, const T& v) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(int64_t idx,const T & v)
insert	sylar/sylar/ds/dict.h	/^    bool insert(const K& k, const V* v, const uint32_t& size) {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:public	signature:(const K & k,const V * v,const uint32_t & size)
insert	sylar/sylar/ds/hash_multimap.h	/^    bool insert(const K& k, const V& v) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,const V & v)
insert	sylar/sylar/ds/hash_multimap.h	/^    bool insert(const K& k, const V* v, const uint32_t& size) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,const V * v,const uint32_t & size)
insert_flipped_container	sylar/sylar/ds/roaring.c	/^static void insert_flipped_container(roaring_array_t *ans_arr,$/;"	f	typeref:typename:void	file:	signature:(roaring_array_t * ans_arr,const roaring_array_t * x1_arr,uint16_t hb,uint16_t lb_start,uint16_t lb_end)
insert_fully_flipped_container	sylar/sylar/ds/roaring.c	/^static void insert_fully_flipped_container(roaring_array_t *ans_arr,$/;"	f	typeref:typename:void	file:	signature:(roaring_array_t * ans_arr,const roaring_array_t * x1_arr,uint16_t hb)
interleavedBinarySearch	sylar/sylar/ds/roaring.c	/^extern inline int32_t interleavedBinarySearch(const rle16_t *array,$/;"	p	typeref:typename:int32_t	file:	signature:(const rle16_t * array,int32_t lenarray,uint16_t ikey)
interleavedBinarySearch	sylar/sylar/ds/roaring.h	/^inline int32_t interleavedBinarySearch(const rle16_t *array, int32_t lenarray,$/;"	f	typeref:typename:int32_t	signature:(const rle16_t * array,int32_t lenarray,uint16_t ikey)
internal	sylar/sylar/ns/ns_protobuf.pb.h	/^namespace internal {$/;"	n
internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const Node* internal_default_instance() {$/;"	f	class:sylar::ns::Node	typeref:typename:const Node *	access:public	signature:()
internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const NodeInfo* internal_default_instance() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const NodeInfo *	access:public	signature:()
internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const NotifyMessage* internal_default_instance() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const NotifyMessage *	access:public	signature:()
internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const QueryRequest* internal_default_instance() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const QueryRequest *	access:public	signature:()
internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const QueryResponse* internal_default_instance() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const QueryResponse *	access:public	signature:()
internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const RegisterInfo* internal_default_instance() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const RegisterInfo *	access:public	signature:()
internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const RegisterRequest* internal_default_instance() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const RegisterRequest *	access:public	signature:()
intersect	sylar/sylar/ds/roaring.hh	/^    bool intersect(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(const Roaring & r) const
intersect_skewed_uint16	sylar/sylar/ds/roaring.c	/^int32_t intersect_skewed_uint16(const uint16_t *small, size_t size_s,$/;"	f	typeref:typename:int32_t	signature:(const uint16_t * small,size_t size_s,const uint16_t * large,size_t size_l,uint16_t * buffer)
intersect_skewed_uint16	sylar/sylar/ds/roaring.h	/^int32_t intersect_skewed_uint16(const uint16_t *smallarray, size_t size_s,$/;"	p	typeref:typename:int32_t	signature:(const uint16_t * smallarray,size_t size_s,const uint16_t * largearray,size_t size_l,uint16_t * buffer)
intersect_skewed_uint16_cardinality	sylar/sylar/ds/roaring.c	/^int32_t intersect_skewed_uint16_cardinality(const uint16_t *small,$/;"	f	typeref:typename:int32_t	signature:(const uint16_t * small,size_t size_s,const uint16_t * large,size_t size_l)
intersect_skewed_uint16_cardinality	sylar/sylar/ds/roaring.h	/^int32_t intersect_skewed_uint16_cardinality(const uint16_t *smallarray,$/;"	p	typeref:typename:int32_t	signature:(const uint16_t * smallarray,size_t size_s,const uint16_t * largearray,size_t size_l)
intersect_skewed_uint16_nonempty	sylar/sylar/ds/roaring.c	/^bool intersect_skewed_uint16_nonempty(const uint16_t *small, size_t size_s,$/;"	f	typeref:typename:bool	signature:(const uint16_t * small,size_t size_s,const uint16_t * large,size_t size_l)
intersect_skewed_uint16_nonempty	sylar/sylar/ds/roaring.h	/^bool intersect_skewed_uint16_nonempty(const uint16_t *smallarray, size_t size_s,$/;"	p	typeref:typename:bool	signature:(const uint16_t * smallarray,size_t size_s,const uint16_t * largearray,size_t size_l)
intersect_uint16	sylar/sylar/ds/roaring.c	/^int32_t intersect_uint16(const uint16_t *A, const size_t lenA,$/;"	f	typeref:typename:int32_t	signature:(const uint16_t * A,const size_t lenA,const uint16_t * B,const size_t lenB,uint16_t * out)
intersect_uint16	sylar/sylar/ds/roaring.h	/^int32_t intersect_uint16(const uint16_t *A, const size_t lenA,$/;"	p	typeref:typename:int32_t	signature:(const uint16_t * A,const size_t lenA,const uint16_t * B,const size_t lenB,uint16_t * out)
intersect_uint16_cardinality	sylar/sylar/ds/roaring.c	/^int32_t intersect_uint16_cardinality(const uint16_t *A, const size_t lenA,$/;"	f	typeref:typename:int32_t	signature:(const uint16_t * A,const size_t lenA,const uint16_t * B,const size_t lenB)
intersect_uint16_cardinality	sylar/sylar/ds/roaring.h	/^int32_t intersect_uint16_cardinality(const uint16_t *A, const size_t lenA,$/;"	p	typeref:typename:int32_t	signature:(const uint16_t * A,const size_t lenA,const uint16_t * B,const size_t lenB)
intersect_uint16_nonempty	sylar/sylar/ds/roaring.c	/^bool intersect_uint16_nonempty(const uint16_t *A, const size_t lenA,$/;"	f	typeref:typename:bool	signature:(const uint16_t * A,const size_t lenA,const uint16_t * B,const size_t lenB)
intersect_uint16_nonempty	sylar/sylar/ds/roaring.h	/^bool intersect_uint16_nonempty(const uint16_t *A, const size_t lenA,$/;"	p	typeref:typename:bool	signature:(const uint16_t * A,const size_t lenA,const uint16_t * B,const size_t lenB)
intersect_vector16	sylar/sylar/ds/roaring.c	/^int32_t intersect_vector16(const uint16_t *__restrict__ A, size_t s_a,$/;"	f	typeref:typename:int32_t	signature:(const uint16_t * __restrict__ A,size_t s_a,const uint16_t * __restrict__ B,size_t s_b,uint16_t * C)
intersect_vector16	sylar/sylar/ds/roaring.h	/^int32_t intersect_vector16(const uint16_t *__restrict__ A, size_t s_a,$/;"	p	typeref:typename:int32_t	signature:(const uint16_t * __restrict__ A,size_t s_a,const uint16_t * __restrict__ B,size_t s_b,uint16_t * C)
intersect_vector16_cardinality	sylar/sylar/ds/roaring.c	/^int32_t intersect_vector16_cardinality(const uint16_t *__restrict__ A,$/;"	f	typeref:typename:int32_t	signature:(const uint16_t * __restrict__ A,size_t s_a,const uint16_t * __restrict__ B,size_t s_b)
intersect_vector16_cardinality	sylar/sylar/ds/roaring.h	/^int32_t intersect_vector16_cardinality(const uint16_t *__restrict__ A,$/;"	p	typeref:typename:int32_t	signature:(const uint16_t * __restrict__ A,size_t s_a,const uint16_t * __restrict__ B,size_t s_b)
intersection_uint32	sylar/sylar/ds/roaring.c	/^size_t intersection_uint32(const uint32_t *A, const size_t lenA,$/;"	f	typeref:typename:size_t	signature:(const uint32_t * A,const size_t lenA,const uint32_t * B,const size_t lenB,uint32_t * out)
intersection_uint32	sylar/sylar/ds/roaring.h	/^size_t intersection_uint32(const uint32_t *A, const size_t lenA,$/;"	p	typeref:typename:size_t	signature:(const uint32_t * A,const size_t lenA,const uint32_t * B,const size_t lenB,uint32_t * out)
intersection_uint32_card	sylar/sylar/ds/roaring.c	/^size_t intersection_uint32_card(const uint32_t *A, const size_t lenA,$/;"	f	typeref:typename:size_t	signature:(const uint32_t * A,const size_t lenA,const uint32_t * B,const size_t lenB)
intersection_uint32_card	sylar/sylar/ds/roaring.h	/^size_t intersection_uint32_card(const uint32_t *A, const size_t lenA,$/;"	p	typeref:typename:size_t	signature:(const uint32_t * A,const size_t lenA,const uint32_t * B,const size_t lenB)
io_worker	sylar/sylar/tcp_server.h	/^    std::string io_worker;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
ioctl	sylar/sylar/hook.cc	/^int ioctl(int d, unsigned long int request, ...) {$/;"	f	typeref:typename:int	signature:(int d,unsigned long int request,...)
ioctl_fun	sylar/sylar/hook.h	/^typedef int (*ioctl_fun)(int d, unsigned long int request, ...);$/;"	t	typeref:typename:int (*)(int d,unsigned long int request,...)
ip	sylar/examples/echo_udp_client.cc	/^const char* ip = nullptr;$/;"	v	typeref:typename:const char *
ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& ip() const;$/;"	p	class:sylar::ns::Node	typeref:typename:const std::string &	access:public	signature:() const
ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& Node::ip() const {$/;"	f	class:sylar::ns::Node	typeref:typename:const std::string &	signature:() const
ip	sylar/sylar/ns/ns_protobuf.proto	/^    optional string ip = 1;     \/\/ip地址$/;"	f
isAutoCommit	sylar/sylar/db/mysql.h	/^    bool isAutoCommit() const { return m_autoCommit;}$/;"	f	class:sylar::MySQLTransaction	typeref:typename:bool	access:public	signature:() const
isAutoConnect	sylar/sylar/streams/async_socket_stream.h	/^    bool isAutoConnect() const { return m_autoConnect;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:bool	access:public	signature:() const
isAutoIncrement	sylar/sylar/orm/column.h	/^    bool isAutoIncrement() const { return m_autoIncrement;}$/;"	f	class:sylar::orm::Column	typeref:typename:bool	access:public	signature:() const
isClose	sylar/sylar/fd_manager.h	/^    bool isClose() const { return m_isClosed;}$/;"	f	class:sylar::FdCtx	typeref:typename:bool	access:public	signature:() const
isClose	sylar/sylar/http/http.h	/^    bool isClose() const { return m_close;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:() const
isClose	sylar/sylar/http/http.h	/^    bool isClose() const { return m_close;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:bool	access:public	signature:() const
isCompress	sylar/sylar/ds/bitmap.h	/^    bool isCompress() const { return m_compress;}$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:() const
isConnected	sylar/sylar/socket.h	/^    bool isConnected() const { return m_isConnected;}$/;"	f	class:sylar::Socket	typeref:typename:bool	access:public	signature:() const
isConnected	sylar/sylar/streams/socket_stream.cc	/^bool SocketStream::isConnected() const {$/;"	f	class:sylar::SocketStream	typeref:typename:bool	signature:() const
isConnected	sylar/sylar/streams/socket_stream.h	/^    bool isConnected() const;$/;"	p	class:sylar::SocketStream	typeref:typename:bool	access:public	signature:() const
isDefaultPort	sylar/sylar/uri.h	/^    bool isDefaultPort() const;$/;"	p	class:sylar::Uri	typeref:typename:bool	access:private	signature:() const
isDefaultPort	sylar/sylar/uri.rl.cc	/^bool Uri::isDefaultPort() const {$/;"	f	class:sylar::Uri	typeref:typename:bool	signature:() const
isEmpty	sylar/sylar/ds/roaring.hh	/^    bool isEmpty() const { return roaring_bitmap_is_empty(&roaring); }$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:() const
isEmpty	sylar/sylar/ds/roaring.hh	/^    bool isEmpty() const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:() const
isEncode	sylar/sylar/streams/zlib_stream.h	/^    bool isEncode() const { return m_encode;}$/;"	f	class:sylar::ZlibStream	typeref:typename:bool	access:public	signature:() const
isError	sylar/sylar/db/mysql.h	/^    bool isError() const { return m_hasError;}$/;"	f	class:sylar::MySQLTransaction	typeref:typename:bool	access:public	signature:() const
isError	sylar/sylar/log.h	/^    bool isError() const { return m_error;}$/;"	f	class:sylar::LogFormatter	typeref:typename:bool	access:public	signature:() const
isFinished	sylar/sylar/db/mysql.h	/^    bool isFinished() const { return m_isFinished;}$/;"	f	class:sylar::MySQLTransaction	typeref:typename:bool	access:public	signature:() const
isFinished	sylar/sylar/http/http_parser.cc	/^int HttpRequestParser::isFinished() {$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:int	signature:()
isFinished	sylar/sylar/http/http_parser.cc	/^int HttpResponseParser::isFinished() {$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:int	signature:()
isFinished	sylar/sylar/http/http_parser.h	/^    int isFinished();$/;"	p	class:sylar::http::HttpRequestParser	typeref:typename:int	access:public	signature:()
isFinished	sylar/sylar/http/http_parser.h	/^    int isFinished();$/;"	p	class:sylar::http::HttpResponseParser	typeref:typename:int	access:public	signature:()
isFree	sylar/sylar/streams/zlib_stream.h	/^    bool isFree() const { return m_free;}$/;"	f	class:sylar::ZlibStream	typeref:typename:bool	access:public	signature:() const
isFull	sylar/sylar/ds/roaring.hh	/^    bool isFull() const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:() const
isInit	sylar/sylar/fd_manager.h	/^    bool isInit() const { return m_isInit;}$/;"	f	class:sylar::FdCtx	typeref:typename:bool	access:public	signature:() const
isLittleEndian	sylar/sylar/bytearray.cc	/^bool ByteArray::isLittleEndian() const {$/;"	f	class:sylar::ByteArray	typeref:typename:bool	signature:() const
isLittleEndian	sylar/sylar/bytearray.h	/^    bool isLittleEndian() const;$/;"	p	class:sylar::ByteArray	typeref:typename:bool	access:public	signature:() const
isNeedCheck	sylar/sylar/db/mysql.cc	/^bool MySQL::isNeedCheck() {$/;"	f	class:sylar::MySQL	typeref:typename:bool	signature:()
isNeedCheck	sylar/sylar/db/mysql.h	/^    bool isNeedCheck();$/;"	p	class:sylar::MySQL	typeref:typename:bool	access:private	signature:()
isNull	sylar/sylar/db/db.h	/^    virtual bool isNull(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:bool	access:public	signature:(int idx)
isNull	sylar/sylar/db/mysql.cc	/^bool MySQLRes::isNull(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:bool	signature:(int idx)
isNull	sylar/sylar/db/mysql.cc	/^bool MySQLStmtRes::isNull(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:bool	signature:(int idx)
isNull	sylar/sylar/db/mysql.h	/^    bool isNull(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:bool	access:public	signature:(int idx)
isNull	sylar/sylar/db/mysql.h	/^    bool isNull(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:bool	access:public	signature:(int idx)
isNull	sylar/sylar/db/sqlite3.cc	/^bool SQLite3Data::isNull(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:bool	signature:(int idx)
isNull	sylar/sylar/db/sqlite3.h	/^    bool isNull(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:bool	access:public	signature:(int idx)
isPK	sylar/sylar/orm/index.h	/^    bool isPK() const { return m_type == "pk";}$/;"	f	class:sylar::orm::Index	typeref:typename:bool	access:public	signature:() const
isSocket	sylar/sylar/fd_manager.h	/^    bool isSocket() const { return m_isSocket;}$/;"	f	class:sylar::FdCtx	typeref:typename:bool	access:public	signature:() const
isSorted	sylar/sylar/ds/array.h	/^    bool isSorted() {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:()
isSorted	sylar/sylar/ds/array.h	/^    bool isSorted(std::function<bool(const T&, const T&)> cb) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(std::function<bool (const T &,const T &)> cb)
isStart	sylar/sylar/db/fox_thread.h	/^    bool isStart() const { return m_start;}$/;"	f	class:sylar::FoxThread	typeref:typename:bool	access:public	signature:() const
isStop	sylar/sylar/tcp_server.h	/^    bool isStop() const { return m_isStop;}$/;"	f	class:sylar::TcpServer	typeref:typename:bool	access:public	signature:() const
isStoped	sylar/sylar/worker.h	/^    bool isStoped() const { return m_stop;}$/;"	f	class:sylar::WorkerManager	typeref:typename:bool	access:public	signature:() const
isStrictSubset	sylar/sylar/ds/roaring.hh	/^    bool isStrictSubset(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(const Roaring & r) const
isStrictSubset	sylar/sylar/ds/roaring.hh	/^    bool isStrictSubset(const Roaring64Map &r) const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(const Roaring64Map & r) const
isSubset	sylar/sylar/ds/roaring.hh	/^    bool isSubset(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(const Roaring & r) const
isSubset	sylar/sylar/ds/roaring.hh	/^    bool isSubset(const Roaring64Map &r) const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(const Roaring64Map & r) const
isValid	sylar/sylar/log.cc	/^    bool isValid() const {$/;"	f	struct:sylar::LogDefine	typeref:typename:bool	file:	access:public	signature:() const
isValid	sylar/sylar/socket.cc	/^bool Socket::isValid() const {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:() const
isValid	sylar/sylar/socket.h	/^    bool isValid() const;$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:() const
isValid	sylar/sylar/streams/load_balance.cc	/^bool LoadBalanceItem::isValid() {$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:bool	signature:()
isValid	sylar/sylar/streams/load_balance.h	/^    virtual bool isValid();$/;"	p	class:sylar::LoadBalanceItem	typeref:typename:bool	access:public	signature:()
isValid	sylar/sylar/tcp_server.h	/^    bool isValid() const {$/;"	f	struct:sylar::TcpServerConf	typeref:typename:bool	access:public	signature:() const
isWebsocket	sylar/sylar/http/http.h	/^    bool isWebsocket() const { return m_websocket;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:() const
isWebsocket	sylar/sylar/http/http.h	/^    bool isWebsocket() const { return m_websocket;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:bool	access:public	signature:() const
is_cow	sylar/sylar/ds/roaring.c	/^static inline bool is_cow(const roaring_bitmap_t *r) {$/;"	f	typeref:typename:bool	file:	signature:(const roaring_bitmap_t * r)
is_exists	sylar/sylar/orm/table.cc	/^bool is_exists(const V& v, const T& t) {$/;"	f	namespace:sylar::orm	typeref:typename:bool	signature:(const V & v,const T & t)
is_frozen	sylar/sylar/ds/roaring.c	/^static inline bool is_frozen(const roaring_bitmap_t *r) {$/;"	f	typeref:typename:bool	file:	signature:(const roaring_bitmap_t * r)
is_hook_enable	sylar/sylar/hook.cc	/^bool is_hook_enable() {$/;"	f	namespace:sylar	typeref:typename:bool	signature:()
is_hook_enable	sylar/sylar/hook.h	/^    bool is_hook_enable();$/;"	p	namespace:sylar	typeref:typename:bool	signature:()
is_null	sylar/sylar/db/mysql.h	/^        bool is_null;$/;"	m	struct:sylar::MySQLStmtRes::Data	typeref:typename:bool	access:public
is_temporary	sylar/sylar/ds/roaring.c	/^    bool is_temporary;$/;"	m	struct:roaring_pq_element_s	typeref:typename:bool	file:	access:public
item_type	sylar/sylar/ds/lru_cache.h	/^    typedef std::pair<K, V> item_type;$/;"	t	class:sylar::ds::LruCache	typeref:typename:std::pair<K,V>	access:public
item_type	sylar/sylar/ds/timed_cache.h	/^    typedef Item item_type;$/;"	t	class:sylar::ds::TimedCache	typeref:typename:Item	access:public
item_type	sylar/sylar/ds/timed_lru_cache.h	/^    typedef Item item_type;$/;"	t	class:sylar::ds::TimedLruCache	typeref:typename:Item	access:public
iter_data	sylar/sylar/ds/roaring.hh	/^            struct iter_data {$/;"	s	function:Roaring64Map::printf
iter_data	sylar/sylar/ds/roaring.hh	/^        struct iter_data {$/;"	s	function:Roaring64Map::toString
iter_data	sylar/sylar/ds/roaring.hh	/^        struct iter_data {$/;"	s	function:Roaring::toString
iter_new_container_partial_init	sylar/sylar/ds/roaring.c	/^static bool iter_new_container_partial_init(roaring_uint32_iterator_t *newit) {$/;"	f	typeref:typename:bool	file:	signature:(roaring_uint32_iterator_t * newit)
iterate	sylar/sylar/ds/roaring.hh	/^    void iterate(roaring_iterator iterator, void *ptr) const {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(roaring_iterator iterator,void * ptr) const
iterate	sylar/sylar/ds/roaring.hh	/^    void iterate(roaring_iterator64 iterator, void *ptr) const {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(roaring_iterator64 iterator,void * ptr) const
iterator	sylar/sylar/ds/bitmap.cc	/^Bitmap::iterator::iterator(Bitmap* b) {$/;"	f	class:sylar::ds::Bitmap::iterator	signature:(Bitmap * b)
iterator	sylar/sylar/ds/bitmap.h	/^        iterator() {}$/;"	f	class:sylar::ds::Bitmap::iterator	access:public	signature:()
iterator	sylar/sylar/ds/bitmap.h	/^        iterator(Bitmap* b);$/;"	p	class:sylar::ds::Bitmap::iterator	access:public	signature:(Bitmap * b)
iterator	sylar/sylar/ds/bitmap.h	/^    class iterator : public iterator_base {$/;"	c	class:sylar::ds::Bitmap	inherits:iterator_base	access:public
iterator	sylar/sylar/ds/roaring_bitmap.h	/^    typedef RoaringSetBitForwardIterator iterator;$/;"	t	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringSetBitForwardIterator	access:public
iterator_base	sylar/sylar/ds/bitmap.cc	/^Bitmap::iterator_base::iterator_base()$/;"	f	class:sylar::ds::Bitmap::iterator_base	signature:()
iterator_base	sylar/sylar/ds/bitmap.h	/^        iterator_base();$/;"	p	class:sylar::ds::Bitmap::iterator_base	access:public	signature:()
iterator_base	sylar/sylar/ds/bitmap.h	/^    class iterator_base {$/;"	c	class:sylar::ds::Bitmap	access:public
iterator_category	sylar/sylar/ds/roaring.hh	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:Roaring64MapSetBitForwardIterator	typeref:typename:std::forward_iterator_tag	access:public
iterator_category	sylar/sylar/ds/roaring.hh	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:Roaring64MapSetBitReverseIterator	typeref:typename:std::forward_iterator_tag	access:public
iterator_category	sylar/sylar/ds/roaring.hh	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:RoaringSetBitForwardIterator	typeref:typename:std::forward_iterator_tag	access:public
iterator_category	sylar/sylar/ds/roaring.hh	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:RoaringSetBitReverseIterator	typeref:typename:std::forward_iterator_tag	access:public
iterator_reverse	sylar/sylar/ds/bitmap.cc	/^Bitmap::iterator_reverse::iterator_reverse(Bitmap* b) {$/;"	f	class:sylar::ds::Bitmap::iterator_reverse	signature:(Bitmap * b)
iterator_reverse	sylar/sylar/ds/bitmap.h	/^        iterator_reverse() {}$/;"	f	class:sylar::ds::Bitmap::iterator_reverse	access:public	signature:()
iterator_reverse	sylar/sylar/ds/bitmap.h	/^        iterator_reverse(Bitmap* b);$/;"	p	class:sylar::ds::Bitmap::iterator_reverse	access:public	signature:(Bitmap * b)
iterator_reverse	sylar/sylar/ds/bitmap.h	/^    class iterator_reverse : public iterator_base {$/;"	c	class:sylar::ds::Bitmap	inherits:iterator_base	access:public
jaccard_index	sylar/sylar/ds/roaring.hh	/^    double jaccard_index(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:double	access:public	signature:(const Roaring & r) const
join	sylar/sylar/db/fox_thread.cc	/^void FoxThread::join() {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:()
join	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::join() {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:()
join	sylar/sylar/db/fox_thread.h	/^    virtual void join() = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:void	access:public	signature:()
join	sylar/sylar/db/fox_thread.h	/^    void join();$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:()
join	sylar/sylar/db/fox_thread.h	/^    void join();$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:public	signature:()
join	sylar/sylar/thread.cc	/^void Thread::join() {$/;"	f	class:sylar::Thread	typeref:typename:void	signature:()
join	sylar/sylar/thread.h	/^    void join();$/;"	p	class:sylar::Thread	typeref:typename:void	access:public	signature:()
json_sent	sylar/sylar/http/http11_parser.h	/^  int json_sent;$/;"	m	struct:http_parser	typeref:typename:int	access:public
kCmdFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kCmdFieldNumber = 2,$/;"	e	enum:sylar::ns::NodeInfo::__anond0e9e3700503	access:public
kCmdsFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kCmdsFieldNumber = 2,$/;"	e	enum:sylar::ns::RegisterInfo::__anond0e9e3700203	access:public
kDelsFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kDelsFieldNumber = 1,$/;"	e	enum:sylar::ns::NotifyMessage::__anond0e9e3700703	access:public
kDomainFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kDomainFieldNumber = 1,$/;"	e	enum:sylar::ns::NodeInfo::__anond0e9e3700503	access:public
kDomainFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kDomainFieldNumber = 1,$/;"	e	enum:sylar::ns::RegisterInfo::__anond0e9e3700203	access:public
kDomainsFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kDomainsFieldNumber = 1,$/;"	e	enum:sylar::ns::QueryRequest::__anond0e9e3700403	access:public
kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::Node	typeref:typename:int	access:public
kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::NodeInfo	typeref:typename:int	access:public
kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::NotifyMessage	typeref:typename:int	access:public
kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::QueryRequest	typeref:typename:int	access:public
kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::QueryResponse	typeref:typename:int	access:public
kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::RegisterInfo	typeref:typename:int	access:public
kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::RegisterRequest	typeref:typename:int	access:public
kInfosFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kInfosFieldNumber = 1,$/;"	e	enum:sylar::ns::QueryResponse::__anond0e9e3700603	access:public
kInfosFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kInfosFieldNumber = 1,$/;"	e	enum:sylar::ns::RegisterRequest::__anond0e9e3700303	access:public
kIpFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kIpFieldNumber = 1,$/;"	e	enum:sylar::ns::Node::__anond0e9e3700103	access:public
kNodeFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kNodeFieldNumber = 3,$/;"	e	enum:sylar::ns::RegisterInfo::__anond0e9e3700203	access:public
kNodesFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kNodesFieldNumber = 3,$/;"	e	enum:sylar::ns::NodeInfo::__anond0e9e3700503	access:public
kPortFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kPortFieldNumber = 2,$/;"	e	enum:sylar::ns::Node::__anond0e9e3700103	access:public
kUpdatesFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kUpdatesFieldNumber = 2,$/;"	e	enum:sylar::ns::NotifyMessage::__anond0e9e3700703	access:public
kWeightFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kWeightFieldNumber = 3,$/;"	e	enum:sylar::ns::Node::__anond0e9e3700103	access:public
keepalive	sylar/sylar/tcp_server.h	/^    int keepalive = 0;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:int	access:public
key	sylar/sylar/ds/dict.h	/^        K key;$/;"	m	struct:sylar::ds::Dict::Node	typeref:typename:K	access:public
key	sylar/sylar/ds/hash_map.h	/^        K key;$/;"	m	struct:sylar::ds::HashMap::Node	typeref:typename:K	access:public
key	sylar/sylar/ds/hash_multimap.h	/^        K key;$/;"	m	struct:sylar::ds::HashMultimap::Node	typeref:typename:K	access:public
key	sylar/sylar/ds/timed_cache.h	/^        K key;$/;"	m	struct:sylar::ds::TimedCache::Item	typeref:typename:K	access:public
key	sylar/sylar/ds/timed_lru_cache.h	/^        K key;$/;"	m	struct:sylar::ds::TimedLruCache::Item	typeref:typename:K	access:public
key_file	sylar/sylar/tcp_server.h	/^    std::string key_file;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
keys	sylar/sylar/ds/roaring.h	/^    uint16_t *keys;$/;"	m	struct:roaring_array_s	typeref:typename:uint16_t *	access:public
last_chunk	sylar/sylar/http/httpclient_parser.h	/^  element_cb last_chunk;$/;"	m	struct:httpclient_parser	typeref:typename:element_cb	access:public
lazy_or_from_lazy_inputs	sylar/sylar/ds/roaring.c	/^static roaring_bitmap_t *lazy_or_from_lazy_inputs(roaring_bitmap_t *x1,$/;"	f	typeref:typename:roaring_bitmap_t *	file:	signature:(roaring_bitmap_t * x1,roaring_bitmap_t * x2)
length	sylar/sylar/db/mysql.h	/^        unsigned long length;$/;"	m	struct:sylar::MySQLStmtRes::Data	typeref:typename:unsigned long	access:public
length	sylar/sylar/ds/roaring.h	/^    uint16_t length;$/;"	m	struct:rle16_s	typeref:typename:uint16_t	access:public
length	sylar/sylar/rock/rock_protocol.h	/^    int32_t length;$/;"	m	struct:sylar::RockMsgHeader	typeref:typename:int32_t	access:public
lengthTable	sylar/sylar/ds/roaring.c	/^static uint8_t lengthTable[256] = {$/;"	v	typeref:typename:uint8_t[256]	file:
level	sylar/sylar/log.cc	/^    LogLevel::Level level = LogLevel::UNKNOW;$/;"	m	struct:sylar::LogAppenderDefine	typeref:typename:LogLevel::Level	file:	access:public
level	sylar/sylar/log.cc	/^    LogLevel::Level level = LogLevel::UNKNOW;$/;"	m	struct:sylar::LogDefine	typeref:typename:LogLevel::Level	file:	access:public
listAll	sylar/sylar/module.cc	/^void ModuleManager::listAll(std::vector<Module::ptr>& ms) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(std::vector<Module::ptr> & ms)
listAll	sylar/sylar/module.h	/^    void listAll(std::vector<Module::ptr>& ms);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(std::vector<Module::ptr> & ms)
listAll	sylar/sylar/ns/ns_protocol.cc	/^void NSDomain::listAll(std::vector<NSNodeSet::ptr>& infos) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:void	signature:(std::vector<NSNodeSet::ptr> & infos)
listAll	sylar/sylar/ns/ns_protocol.cc	/^void NSDomainSet::listAll(std::vector<NSDomain::ptr>& infos) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:void	signature:(std::vector<NSDomain::ptr> & infos)
listAll	sylar/sylar/ns/ns_protocol.cc	/^void NSNodeSet::listAll(std::vector<NSNode::ptr>& infos) {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:void	signature:(std::vector<NSNode::ptr> & infos)
listAll	sylar/sylar/ns/ns_protocol.h	/^    void listAll(std::vector<NSDomain::ptr>& infos);$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:void	access:public	signature:(std::vector<NSDomain::ptr> & infos)
listAll	sylar/sylar/ns/ns_protocol.h	/^    void listAll(std::vector<NSNode::ptr>& infos);$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:void	access:public	signature:(std::vector<NSNode::ptr> & infos)
listAll	sylar/sylar/ns/ns_protocol.h	/^    void listAll(std::vector<NSNodeSet::ptr>& infos);$/;"	p	class:sylar::ns::NSDomain	typeref:typename:void	access:public	signature:(std::vector<NSNodeSet::ptr> & infos)
listAllGlobServletCreator	sylar/sylar/http/servlet.cc	/^void ServletDispatch::listAllGlobServletCreator(std::map<std::string, IServletCreator::ptr>& inf/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(std::map<std::string,IServletCreator::ptr> & infos)
listAllGlobServletCreator	sylar/sylar/http/servlet.h	/^    void listAllGlobServletCreator(std::map<std::string, IServletCreator::ptr>& infos);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(std::map<std::string,IServletCreator::ptr> & infos)
listAllServer	sylar/sylar/application.cc	/^void Application::listAllServer(std::map<std::string, std::vector<TcpServer::ptr> >& servers) {$/;"	f	class:sylar::Application	typeref:typename:void	signature:(std::map<std::string,std::vector<TcpServer::ptr>> & servers)
listAllServer	sylar/sylar/application.h	/^    void listAllServer(std::map<std::string, std::vector<TcpServer::ptr> >& servers);$/;"	p	class:sylar::Application	typeref:typename:void	access:public	signature:(std::map<std::string,std::vector<TcpServer::ptr>> & servers)
listAllServletCreator	sylar/sylar/http/servlet.cc	/^void ServletDispatch::listAllServletCreator(std::map<std::string, IServletCreator::ptr>& infos) /;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(std::map<std::string,IServletCreator::ptr> & infos)
listAllServletCreator	sylar/sylar/http/servlet.h	/^    void listAllServletCreator(std::map<std::string, IServletCreator::ptr>& infos);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(std::map<std::string,IServletCreator::ptr> & infos)
listByType	sylar/sylar/module.cc	/^void ModuleManager::listByType(uint32_t type, std::vector<Module::ptr>& ms) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(uint32_t type,std::vector<Module::ptr> & ms)
listByType	sylar/sylar/module.h	/^    void listByType(uint32_t type, std::vector<Module::ptr>& ms);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(uint32_t type,std::vector<Module::ptr> & ms)
listExpiredCb	sylar/sylar/timer.cc	/^void TimerManager::listExpiredCb(std::vector<std::function<void()> >& cbs) {$/;"	f	class:sylar::TimerManager	typeref:typename:void	signature:(std::vector<std::function<void ()>> & cbs)
listExpiredCb	sylar/sylar/timer.h	/^    void listExpiredCb(std::vector<std::function<void()> >& cbs);$/;"	p	class:sylar::TimerManager	typeref:typename:void	access:public	signature:(std::vector<std::function<void ()>> & cbs)
listPosAsc	sylar/sylar/ds/bitmap.cc	/^void Bitmap::listPosAsc(std::vector<uint32_t>& pos) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(std::vector<uint32_t> & pos)
listPosAsc	sylar/sylar/ds/bitmap.h	/^    void listPosAsc(std::vector<uint32_t>& pos);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(std::vector<uint32_t> & pos)
listPosAsc	sylar/sylar/ds/roaring_bitmap.cc	/^void RoaringBitmap::listPosAsc(std::vector<uint32_t>& pos) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:void	signature:(std::vector<uint32_t> & pos)
listPosAsc	sylar/sylar/ds/roaring_bitmap.h	/^    void listPosAsc(std::vector<uint32_t>& pos);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:void	access:public	signature:(std::vector<uint32_t> & pos)
listQueryServer	sylar/sylar/streams/service_discovery.cc	/^void IServiceDiscovery::listQueryServer(std::unordered_map<std::string$/;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	signature:(std::unordered_map<std::string,std::unordered_set<std::string>> & infos)
listQueryServer	sylar/sylar/streams/service_discovery.h	/^    void listQueryServer(std::unordered_map<std::string, std::unordered_set<std::string> >& info/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(std::unordered_map<std::string,std::unordered_set<std::string>> & infos)
listRegisterServer	sylar/sylar/streams/service_discovery.cc	/^void IServiceDiscovery::listRegisterServer(std::unordered_map<std::string, std::unordered_map<st/;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	signature:(std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>> & infos)
listRegisterServer	sylar/sylar/streams/service_discovery.h	/^    void listRegisterServer(std::unordered_map<std::string, std::unordered_map<std::string$/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>> & infos)
listServer	sylar/sylar/streams/service_discovery.cc	/^void IServiceDiscovery::listServer(std::unordered_map<std::string, std::unordered_map<std::strin/;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	signature:(std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<uint64_t,ServiceItemInfo::ptr>>> & infos)
listServer	sylar/sylar/streams/service_discovery.h	/^    void listServer(std::unordered_map<std::string, std::unordered_map<std::string$/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<uint64_t,ServiceItemInfo::ptr>>> & infos)
list_type	sylar/sylar/ds/lru_cache.h	/^    typedef std::list<item_type> list_type;$/;"	t	class:sylar::ds::LruCache	typeref:typename:std::list<item_type>	access:public
list_type	sylar/sylar/ds/timed_lru_cache.h	/^    typedef std::list<item_type> list_type;$/;"	t	class:sylar::ds::TimedLruCache	typeref:typename:std::list<item_type>	access:public
listen	sylar/sylar/socket.cc	/^bool SSLSocket::listen(int backlog) {$/;"	f	class:sylar::SSLSocket	typeref:typename:bool	signature:(int backlog)
listen	sylar/sylar/socket.cc	/^bool Socket::listen(int backlog) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(int backlog)
listen	sylar/sylar/socket.h	/^    virtual bool listen(int backlog = SOMAXCONN) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:bool	access:public	signature:(int backlog=SOMAXCONN)
listen	sylar/sylar/socket.h	/^    virtual bool listen(int backlog = SOMAXCONN);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:(int backlog=SOMAXCONN)
loadCertificates	sylar/sylar/socket.cc	/^bool SSLSocket::loadCertificates(const std::string& cert_file, const std::string& key_file) {$/;"	f	class:sylar::SSLSocket	typeref:typename:bool	signature:(const std::string & cert_file,const std::string & key_file)
loadCertificates	sylar/sylar/socket.h	/^    bool loadCertificates(const std::string& cert_file, const std::string& key_file);$/;"	p	class:sylar::SSLSocket	typeref:typename:bool	access:public	signature:(const std::string & cert_file,const std::string & key_file)
loadCertificates	sylar/sylar/tcp_server.cc	/^bool TcpServer::loadCertificates(const std::string& cert_file, const std::string& key_file) {$/;"	f	class:sylar::TcpServer	typeref:typename:bool	signature:(const std::string & cert_file,const std::string & key_file)
loadCertificates	sylar/sylar/tcp_server.h	/^    bool loadCertificates(const std::string& cert_file, const std::string& key_file);$/;"	p	class:sylar::TcpServer	typeref:typename:bool	access:public	signature:(const std::string & cert_file,const std::string & key_file)
load_from_file	sylar/tests/test_bitmap.cc	/^void load_from_file(const std::string& name) {$/;"	f	typeref:typename:void	signature:(const std::string & name)
loadfirstvalue	sylar/sylar/ds/roaring.c	/^static bool loadfirstvalue(roaring_uint32_iterator_t *newit) {$/;"	f	typeref:typename:bool	file:	signature:(roaring_uint32_iterator_t * newit)
loadfirstvalue_largeorequal	sylar/sylar/ds/roaring.c	/^static bool loadfirstvalue_largeorequal(roaring_uint32_iterator_t *newit, uint32_t val) {$/;"	f	typeref:typename:bool	file:	signature:(roaring_uint32_iterator_t * newit,uint32_t val)
loadlastvalue	sylar/sylar/ds/roaring.c	/^static bool loadlastvalue(roaring_uint32_iterator_t* newit) {$/;"	f	typeref:typename:bool	file:	signature:(roaring_uint32_iterator_t * newit)
lock	sylar/sylar/mutex.h	/^    void lock() {$/;"	f	class:sylar::CASLock	typeref:typename:void	access:public	signature:()
lock	sylar/sylar/mutex.h	/^    void lock() {$/;"	f	class:sylar::Mutex	typeref:typename:void	access:public	signature:()
lock	sylar/sylar/mutex.h	/^    void lock() {$/;"	f	class:sylar::Spinlock	typeref:typename:void	access:public	signature:()
lock	sylar/sylar/mutex.h	/^    void lock() {$/;"	f	struct:sylar::ReadScopedLockImpl	typeref:typename:void	access:public	signature:()
lock	sylar/sylar/mutex.h	/^    void lock() {$/;"	f	struct:sylar::ScopedLockImpl	typeref:typename:void	access:public	signature:()
lock	sylar/sylar/mutex.h	/^    void lock() {$/;"	f	struct:sylar::WriteScopedLockImpl	typeref:typename:void	access:public	signature:()
lock	sylar/sylar/mutex.h	/^    void lock() {}$/;"	f	class:sylar::NullMutex	typeref:typename:void	access:public	signature:()
log	sylar/sylar/log.cc	/^void FileLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr e/;"	f	class:sylar::FileLogAppender	typeref:typename:void	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
log	sylar/sylar/log.cc	/^void Logger::log(LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogLevel::Level level,LogEvent::ptr event)
log	sylar/sylar/log.cc	/^void StdoutLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr/;"	f	class:sylar::StdoutLogAppender	typeref:typename:void	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
log	sylar/sylar/log.h	/^    virtual void log(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)/;"	p	class:sylar::LogAppender	typeref:typename:void	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
log	sylar/sylar/log.h	/^    void log(LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogLevel::Level level,LogEvent::ptr event)
log	sylar/sylar/log.h	/^    void log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event) override;$/;"	p	class:sylar::FileLogAppender	typeref:typename:void	access:public	signature:(Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
log	sylar/sylar/log.h	/^    void log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event) override;$/;"	p	class:sylar::StdoutLogAppender	typeref:typename:void	access:public	signature:(Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
log_callback	sylar/sylar/zk_client.h	/^    typedef void(*log_callback)(const char *message);$/;"	t	class:sylar::ZKClient	typeref:typename:void (*)(const char * message)	access:public
lowBytes	sylar/sylar/ds/roaring.hh	/^    static uint32_t lowBytes(const uint64_t in) { return uint32_t(in); }$/;"	f	class:Roaring64Map	typeref:typename:uint32_t	access:private	signature:(const uint64_t in)
m_acceptWorker	sylar/sylar/tcp_server.h	/^    IOManager* m_acceptWorker;$/;"	m	class:sylar::TcpServer	typeref:typename:IOManager *	access:protected
m_addr	sylar/sylar/address.h	/^    sockaddr m_addr;$/;"	m	class:sylar::UnknownAddress	typeref:typename:sockaddr	access:private
m_addr	sylar/sylar/address.h	/^    sockaddr_in m_addr;$/;"	m	class:sylar::IPv4Address	typeref:typename:sockaddr_in	access:private
m_addr	sylar/sylar/address.h	/^    sockaddr_in6 m_addr;$/;"	m	class:sylar::IPv6Address	typeref:typename:sockaddr_in6	access:private
m_addr	sylar/sylar/address.h	/^    sockaddr_un m_addr;$/;"	m	class:sylar::UnixAddress	typeref:typename:sockaddr_un	access:private
m_advance	sylar/sylar/db/fox_thread.h	/^    bool m_advance;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:bool	access:private
m_age	sylar/tests/test_config.cc	/^    int m_age = 0;$/;"	m	class:Person	typeref:typename:int	file:	access:public
m_appenders	sylar/sylar/log.h	/^    std::list<LogAppender::ptr> m_appenders;$/;"	m	class:sylar::Logger	typeref:typename:std::list<LogAppender::ptr>	access:private
m_argc	sylar/sylar/application.h	/^    int m_argc = 0;$/;"	m	class:sylar::Application	typeref:typename:int	access:private
m_args	sylar/sylar/env.h	/^    std::map<std::string, std::string> m_args;$/;"	m	class:sylar::Env	typeref:typename:std::map<std::string,std::string>	access:private
m_argv	sylar/sylar/application.h	/^    char** m_argv = nullptr;$/;"	m	class:sylar::Application	typeref:typename:char **	access:private
m_authed	sylar/sylar/email/smtp.h	/^    bool m_authed = false;$/;"	m	class:sylar::SmtpClient	typeref:typename:bool	access:private
m_autoCommit	sylar/sylar/db/mysql.h	/^    bool m_autoCommit;$/;"	m	class:sylar::MySQLTransaction	typeref:typename:bool	access:private
m_autoCommit	sylar/sylar/db/sqlite3.h	/^    bool m_autoCommit;$/;"	m	class:sylar::SQLite3Transaction	typeref:typename:bool	access:private
m_autoConnect	sylar/sylar/streams/async_socket_stream.h	/^    bool m_autoConnect;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:bool	access:protected
m_autoIncrement	sylar/sylar/orm/column.h	/^    bool m_autoIncrement;$/;"	m	class:sylar::orm::Column	typeref:typename:bool	access:private
m_autoStop	sylar/sylar/scheduler.h	/^    bool m_autoStop = false;$/;"	m	class:sylar::Scheduler	typeref:typename:bool	access:protected
m_base	sylar/sylar/db/fox_thread.h	/^    struct event_base* m_base;$/;"	m	class:sylar::FoxThread	typeref:struct:event_base *	access:private
m_baseSize	sylar/sylar/bytearray.h	/^    size_t m_baseSize;$/;"	m	class:sylar::ByteArray	typeref:typename:size_t	access:private
m_batchSize	sylar/sylar/worker.h	/^    uint32_t m_batchSize;$/;"	m	class:sylar::WorkerGroup	typeref:typename:uint32_t	access:private
m_bccEMailAddress	sylar/sylar/email/email.h	/^    std::vector<std::string> m_bccEMailAddress;$/;"	m	class:sylar::EMail	typeref:typename:std::vector<std::string>	access:private
m_binds	sylar/sylar/db/mysql.h	/^    std::vector<MYSQL_BIND> m_binds;$/;"	m	class:sylar::MySQLStmt	typeref:typename:std::vector<MYSQL_BIND>	access:private
m_binds	sylar/sylar/db/mysql.h	/^    std::vector<MYSQL_BIND> m_binds;$/;"	m	class:sylar::MySQLStmtRes	typeref:typename:std::vector<MYSQL_BIND>	access:private
m_bitmap	sylar/sylar/ds/roaring_bitmap.h	/^    Roaring m_bitmap;$/;"	m	class:sylar::ds::RoaringBitmap	typeref:typename:Roaring	access:private
m_body	sylar/sylar/email/email.h	/^    std::string m_body;$/;"	m	class:sylar::EMail	typeref:typename:std::string	access:private
m_body	sylar/sylar/http/http.h	/^    std::string m_body;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:std::string	access:private
m_body	sylar/sylar/http/http.h	/^    std::string m_body;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:std::string	access:private
m_body	sylar/sylar/rock/rock_protocol.h	/^    std::string m_body;$/;"	m	class:sylar::RockBody	typeref:typename:std::string	access:protected
m_bucket	sylar/sylar/ds/lru_cache.h	/^    size_t m_bucket;$/;"	m	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:private
m_bucket	sylar/sylar/ds/timed_cache.h	/^    size_t m_bucket;$/;"	m	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:private
m_bucket	sylar/sylar/ds/timed_lru_cache.h	/^    size_t m_bucket;$/;"	m	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:private
m_buffSize	sylar/sylar/streams/zlib_stream.h	/^    uint32_t m_buffSize;$/;"	m	class:sylar::ZlibStream	typeref:typename:uint32_t	access:private
m_buffs	sylar/sylar/streams/zlib_stream.h	/^    std::vector<iovec> m_buffs;$/;"	m	class:sylar::ZlibStream	typeref:typename:std::vector<iovec>	access:private
m_cache	sylar/sylar/ds/lru_cache.h	/^    map_type m_cache;$/;"	m	class:sylar::ds::LruCache	typeref:typename:map_type	access:private
m_cache	sylar/sylar/ds/timed_cache.h	/^    map_type m_cache;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:map_type	access:private
m_cache	sylar/sylar/ds/timed_lru_cache.h	/^    map_type m_cache;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:map_type	access:private
m_callback	sylar/sylar/http/ws_servlet.h	/^    callback m_callback;$/;"	m	class:sylar::http::FunctionWSServlet	typeref:typename:callback	access:protected
m_callbacks	sylar/sylar/db/fox_thread.h	/^    std::list<callback> m_callbacks;$/;"	m	class:sylar::FoxThread	typeref:typename:std::list<callback>	access:private
m_callbacks	sylar/sylar/db/fox_thread.h	/^    std::list<callback> m_callbacks;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:std::list<callback>	access:private
m_caller	sylar/sylar/scheduler.h	/^    Scheduler* m_caller;$/;"	m	class:sylar::SchedulerSwitcher	typeref:typename:Scheduler *	access:private
m_capacity	sylar/sylar/bytearray.h	/^    size_t m_capacity;$/;"	m	class:sylar::ByteArray	typeref:typename:size_t	access:private
m_cb	sylar/sylar/ds/lru_cache.h	/^    prune_callback m_cb;$/;"	m	class:sylar::ds::LruCache	typeref:typename:prune_callback	access:private
m_cb	sylar/sylar/ds/timed_cache.h	/^    prune_callback m_cb;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:prune_callback	access:private
m_cb	sylar/sylar/ds/timed_lru_cache.h	/^    prune_callback m_cb;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:prune_callback	access:private
m_cb	sylar/sylar/fiber.h	/^    std::function<void()> m_cb;$/;"	m	class:sylar::Fiber	typeref:typename:std::function<void ()>	access:private
m_cb	sylar/sylar/http/servlet.h	/^    callback m_cb;$/;"	m	class:sylar::http::FunctionServlet	typeref:typename:callback	access:private
m_cb	sylar/sylar/streams/load_balance.h	/^    stream_callback m_cb;$/;"	m	class:sylar::SDLoadBalance	typeref:typename:stream_callback	access:protected
m_cb	sylar/sylar/streams/service_discovery.h	/^    service_callback m_cb;$/;"	m	class:sylar::IServiceDiscovery	typeref:typename:service_callback	access:protected
m_cb	sylar/sylar/thread.h	/^    std::function<void()> m_cb;$/;"	m	class:sylar::Thread	typeref:typename:std::function<void ()>	access:private
m_cb	sylar/sylar/timer.h	/^    std::function<void()> m_cb;$/;"	m	class:sylar::Timer	typeref:typename:std::function<void ()>	access:private
m_cbs	sylar/sylar/config.h	/^    std::map<uint64_t, on_change_cb> m_cbs;$/;"	m	class:sylar::ConfigVar	typeref:typename:std::map<uint64_t,on_change_cb>	access:private
m_ccEMailAddress	sylar/sylar/email/email.h	/^    std::vector<std::string> m_ccEMailAddress;$/;"	m	class:sylar::EMail	typeref:typename:std::vector<std::string>	access:private
m_client	sylar/sylar/streams/service_discovery.h	/^    ZKClient::ptr m_client;$/;"	m	class:sylar::ZKServiceDiscovery	typeref:typename:ZKClient::ptr	access:private
m_close	sylar/sylar/http/http.h	/^    bool m_close;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:bool	access:private
m_close	sylar/sylar/http/http.h	/^    bool m_close;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:bool	access:private
m_cmd	sylar/sylar/db/mysql.h	/^    std::string m_cmd;$/;"	m	class:sylar::MySQL	typeref:typename:std::string	access:private
m_cmd	sylar/sylar/ns/ns_protocol.h	/^    uint32_t m_cmd;$/;"	m	class:sylar::ns::NSNodeSet	typeref:typename:uint32_t	access:private
m_cmd	sylar/sylar/protocol.h	/^    uint32_t m_cmd;$/;"	m	class:sylar::Request	typeref:typename:uint32_t	access:protected
m_cmd	sylar/sylar/protocol.h	/^    uint32_t m_cmd;$/;"	m	class:sylar::Response	typeref:typename:uint32_t	access:protected
m_cmdTimeout	sylar/sylar/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:sylar::FoxRedis	typeref:struct:timeval	access:private
m_cmdTimeout	sylar/sylar/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:sylar::FoxRedisCluster	typeref:struct:timeval	access:private
m_cmdTimeout	sylar/sylar/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:sylar::Redis	typeref:struct:timeval	access:private
m_cmdTimeout	sylar/sylar/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:sylar::RedisCluster	typeref:struct:timeval	access:private
m_cols	sylar/sylar/orm/index.h	/^    std::vector<std::string> m_cols;$/;"	m	class:sylar::orm::Index	typeref:typename:std::vector<std::string>	access:private
m_cols	sylar/sylar/orm/table.h	/^    std::vector<Column::ptr> m_cols;$/;"	m	class:sylar::orm::Table	typeref:typename:std::vector<Column::ptr>	access:private
m_compress	sylar/sylar/ds/bitmap.h	/^        bool m_compress;$/;"	m	class:sylar::ds::Bitmap::iterator_base	typeref:typename:bool	access:protected
m_compress	sylar/sylar/ds/bitmap.h	/^    bool m_compress;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:bool	access:private
m_concurrency	sylar/sylar/mutex.h	/^    size_t m_concurrency;$/;"	m	class:sylar::FiberSemaphore	typeref:typename:size_t	access:private
m_conf	sylar/sylar/tcp_server.h	/^    TcpServerConf::ptr m_conf;$/;"	m	class:sylar::TcpServer	typeref:typename:TcpServerConf::ptr	access:protected
m_config	sylar/sylar/db/redis.h	/^    std::map<std::string, std::map<std::string, std::string> > m_config;$/;"	m	class:sylar::RedisManager	typeref:typename:std::map<std::string,std::map<std::string,std::string>>	access:private
m_connectCb	sylar/sylar/streams/async_socket_stream.h	/^    connect_callback m_connectCb;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:connect_callback	access:protected
m_connectCb	sylar/sylar/streams/async_socket_stream.h	/^    connect_callback m_connectCb;$/;"	m	class:sylar::AsyncSocketStreamManager	typeref:typename:connect_callback	access:private
m_connectMs	sylar/sylar/db/redis.h	/^    uint32_t m_connectMs;$/;"	m	class:sylar::Redis	typeref:typename:uint32_t	access:private
m_connectMs	sylar/sylar/db/redis.h	/^    uint32_t m_connectMs;$/;"	m	class:sylar::RedisCluster	typeref:typename:uint32_t	access:private
m_conns	sylar/sylar/db/mysql.h	/^    std::map<std::string, std::list<MySQL*> > m_conns;$/;"	m	class:sylar::MySQLManager	typeref:typename:std::map<std::string,std::list<MySQL * >>	access:private
m_conns	sylar/sylar/db/sqlite3.h	/^    std::map<std::string, std::list<SQLite3*> > m_conns;$/;"	m	class:sylar::SQLite3Manager	typeref:typename:std::map<std::string,std::list<SQLite3 * >>	access:private
m_conns	sylar/sylar/http/http_connection.h	/^    std::list<HttpConnection*> m_conns;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:std::list<HttpConnection * >	access:private
m_content	sylar/sylar/email/email.h	/^    std::string m_content;$/;"	m	class:sylar::EMailEntity	typeref:typename:std::string	access:private
m_content	sylar/sylar/http/servlet.h	/^    std::string m_content;$/;"	m	class:sylar::http::NotFoundServlet	typeref:typename:std::string	access:private
m_context	sylar/sylar/db/redis.h	/^    std::shared_ptr<redisAsyncContext> m_context;$/;"	m	class:sylar::FoxRedis	typeref:typename:std::shared_ptr<redisAsyncContext>	access:private
m_context	sylar/sylar/db/redis.h	/^    std::shared_ptr<redisClusterAsyncContext> m_context;$/;"	m	class:sylar::FoxRedisCluster	typeref:typename:std::shared_ptr<redisClusterAsyncContext>	access:private
m_context	sylar/sylar/db/redis.h	/^    std::shared_ptr<redisClusterContext> m_context;$/;"	m	class:sylar::RedisCluster	typeref:typename:std::shared_ptr<redisClusterContext>	access:private
m_context	sylar/sylar/db/redis.h	/^    std::shared_ptr<redisContext> m_context;$/;"	m	class:sylar::Redis	typeref:typename:std::shared_ptr<redisContext>	access:private
m_cookies	sylar/sylar/http/http.h	/^    MapType m_cookies;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:MapType	access:private
m_cookies	sylar/sylar/http/http.h	/^    std::vector<std::string> m_cookies;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:std::vector<std::string>	access:private
m_countPerMS	sylar/sylar/util.h	/^    float m_countPerMS;$/;"	m	class:sylar::SpeedLimit	typeref:typename:float	access:private
m_createTime	sylar/sylar/http/http_connection.h	/^    uint64_t m_createTime = 0;$/;"	m	class:sylar::http::HttpConnection	typeref:typename:uint64_t	access:private
m_ctx	sylar/sylar/fiber.h	/^    ucontext_t m_ctx;$/;"	m	class:sylar::Fiber	typeref:typename:ucontext_t	access:private
m_ctx	sylar/sylar/socket.h	/^    std::shared_ptr<SSL_CTX> m_ctx;$/;"	m	class:sylar::SSLSocket	typeref:typename:std::shared_ptr<SSL_CTX>	access:private
m_ctxCount	sylar/sylar/db/redis.h	/^    int m_ctxCount;$/;"	m	class:sylar::FoxRedis	typeref:typename:int	access:private
m_ctxCount	sylar/sylar/db/redis.h	/^    int m_ctxCount;$/;"	m	class:sylar::FoxRedisCluster	typeref:typename:int	access:private
m_ctxs	sylar/sylar/streams/async_socket_stream.h	/^    std::unordered_map<uint32_t, Ctx::ptr> m_ctxs;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:std::unordered_map<uint32_t,Ctx::ptr>	access:protected
m_cur	sylar/sylar/bytearray.h	/^    Node* m_cur;$/;"	m	class:sylar::ByteArray	typeref:typename:Node *	access:private
m_cur	sylar/sylar/db/fox_thread.h	/^    uint32_t m_cur;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:uint32_t	access:private
m_cur	sylar/sylar/db/mysql.h	/^    MYSQL_ROW m_cur;$/;"	m	class:sylar::MySQLRes	typeref:typename:MYSQL_ROW	access:private
m_cur	sylar/sylar/ds/util.h	/^    const uint32_t* m_cur;$/;"	m	class:sylar::ds::PrimeGenerator	typeref:typename:const uint32_t *	access:private
m_curCount	sylar/sylar/util.h	/^    uint32_t m_curCount;$/;"	m	class:sylar::SpeedLimit	typeref:typename:uint32_t	access:private
m_curLength	sylar/sylar/db/mysql.h	/^    unsigned long* m_curLength;$/;"	m	class:sylar::MySQLRes	typeref:typename:unsigned long *	access:private
m_curSec	sylar/sylar/util.h	/^    uint32_t m_curSec;$/;"	m	class:sylar::SpeedLimit	typeref:typename:uint32_t	access:private
m_cwd	sylar/sylar/env.h	/^    std::string m_cwd;$/;"	m	class:sylar::Env	typeref:typename:std::string	access:private
m_data	sylar/sylar/db/mysql.h	/^    std::shared_ptr<MYSQL_RES> m_data;$/;"	m	class:sylar::MySQLRes	typeref:typename:std::shared_ptr<MYSQL_RES>	access:private
m_data	sylar/sylar/ds/array.h	/^    T* m_data;$/;"	m	class:sylar::ds::Array	typeref:typename:T *	access:private
m_data	sylar/sylar/ds/bitmap.h	/^        base_type* m_data;$/;"	m	class:sylar::ds::Bitmap::iterator_base	typeref:typename:base_type *	access:protected
m_data	sylar/sylar/ds/bitmap.h	/^    base_type* m_data;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:base_type *	access:private
m_data	sylar/sylar/http/http_parser.h	/^    HttpRequest::ptr m_data;$/;"	m	class:sylar::http::HttpRequestParser	typeref:typename:HttpRequest::ptr	access:private
m_data	sylar/sylar/http/http_parser.h	/^    HttpResponse::ptr m_data;$/;"	m	class:sylar::http::HttpResponseParser	typeref:typename:HttpResponse::ptr	access:private
m_data	sylar/sylar/http/ws_session.h	/^    std::string m_data;$/;"	m	class:sylar::http::WSFrameMessage	typeref:typename:std::string	access:private
m_data	sylar/sylar/rock/rock_stream.h	/^    boost::any m_data;$/;"	m	class:sylar::RockStream	typeref:typename:boost::any	access:private
m_data	sylar/sylar/streams/async_socket_stream.h	/^    boost::any m_data;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:boost::any	access:protected
m_data	sylar/sylar/streams/service_discovery.h	/^    std::string m_data;$/;"	m	class:sylar::ServiceItemInfo	typeref:typename:std::string	access:private
m_dataSize	sylar/sylar/ds/bitmap.h	/^        int32_t m_dataSize;$/;"	m	class:sylar::ds::Bitmap::iterator_base	typeref:typename:int32_t	access:protected
m_dataSize	sylar/sylar/ds/bitmap.h	/^    uint32_t m_dataSize;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:uint32_t	access:private
m_datas	sylar/sylar/db/fox_thread.h	/^    std::map<std::string, void*> m_datas;$/;"	m	class:sylar::FoxThread	typeref:typename:std::map<std::string,void * >	access:private
m_datas	sylar/sylar/db/mysql.h	/^    std::vector<Data> m_datas;$/;"	m	class:sylar::MySQLStmtRes	typeref:typename:std::vector<Data>	access:private
m_datas	sylar/sylar/db/redis.h	/^    std::map<std::string, std::list<IRedis*> > m_datas;$/;"	m	class:sylar::RedisManager	typeref:typename:std::map<std::string,std::list<IRedis * >>	access:private
m_datas	sylar/sylar/ds/dict.h	/^    std::vector<Node>* m_datas;$/;"	m	class:sylar::ds::Dict	typeref:typename:std::vector<Node> *	access:private
m_datas	sylar/sylar/ds/hash_map.h	/^    std::vector<Node>* m_datas;$/;"	m	class:sylar::ds::HashMap	typeref:typename:std::vector<Node> *	access:private
m_datas	sylar/sylar/ds/hash_multimap.h	/^    std::vector<Node>* m_datas;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:std::vector<Node> *	access:private
m_datas	sylar/sylar/ds/lru_cache.h	/^    std::vector<cache_type*> m_datas;$/;"	m	class:sylar::ds::HashLruCache	typeref:typename:std::vector<cache_type * >	access:private
m_datas	sylar/sylar/ds/timed_cache.h	/^    std::vector<cache_type*> m_datas;$/;"	m	class:sylar::ds::HashTimedCache	typeref:typename:std::vector<cache_type * >	access:private
m_datas	sylar/sylar/ds/timed_lru_cache.h	/^    std::vector<cache_type*> m_datas;$/;"	m	class:sylar::ds::HashTimedLruCache	typeref:typename:std::vector<cache_type * >	access:private
m_datas	sylar/sylar/fd_manager.h	/^    std::vector<FdCtx::ptr> m_datas;$/;"	m	class:sylar::FdManager	typeref:typename:std::vector<FdCtx::ptr>	access:private
m_datas	sylar/sylar/http/servlet.h	/^    std::unordered_map<std::string, IServletCreator::ptr> m_datas;$/;"	m	class:sylar::http::ServletDispatch	typeref:typename:std::unordered_map<std::string,IServletCreator::ptr>	access:private
m_datas	sylar/sylar/http/session_data.h	/^    std::unordered_map<std::string, SessionData::ptr> m_datas;$/;"	m	class:sylar::http::SessionDataManager	typeref:typename:std::unordered_map<std::string,SessionData::ptr>	access:private
m_datas	sylar/sylar/http/session_data.h	/^    std::unordered_map<std::string, boost::any> m_datas;$/;"	m	class:sylar::http::SessionData	typeref:typename:std::unordered_map<std::string,boost::any>	access:private
m_datas	sylar/sylar/ns/ns_protocol.h	/^    std::map<std::string, NSDomain::ptr> m_datas;$/;"	m	class:sylar::ns::NSDomainSet	typeref:typename:std::map<std::string,NSDomain::ptr>	access:private
m_datas	sylar/sylar/ns/ns_protocol.h	/^    std::map<uint32_t, NSNodeSet::ptr> m_datas;$/;"	m	class:sylar::ns::NSDomain	typeref:typename:std::map<uint32_t,NSNodeSet::ptr>	access:private
m_datas	sylar/sylar/ns/ns_protocol.h	/^    std::map<uint64_t, NSNode::ptr> m_datas;$/;"	m	class:sylar::ns::NSNodeSet	typeref:typename:std::map<uint64_t,NSNode::ptr>	access:private
m_datas	sylar/sylar/streams/async_socket_stream.h	/^    std::vector<AsyncSocketStream::ptr> m_datas;$/;"	m	class:sylar::AsyncSocketStreamManager	typeref:typename:std::vector<AsyncSocketStream::ptr>	access:private
m_datas	sylar/sylar/streams/load_balance.h	/^    std::unordered_map<std::string, std::unordered_map<std::string, LoadBalance::ptr> > m_datas;$/;"	m	class:sylar::SDLoadBalance	typeref:typename:std::unordered_map<std::string,std::unordered_map<std::string,LoadBalance::ptr>>	access:protected
m_datas	sylar/sylar/streams/load_balance.h	/^    std::unordered_map<uint64_t, LoadBalanceItem::ptr> m_datas;$/;"	m	class:sylar::LoadBalance	typeref:typename:std::unordered_map<uint64_t,LoadBalanceItem::ptr>	access:protected
m_datas	sylar/sylar/streams/service_discovery.h	/^        ,std::unordered_map<uint64_t, ServiceItemInfo::ptr> > > m_datas;$/;"	m	class:sylar::IServiceDiscovery	typeref:typename:std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<uint64_t,ServiceItemInfo::ptr>>>	access:protected
m_datas	sylar/sylar/worker.h	/^    std::map<std::string, std::vector<Scheduler::ptr> > m_datas;$/;"	m	class:sylar::WorkerManager	typeref:typename:std::map<std::string,std::vector<Scheduler::ptr>>	access:private
m_db	sylar/sylar/db/sqlite3.h	/^    SQLite3::ptr m_db;$/;"	m	class:sylar::SQLite3Stmt	typeref:typename:SQLite3::ptr	access:protected
m_db	sylar/sylar/db/sqlite3.h	/^    SQLite3::ptr m_db;$/;"	m	class:sylar::SQLite3Transaction	typeref:typename:SQLite3::ptr	access:private
m_db	sylar/sylar/db/sqlite3.h	/^    sqlite3* m_db;$/;"	m	class:sylar::SQLite3	typeref:typename:sqlite3 *	access:private
m_dbDefines	sylar/sylar/db/mysql.h	/^    std::map<std::string, std::map<std::string, std::string> > m_dbDefines;$/;"	m	class:sylar::MySQLManager	typeref:typename:std::map<std::string,std::map<std::string,std::string>>	access:private
m_dbDefines	sylar/sylar/db/sqlite3.h	/^    std::map<std::string, std::map<std::string, std::string> > m_dbDefines;$/;"	m	class:sylar::SQLite3Manager	typeref:typename:std::map<std::string,std::map<std::string,std::string>>	access:private
m_dbclass	sylar/sylar/orm/table.h	/^    std::string m_dbclass = "sylar::IDB";$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
m_dbname	sylar/sylar/db/mysql.h	/^    std::string m_dbname;$/;"	m	class:sylar::MySQL	typeref:typename:std::string	access:private
m_decoder	sylar/sylar/rock/rock_stream.h	/^    RockMessageDecoder::ptr m_decoder;$/;"	m	class:sylar::RockStream	typeref:typename:RockMessageDecoder::ptr	access:private
m_default	sylar/sylar/http/servlet.h	/^    Servlet::ptr m_default;$/;"	m	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	access:private
m_default	sylar/sylar/orm/column.h	/^    std::string m_default;$/;"	m	class:sylar::orm::Column	typeref:typename:std::string	access:private
m_defaultType	sylar/sylar/streams/load_balance.h	/^    ILoadBalance::Type m_defaultType = ILoadBalance::FAIR;$/;"	m	class:sylar::SDLoadBalance	typeref:typename:ILoadBalance::Type	access:protected
m_del	sylar/sylar/ds/cache_status.h	/^    int64_t m_del = 0;$/;"	m	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:private
m_desc	sylar/sylar/orm/column.h	/^    std::string m_desc;$/;"	m	class:sylar::orm::Column	typeref:typename:std::string	access:private
m_desc	sylar/sylar/orm/index.h	/^    std::string m_desc;$/;"	m	class:sylar::orm::Index	typeref:typename:std::string	access:private
m_desc	sylar/sylar/orm/table.h	/^    std::string m_desc;$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
m_description	sylar/sylar/config.h	/^    std::string m_description;$/;"	m	class:sylar::ConfigVarBase	typeref:typename:std::string	access:protected
m_destory	sylar/sylar/library.cc	/^    destory_module m_destory;$/;"	m	class:sylar::ModuleCloser	typeref:typename:destory_module	file:	access:private
m_dict	sylar/sylar/ds/dict.h	/^    Dict<uint64_t, char> m_dict;$/;"	m	class:sylar::ds::StringDict	typeref:typename:Dict<uint64_t,char>	access:private
m_disconnectCb	sylar/sylar/streams/async_socket_stream.h	/^    disconnect_callback m_disconnectCb;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:disconnect_callback	access:protected
m_disconnectCb	sylar/sylar/streams/async_socket_stream.h	/^    disconnect_callback m_disconnectCb;$/;"	m	class:sylar::AsyncSocketStreamManager	typeref:typename:disconnect_callback	access:private
m_dispatch	sylar/sylar/http/http_server.h	/^    ServletDispatch::ptr m_dispatch;$/;"	m	class:sylar::http::HttpServer	typeref:typename:ServletDispatch::ptr	access:private
m_dispatch	sylar/sylar/http/ws_server.h	/^    WSServletDispatch::ptr m_dispatch;$/;"	m	class:sylar::http::WSServer	typeref:typename:WSServletDispatch::ptr	access:protected
m_doing	sylar/sylar/streams/load_balance.h	/^    uint32_t m_doing = 0;$/;"	m	class:sylar::HolderStats	typeref:typename:uint32_t	access:private
m_domain	sylar/sylar/ns/ns_protocol.h	/^    std::string m_domain;$/;"	m	class:sylar::ns::NSDomain	typeref:typename:std::string	access:private
m_domain2cmds	sylar/sylar/ns/name_server_module.h	/^    std::map<std::string, std::set<uint32_t> > m_domain2cmds;$/;"	m	class:sylar::ns::NSClientInfo	typeref:typename:std::map<std::string,std::set<uint32_t>>	access:private
m_domainToSessions	sylar/sylar/ns/name_server_module.h	/^    std::map<std::string, std::set<sylar::RockStream::ptr> > m_domainToSessions;$/;"	m	class:sylar::ns::NameServerModule	typeref:typename:std::map<std::string,std::set<sylar::RockStream::ptr>>	access:private
m_domains	sylar/sylar/ns/name_server_module.h	/^    NSDomainSet::ptr m_domains;$/;"	m	class:sylar::ns::NameServerModule	typeref:typename:NSDomainSet::ptr	access:private
m_domains	sylar/sylar/ns/ns_client.h	/^    NSDomainSet::ptr m_domains;$/;"	m	class:sylar::ns::NSClient	typeref:typename:NSDomainSet::ptr	access:private
m_dtype	sylar/sylar/orm/column.h	/^    Type m_dtype;$/;"	m	class:sylar::orm::Column	typeref:typename:Type	access:private
m_dtype	sylar/sylar/orm/index.h	/^    Type m_dtype;$/;"	m	class:sylar::orm::Index	typeref:typename:Type	access:private
m_elapse	sylar/sylar/log.h	/^    uint32_t m_elapse = 0;$/;"	m	class:sylar::LogEvent	typeref:typename:uint32_t	access:private
m_elasticity	sylar/sylar/ds/lru_cache.h	/^    size_t m_elasticity;$/;"	m	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:private
m_elasticity	sylar/sylar/ds/lru_cache.h	/^    size_t m_elasticity;$/;"	m	class:sylar::ds::LruCache	typeref:typename:size_t	access:private
m_elasticity	sylar/sylar/ds/timed_cache.h	/^    size_t m_elasticity;$/;"	m	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:private
m_elasticity	sylar/sylar/ds/timed_cache.h	/^    uint64_t m_elasticity;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:uint64_t	access:private
m_elasticity	sylar/sylar/ds/timed_lru_cache.h	/^    size_t m_elasticity;$/;"	m	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:private
m_elasticity	sylar/sylar/ds/timed_lru_cache.h	/^    size_t m_elasticity;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:private
m_elements	sylar/sylar/ds/hash_multimap.h	/^    uint64_t m_elements;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:uint64_t	access:private
m_encode	sylar/sylar/streams/zlib_stream.h	/^    bool m_encode;$/;"	m	class:sylar::ZlibStream	typeref:typename:bool	access:private
m_endian	sylar/sylar/bytearray.h	/^    int8_t m_endian;$/;"	m	class:sylar::ByteArray	typeref:typename:int8_t	access:private
m_entitys	sylar/sylar/email/email.h	/^    std::vector<EMailEntity::ptr> m_entitys;$/;"	m	class:sylar::EMail	typeref:typename:std::vector<EMailEntity::ptr>	access:private
m_epfd	sylar/sylar/iomanager.h	/^    int m_epfd = 0;$/;"	m	class:sylar::IOManager	typeref:typename:int	access:private
m_err	sylar/sylar/db/redis.h	/^    std::string m_err;$/;"	m	class:sylar::FoxRedis	typeref:typename:std::string	access:private
m_err	sylar/sylar/db/redis.h	/^    std::string m_err;$/;"	m	class:sylar::FoxRedisCluster	typeref:typename:std::string	access:private
m_errno	sylar/sylar/db/mysql.h	/^    int m_errno;$/;"	m	class:sylar::MySQLRes	typeref:typename:int	access:private
m_errno	sylar/sylar/db/mysql.h	/^    int m_errno;$/;"	m	class:sylar::MySQLStmtRes	typeref:typename:int	access:private
m_errno	sylar/sylar/db/sqlite3.h	/^    int m_errno;$/;"	m	class:sylar::SQLite3Data	typeref:typename:int	access:private
m_error	sylar/sylar/http/http_parser.h	/^    int m_error;$/;"	m	class:sylar::http::HttpRequestParser	typeref:typename:int	access:private
m_error	sylar/sylar/http/http_parser.h	/^    int m_error;$/;"	m	class:sylar::http::HttpResponseParser	typeref:typename:int	access:private
m_error	sylar/sylar/log.h	/^    bool m_error = false;$/;"	m	class:sylar::LogFormatter	typeref:typename:bool	access:private
m_errs	sylar/sylar/streams/load_balance.h	/^    uint32_t m_errs = 0;$/;"	m	class:sylar::HolderStats	typeref:typename:uint32_t	access:private
m_errstr	sylar/sylar/db/mysql.h	/^    std::string m_errstr;$/;"	m	class:sylar::MySQLRes	typeref:typename:std::string	access:private
m_errstr	sylar/sylar/db/mysql.h	/^    std::string m_errstr;$/;"	m	class:sylar::MySQLStmtRes	typeref:typename:std::string	access:private
m_errstr	sylar/sylar/db/sqlite3.h	/^    std::string m_errstr;$/;"	m	class:sylar::SQLite3Data	typeref:typename:std::string	access:private
m_event	sylar/sylar/db/fox_thread.h	/^    struct event* m_event;$/;"	m	class:sylar::FoxThread	typeref:struct:event *	access:private
m_event	sylar/sylar/db/redis.h	/^    struct event* m_event;$/;"	m	class:sylar::FoxRedis	typeref:struct:event *	access:private
m_event	sylar/sylar/db/redis.h	/^    struct event* m_event;$/;"	m	class:sylar::FoxRedisCluster	typeref:struct:event *	access:private
m_event	sylar/sylar/log.h	/^    LogEvent::ptr m_event;$/;"	m	class:sylar::LogEventWrap	typeref:typename:LogEvent::ptr	access:private
m_exe	sylar/sylar/env.h	/^    std::string m_exe;$/;"	m	class:sylar::Env	typeref:typename:std::string	access:private
m_family	sylar/sylar/socket.h	/^    int m_family;$/;"	m	class:sylar::Socket	typeref:typename:int	access:protected
m_fd	sylar/sylar/fd_manager.h	/^    int m_fd;$/;"	m	class:sylar::FdCtx	typeref:typename:int	access:private
m_fdContexts	sylar/sylar/iomanager.h	/^    std::vector<FdContext*> m_fdContexts;$/;"	m	class:sylar::IOManager	typeref:typename:std::vector<FdContext * >	access:private
m_fiberId	sylar/sylar/log.h	/^    uint32_t m_fiberId = 0;$/;"	m	class:sylar::LogEvent	typeref:typename:uint32_t	access:private
m_fibers	sylar/sylar/scheduler.h	/^    std::list<FiberAndThread> m_fibers;$/;"	m	class:sylar::Scheduler	typeref:typename:std::list<FiberAndThread>	access:private
m_file	sylar/sylar/log.h	/^    const char* m_file = nullptr;$/;"	m	class:sylar::LogEvent	typeref:typename:const char *	access:private
m_filename	sylar/sylar/log.h	/^    std::string m_filename;$/;"	m	class:sylar::FileLogAppender	typeref:typename:std::string	access:private
m_filename	sylar/sylar/module.h	/^    std::string m_filename;$/;"	m	class:sylar::Module	typeref:typename:std::string	access:protected
m_filestream	sylar/sylar/log.h	/^    std::ofstream m_filestream;$/;"	m	class:sylar::FileLogAppender	typeref:typename:std::ofstream	access:private
m_finish	sylar/sylar/worker.h	/^    bool m_finish;$/;"	m	class:sylar::WorkerGroup	typeref:typename:bool	access:private
m_first	sylar/sylar/db/sqlite3.h	/^    bool m_first;$/;"	m	class:sylar::SQLite3Data	typeref:typename:bool	access:private
m_format	sylar/sylar/log.cc	/^    std::string m_format;$/;"	m	class:sylar::DateTimeFormatItem	typeref:typename:std::string	file:	access:private
m_formatter	sylar/sylar/log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:sylar::LogAppender	typeref:typename:LogFormatter::ptr	access:protected
m_formatter	sylar/sylar/log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:sylar::Logger	typeref:typename:LogFormatter::ptr	access:private
m_fragment	sylar/sylar/http/http.h	/^    std::string m_fragment;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:std::string	access:private
m_fragment	sylar/sylar/uri.h	/^    std::string m_fragment;$/;"	m	class:sylar::Uri	typeref:typename:std::string	access:private
m_free	sylar/sylar/streams/zlib_stream.h	/^    bool m_free;$/;"	m	class:sylar::ZlibStream	typeref:typename:bool	access:private
m_freeFoxThreads	sylar/sylar/db/fox_thread.h	/^    std::list<FoxThread*> m_freeFoxThreads;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:std::list<FoxThread * >	access:private
m_fromEMailAddress	sylar/sylar/email/email.h	/^    std::string m_fromEMailAddress;$/;"	m	class:sylar::EMail	typeref:typename:std::string	access:private
m_fromEMailPasswd	sylar/sylar/email/email.h	/^    std::string m_fromEMailPasswd;$/;"	m	class:sylar::EMail	typeref:typename:std::string	access:private
m_get	sylar/sylar/ds/cache_status.h	/^    int64_t m_get = 0;$/;"	m	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:private
m_globs	sylar/sylar/http/servlet.h	/^    std::vector<std::pair<std::string, IServletCreator::ptr> > m_globs;$/;"	m	class:sylar::http::ServletDispatch	typeref:typename:std::vector<std::pair<std::string,IServletCreator::ptr>>	access:private
m_handle	sylar/sylar/library.cc	/^    void* m_handle;$/;"	m	class:sylar::ModuleCloser	typeref:typename:void *	file:	access:private
m_handle	sylar/sylar/zk_client.h	/^    zhandle_t* m_handle;$/;"	m	class:sylar::ZKClient	typeref:typename:zhandle_t *	access:private
m_hasError	sylar/sylar/db/mysql.h	/^    bool m_hasError;$/;"	m	class:sylar::MySQL	typeref:typename:bool	access:private
m_hasError	sylar/sylar/db/mysql.h	/^    bool m_hasError;$/;"	m	class:sylar::MySQLTransaction	typeref:typename:bool	access:private
m_hasFormatter	sylar/sylar/log.h	/^    bool m_hasFormatter = false;$/;"	m	class:sylar::LogAppender	typeref:typename:bool	access:protected
m_hash	sylar/sylar/ds/lru_cache.h	/^    Hash m_hash;$/;"	m	class:sylar::ds::HashLruCache	typeref:typename:Hash	access:private
m_hash	sylar/sylar/ds/timed_cache.h	/^    Hash m_hash;$/;"	m	class:sylar::ds::HashTimedCache	typeref:typename:Hash	access:private
m_hash	sylar/sylar/ds/timed_lru_cache.h	/^    Hash m_hash;$/;"	m	class:sylar::ds::HashTimedLruCache	typeref:typename:Hash	access:private
m_headers	sylar/sylar/email/email.h	/^    std::map<std::string, std::string> m_headers;$/;"	m	class:sylar::EMailEntity	typeref:typename:std::map<std::string,std::string>	access:private
m_headers	sylar/sylar/http/http.h	/^    MapType m_headers;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:MapType	access:private
m_headers	sylar/sylar/http/http.h	/^    MapType m_headers;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:MapType	access:private
m_helps	sylar/sylar/env.h	/^    std::vector<std::pair<std::string, std::string> > m_helps;$/;"	m	class:sylar::Env	typeref:typename:std::vector<std::pair<std::string,std::string>>	access:private
m_hit	sylar/sylar/ds/cache_status.h	/^    int64_t m_hit = 0;$/;"	m	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:private
m_host	sylar/sylar/db/redis.h	/^    std::string m_host;$/;"	m	class:sylar::FoxRedis	typeref:typename:std::string	access:private
m_host	sylar/sylar/db/redis.h	/^    std::string m_host;$/;"	m	class:sylar::FoxRedisCluster	typeref:typename:std::string	access:private
m_host	sylar/sylar/db/redis.h	/^    std::string m_host;$/;"	m	class:sylar::Redis	typeref:typename:std::string	access:private
m_host	sylar/sylar/db/redis.h	/^    std::string m_host;$/;"	m	class:sylar::RedisCluster	typeref:typename:std::string	access:private
m_host	sylar/sylar/email/smtp.h	/^    std::string m_host;$/;"	m	class:sylar::SmtpClient	typeref:typename:std::string	access:private
m_host	sylar/sylar/http/http_connection.h	/^    std::string m_host;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:std::string	access:private
m_host	sylar/sylar/uri.h	/^    std::string m_host;$/;"	m	class:sylar::Uri	typeref:typename:std::string	access:private
m_hosts	sylar/sylar/streams/service_discovery.h	/^    std::string m_hosts;$/;"	m	class:sylar::ZKServiceDiscovery	typeref:typename:std::string	access:private
m_hosts	sylar/sylar/zk_client.h	/^    std::string m_hosts;$/;"	m	class:sylar::ZKClient	typeref:typename:std::string	access:private
m_id	sylar/sylar/fiber.h	/^    uint64_t m_id = 0;$/;"	m	class:sylar::Fiber	typeref:typename:uint64_t	access:private
m_id	sylar/sylar/http/session_data.h	/^    std::string m_id;$/;"	m	class:sylar::http::SessionData	typeref:typename:std::string	access:private
m_id	sylar/sylar/module.h	/^    std::string m_id;$/;"	m	class:sylar::Module	typeref:typename:std::string	access:protected
m_id	sylar/sylar/ns/ns_protocol.h	/^    uint64_t m_id;$/;"	m	class:sylar::ns::NSNode	typeref:typename:uint64_t	access:private
m_id	sylar/sylar/streams/load_balance.h	/^    uint64_t m_id = 0;$/;"	m	class:sylar::LoadBalanceItem	typeref:typename:uint64_t	access:protected
m_id	sylar/sylar/streams/service_discovery.h	/^    uint64_t m_id;$/;"	m	class:sylar::ServiceItemInfo	typeref:typename:uint64_t	access:private
m_id	sylar/sylar/thread.h	/^    pid_t m_id = -1;$/;"	m	class:sylar::Thread	typeref:typename:pid_t	access:private
m_idx	sylar/sylar/streams/async_socket_stream.h	/^    uint32_t m_idx;$/;"	m	class:sylar::AsyncSocketStreamManager	typeref:typename:uint32_t	access:private
m_idxs	sylar/sylar/orm/table.h	/^    std::vector<Index::ptr> m_idxs;$/;"	m	class:sylar::orm::Table	typeref:typename:std::vector<Index::ptr>	access:private
m_index	sylar/sylar/orm/column.h	/^    int m_index;$/;"	m	class:sylar::orm::Column	typeref:typename:int	access:private
m_initCb	sylar/sylar/db/fox_thread.h	/^    FoxThread::init_cb m_initCb;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:FoxThread::init_cb	access:private
m_initCb	sylar/sylar/db/fox_thread.h	/^    init_cb m_initCb;$/;"	m	class:sylar::FoxThread	typeref:typename:init_cb	access:private
m_ioWorker	sylar/sylar/tcp_server.h	/^    IOManager* m_ioWorker;$/;"	m	class:sylar::TcpServer	typeref:typename:IOManager *	access:protected
m_iomanager	sylar/sylar/streams/async_socket_stream.h	/^    sylar::IOManager* m_iomanager;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:sylar::IOManager *	access:protected
m_ip	sylar/sylar/ns/ns_protocol.h	/^    std::string m_ip;$/;"	m	class:sylar::ns::NSNode	typeref:typename:std::string	access:private
m_ip	sylar/sylar/streams/service_discovery.h	/^    std::string m_ip;$/;"	m	class:sylar::ServiceItemInfo	typeref:typename:std::string	access:private
m_isClosed	sylar/sylar/fd_manager.h	/^    bool m_isClosed: 1;$/;"	m	class:sylar::FdCtx	typeref:typename:bool:1	access:private
m_isConnected	sylar/sylar/socket.h	/^    bool m_isConnected;$/;"	m	class:sylar::Socket	typeref:typename:bool	access:protected
m_isFinished	sylar/sylar/db/mysql.h	/^    bool m_isFinished;$/;"	m	class:sylar::MySQLTransaction	typeref:typename:bool	access:private
m_isHttps	sylar/sylar/http/http_connection.h	/^    bool m_isHttps;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:bool	access:private
m_isInit	sylar/sylar/fd_manager.h	/^    bool m_isInit: 1;$/;"	m	class:sylar::FdCtx	typeref:typename:bool:1	access:private
m_isKeepalive	sylar/sylar/http/http_server.h	/^    bool m_isKeepalive;$/;"	m	class:sylar::http::HttpServer	typeref:typename:bool	access:private
m_isOnTimer	sylar/sylar/streams/service_discovery.h	/^    bool m_isOnTimer = false;$/;"	m	class:sylar::ZKServiceDiscovery	typeref:typename:bool	access:private
m_isSocket	sylar/sylar/fd_manager.h	/^    bool m_isSocket: 1;$/;"	m	class:sylar::FdCtx	typeref:typename:bool:1	access:private
m_isStop	sylar/sylar/tcp_server.h	/^    bool m_isStop;$/;"	m	class:sylar::TcpServer	typeref:typename:bool	access:protected
m_items	sylar/sylar/log.h	/^    std::vector<FormatItem::ptr> m_items;$/;"	m	class:sylar::LogFormatter	typeref:typename:std::vector<FormatItem::ptr>	access:private
m_items	sylar/sylar/streams/load_balance.h	/^    std::vector<LoadBalanceItem::ptr> m_items;$/;"	m	class:sylar::RoundRobinLoadBalance	typeref:typename:std::vector<LoadBalanceItem::ptr>	access:protected
m_items	sylar/sylar/streams/load_balance.h	/^    std::vector<LoadBalanceItem::ptr> m_items;$/;"	m	class:sylar::WeightLoadBalance	typeref:typename:std::vector<LoadBalanceItem::ptr>	access:protected
m_keys	sylar/sylar/ds/lru_cache.h	/^    list_type m_keys;$/;"	m	class:sylar::ds::LruCache	typeref:typename:list_type	access:private
m_keys	sylar/sylar/ds/timed_lru_cache.h	/^    list_type m_keys;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:list_type	access:private
m_lastAccessTime	sylar/sylar/http/session_data.h	/^    uint64_t m_lastAccessTime;$/;"	m	class:sylar::http::SessionData	typeref:typename:uint64_t	access:private
m_lastActiveTime	sylar/sylar/db/redis.h	/^    uint64_t m_lastActiveTime;$/;"	m	class:sylar::ISyncRedis	typeref:typename:uint64_t	access:protected
m_lastInitTime	sylar/sylar/streams/load_balance.h	/^    uint64_t m_lastInitTime = 0;$/;"	m	class:sylar::LoadBalance	typeref:typename:uint64_t	access:protected
m_lastTime	sylar/sylar/log.h	/^    uint64_t m_lastTime = 0;$/;"	m	class:sylar::FileLogAppender	typeref:typename:uint64_t	access:private
m_lastUpdateTime	sylar/sylar/streams/load_balance.h	/^    uint32_t m_lastUpdateTime = 0; \/\/seconds$/;"	m	class:sylar::HolderStatsSet	typeref:typename:uint32_t	access:private
m_lastUsedTime	sylar/sylar/db/mysql.h	/^    uint64_t m_lastUsedTime;$/;"	m	class:sylar::MySQL	typeref:typename:uint64_t	access:private
m_lastUsedTime	sylar/sylar/db/sqlite3.h	/^    uint64_t m_lastUsedTime = 0;$/;"	m	class:sylar::SQLite3	typeref:typename:uint64_t	access:private
m_length	sylar/sylar/address.h	/^    socklen_t m_length;$/;"	m	class:sylar::UnixAddress	typeref:typename:socklen_t	access:private
m_length	sylar/sylar/orm/column.h	/^    int m_length;$/;"	m	class:sylar::orm::Column	typeref:typename:int	access:private
m_level	sylar/sylar/log.h	/^    LogLevel::Level m_level = LogLevel::DEBUG;$/;"	m	class:sylar::LogAppender	typeref:typename:LogLevel::Level	access:protected
m_level	sylar/sylar/log.h	/^    LogLevel::Level m_level;$/;"	m	class:sylar::LogEvent	typeref:typename:LogLevel::Level	access:private
m_level	sylar/sylar/log.h	/^    LogLevel::Level m_level;$/;"	m	class:sylar::Logger	typeref:typename:LogLevel::Level	access:private
m_line	sylar/sylar/log.h	/^    int32_t m_line = 0;$/;"	m	class:sylar::LogEvent	typeref:typename:int32_t	access:private
m_localAddress	sylar/sylar/socket.h	/^    Address::ptr m_localAddress;$/;"	m	class:sylar::Socket	typeref:typename:Address::ptr	access:protected
m_lock	sylar/sylar/mutex.h	/^    pthread_rwlock_t m_lock;$/;"	m	class:sylar::RWMutex	typeref:typename:pthread_rwlock_t	access:private
m_locked	sylar/sylar/mutex.h	/^    bool m_locked;$/;"	m	struct:sylar::ReadScopedLockImpl	typeref:typename:bool	access:private
m_locked	sylar/sylar/mutex.h	/^    bool m_locked;$/;"	m	struct:sylar::ScopedLockImpl	typeref:typename:bool	access:private
m_locked	sylar/sylar/mutex.h	/^    bool m_locked;$/;"	m	struct:sylar::WriteScopedLockImpl	typeref:typename:bool	access:private
m_logCb	sylar/sylar/zk_client.h	/^    log_callback m_logCb;$/;"	m	class:sylar::ZKClient	typeref:typename:log_callback	access:private
m_logEnable	sylar/sylar/db/redis.h	/^    bool m_logEnable;$/;"	m	class:sylar::IRedis	typeref:typename:bool	access:protected
m_logger	sylar/sylar/log.h	/^    std::shared_ptr<Logger> m_logger;$/;"	m	class:sylar::LogEvent	typeref:typename:std::shared_ptr<Logger>	access:private
m_loggers	sylar/sylar/log.h	/^    std::map<std::string, Logger::ptr> m_loggers;$/;"	m	class:sylar::LoggerManager	typeref:typename:std::map<std::string,Logger::ptr>	access:private
m_mainIOManager	sylar/sylar/application.h	/^    IOManager::ptr m_mainIOManager;$/;"	m	class:sylar::Application	typeref:typename:IOManager::ptr	access:private
m_manager	sylar/sylar/timer.h	/^    TimerManager* m_manager = nullptr;$/;"	m	class:sylar::Timer	typeref:typename:TimerManager *	access:private
m_maxAliveTime	sylar/sylar/http/http_connection.h	/^    uint32_t m_maxAliveTime;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:uint32_t	access:private
m_maxConn	sylar/sylar/db/mysql.h	/^    uint32_t m_maxConn;$/;"	m	class:sylar::MySQLManager	typeref:typename:uint32_t	access:private
m_maxConn	sylar/sylar/db/sqlite3.h	/^    uint32_t m_maxConn;$/;"	m	class:sylar::SQLite3Manager	typeref:typename:uint32_t	access:private
m_maxRequest	sylar/sylar/http/http_connection.h	/^    uint32_t m_maxRequest;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:uint32_t	access:private
m_maxSize	sylar/sylar/ds/lru_cache.h	/^    size_t m_maxSize;$/;"	m	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:private
m_maxSize	sylar/sylar/ds/lru_cache.h	/^    size_t m_maxSize;$/;"	m	class:sylar::ds::LruCache	typeref:typename:size_t	access:private
m_maxSize	sylar/sylar/ds/timed_cache.h	/^    size_t m_maxSize;$/;"	m	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:private
m_maxSize	sylar/sylar/ds/timed_cache.h	/^    uint64_t m_maxSize;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:uint64_t	access:private
m_maxSize	sylar/sylar/ds/timed_lru_cache.h	/^    size_t m_maxSize;$/;"	m	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:private
m_maxSize	sylar/sylar/ds/timed_lru_cache.h	/^    size_t m_maxSize;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:private
m_maxSize	sylar/sylar/http/http_connection.h	/^    uint32_t m_maxSize;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:uint32_t	access:private
m_method	sylar/sylar/http/http.h	/^    HttpMethod m_method;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:HttpMethod	access:private
m_modules	sylar/sylar/module.h	/^    std::unordered_map<std::string, Module::ptr> m_modules;$/;"	m	class:sylar::ModuleManager	typeref:typename:std::unordered_map<std::string,Module::ptr>	access:private
m_ms	sylar/sylar/timer.h	/^    uint64_t m_ms = 0;$/;"	m	class:sylar::Timer	typeref:typename:uint64_t	access:private
m_mutex	sylar/sylar/config.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::ConfigVar	typeref:typename:RWMutexType	access:private
m_mutex	sylar/sylar/db/fox_thread.h	/^    RWMutex m_mutex;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:RWMutex	access:private
m_mutex	sylar/sylar/db/fox_thread.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::FoxThread	typeref:typename:sylar::RWMutex	access:private
m_mutex	sylar/sylar/db/mysql.h	/^    MutexType m_mutex;$/;"	m	class:sylar::MySQLManager	typeref:typename:MutexType	access:private
m_mutex	sylar/sylar/db/redis.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::RedisManager	typeref:typename:sylar::RWMutex	access:private
m_mutex	sylar/sylar/db/sqlite3.h	/^    MutexType m_mutex;$/;"	m	class:sylar::SQLite3Manager	typeref:typename:MutexType	access:private
m_mutex	sylar/sylar/ds/dict.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ds::Dict	typeref:typename:sylar::RWMutex	access:private
m_mutex	sylar/sylar/ds/hash_map.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ds::HashMap	typeref:typename:sylar::RWMutex	access:private
m_mutex	sylar/sylar/ds/hash_multimap.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:sylar::RWMutex	access:private
m_mutex	sylar/sylar/ds/lru_cache.h	/^    MutexType m_mutex;$/;"	m	class:sylar::ds::LruCache	typeref:typename:MutexType	access:private
m_mutex	sylar/sylar/ds/timed_cache.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:RWMutexType	access:private
m_mutex	sylar/sylar/ds/timed_lru_cache.h	/^    MutexType m_mutex;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:MutexType	access:private
m_mutex	sylar/sylar/env.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::Env	typeref:typename:RWMutexType	access:private
m_mutex	sylar/sylar/fd_manager.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::FdManager	typeref:typename:RWMutexType	access:private
m_mutex	sylar/sylar/http/http_connection.h	/^    MutexType m_mutex;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:MutexType	access:private
m_mutex	sylar/sylar/http/servlet.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::http::ServletDispatch	typeref:typename:RWMutexType	access:private
m_mutex	sylar/sylar/http/session_data.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::http::SessionData	typeref:typename:sylar::RWMutex	access:private
m_mutex	sylar/sylar/http/session_data.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::http::SessionDataManager	typeref:typename:sylar::RWMutex	access:private
m_mutex	sylar/sylar/iomanager.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::IOManager	typeref:typename:RWMutexType	access:private
m_mutex	sylar/sylar/log.h	/^    MutexType m_mutex;$/;"	m	class:sylar::LogAppender	typeref:typename:MutexType	access:protected
m_mutex	sylar/sylar/log.h	/^    MutexType m_mutex;$/;"	m	class:sylar::Logger	typeref:typename:MutexType	access:private
m_mutex	sylar/sylar/log.h	/^    MutexType m_mutex;$/;"	m	class:sylar::LoggerManager	typeref:typename:MutexType	access:private
m_mutex	sylar/sylar/module.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::ModuleManager	typeref:typename:RWMutexType	access:private
m_mutex	sylar/sylar/mutex.h	/^    MutexType m_mutex;$/;"	m	class:sylar::FiberSemaphore	typeref:typename:MutexType	access:private
m_mutex	sylar/sylar/mutex.h	/^    T& m_mutex;$/;"	m	struct:sylar::ReadScopedLockImpl	typeref:typename:T &	access:private
m_mutex	sylar/sylar/mutex.h	/^    T& m_mutex;$/;"	m	struct:sylar::ScopedLockImpl	typeref:typename:T &	access:private
m_mutex	sylar/sylar/mutex.h	/^    T& m_mutex;$/;"	m	struct:sylar::WriteScopedLockImpl	typeref:typename:T &	access:private
m_mutex	sylar/sylar/mutex.h	/^    pthread_mutex_t m_mutex;$/;"	m	class:sylar::Mutex	typeref:typename:pthread_mutex_t	access:private
m_mutex	sylar/sylar/mutex.h	/^    pthread_spinlock_t m_mutex;$/;"	m	class:sylar::Spinlock	typeref:typename:pthread_spinlock_t	access:private
m_mutex	sylar/sylar/mutex.h	/^    volatile std::atomic_flag m_mutex;$/;"	m	class:sylar::CASLock	typeref:typename:volatile std::atomic_flag	access:private
m_mutex	sylar/sylar/ns/name_server_module.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ns::NameServerModule	typeref:typename:sylar::RWMutex	access:private
m_mutex	sylar/sylar/ns/ns_client.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ns::NSClient	typeref:typename:sylar::RWMutex	access:private
m_mutex	sylar/sylar/ns/ns_protocol.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ns::NSDomain	typeref:typename:sylar::RWMutex	access:private
m_mutex	sylar/sylar/ns/ns_protocol.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ns::NSDomainSet	typeref:typename:sylar::RWMutex	access:private
m_mutex	sylar/sylar/ns/ns_protocol.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ns::NSNodeSet	typeref:typename:sylar::RWMutex	access:private
m_mutex	sylar/sylar/scheduler.h	/^    MutexType m_mutex;$/;"	m	class:sylar::Scheduler	typeref:typename:MutexType	access:private
m_mutex	sylar/sylar/streams/async_socket_stream.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:RWMutexType	access:protected
m_mutex	sylar/sylar/streams/async_socket_stream.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::AsyncSocketStreamManager	typeref:typename:RWMutexType	access:private
m_mutex	sylar/sylar/streams/load_balance.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::LoadBalance	typeref:typename:RWMutexType	access:protected
m_mutex	sylar/sylar/streams/load_balance.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::SDLoadBalance	typeref:typename:RWMutexType	access:protected
m_mutex	sylar/sylar/streams/service_discovery.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::IServiceDiscovery	typeref:typename:sylar::RWMutex	access:protected
m_mutex	sylar/sylar/timer.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::TimerManager	typeref:typename:RWMutexType	access:private
m_mysql	sylar/sylar/db/mysql.h	/^    MySQL::ptr m_mysql;$/;"	m	class:sylar::MySQLStmt	typeref:typename:MySQL::ptr	access:private
m_mysql	sylar/sylar/db/mysql.h	/^    MySQL::ptr m_mysql;$/;"	m	class:sylar::MySQLTransaction	typeref:typename:MySQL::ptr	access:private
m_mysql	sylar/sylar/db/mysql.h	/^    std::shared_ptr<MYSQL> m_mysql;$/;"	m	class:sylar::MySQL	typeref:typename:std::shared_ptr<MYSQL>	access:private
m_name	sylar/sylar/config.h	/^    std::string m_name;$/;"	m	class:sylar::ConfigVarBase	typeref:typename:std::string	access:protected
m_name	sylar/sylar/db/fox_thread.h	/^    std::string m_name;$/;"	m	class:sylar::FoxThread	typeref:typename:std::string	access:private
m_name	sylar/sylar/db/fox_thread.h	/^    std::string m_name;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:std::string	access:private
m_name	sylar/sylar/db/redis.h	/^    std::string m_name;$/;"	m	class:sylar::IRedis	typeref:typename:std::string	access:protected
m_name	sylar/sylar/http/servlet.h	/^    std::string m_name;$/;"	m	class:sylar::http::NotFoundServlet	typeref:typename:std::string	access:private
m_name	sylar/sylar/http/servlet.h	/^    std::string m_name;$/;"	m	class:sylar::http::Servlet	typeref:typename:std::string	access:protected
m_name	sylar/sylar/http/ws_servlet.h	/^    std::string m_name;$/;"	m	class:sylar::http::WSServlet	typeref:typename:std::string	access:protected
m_name	sylar/sylar/log.h	/^    std::string m_name;$/;"	m	class:sylar::Logger	typeref:typename:std::string	access:private
m_name	sylar/sylar/module.h	/^    std::string m_name;$/;"	m	class:sylar::Module	typeref:typename:std::string	access:protected
m_name	sylar/sylar/orm/column.h	/^    std::string m_name;$/;"	m	class:sylar::orm::Column	typeref:typename:std::string	access:private
m_name	sylar/sylar/orm/index.h	/^    std::string m_name;$/;"	m	class:sylar::orm::Index	typeref:typename:std::string	access:private
m_name	sylar/sylar/orm/table.h	/^    std::string m_name;$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
m_name	sylar/sylar/scheduler.h	/^    std::string m_name;$/;"	m	class:sylar::Scheduler	typeref:typename:std::string	access:private
m_name	sylar/sylar/tcp_server.h	/^    std::string m_name;$/;"	m	class:sylar::TcpServer	typeref:typename:std::string	access:protected
m_name	sylar/sylar/thread.h	/^    std::string m_name;$/;"	m	class:sylar::Thread	typeref:typename:std::string	access:private
m_name	sylar/tests/test_config.cc	/^    std::string m_name;$/;"	m	class:Person	typeref:typename:std::string	file:	access:public
m_namespace	sylar/sylar/orm/table.h	/^    std::string m_namespace;$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
m_next	sylar/sylar/timer.h	/^    uint64_t m_next = 0;$/;"	m	class:sylar::Timer	typeref:typename:uint64_t	access:private
m_node	sylar/sylar/ns/name_server_module.h	/^    NSNode::ptr m_node;$/;"	m	class:sylar::ns::NSClientInfo	typeref:typename:NSNode::ptr	access:private
m_notify	sylar/sylar/protocol.h	/^    uint32_t m_notify;$/;"	m	class:sylar::Notify	typeref:typename:uint32_t	access:protected
m_notifyHandler	sylar/sylar/rock/rock_stream.h	/^    notify_handler m_notifyHandler;$/;"	m	class:sylar::RockStream	typeref:typename:notify_handler	access:private
m_oks	sylar/sylar/streams/load_balance.h	/^    uint32_t m_oks = 0;$/;"	m	class:sylar::HolderStats	typeref:typename:uint32_t	access:private
m_onClose	sylar/sylar/http/ws_servlet.h	/^    on_close_cb m_onClose;$/;"	m	class:sylar::http::FunctionWSServlet	typeref:typename:on_close_cb	access:protected
m_onConnect	sylar/sylar/http/ws_servlet.h	/^    on_connect_cb m_onConnect;$/;"	m	class:sylar::http::FunctionWSServlet	typeref:typename:on_connect_cb	access:protected
m_opcode	sylar/sylar/http/ws_session.h	/^    int m_opcode;$/;"	m	class:sylar::http::WSFrameMessage	typeref:typename:int	access:private
m_owner	sylar/sylar/streams/socket_stream.h	/^    bool m_owner;$/;"	m	class:sylar::SocketStream	typeref:typename:bool	access:protected
m_params	sylar/sylar/db/mysql.h	/^    std::map<std::string, std::string> m_params;$/;"	m	class:sylar::MySQL	typeref:typename:std::map<std::string,std::string>	access:private
m_params	sylar/sylar/http/http.h	/^    MapType m_params;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:MapType	access:private
m_parser	sylar/sylar/http/http_parser.h	/^    http_parser m_parser;$/;"	m	class:sylar::http::HttpRequestParser	typeref:typename:http_parser	access:private
m_parser	sylar/sylar/http/http_parser.h	/^    httpclient_parser m_parser;$/;"	m	class:sylar::http::HttpResponseParser	typeref:typename:httpclient_parser	access:private
m_parserParamFlag	sylar/sylar/http/http.h	/^    uint8_t m_parserParamFlag;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:uint8_t	access:private
m_passwd	sylar/sylar/db/redis.h	/^    std::string m_passwd;$/;"	m	class:sylar::IRedis	typeref:typename:std::string	access:protected
m_path	sylar/sylar/http/http.h	/^    std::string m_path;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:std::string	access:private
m_path	sylar/sylar/uri.h	/^    std::string m_path;$/;"	m	class:sylar::Uri	typeref:typename:std::string	access:private
m_pattern	sylar/sylar/log.h	/^    std::string m_pattern;$/;"	m	class:sylar::LogFormatter	typeref:typename:std::string	access:private
m_poolSize	sylar/sylar/db/mysql.h	/^    int32_t m_poolSize;$/;"	m	class:sylar::MySQL	typeref:typename:int32_t	access:private
m_port	sylar/sylar/db/redis.h	/^    uint16_t m_port;$/;"	m	class:sylar::FoxRedis	typeref:typename:uint16_t	access:private
m_port	sylar/sylar/db/redis.h	/^    uint32_t m_port;$/;"	m	class:sylar::Redis	typeref:typename:uint32_t	access:private
m_port	sylar/sylar/db/redis.h	/^    uint32_t m_port;$/;"	m	class:sylar::RedisCluster	typeref:typename:uint32_t	access:private
m_port	sylar/sylar/http/http_connection.h	/^    uint32_t m_port;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:uint32_t	access:private
m_port	sylar/sylar/ns/ns_protocol.h	/^    uint16_t m_port;$/;"	m	class:sylar::ns::NSNode	typeref:typename:uint16_t	access:private
m_port	sylar/sylar/streams/service_discovery.h	/^    uint16_t m_port;$/;"	m	class:sylar::ServiceItemInfo	typeref:typename:uint16_t	access:private
m_port	sylar/sylar/uri.h	/^    int32_t m_port;$/;"	m	class:sylar::Uri	typeref:typename:int32_t	access:private
m_pos	sylar/sylar/ds/bitmap.h	/^        int32_t m_pos;$/;"	m	class:sylar::ds::Bitmap::iterator_base	typeref:typename:int32_t	access:protected
m_posHash	sylar/sylar/ds/dict.h	/^    PosHash m_posHash;$/;"	m	class:sylar::ds::Dict	typeref:typename:PosHash	access:private
m_posHash	sylar/sylar/ds/hash_map.h	/^    PosHash m_posHash;$/;"	m	class:sylar::ds::HashMap	typeref:typename:PosHash	access:private
m_posHash	sylar/sylar/ds/hash_multimap.h	/^    PosHash m_posHash;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:PosHash	access:private
m_position	sylar/sylar/bytearray.h	/^    size_t m_position;$/;"	m	class:sylar::ByteArray	typeref:typename:size_t	access:private
m_previouseTime	sylar/sylar/timer.h	/^    uint64_t m_previouseTime = 0;$/;"	m	class:sylar::TimerManager	typeref:typename:uint64_t	access:private
m_prikey	sylar/sylar/util/crypto_util.h	/^    RSA* m_prikey;$/;"	m	class:sylar::RSACipher	typeref:typename:RSA *	access:private
m_prikeyStr	sylar/sylar/util/crypto_util.h	/^    std::string m_prikeyStr;$/;"	m	class:sylar::RSACipher	typeref:typename:std::string	access:private
m_program	sylar/sylar/env.h	/^    std::string m_program;$/;"	m	class:sylar::Env	typeref:typename:std::string	access:private
m_protocol	sylar/sylar/socket.h	/^    int m_protocol;$/;"	m	class:sylar::Socket	typeref:typename:int	access:protected
m_prune	sylar/sylar/ds/cache_status.h	/^    int64_t m_prune = 0;$/;"	m	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:private
m_ptr	sylar/sylar/util.h	/^    std::shared_ptr<T> m_ptr;$/;"	m	class:sylar::SharedArray	typeref:typename:std::shared_ptr<T>	access:private
m_pubkey	sylar/sylar/util/crypto_util.h	/^    RSA* m_pubkey;$/;"	m	class:sylar::RSACipher	typeref:typename:RSA *	access:private
m_pubkeyStr	sylar/sylar/util/crypto_util.h	/^    std::string m_pubkeyStr;$/;"	m	class:sylar::RSACipher	typeref:typename:std::string	access:private
m_query	sylar/sylar/http/http.h	/^    std::string m_query;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:std::string	access:private
m_query	sylar/sylar/uri.h	/^    std::string m_query;$/;"	m	class:sylar::Uri	typeref:typename:std::string	access:private
m_queryDomains	sylar/sylar/ns/name_server_module.h	/^    std::map<sylar::RockStream::ptr, std::set<std::string> > m_queryDomains;$/;"	m	class:sylar::ns::NameServerModule	typeref:typename:std::map<sylar::RockStream::ptr,std::set<std::string>>	access:private
m_queryDomains	sylar/sylar/ns/ns_client.h	/^    std::set<std::string> m_queryDomains;$/;"	m	class:sylar::ns::NSClient	typeref:typename:std::set<std::string>	access:private
m_queryInfos	sylar/sylar/streams/service_discovery.h	/^    std::unordered_map<std::string, std::unordered_set<std::string> > m_queryInfos;$/;"	m	class:sylar::IServiceDiscovery	typeref:typename:std::unordered_map<std::string,std::unordered_set<std::string>>	access:protected
m_queryclass	sylar/sylar/orm/table.h	/^    std::string m_queryclass = "sylar::IDB";$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
m_queue	sylar/sylar/streams/async_socket_stream.h	/^    std::list<SendCtx::ptr> m_queue;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:std::list<SendCtx::ptr>	access:protected
m_queueMutex	sylar/sylar/streams/async_socket_stream.h	/^    RWMutexType m_queueMutex;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:RWMutexType	access:protected
m_read	sylar/sylar/db/fox_thread.h	/^    evutil_socket_t m_read;$/;"	m	class:sylar::FoxThread	typeref:typename:evutil_socket_t	access:private
m_reason	sylar/sylar/http/http.h	/^    std::string m_reason;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:std::string	access:private
m_recurring	sylar/sylar/timer.h	/^    bool m_recurring = false;$/;"	m	class:sylar::Timer	typeref:typename:bool	access:private
m_recvTimeout	sylar/sylar/fd_manager.h	/^    uint64_t m_recvTimeout;$/;"	m	class:sylar::FdCtx	typeref:typename:uint64_t	access:private
m_recvTimeout	sylar/sylar/tcp_server.h	/^    uint64_t m_recvTimeout;$/;"	m	class:sylar::TcpServer	typeref:typename:uint64_t	access:protected
m_recvTimeout	sylar/sylar/zk_client.h	/^    int32_t m_recvTimeout;$/;"	m	class:sylar::ZKClient	typeref:typename:int32_t	access:private
m_registerInfos	sylar/sylar/streams/service_discovery.h	/^        ,std::unordered_map<std::string, std::string> > > m_registerInfos;$/;"	m	class:sylar::IServiceDiscovery	typeref:typename:std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>	access:protected
m_remoteAddress	sylar/sylar/socket.h	/^    Address::ptr m_remoteAddress;$/;"	m	class:sylar::Socket	typeref:typename:Address::ptr	access:protected
m_request	sylar/sylar/http/http_connection.h	/^    uint64_t m_request = 0;$/;"	m	class:sylar::http::HttpConnection	typeref:typename:uint64_t	access:private
m_requestHandler	sylar/sylar/rock/rock_stream.h	/^    request_handler m_requestHandler;$/;"	m	class:sylar::RockStream	typeref:typename:request_handler	access:private
m_result	sylar/sylar/protocol.h	/^    uint32_t m_result;$/;"	m	class:sylar::Response	typeref:typename:uint32_t	access:protected
m_resultStr	sylar/sylar/protocol.h	/^    std::string m_resultStr;$/;"	m	class:sylar::Response	typeref:typename:std::string	access:protected
m_rockSDLoadBalance	sylar/sylar/application.h	/^    RockSDLoadBalance::ptr m_rockSDLoadBalance;$/;"	m	class:sylar::Application	typeref:typename:RockSDLoadBalance::ptr	access:private
m_root	sylar/sylar/bytearray.h	/^    Node* m_root;$/;"	m	class:sylar::ByteArray	typeref:typename:Node *	access:private
m_root	sylar/sylar/log.h	/^    Logger::ptr m_root;$/;"	m	class:sylar::Logger	typeref:typename:Logger::ptr	access:private
m_root	sylar/sylar/log.h	/^    Logger::ptr m_root;$/;"	m	class:sylar::LoggerManager	typeref:typename:Logger::ptr	access:private
m_rootFiber	sylar/sylar/scheduler.h	/^    Fiber::ptr m_rootFiber;$/;"	m	class:sylar::Scheduler	typeref:typename:Fiber::ptr	access:private
m_rootThread	sylar/sylar/scheduler.h	/^    int m_rootThread = 0;$/;"	m	class:sylar::Scheduler	typeref:typename:int	access:protected
m_scheduler	sylar/sylar/worker.h	/^    Scheduler* m_scheduler;$/;"	m	class:sylar::WorkerGroup	typeref:typename:Scheduler *	access:private
m_scheme	sylar/sylar/uri.h	/^    std::string m_scheme;$/;"	m	class:sylar::Uri	typeref:typename:std::string	access:private
m_sd	sylar/sylar/streams/load_balance.h	/^    IServiceDiscovery::ptr m_sd;$/;"	m	class:sylar::SDLoadBalance	typeref:typename:IServiceDiscovery::ptr	access:protected
m_selfData	sylar/sylar/streams/service_discovery.h	/^    std::string m_selfData;$/;"	m	class:sylar::ZKServiceDiscovery	typeref:typename:std::string	access:private
m_selfInfo	sylar/sylar/streams/service_discovery.h	/^    std::string m_selfInfo;$/;"	m	class:sylar::ZKServiceDiscovery	typeref:typename:std::string	access:private
m_sem	sylar/sylar/streams/async_socket_stream.h	/^    sylar::FiberSemaphore m_sem;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:sylar::FiberSemaphore	access:protected
m_sem	sylar/sylar/worker.h	/^    FiberSemaphore m_sem;$/;"	m	class:sylar::WorkerGroup	typeref:typename:FiberSemaphore	access:private
m_semaphore	sylar/sylar/mutex.h	/^    sem_t m_semaphore;$/;"	m	class:sylar::Semaphore	typeref:typename:sem_t	access:private
m_semaphore	sylar/sylar/thread.h	/^    Semaphore m_semaphore;$/;"	m	class:sylar::Thread	typeref:typename:Semaphore	access:private
m_sendTimeout	sylar/sylar/fd_manager.h	/^    uint64_t m_sendTimeout;$/;"	m	class:sylar::FdCtx	typeref:typename:uint64_t	access:private
m_servers	sylar/sylar/application.h	/^    std::map<std::string, std::vector<TcpServer::ptr> > m_servers;$/;"	m	class:sylar::Application	typeref:typename:std::map<std::string,std::vector<TcpServer::ptr>>	access:private
m_serviceDiscovery	sylar/sylar/application.h	/^    ZKServiceDiscovery::ptr m_serviceDiscovery;$/;"	m	class:sylar::Application	typeref:typename:ZKServiceDiscovery::ptr	access:private
m_servlet	sylar/sylar/http/servlet.h	/^    Servlet::ptr m_servlet;$/;"	m	class:sylar::http::HoldServletCreator	typeref:typename:Servlet::ptr	access:private
m_sessions	sylar/sylar/ns/name_server_module.h	/^    std::map<sylar::RockStream::ptr, NSClientInfo::ptr> m_sessions;$/;"	m	class:sylar::ns::NameServerModule	typeref:typename:std::map<sylar::RockStream::ptr,NSClientInfo::ptr>	access:private
m_set	sylar/sylar/ds/cache_status.h	/^    int64_t m_set = 0;$/;"	m	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:private
m_sex	sylar/tests/test_config.cc	/^    bool m_sex = 0;$/;"	m	class:Person	typeref:typename:bool	file:	access:public
m_size	sylar/sylar/bytearray.h	/^    size_t m_size;$/;"	m	class:sylar::ByteArray	typeref:typename:size_t	access:private
m_size	sylar/sylar/db/fox_thread.h	/^    uint32_t m_size;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:uint32_t	access:private
m_size	sylar/sylar/ds/array.h	/^    uint64_t m_size;$/;"	m	class:sylar::ds::Array	typeref:typename:uint64_t	access:private
m_size	sylar/sylar/ds/bitmap.h	/^        int32_t m_size;$/;"	m	class:sylar::ds::Bitmap::iterator_base	typeref:typename:int32_t	access:protected
m_size	sylar/sylar/ds/bitmap.h	/^    uint32_t m_size;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:uint32_t	access:private
m_size	sylar/sylar/ds/dict.h	/^    uint64_t m_size;$/;"	m	class:sylar::ds::Dict	typeref:typename:uint64_t	access:private
m_size	sylar/sylar/ds/hash_map.h	/^    uint64_t m_size;$/;"	m	class:sylar::ds::HashMap	typeref:typename:uint64_t	access:private
m_size	sylar/sylar/ds/hash_multimap.h	/^    uint64_t m_size;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:uint64_t	access:private
m_size	sylar/sylar/streams/async_socket_stream.h	/^    uint32_t m_size;$/;"	m	class:sylar::AsyncSocketStreamManager	typeref:typename:uint32_t	access:private
m_size	sylar/sylar/util.h	/^    uint64_t m_size;$/;"	m	class:sylar::SharedArray	typeref:typename:uint64_t	access:private
m_sn	sylar/sylar/ns/ns_client.h	/^    uint32_t m_sn = 0;$/;"	m	class:sylar::ns::NSClient	typeref:typename:uint32_t	access:private
m_sn	sylar/sylar/protocol.h	/^    uint32_t m_sn;$/;"	m	class:sylar::Request	typeref:typename:uint32_t	access:protected
m_sn	sylar/sylar/protocol.h	/^    uint32_t m_sn;$/;"	m	class:sylar::Response	typeref:typename:uint32_t	access:protected
m_sn	sylar/sylar/streams/async_socket_stream.h	/^    uint32_t m_sn;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:uint32_t	access:protected
m_sock	sylar/sylar/socket.h	/^    int m_sock;$/;"	m	class:sylar::Socket	typeref:typename:int	access:protected
m_socket	sylar/sylar/streams/socket_stream.h	/^    Socket::ptr m_socket;$/;"	m	class:sylar::SocketStream	typeref:typename:Socket::ptr	access:protected
m_socks	sylar/sylar/tcp_server.h	/^    std::vector<Socket::ptr> m_socks;$/;"	m	class:sylar::TcpServer	typeref:typename:std::vector<Socket::ptr>	access:protected
m_speed	sylar/sylar/util.h	/^    uint32_t m_speed;$/;"	m	class:sylar::SpeedLimit	typeref:typename:uint32_t	access:private
m_ss	sylar/sylar/email/smtp.h	/^    std::stringstream m_ss;$/;"	m	class:sylar::SmtpClient	typeref:typename:std::stringstream	access:private
m_ss	sylar/sylar/log.h	/^    std::stringstream m_ss;$/;"	m	class:sylar::LogEvent	typeref:typename:std::stringstream	access:private
m_ssl	sylar/sylar/socket.h	/^    std::shared_ptr<SSL> m_ssl;$/;"	m	class:sylar::SSLSocket	typeref:typename:std::shared_ptr<SSL>	access:private
m_ssl	sylar/sylar/tcp_server.h	/^    bool m_ssl = false;$/;"	m	class:sylar::TcpServer	typeref:typename:bool	access:protected
m_stack	sylar/sylar/fiber.h	/^    void* m_stack = nullptr;$/;"	m	class:sylar::Fiber	typeref:typename:void *	access:private
m_stacksize	sylar/sylar/fiber.h	/^    uint32_t m_stacksize = 0;$/;"	m	class:sylar::Fiber	typeref:typename:uint32_t	access:private
m_start	sylar/sylar/db/fox_thread.h	/^    bool m_start;$/;"	m	class:sylar::FoxThread	typeref:typename:bool	access:private
m_start	sylar/sylar/db/fox_thread.h	/^    bool m_start;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:bool	access:private
m_state	sylar/sylar/fiber.h	/^    State m_state = INIT;$/;"	m	class:sylar::Fiber	typeref:typename:State	access:private
m_stats	sylar/sylar/streams/load_balance.h	/^    HolderStatsSet m_stats;$/;"	m	class:sylar::LoadBalanceItem	typeref:typename:HolderStatsSet	access:protected
m_stats	sylar/sylar/streams/load_balance.h	/^    std::vector<HolderStats> m_stats;$/;"	m	class:sylar::HolderStatsSet	typeref:typename:std::vector<HolderStats>	access:private
m_status	sylar/sylar/db/redis.h	/^    STATUS m_status;$/;"	m	class:sylar::FoxRedis	typeref:typename:STATUS	access:private
m_status	sylar/sylar/db/redis.h	/^    STATUS m_status;$/;"	m	class:sylar::FoxRedisCluster	typeref:typename:STATUS	access:private
m_status	sylar/sylar/db/sqlite3.h	/^    int8_t m_status;$/;"	m	class:sylar::SQLite3Transaction	typeref:typename:int8_t	access:private
m_status	sylar/sylar/ds/lru_cache.h	/^    CacheStatus m_status;$/;"	m	class:sylar::ds::HashLruCache	typeref:typename:CacheStatus	access:private
m_status	sylar/sylar/ds/lru_cache.h	/^    CacheStatus* m_status = nullptr;$/;"	m	class:sylar::ds::LruCache	typeref:typename:CacheStatus *	access:private
m_status	sylar/sylar/ds/timed_cache.h	/^    CacheStatus m_status;$/;"	m	class:sylar::ds::HashTimedCache	typeref:typename:CacheStatus	access:private
m_status	sylar/sylar/ds/timed_cache.h	/^    CacheStatus* m_status;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:CacheStatus *	access:private
m_status	sylar/sylar/ds/timed_lru_cache.h	/^    CacheStatus m_status;$/;"	m	class:sylar::ds::HashTimedLruCache	typeref:typename:CacheStatus	access:private
m_status	sylar/sylar/ds/timed_lru_cache.h	/^    CacheStatus* m_status = nullptr;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:CacheStatus *	access:private
m_status	sylar/sylar/http/http.h	/^    HttpStatus m_status;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:HttpStatus	access:private
m_statusOwner	sylar/sylar/ds/lru_cache.h	/^    bool m_statusOwner = false;$/;"	m	class:sylar::ds::LruCache	typeref:typename:bool	access:private
m_statusOwner	sylar/sylar/ds/timed_cache.h	/^    bool m_statusOwner = false;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:bool	access:private
m_statusOwner	sylar/sylar/ds/timed_lru_cache.h	/^    bool m_statusOwner = false;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:bool	access:private
m_stmt	sylar/sylar/db/mysql.h	/^    MYSQL_STMT* m_stmt;$/;"	m	class:sylar::MySQLStmt	typeref:typename:MYSQL_STMT *	access:private
m_stmt	sylar/sylar/db/mysql.h	/^    std::shared_ptr<MySQLStmt> m_stmt;$/;"	m	class:sylar::MySQLStmtRes	typeref:typename:std::shared_ptr<MySQLStmt>	access:private
m_stmt	sylar/sylar/db/sqlite3.h	/^    sqlite3_stmt* m_stmt;$/;"	m	class:sylar::SQLite3Stmt	typeref:typename:sqlite3_stmt *	access:protected
m_stmt	sylar/sylar/db/sqlite3.h	/^    std::shared_ptr<SQLite3Stmt> m_stmt;$/;"	m	class:sylar::SQLite3Data	typeref:typename:std::shared_ptr<SQLite3Stmt>	access:private
m_stop	sylar/sylar/worker.h	/^    bool m_stop;$/;"	m	class:sylar::WorkerManager	typeref:typename:bool	access:private
m_stopping	sylar/sylar/scheduler.h	/^    bool m_stopping = true;$/;"	m	class:sylar::Scheduler	typeref:typename:bool	access:protected
m_stream	sylar/sylar/streams/load_balance.h	/^    SocketStream::ptr m_stream;$/;"	m	class:sylar::LoadBalanceItem	typeref:typename:SocketStream::ptr	access:protected
m_string	sylar/sylar/log.cc	/^    std::string m_string;$/;"	m	class:sylar::StringFormatItem	typeref:typename:std::string	file:	access:private
m_string	sylar/sylar/log.cc	/^    std::string m_string;$/;"	m	class:sylar::TabFormatItem	typeref:typename:std::string	file:	access:private
m_subfix	sylar/sylar/orm/table.h	/^    std::string m_subfix = "_info";$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
m_sysNonblock	sylar/sylar/fd_manager.h	/^    bool m_sysNonblock: 1;$/;"	m	class:sylar::FdCtx	typeref:typename:bool:1	access:private
m_thread	sylar/sylar/db/fox_thread.h	/^    std::thread* m_thread;$/;"	m	class:sylar::FoxThread	typeref:typename:std::thread *	access:private
m_thread	sylar/sylar/db/redis.h	/^    sylar::FoxThread* m_thread;$/;"	m	class:sylar::FoxRedis	typeref:typename:sylar::FoxThread *	access:private
m_thread	sylar/sylar/db/redis.h	/^    sylar::FoxThread* m_thread;$/;"	m	class:sylar::FoxRedisCluster	typeref:typename:sylar::FoxThread *	access:private
m_thread	sylar/sylar/thread.h	/^    pthread_t m_thread = 0;$/;"	m	class:sylar::Thread	typeref:typename:pthread_t	access:private
m_threadCount	sylar/sylar/scheduler.h	/^    size_t m_threadCount = 0;$/;"	m	class:sylar::Scheduler	typeref:typename:size_t	access:protected
m_threadId	sylar/sylar/log.h	/^    uint32_t m_threadId = 0;$/;"	m	class:sylar::LogEvent	typeref:typename:uint32_t	access:private
m_threadIds	sylar/sylar/scheduler.h	/^    std::vector<int> m_threadIds;$/;"	m	class:sylar::Scheduler	typeref:typename:std::vector<int>	access:protected
m_threadName	sylar/sylar/log.h	/^    std::string m_threadName;$/;"	m	class:sylar::LogEvent	typeref:typename:std::string	access:private
m_threads	sylar/sylar/db/fox_thread.h	/^    std::map<std::string, IFoxThread::ptr> m_threads;$/;"	m	class:sylar::FoxThreadManager	typeref:typename:std::map<std::string,IFoxThread::ptr>	access:private
m_threads	sylar/sylar/db/fox_thread.h	/^    std::vector<FoxThread*> m_threads;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:std::vector<FoxThread * >	access:private
m_threads	sylar/sylar/scheduler.h	/^    std::vector<Thread::ptr> m_threads;$/;"	m	class:sylar::Scheduler	typeref:typename:std::vector<Thread::ptr>	access:private
m_tickleFds	sylar/sylar/iomanager.h	/^    int m_tickleFds[2];$/;"	m	class:sylar::IOManager	typeref:typename:int[2]	access:private
m_tickled	sylar/sylar/timer.h	/^    bool m_tickled = false;$/;"	m	class:sylar::TimerManager	typeref:typename:bool	access:private
m_time	sylar/sylar/log.h	/^    uint64_t m_time = 0;$/;"	m	class:sylar::LogEvent	typeref:typename:uint64_t	access:private
m_timed	sylar/sylar/ds/timed_cache.h	/^    set_type m_timed;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:set_type	access:private
m_timed	sylar/sylar/ds/timed_lru_cache.h	/^    set_type m_timed;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:set_type	access:private
m_timeout	sylar/sylar/ds/cache_status.h	/^    int64_t m_timeout = 0;$/;"	m	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:private
m_timeouts	sylar/sylar/streams/load_balance.h	/^    uint32_t m_timeouts = 0;$/;"	m	class:sylar::HolderStats	typeref:typename:uint32_t	access:private
m_timer	sylar/sylar/ns/ns_client.h	/^    sylar::Timer::ptr m_timer;$/;"	m	class:sylar::ns::NSClient	typeref:typename:sylar::Timer::ptr	access:private
m_timer	sylar/sylar/streams/async_socket_stream.h	/^    sylar::Timer::ptr m_timer;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:sylar::Timer::ptr	access:protected
m_timer	sylar/sylar/streams/service_discovery.h	/^    sylar::Timer::ptr m_timer;$/;"	m	class:sylar::ZKServiceDiscovery	typeref:typename:sylar::Timer::ptr	access:private
m_timers	sylar/sylar/timer.h	/^    std::set<Timer::ptr, Timer::Comparator> m_timers;$/;"	m	class:sylar::TimerManager	typeref:typename:std::set<Timer::ptr,Timer::Comparator>	access:private
m_title	sylar/sylar/email/email.h	/^    std::string m_title;$/;"	m	class:sylar::EMail	typeref:typename:std::string	access:private
m_toEMailAddress	sylar/sylar/email/email.h	/^    std::vector<std::string> m_toEMailAddress;$/;"	m	class:sylar::EMail	typeref:typename:std::vector<std::string>	access:private
m_total	sylar/sylar/db/fox_thread.h	/^    uint64_t m_total;$/;"	m	class:sylar::FoxThread	typeref:typename:uint64_t	access:private
m_total	sylar/sylar/db/fox_thread.h	/^    uint64_t m_total;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:uint64_t	access:private
m_total	sylar/sylar/ds/dict.h	/^    uint64_t m_total;$/;"	m	class:sylar::ds::Dict	typeref:typename:uint64_t	access:private
m_total	sylar/sylar/ds/hash_map.h	/^    uint64_t m_total;$/;"	m	class:sylar::ds::HashMap	typeref:typename:uint64_t	access:private
m_total	sylar/sylar/ds/hash_multimap.h	/^    uint64_t m_total;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:uint64_t	access:private
m_total	sylar/sylar/streams/load_balance.h	/^    uint32_t m_total = 0;$/;"	m	class:sylar::HolderStats	typeref:typename:uint32_t	access:private
m_type	sylar/examples/echo_server.cc	/^    int m_type = 0;$/;"	m	class:EchoServer	typeref:typename:int	file:	access:private
m_type	sylar/sylar/db/redis.h	/^    Type m_type;$/;"	m	class:sylar::IRedis	typeref:typename:Type	access:protected
m_type	sylar/sylar/db/sqlite3.h	/^    Type m_type;$/;"	m	class:sylar::SQLite3Transaction	typeref:typename:Type	access:private
m_type	sylar/sylar/module.h	/^    uint32_t m_type;$/;"	m	class:sylar::Module	typeref:typename:uint32_t	access:protected
m_type	sylar/sylar/orm/column.h	/^    std::string m_type;$/;"	m	class:sylar::orm::Column	typeref:typename:std::string	access:private
m_type	sylar/sylar/orm/index.h	/^    std::string m_type;$/;"	m	class:sylar::orm::Index	typeref:typename:std::string	access:private
m_type	sylar/sylar/orm/table.h	/^    DBType m_type = TYPE_SQLITE3;$/;"	m	class:sylar::orm::Table	typeref:typename:DBType	access:private
m_type	sylar/sylar/socket.h	/^    int m_type;$/;"	m	class:sylar::Socket	typeref:typename:int	access:protected
m_type	sylar/sylar/tcp_server.h	/^    std::string m_type = "tcp";$/;"	m	class:sylar::TcpServer	typeref:typename:std::string	access:protected
m_type2Modules	sylar/sylar/module.h	/^        ,std::unordered_map<std::string, Module::ptr> > m_type2Modules;$/;"	m	class:sylar::ModuleManager	typeref:typename:std::unordered_map<uint32_t,std::unordered_map<std::string,Module::ptr>>	access:private
m_types	sylar/sylar/streams/load_balance.h	/^    std::unordered_map<std::string, std::unordered_map<std::string, ILoadBalance::Type> > m_type/;"	m	class:sylar::SDLoadBalance	typeref:typename:std::unordered_map<std::string,std::unordered_map<std::string,ILoadBalance::Type>>	access:protected
m_update	sylar/sylar/orm/column.h	/^    std::string m_update;$/;"	m	class:sylar::orm::Column	typeref:typename:std::string	access:private
m_updateclass	sylar/sylar/orm/table.h	/^    std::string m_updateclass = "sylar::IDB";$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
m_usedTime	sylar/sylar/streams/load_balance.h	/^    uint32_t m_usedTime = 0;$/;"	m	class:sylar::HolderStats	typeref:typename:uint32_t	access:private
m_userNonblock	sylar/sylar/fd_manager.h	/^    bool m_userNonblock: 1;$/;"	m	class:sylar::FdCtx	typeref:typename:bool:1	access:private
m_userinfo	sylar/sylar/uri.h	/^    std::string m_userinfo;$/;"	m	class:sylar::Uri	typeref:typename:std::string	access:private
m_val	sylar/sylar/config.h	/^    T m_val;$/;"	m	class:sylar::ConfigVar	typeref:typename:T	access:private
m_value	sylar/sylar/util/hash_util.cc	/^    char m_value;$/;"	m	struct:sylar::xorStruct	typeref:typename:char	file:	access:public
m_values	sylar/sylar/ds/dict.h	/^    std::vector<V> m_values;$/;"	m	class:sylar::ds::Dict	typeref:typename:std::vector<V>	access:private
m_values	sylar/sylar/ds/hash_multimap.h	/^    std::vector<V> m_values;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:std::vector<V>	access:private
m_version	sylar/sylar/http/http.h	/^    uint8_t m_version;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:uint8_t	access:private
m_version	sylar/sylar/http/http.h	/^    uint8_t m_version;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:uint8_t	access:private
m_version	sylar/sylar/module.h	/^    std::string m_version;$/;"	m	class:sylar::Module	typeref:typename:std::string	access:protected
m_vhost	sylar/sylar/http/http_connection.h	/^    std::string m_vhost;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:std::string	access:private
m_waitSem	sylar/sylar/streams/async_socket_stream.h	/^    sylar::FiberSemaphore m_waitSem;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:sylar::FiberSemaphore	access:protected
m_waiters	sylar/sylar/mutex.h	/^    std::list<std::pair<Scheduler*, Fiber::ptr> > m_waiters;$/;"	m	class:sylar::FiberSemaphore	typeref:typename:std::list<std::pair<Scheduler *,Fiber::ptr>>	access:private
m_watcherCb	sylar/sylar/zk_client.h	/^    watcher_callback2 m_watcherCb;$/;"	m	class:sylar::ZKClient	typeref:typename:watcher_callback2	access:private
m_websocket	sylar/sylar/http/http.h	/^    bool m_websocket;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:bool	access:private
m_websocket	sylar/sylar/http/http.h	/^    bool m_websocket;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:bool	access:private
m_weight	sylar/sylar/ns/ns_protocol.h	/^    uint32_t m_weight;$/;"	m	class:sylar::ns::NSNode	typeref:typename:uint32_t	access:private
m_weight	sylar/sylar/streams/load_balance.h	/^    int32_t m_weight = 0;$/;"	m	class:sylar::LoadBalanceItem	typeref:typename:int32_t	access:protected
m_weights	sylar/sylar/streams/load_balance.h	/^    std::vector<int64_t> m_weights;$/;"	m	class:sylar::WeightLoadBalance	typeref:typename:std::vector<int64_t>	access:private
m_worker	sylar/sylar/streams/async_socket_stream.h	/^    sylar::IOManager* m_worker;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:sylar::IOManager *	access:protected
m_worker	sylar/sylar/tcp_server.h	/^    IOManager* m_worker;$/;"	m	class:sylar::TcpServer	typeref:typename:IOManager *	access:protected
m_working	sylar/sylar/db/fox_thread.h	/^    bool m_working;$/;"	m	class:sylar::FoxThread	typeref:typename:bool	access:private
m_write	sylar/sylar/db/fox_thread.h	/^    evutil_socket_t m_write;$/;"	m	class:sylar::FoxThread	typeref:typename:evutil_socket_t	access:private
m_zstream	sylar/sylar/streams/zlib_stream.h	/^    z_stream m_zstream;$/;"	m	class:sylar::ZlibStream	typeref:typename:z_stream	access:private
magic	sylar/sylar/rock/rock_protocol.h	/^    uint8_t magic[2];$/;"	m	struct:sylar::RockMsgHeader	typeref:typename:uint8_t[2]	access:public
main	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f	signature:(argc,argv)
main	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void	signature:()
main	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
main	sylar/examples/echo_server.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/examples/echo_server_udp.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/examples/echo_udp_client.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/samples/my_http_server.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/sylar/application.cc	/^int Application::main(int argc, char** argv) {$/;"	f	class:sylar::Application	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/sylar/application.h	/^    int main(int argc, char** argv);$/;"	p	class:sylar::Application	typeref:typename:int	access:private	signature:(int argc,char ** argv)
main	sylar/sylar/main.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/sylar/orm/orm.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_address.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_application.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_array.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_bitmap.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_bytearray.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_config.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_crypto.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_daemon.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_dict.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_email.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_env.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_fiber.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_hashmap.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_hashmultimap.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_hook.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_http.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_http_connection.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_http_parser.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_http_server.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_iomanager.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_lru.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_mysql.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_nameserver.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_orm.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_rock.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_scheduler.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_service_discovery.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_socket.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_sqlite3.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_tcp_server.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_thread.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_timed_cache.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_timed_lru_cache.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_uri.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_util.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_ws_client.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_ws_server.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_zlib_stream.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	sylar/tests/test_zookeeper.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main_id	sylar/sylar/daemon.h	/^    pid_t main_id = 0;$/;"	m	struct:sylar::ProcessInfo	typeref:typename:pid_t	access:public
main_start_time	sylar/sylar/daemon.h	/^    uint64_t main_start_time = 0;$/;"	m	struct:sylar::ProcessInfo	typeref:typename:uint64_t	access:public
makeRoomAtIndex	sylar/sylar/ds/roaring.h	/^static inline void makeRoomAtIndex(run_container_t *run, uint16_t index) {$/;"	f	typeref:typename:void	signature:(run_container_t * run,uint16_t index)
map_begin	sylar/sylar/ds/roaring.hh	/^	std::map<uint32_t, Roaring>::const_iterator map_begin;$/;"	m	class:Roaring64MapSetBitBiDirectionalIterator	typeref:typename:std::map<uint32_t,Roaring>::const_iterator	access:protected
map_end	sylar/sylar/ds/roaring.hh	/^    std::map<uint32_t, Roaring>::const_iterator map_end;$/;"	m	class:Roaring64MapSetBitForwardIterator	typeref:typename:std::map<uint32_t,Roaring>::const_iterator	access:protected
map_end	sylar/sylar/ds/roaring.hh	/^    std::map<uint32_t, Roaring>::const_reverse_iterator map_end;$/;"	m	class:Roaring64MapSetBitReverseIterator	typeref:typename:std::map<uint32_t,Roaring>::const_reverse_iterator	access:protected
map_iter	sylar/sylar/ds/roaring.hh	/^    std::map<uint32_t, Roaring>::const_iterator map_iter;$/;"	m	class:Roaring64MapSetBitForwardIterator	typeref:typename:std::map<uint32_t,Roaring>::const_iterator	access:protected
map_iter	sylar/sylar/ds/roaring.hh	/^    std::map<uint32_t, Roaring>::const_reverse_iterator map_iter;$/;"	m	class:Roaring64MapSetBitReverseIterator	typeref:typename:std::map<uint32_t,Roaring>::const_reverse_iterator	access:protected
map_type	sylar/sylar/ds/lru_cache.h	/^    typedef std::unordered_map<K, typename list_type::iterator> map_type;$/;"	t	class:sylar::ds::LruCache	typeref:typename:std::unordered_map<K,typename list_type::iterator>	access:public
map_type	sylar/sylar/ds/timed_cache.h	/^    typedef std::unordered_map<K, typename set_type::iterator> map_type;$/;"	t	class:sylar::ds::TimedCache	typeref:typename:std::unordered_map<K,typename set_type::iterator>	access:public
map_type	sylar/sylar/ds/timed_lru_cache.h	/^    typedef std::unordered_map<K, value_type> map_type;$/;"	t	class:sylar::ds::TimedLruCache	typeref:typename:std::unordered_map<K,value_type>	access:public
mark	sylar/sylar/http/http11_parser.h	/^  size_t mark;$/;"	m	struct:http_parser	typeref:typename:size_t	access:public
mark	sylar/sylar/http/httpclient_parser.h	/^  size_t mark;$/;"	m	struct:httpclient_parser	typeref:typename:size_t	access:public
mask	sylar/sylar/http/ws_session.h	/^    bool mask: 1;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:bool:1	access:public
max	sylar/sylar/ds/roaring.c	/^    uint32_t max;$/;"	m	struct:min_max_sum_s	typeref:typename:uint32_t	file:	access:public
max_value	sylar/sylar/ds/roaring.h	/^        max_value; \/* the maximal value, undefined if cardinality is zero *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
maximum	sylar/sylar/ds/roaring.hh	/^    uint32_t maximum() const { return roaring_bitmap_maximum(&roaring); }$/;"	f	class:Roaring	typeref:typename:uint32_t	access:public	signature:() const
maximum	sylar/sylar/ds/roaring.hh	/^    uint64_t maximum() const {$/;"	f	class:Roaring64Map	typeref:typename:uint64_t	access:public	signature:() const
md5	sylar/sylar/util/hash_util.cc	/^std::string md5(const std::string &data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
md5	sylar/sylar/util/hash_util.h	/^std::string md5(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
md5sum	sylar/sylar/util/hash_util.cc	/^std::string md5sum(const std::string &data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
md5sum	sylar/sylar/util/hash_util.cc	/^std::string md5sum(const void *data, size_t len) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
md5sum	sylar/sylar/util/hash_util.h	/^std::string md5sum(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
md5sum	sylar/sylar/util/hash_util.h	/^std::string md5sum(const void *data, size_t len);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
memequals	sylar/sylar/ds/roaring.c	/^bool memequals(const void *s1, const void *s2, size_t n) {$/;"	f	typeref:typename:bool	signature:(const void * s1,const void * s2,size_t n)
memequals	sylar/sylar/ds/roaring.h	/^bool memequals(const void *s1, const void *s2, size_t n);$/;"	p	typeref:typename:bool	signature:(const void * s1,const void * s2,size_t n)
merge	sylar/sylar/ds/cache_status.h	/^    void merge(const CacheStatus& o) {$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:void	access:public	signature:(const CacheStatus & o)
merge	sylar/sylar/ds/hash_map.h	/^    void merge(HashMap& oth) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:public	signature:(HashMap & oth)
min	sylar/sylar/ds/roaring.c	/^    uint32_t min;$/;"	m	struct:min_max_sum_s	typeref:typename:uint32_t	file:	access:public
min_max_sum_fnc	sylar/sylar/ds/roaring.c	/^static bool min_max_sum_fnc(uint32_t value, void *param) {$/;"	f	typeref:typename:bool	file:	signature:(uint32_t value,void * param)
min_max_sum_s	sylar/sylar/ds/roaring.c	/^typedef struct min_max_sum_s {$/;"	s	file:
min_max_sum_s::max	sylar/sylar/ds/roaring.c	/^    uint32_t max;$/;"	m	struct:min_max_sum_s	typeref:typename:uint32_t	file:	access:public
min_max_sum_s::min	sylar/sylar/ds/roaring.c	/^    uint32_t min;$/;"	m	struct:min_max_sum_s	typeref:typename:uint32_t	file:	access:public
min_max_sum_s::sum	sylar/sylar/ds/roaring.c	/^    uint64_t sum;$/;"	m	struct:min_max_sum_s	typeref:typename:uint64_t	file:	access:public
min_max_sum_t	sylar/sylar/ds/roaring.c	/^} min_max_sum_t;$/;"	t	typeref:struct:min_max_sum_s	file:
min_value	sylar/sylar/ds/roaring.h	/^        min_value; \/* the minimal value, undefined if cardinality is zero *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
minimum	sylar/sylar/ds/roaring.hh	/^    uint32_t minimum() const { return roaring_bitmap_minimum(&roaring); }$/;"	f	class:Roaring	typeref:typename:uint32_t	access:public	signature:() const
minimum	sylar/sylar/ds/roaring.hh	/^    uint64_t minimum() const {$/;"	f	class:Roaring64Map	typeref:typename:uint64_t	access:public	signature:() const
minimum_int32	sylar/sylar/ds/roaring.c	/^static inline int32_t minimum_int32(int32_t a, int32_t b) {$/;"	f	typeref:typename:int32_t	file:	signature:(int32_t a,int32_t b)
minimum_uint32	sylar/sylar/ds/roaring.c	/^static inline uint32_t minimum_uint32(uint32_t a, uint32_t b) {$/;"	f	typeref:typename:uint32_t	file:	signature:(uint32_t a,uint32_t b)
minimum_uint64	sylar/sylar/ds/roaring.c	/^static inline uint64_t minimum_uint64(uint64_t a, uint64_t b) {$/;"	f	typeref:typename:uint64_t	file:	signature:(uint64_t a,uint64_t b)
move	sylar/sylar/ds/roaring.hh	/^	bool move(const value_type& x) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const value_type & x)
move	sylar/sylar/ds/roaring.hh	/^	bool move(const value_type& x) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const value_type & x)
msg	sylar/sylar/email/smtp.h	/^    std::string msg;$/;"	m	struct:sylar::SmtpResult	typeref:typename:std::string	access:public
msg	sylar/sylar/rock/rock_stream.h	/^        Message::ptr msg;$/;"	m	struct:sylar::RockStream::RockSendCtx	typeref:typename:Message::ptr	access:public
murmur3_hash	sylar/sylar/util/hash_util.cc	/^uint32_t murmur3_hash(const char * str, const uint32_t & seed) {$/;"	f	namespace:sylar	typeref:typename:uint32_t	signature:(const char * str,const uint32_t & seed)
murmur3_hash	sylar/sylar/util/hash_util.cc	/^uint32_t murmur3_hash(const void* data, const uint32_t& size, const uint32_t & seed) {$/;"	f	namespace:sylar	typeref:typename:uint32_t	signature:(const void * data,const uint32_t & size,const uint32_t & seed)
murmur3_hash	sylar/sylar/util/hash_util.h	/^uint32_t murmur3_hash(const char * str, const uint32_t & seed = 1060627423);$/;"	p	namespace:sylar	typeref:typename:uint32_t	signature:(const char * str,const uint32_t & seed=1060627423)
murmur3_hash	sylar/sylar/util/hash_util.h	/^uint32_t murmur3_hash(const void* str, const uint32_t& size, const uint32_t & seed = 1060627423)/;"	p	namespace:sylar	typeref:typename:uint32_t	signature:(const void * str,const uint32_t & size,const uint32_t & seed=1060627423)
murmur3_hash64	sylar/sylar/util/hash_util.cc	/^uint64_t murmur3_hash64(const char * str, const uint32_t & seed, const uint32_t& seed2) {$/;"	f	namespace:sylar	typeref:typename:uint64_t	signature:(const char * str,const uint32_t & seed,const uint32_t & seed2)
murmur3_hash64	sylar/sylar/util/hash_util.cc	/^uint64_t murmur3_hash64(const void* str, const uint32_t& size,  const uint32_t & seed, const uin/;"	f	namespace:sylar	typeref:typename:uint64_t	signature:(const void * str,const uint32_t & size,const uint32_t & seed,const uint32_t & seed2)
murmur3_hash64	sylar/sylar/util/hash_util.h	/^uint64_t murmur3_hash64(const char * str, const uint32_t & seed = 1060627423, const uint32_t& se/;"	p	namespace:sylar	typeref:typename:uint64_t	signature:(const char * str,const uint32_t & seed=1060627423,const uint32_t & seed2=1050126127)
murmur3_hash64	sylar/sylar/util/hash_util.h	/^uint64_t murmur3_hash64(const void* str, const uint32_t& size,  const uint32_t & seed = 10606274/;"	p	namespace:sylar	typeref:typename:uint64_t	signature:(const void * str,const uint32_t & size,const uint32_t & seed=1060627423,const uint32_t & seed2=1050126127)
mutable_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^RegisterInfo::mutable_cmds() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedField<uint32_t> *	signature:()
mutable_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^NotifyMessage::mutable_dels() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> *	signature:()
mutable_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* NotifyMessage::mutable_dels(int index) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::sylar::ns::NodeInfo *	signature:(int index)
mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* mutable_domain();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:std::string *	access:public	signature:()
mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* mutable_domain();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:std::string *	access:public	signature:()
mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* NodeInfo::mutable_domain() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:std::string *	signature:()
mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* RegisterInfo::mutable_domain() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:std::string *	signature:()
mutable_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* mutable_domains(int index);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:std::string *	access:public	signature:(int index)
mutable_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^QueryRequest::mutable_domains() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> *	signature:()
mutable_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* QueryRequest::mutable_domains(int index) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:std::string *	signature:(int index)
mutable_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^QueryResponse::mutable_infos() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> *	signature:()
mutable_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^RegisterRequest::mutable_infos() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::RegisterInfo> *	signature:()
mutable_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* QueryResponse::mutable_infos(int index) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::sylar::ns::NodeInfo *	signature:(int index)
mutable_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::RegisterInfo* RegisterRequest::mutable_infos(int index) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::sylar::ns::RegisterInfo *	signature:(int index)
mutable_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* mutable_ip();$/;"	p	class:sylar::ns::Node	typeref:typename:std::string *	access:public	signature:()
mutable_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* Node::mutable_ip() {$/;"	f	class:sylar::ns::Node	typeref:typename:std::string *	signature:()
mutable_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* RegisterInfo::mutable_node() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::sylar::ns::Node *	signature:()
mutable_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^NodeInfo::mutable_nodes() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::Node> *	signature:()
mutable_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* NodeInfo::mutable_nodes(int index) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::sylar::ns::Node *	signature:(int index)
mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::Node	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
mutable_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^NotifyMessage::mutable_updates() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> *	signature:()
mutable_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* NotifyMessage::mutable_updates(int index) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::sylar::ns::NodeInfo *	signature:(int index)
mutex	sylar/sylar/iomanager.h	/^        MutexType mutex;$/;"	m	struct:sylar::IOManager::FdContext	typeref:typename:MutexType	access:public
my_mysql_query	sylar/sylar/db/mysql.cc	/^static MYSQL_RES* my_mysql_query(MYSQL* mysql, const char* sql) {$/;"	f	namespace:sylar	typeref:typename:MYSQL_RES *	file:	signature:(MYSQL * mysql,const char * sql)
mysql_init	sylar/sylar/db/mysql.cc	/^static MYSQL* mysql_init(std::map<std::string, std::string>& params,$/;"	f	namespace:sylar	typeref:typename:MYSQL *	file:	signature:(std::map<std::string,std::string> & params,const int & timeout)
mysql_time_to_time_t	sylar/sylar/db/mysql.cc	/^bool mysql_time_to_time_t(const MYSQL_TIME& mt, time_t& ts) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(const MYSQL_TIME & mt,time_t & ts)
mysql_time_to_time_t	sylar/sylar/db/mysql.h	/^bool mysql_time_to_time_t(const MYSQL_TIME& mt, time_t& ts);$/;"	p	namespace:sylar	typeref:typename:bool	signature:(const MYSQL_TIME & mt,time_t & ts)
n_array_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_array_containers;  \/* number of array containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
n_bitset_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_bitset_containers; \/* number of bitmap containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
n_bytes_array_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_bytes_array_containers;  \/* number of allocated bytes in array$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
n_bytes_bitset_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_bytes_bitset_containers; \/* number of allocated bytes in  bitmap$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
n_bytes_run_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_bytes_run_containers;    \/* number of allocated bytes in run$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
n_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_containers; \/* number of containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
n_run_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_run_containers;    \/* number of run containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
n_runs	sylar/sylar/ds/roaring.h	/^    int32_t n_runs;$/;"	m	struct:run_container_s	typeref:typename:int32_t	access:public
n_values_array_containers	sylar/sylar/ds/roaring.h	/^        n_values_array_containers;    \/* number of values in array containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
n_values_bitset_containers	sylar/sylar/ds/roaring.h	/^        n_values_bitset_containers; \/* number of values in  bitmap containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
n_values_run_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_values_run_containers; \/* number of values in run containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
name	sylar/sylar/log.cc	/^    std::string name;$/;"	m	struct:sylar::LogDefine	typeref:typename:std::string	file:	access:public
name	sylar/sylar/tcp_server.h	/^    std::string name;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
name	sylar/sylar/test.proto	/^    optional string name = 1;$/;"	f
name_space	sylar/template/template/my_module.cc	/^namespace name_space {$/;"	n	file:
name_space	sylar/template/template/my_module.h	/^namespace name_space {$/;"	n
name_space::MyModule	sylar/template/template/my_module.h	/^class MyModule : public sylar::Module {$/;"	c	namespace:name_space	inherits:sylar::Module
name_space::MyModule::MyModule	sylar/template/template/my_module.cc	/^MyModule::MyModule()$/;"	f	class:name_space::MyModule	signature:()
name_space::MyModule::MyModule	sylar/template/template/my_module.h	/^    MyModule();$/;"	p	class:name_space::MyModule	access:public	signature:()
name_space::MyModule::onLoad	sylar/template/template/my_module.cc	/^bool MyModule::onLoad() {$/;"	f	class:name_space::MyModule	typeref:typename:bool	signature:()
name_space::MyModule::onLoad	sylar/template/template/my_module.h	/^    bool onLoad() override;$/;"	p	class:name_space::MyModule	typeref:typename:bool	access:public	signature:()
name_space::MyModule::onServerReady	sylar/template/template/my_module.cc	/^bool MyModule::onServerReady() {$/;"	f	class:name_space::MyModule	typeref:typename:bool	signature:()
name_space::MyModule::onServerReady	sylar/template/template/my_module.h	/^    bool onServerReady() override;$/;"	p	class:name_space::MyModule	typeref:typename:bool	access:public	signature:()
name_space::MyModule::onServerUp	sylar/template/template/my_module.cc	/^bool MyModule::onServerUp() {$/;"	f	class:name_space::MyModule	typeref:typename:bool	signature:()
name_space::MyModule::onServerUp	sylar/template/template/my_module.h	/^    bool onServerUp() override;$/;"	p	class:name_space::MyModule	typeref:typename:bool	access:public	signature:()
name_space::MyModule::onUnload	sylar/template/template/my_module.cc	/^bool MyModule::onUnload() {$/;"	f	class:name_space::MyModule	typeref:typename:bool	signature:()
name_space::MyModule::onUnload	sylar/template/template/my_module.h	/^    bool onUnload() override;$/;"	p	class:name_space::MyModule	typeref:typename:bool	access:public	signature:()
name_space::MyModule::ptr	sylar/template/template/my_module.h	/^    typedef std::shared_ptr<MyModule> ptr;$/;"	t	class:name_space::MyModule	typeref:typename:std::shared_ptr<MyModule>	access:public
name_space::g_logger	sylar/template/template/my_module.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();$/;"	v	namespace:name_space	typeref:typename:sylar::Logger::ptr	file:
nandFetch	sylar/sylar/util.h	/^    static T nandFetch(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
nanosleep	sylar/sylar/hook.cc	/^int nanosleep(const struct timespec *req, struct timespec *rem) {$/;"	f	typeref:typename:int	signature:(const struct timespec * req,struct timespec * rem)
nanosleep_fun	sylar/sylar/hook.h	/^typedef int (*nanosleep_fun)(const struct timespec *req, struct timespec *rem);$/;"	t	typeref:typename:int (*)(const struct timespec * req,struct timespec * rem)
native_cpuid	sylar/sylar/ds/roaring.h	/^static inline void native_cpuid(unsigned int *eax, unsigned int *ebx,$/;"	f	typeref:typename:void	signature:(unsigned int * eax,unsigned int * ebx,unsigned int * ecx,unsigned int * edx)
needRehash	sylar/sylar/ds/dict.h	/^    bool needRehash() const {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:private	signature:() const
needRehash	sylar/sylar/ds/hash_map.h	/^    bool needRehash() const {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:private	signature:() const
needRehash	sylar/sylar/ds/hash_multimap.h	/^    bool needRehash() const {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:private	signature:() const
networdAddress	sylar/sylar/address.cc	/^IPAddress::ptr IPv4Address::networdAddress(uint32_t prefix_len) {$/;"	f	class:sylar::IPv4Address	typeref:typename:IPAddress::ptr	signature:(uint32_t prefix_len)
networdAddress	sylar/sylar/address.cc	/^IPAddress::ptr IPv6Address::networdAddress(uint32_t prefix_len) {$/;"	f	class:sylar::IPv6Address	typeref:typename:IPAddress::ptr	signature:(uint32_t prefix_len)
networdAddress	sylar/sylar/address.h	/^    IPAddress::ptr networdAddress(uint32_t prefix_len) override;$/;"	p	class:sylar::IPv4Address	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
networdAddress	sylar/sylar/address.h	/^    IPAddress::ptr networdAddress(uint32_t prefix_len) override;$/;"	p	class:sylar::IPv6Address	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
networdAddress	sylar/sylar/address.h	/^    virtual IPAddress::ptr networdAddress(uint32_t prefix_len) = 0;$/;"	p	class:sylar::IPAddress	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
newSock	sylar/sylar/socket.cc	/^void Socket::newSock() {$/;"	f	class:sylar::Socket	typeref:typename:void	signature:()
newSock	sylar/sylar/socket.h	/^    void newSock();$/;"	p	class:sylar::Socket	typeref:typename:void	access:protected	signature:()
next	sylar/sylar/bytearray.h	/^        Node* next;$/;"	m	struct:sylar::ByteArray::Node	typeref:typename:Node *	access:public
next	sylar/sylar/db/db.h	/^    virtual bool next() = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:bool	access:public	signature:()
next	sylar/sylar/db/mysql.cc	/^bool MySQLRes::next() {$/;"	f	class:sylar::MySQLRes	typeref:typename:bool	signature:()
next	sylar/sylar/db/mysql.cc	/^bool MySQLStmtRes::next() {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:bool	signature:()
next	sylar/sylar/db/mysql.h	/^    bool next() override;$/;"	p	class:sylar::MySQLRes	typeref:typename:bool	access:public	signature:()
next	sylar/sylar/db/mysql.h	/^    bool next() override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:bool	access:public	signature:()
next	sylar/sylar/db/sqlite3.cc	/^bool SQLite3Data::next() {$/;"	f	class:sylar::SQLite3Data	typeref:typename:bool	signature:()
next	sylar/sylar/db/sqlite3.h	/^    bool next();$/;"	p	class:sylar::SQLite3Data	typeref:typename:bool	access:public	signature:()
next	sylar/sylar/ds/bitmap.cc	/^void Bitmap::iterator::next() {$/;"	f	class:sylar::ds::Bitmap::iterator	typeref:typename:void	signature:()
next	sylar/sylar/ds/bitmap.cc	/^void Bitmap::iterator_reverse::next() {$/;"	f	class:sylar::ds::Bitmap::iterator_reverse	typeref:typename:void	signature:()
next	sylar/sylar/ds/bitmap.h	/^        virtual void next() = 0;$/;"	p	class:sylar::ds::Bitmap::iterator_base	typeref:typename:void	access:public	signature:()
next	sylar/sylar/ds/bitmap.h	/^        void next();$/;"	p	class:sylar::ds::Bitmap::iterator	typeref:typename:void	access:public	signature:()
next	sylar/sylar/ds/bitmap.h	/^        void next();$/;"	p	class:sylar::ds::Bitmap::iterator_reverse	typeref:typename:void	access:public	signature:()
nextValue	sylar/sylar/ds/util.cc	/^uint32_t PrimeGenerator::nextValue() {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	signature:()
nextValue	sylar/sylar/ds/util.h	/^    uint32_t nextValue();$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	access:public	signature:()
node	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static const ::sylar::ns::Node& node(const RegisterInfo* msg);$/;"	p	class:sylar::ns::RegisterInfo::_Internal	typeref:typename:const::sylar::ns::Node &	file:	access:public	signature:(const RegisterInfo * msg)
node	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterInfo::_Internal::node(const RegisterInfo* msg) {$/;"	f	class:sylar::ns::RegisterInfo::_Internal	typeref:typename:const::sylar::ns::Node &	signature:(const RegisterInfo * msg)
node	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::Node& node() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const::sylar::ns::Node &	access:public	signature:() const
node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::Node& RegisterInfo::node() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::sylar::ns::Node &	signature:() const
node	sylar/sylar/ns/ns_protobuf.proto	/^    optional Node node = 3;     \/\/节点信息$/;"	f
nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^      nodes() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::Node> &	access:public	signature:() const
nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::Node& nodes(int index) const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const::sylar::ns::Node &	access:public	signature:(int index) const
nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^NodeInfo::nodes() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::Node> &	signature:() const
nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::Node& NodeInfo::nodes(int index) const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::sylar::ns::Node &	signature:(int index) const
nodes	sylar/sylar/ns/ns_protobuf.proto	/^    repeated Node nodes = 3;$/;"	f
nodes_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int nodes_size() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:int	access:public	signature:() const
nodes_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int NodeInfo::nodes_size() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:int	signature:() const
nop	sylar/sylar/util.h	/^void nop(T*) {}$/;"	f	namespace:sylar	typeref:typename:void	signature:(T *)
normalCross	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::normalCross(const Bitmap& b) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(const Bitmap & b) const
normalCross	sylar/sylar/ds/bitmap.h	/^    bool normalCross(const Bitmap& b) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:private	signature:(const Bitmap & b) const
notify	sylar/sylar/mutex.cc	/^void FiberSemaphore::notify() {$/;"	f	class:sylar::FiberSemaphore	typeref:typename:void	signature:()
notify	sylar/sylar/mutex.cc	/^void Semaphore::notify() {$/;"	f	class:sylar::Semaphore	typeref:typename:void	signature:()
notify	sylar/sylar/mutex.h	/^    void notify();$/;"	p	class:sylar::FiberSemaphore	typeref:typename:void	access:public	signature:()
notify	sylar/sylar/mutex.h	/^    void notify();$/;"	p	class:sylar::Semaphore	typeref:typename:void	access:public	signature:()
notify_handler	sylar/sylar/rock/rock_stream.h	/^                               ,sylar::RockStream::ptr)> notify_handler;$/;"	t	class:sylar::RockStream	access:public
nread	sylar/sylar/http/http11_parser.h	/^  size_t nread;$/;"	m	struct:http_parser	typeref:typename:size_t	access:public
nread	sylar/sylar/http/httpclient_parser.h	/^  size_t nread;$/;"	m	struct:httpclient_parser	typeref:typename:size_t	access:public
ns	sylar/sylar/ns/name_server_module.cc	/^namespace ns {$/;"	n	namespace:sylar	file:
ns	sylar/sylar/ns/name_server_module.h	/^namespace ns {$/;"	n	namespace:sylar
ns	sylar/sylar/ns/ns_client.cc	/^namespace ns {$/;"	n	namespace:sylar	file:
ns	sylar/sylar/ns/ns_client.h	/^namespace ns {$/;"	n	namespace:sylar
ns	sylar/sylar/ns/ns_protobuf.pb.cc	/^namespace ns {$/;"	n	namespace:sylar	file:
ns	sylar/sylar/ns/ns_protobuf.pb.h	/^namespace ns {$/;"	n	namespace:sylar
ns	sylar/sylar/ns/ns_protocol.cc	/^namespace ns {$/;"	n	namespace:sylar	file:
ns	sylar/sylar/ns/ns_protocol.h	/^namespace ns {$/;"	n	namespace:sylar
offsets	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const uint32_t offsets[];$/;"	m	struct:TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto	typeref:typename:const uint32_t[]	access:public
onAfterArgsParse	sylar/sylar/module.cc	/^void Module::onAfterArgsParse(int argc, char** argv) {$/;"	f	class:sylar::Module	typeref:typename:void	signature:(int argc,char ** argv)
onAfterArgsParse	sylar/sylar/module.h	/^    virtual void onAfterArgsParse(int argc, char** argv);$/;"	p	class:sylar::Module	typeref:typename:void	access:public	signature:(int argc,char ** argv)
onBeforeArgsParse	sylar/sylar/module.cc	/^void Module::onBeforeArgsParse(int argc, char** argv) {$/;"	f	class:sylar::Module	typeref:typename:void	signature:(int argc,char ** argv)
onBeforeArgsParse	sylar/sylar/module.h	/^    virtual void onBeforeArgsParse(int argc, char** argv);$/;"	p	class:sylar::Module	typeref:typename:void	access:public	signature:(int argc,char ** argv)
onClose	sylar/sylar/http/ws_servlet.cc	/^int32_t FunctionWSServlet::onClose(sylar::http::HttpRequest::ptr header$/;"	f	class:sylar::http::FunctionWSServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSSession::ptr session)
onClose	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t onClose(sylar::http::HttpRequest::ptr header$/;"	p	class:sylar::http::FunctionWSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSSession::ptr session)
onClose	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t onClose(sylar::http::HttpRequest::ptr header$/;"	p	class:sylar::http::WSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSSession::ptr session)
onConnect	sylar/sylar/http/ws_servlet.cc	/^int32_t FunctionWSServlet::onConnect(sylar::http::HttpRequest::ptr header$/;"	f	class:sylar::http::FunctionWSServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSSession::ptr session)
onConnect	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t onConnect(sylar::http::HttpRequest::ptr header$/;"	p	class:sylar::http::FunctionWSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSSession::ptr session)
onConnect	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t onConnect(sylar::http::HttpRequest::ptr header$/;"	p	class:sylar::http::WSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSSession::ptr session)
onConnect	sylar/sylar/module.cc	/^bool Module::onConnect(sylar::Stream::ptr stream) {$/;"	f	class:sylar::Module	typeref:typename:bool	signature:(sylar::Stream::ptr stream)
onConnect	sylar/sylar/module.cc	/^void ModuleManager::onConnect(Stream::ptr stream) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(Stream::ptr stream)
onConnect	sylar/sylar/module.h	/^    virtual bool onConnect(sylar::Stream::ptr stream);$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:(sylar::Stream::ptr stream)
onConnect	sylar/sylar/module.h	/^    void onConnect(Stream::ptr stream);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(Stream::ptr stream)
onConnect	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::onConnect(sylar::Stream::ptr stream) {$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::Stream::ptr stream)
onConnect	sylar/sylar/ns/name_server_module.h	/^    virtual bool onConnect(sylar::Stream::ptr stream) override;$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:public	signature:(sylar::Stream::ptr stream)
onConnect	sylar/sylar/ns/ns_client.cc	/^bool NSClient::onConnect(sylar::AsyncSocketStream::ptr stream) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:bool	signature:(sylar::AsyncSocketStream::ptr stream)
onConnect	sylar/sylar/ns/ns_client.h	/^    bool onConnect(sylar::AsyncSocketStream::ptr stream);$/;"	p	class:sylar::ns::NSClient	typeref:typename:bool	access:private	signature:(sylar::AsyncSocketStream::ptr stream)
onDisconnect	sylar/sylar/module.cc	/^bool Module::onDisconnect(sylar::Stream::ptr stream) {$/;"	f	class:sylar::Module	typeref:typename:bool	signature:(sylar::Stream::ptr stream)
onDisconnect	sylar/sylar/module.cc	/^void ModuleManager::onDisconnect(Stream::ptr stream) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(Stream::ptr stream)
onDisconnect	sylar/sylar/module.h	/^    virtual bool onDisconnect(sylar::Stream::ptr stream);$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:(sylar::Stream::ptr stream)
onDisconnect	sylar/sylar/module.h	/^    void onDisconnect(Stream::ptr stream);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(Stream::ptr stream)
onDisconnect	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::onDisconnect(sylar::Stream::ptr stream) {$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::Stream::ptr stream)
onDisconnect	sylar/sylar/ns/name_server_module.h	/^    virtual bool onDisconnect(sylar::Stream::ptr stream) override;$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:public	signature:(sylar::Stream::ptr stream)
onDisconnect	sylar/sylar/ns/ns_client.cc	/^void NSClient::onDisconnect(sylar::AsyncSocketStream::ptr stream) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:(sylar::AsyncSocketStream::ptr stream)
onDisconnect	sylar/sylar/ns/ns_client.h	/^    void onDisconnect(sylar::AsyncSocketStream::ptr stream);$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:private	signature:(sylar::AsyncSocketStream::ptr stream)
onLoad	chat/my_module.cc	/^bool MyModule::onLoad() {$/;"	f	class:chat::MyModule	typeref:typename:bool	signature:()
onLoad	chat/my_module.h	/^    bool onLoad() override;$/;"	p	class:chat::MyModule	typeref:typename:bool	access:public	signature:()
onLoad	sylar/sylar/module.cc	/^bool Module::onLoad() {$/;"	f	class:sylar::Module	typeref:typename:bool	signature:()
onLoad	sylar/sylar/module.h	/^    virtual bool onLoad();$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:()
onLoad	sylar/template/template/my_module.cc	/^bool MyModule::onLoad() {$/;"	f	class:name_space::MyModule	typeref:typename:bool	signature:()
onLoad	sylar/template/template/my_module.h	/^    bool onLoad() override;$/;"	p	class:name_space::MyModule	typeref:typename:bool	access:public	signature:()
onLoad	sylar/tests/test_module.cc	/^    bool onLoad() override {$/;"	f	class:MyModule	typeref:typename:bool	file:	access:public	signature:()
onNotify	sylar/sylar/ns/ns_client.cc	/^bool NSClient::onNotify(sylar::RockNotify::ptr nty,sylar::RockStream::ptr stream) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:bool	signature:(sylar::RockNotify::ptr nty,sylar::RockStream::ptr stream)
onNotify	sylar/sylar/ns/ns_client.h	/^    bool onNotify(sylar::RockNotify::ptr ,sylar::RockStream::ptr);$/;"	p	class:sylar::ns::NSClient	typeref:typename:bool	access:private	signature:(sylar::RockNotify::ptr,sylar::RockStream::ptr)
onQueryDomainChange	sylar/sylar/ns/ns_client.cc	/^void NSClient::onQueryDomainChange() {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:()
onQueryDomainChange	sylar/sylar/ns/ns_client.h	/^    void onQueryDomainChange();$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:private	signature:()
onServerReady	chat/my_module.cc	/^bool MyModule::onServerReady() {$/;"	f	class:chat::MyModule	typeref:typename:bool	signature:()
onServerReady	chat/my_module.h	/^    bool onServerReady() override;$/;"	p	class:chat::MyModule	typeref:typename:bool	access:public	signature:()
onServerReady	sylar/sylar/module.cc	/^bool Module::onServerReady() {$/;"	f	class:sylar::Module	typeref:typename:bool	signature:()
onServerReady	sylar/sylar/module.h	/^    virtual bool onServerReady();$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:()
onServerReady	sylar/template/template/my_module.cc	/^bool MyModule::onServerReady() {$/;"	f	class:name_space::MyModule	typeref:typename:bool	signature:()
onServerReady	sylar/template/template/my_module.h	/^    bool onServerReady() override;$/;"	p	class:name_space::MyModule	typeref:typename:bool	access:public	signature:()
onServerReady	sylar/tests/test_module.cc	/^    bool onServerReady() {$/;"	f	class:MyModule	typeref:typename:bool	file:	access:public	signature:()
onServerUp	chat/my_module.cc	/^bool MyModule::onServerUp() {$/;"	f	class:chat::MyModule	typeref:typename:bool	signature:()
onServerUp	chat/my_module.h	/^    bool onServerUp() override;$/;"	p	class:chat::MyModule	typeref:typename:bool	access:public	signature:()
onServerUp	sylar/sylar/module.cc	/^bool Module::onServerUp() {$/;"	f	class:sylar::Module	typeref:typename:bool	signature:()
onServerUp	sylar/sylar/module.h	/^    virtual bool onServerUp();$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:()
onServerUp	sylar/template/template/my_module.cc	/^bool MyModule::onServerUp() {$/;"	f	class:name_space::MyModule	typeref:typename:bool	signature:()
onServerUp	sylar/template/template/my_module.h	/^    bool onServerUp() override;$/;"	p	class:name_space::MyModule	typeref:typename:bool	access:public	signature:()
onServiceChange	sylar/sylar/streams/load_balance.cc	/^void SDLoadBalance::onServiceChange(const std::string& domain, const std::string& service$/;"	f	class:sylar::SDLoadBalance	typeref:typename:void	signature:(const std::string & domain,const std::string & service,const std::unordered_map<uint64_t,ServiceItemInfo::ptr> & old_value,const std::unordered_map<uint64_t,ServiceItemInfo::ptr> & new_value)
onServiceChange	sylar/sylar/streams/load_balance.h	/^    void onServiceChange(const std::string& domain, const std::string& service$/;"	p	class:sylar::SDLoadBalance	typeref:typename:void	access:private	signature:(const std::string & domain,const std::string & service,const std::unordered_map<uint64_t,ServiceItemInfo::ptr> & old_value,const std::unordered_map<uint64_t,ServiceItemInfo::ptr> & new_value)
onTimeOut	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::onTimeOut(Ctx::ptr ctx) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	signature:(Ctx::ptr ctx)
onTimeOut	sylar/sylar/streams/async_socket_stream.h	/^    virtual void onTimeOut(Ctx::ptr ctx);$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:void	access:protected	signature:(Ctx::ptr ctx)
onTimer	sylar/sylar/ns/ns_client.cc	/^void NSClient::onTimer() {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:()
onTimer	sylar/sylar/ns/ns_client.h	/^    void onTimer();$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:private	signature:()
onTimerInsertedAtFront	sylar/sylar/iomanager.cc	/^void IOManager::onTimerInsertedAtFront() {$/;"	f	class:sylar::IOManager	typeref:typename:void	signature:()
onTimerInsertedAtFront	sylar/sylar/iomanager.h	/^    void onTimerInsertedAtFront() override;$/;"	p	class:sylar::IOManager	typeref:typename:void	access:protected	signature:()
onTimerInsertedAtFront	sylar/sylar/timer.h	/^    virtual void onTimerInsertedAtFront() = 0;$/;"	p	class:sylar::TimerManager	typeref:typename:void	access:protected	signature:()
onUnload	chat/my_module.cc	/^bool MyModule::onUnload() {$/;"	f	class:chat::MyModule	typeref:typename:bool	signature:()
onUnload	chat/my_module.h	/^    bool onUnload() override;$/;"	p	class:chat::MyModule	typeref:typename:bool	access:public	signature:()
onUnload	sylar/sylar/module.cc	/^bool Module::onUnload() {$/;"	f	class:sylar::Module	typeref:typename:bool	signature:()
onUnload	sylar/sylar/module.h	/^    virtual bool onUnload();$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:()
onUnload	sylar/template/template/my_module.cc	/^bool MyModule::onUnload() {$/;"	f	class:name_space::MyModule	typeref:typename:bool	signature:()
onUnload	sylar/template/template/my_module.h	/^    bool onUnload() override;$/;"	p	class:name_space::MyModule	typeref:typename:bool	access:public	signature:()
onUnload	sylar/tests/test_module.cc	/^    bool onUnload() override {$/;"	f	class:MyModule	typeref:typename:bool	file:	access:public	signature:()
onWatch	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::onWatch(int type, int stat, const std::string& path, ZKClient::ptr clie/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:(int type,int stat,const std::string & path,ZKClient::ptr client)
onWatch	sylar/sylar/streams/service_discovery.h	/^    void onWatch(int type, int stat, const std::string& path, ZKClient::ptr);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:private	signature:(int type,int stat,const std::string & path,ZKClient::ptr)
onZKChanged	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::onZKChanged(const std::string& path, ZKClient::ptr client) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:(const std::string & path,ZKClient::ptr client)
onZKChanged	sylar/sylar/streams/service_discovery.h	/^    void onZKChanged(const std::string& path, ZKClient::ptr client);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:private	signature:(const std::string & path,ZKClient::ptr client)
onZKChild	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::onZKChild(const std::string& path, ZKClient::ptr client) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:(const std::string & path,ZKClient::ptr client)
onZKChild	sylar/sylar/streams/service_discovery.h	/^    void onZKChild(const std::string& path, ZKClient::ptr client);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:private	signature:(const std::string & path,ZKClient::ptr client)
onZKConnect	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::onZKConnect(const std::string& path, ZKClient::ptr client) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:(const std::string & path,ZKClient::ptr client)
onZKConnect	sylar/sylar/streams/service_discovery.h	/^    void onZKConnect(const std::string& path, ZKClient::ptr client);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:private	signature:(const std::string & path,ZKClient::ptr client)
onZKDeleted	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::onZKDeleted(const std::string& path, ZKClient::ptr client) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:(const std::string & path,ZKClient::ptr client)
onZKDeleted	sylar/sylar/streams/service_discovery.h	/^    void onZKDeleted(const std::string& path, ZKClient::ptr client);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:private	signature:(const std::string & path,ZKClient::ptr client)
onZKExpiredSession	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::onZKExpiredSession(const std::string& path, ZKClient::ptr client) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:(const std::string & path,ZKClient::ptr client)
onZKExpiredSession	sylar/sylar/streams/service_discovery.h	/^    void onZKExpiredSession(const std::string& path, ZKClient::ptr client);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:private	signature:(const std::string & path,ZKClient::ptr client)
on_change_cb	sylar/sylar/config.h	/^    typedef std::function<void (const T& old_value, const T& new_value)> on_change_cb;$/;"	t	class:sylar::ConfigVar	access:public
on_close_cb	sylar/sylar/http/ws_servlet.h	/^                             ,sylar::http::WSSession::ptr session)> on_close_cb; $/;"	t	class:sylar::http::FunctionWSServlet	access:public
on_connect_cb	sylar/sylar/http/ws_servlet.h	/^                              ,sylar::http::WSSession::ptr session)> on_connect_cb;$/;"	t	class:sylar::http::FunctionWSServlet	access:public
on_request_fragment	sylar/sylar/http/http_parser.cc	/^void on_request_fragment(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
on_request_header_done	sylar/sylar/http/http_parser.cc	/^void on_request_header_done(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
on_request_http_field	sylar/sylar/http/http_parser.cc	/^void on_request_http_field(void *data, const char *field, size_t flen$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * field,size_t flen,const char * value,size_t vlen)
on_request_method	sylar/sylar/http/http_parser.cc	/^void on_request_method(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
on_request_path	sylar/sylar/http/http_parser.cc	/^void on_request_path(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
on_request_query	sylar/sylar/http/http_parser.cc	/^void on_request_query(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
on_request_uri	sylar/sylar/http/http_parser.cc	/^void on_request_uri(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
on_request_version	sylar/sylar/http/http_parser.cc	/^void on_request_version(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
on_response_chunk	sylar/sylar/http/http_parser.cc	/^void on_response_chunk(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
on_response_header_done	sylar/sylar/http/http_parser.cc	/^void on_response_header_done(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
on_response_http_field	sylar/sylar/http/http_parser.cc	/^void on_response_http_field(void *data, const char *field, size_t flen$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * field,size_t flen,const char * value,size_t vlen)
on_response_last_chunk	sylar/sylar/http/http_parser.cc	/^void on_response_last_chunk(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
on_response_reason	sylar/sylar/http/http_parser.cc	/^void on_response_reason(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
on_response_status	sylar/sylar/http/http_parser.cc	/^void on_response_status(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
on_response_version	sylar/sylar/http/http_parser.cc	/^void on_response_version(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
on_timer	sylar/tests/test_service_discovery.cc	/^void on_timer() {$/;"	f	typeref:typename:void	signature:()
on_watcher	sylar/tests/test_zookeeper.cc	/^void on_watcher(int type, int stat, const std::string& path, sylar::ZKClient::ptr client) {$/;"	f	typeref:typename:void	signature:(int type,int stat,const std::string & path,sylar::ZKClient::ptr client)
opcode	sylar/sylar/http/ws_session.h	/^    uint32_t opcode: 4;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:uint32_t:4	access:public
openTransaction	sylar/sylar/db/db.h	/^    virtual ITransaction::ptr openTransaction(bool auto_commit = false) = 0;$/;"	p	class:sylar::IDB	typeref:typename:ITransaction::ptr	access:public	signature:(bool auto_commit=false)
openTransaction	sylar/sylar/db/mysql.cc	/^ITransaction::ptr MySQL::openTransaction(bool auto_commit) {$/;"	f	class:sylar::MySQL	typeref:typename:ITransaction::ptr	signature:(bool auto_commit)
openTransaction	sylar/sylar/db/mysql.cc	/^MySQLTransaction::ptr MySQLManager::openTransaction(const std::string& name, bool auto_commit) {$/;"	f	class:sylar::MySQLManager	typeref:typename:MySQLTransaction::ptr	signature:(const std::string & name,bool auto_commit)
openTransaction	sylar/sylar/db/mysql.h	/^    ITransaction::ptr openTransaction(bool auto_commit) override;$/;"	p	class:sylar::MySQL	typeref:typename:ITransaction::ptr	access:public	signature:(bool auto_commit)
openTransaction	sylar/sylar/db/mysql.h	/^    MySQLTransaction::ptr openTransaction(const std::string& name, bool auto_commit);$/;"	p	class:sylar::MySQLManager	typeref:typename:MySQLTransaction::ptr	access:public	signature:(const std::string & name,bool auto_commit)
openTransaction	sylar/sylar/db/sqlite3.cc	/^ITransaction::ptr SQLite3::openTransaction(bool auto_commit) {$/;"	f	class:sylar::SQLite3	typeref:typename:ITransaction::ptr	signature:(bool auto_commit)
openTransaction	sylar/sylar/db/sqlite3.cc	/^SQLite3Transaction::ptr SQLite3Manager::openTransaction(const std::string& name, bool auto_commi/;"	f	class:sylar::SQLite3Manager	typeref:typename:SQLite3Transaction::ptr	signature:(const std::string & name,bool auto_commit)
openTransaction	sylar/sylar/db/sqlite3.h	/^    ITransaction::ptr openTransaction(bool auto_commit = false) override;$/;"	p	class:sylar::SQLite3	typeref:typename:ITransaction::ptr	access:public	signature:(bool auto_commit=false)
openTransaction	sylar/sylar/db/sqlite3.h	/^    SQLite3Transaction::ptr openTransaction(const std::string& name, bool auto_commit);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:SQLite3Transaction::ptr	access:public	signature:(const std::string & name,bool auto_commit)
operator !	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::iterator_base::operator!() {$/;"	f	class:sylar::ds::Bitmap::iterator_base	typeref:typename:bool	signature:()
operator !	sylar/sylar/ds/bitmap.h	/^        bool operator!();$/;"	p	class:sylar::ds::Bitmap::iterator_base	typeref:typename:bool	access:public	signature:()
operator !	sylar/sylar/util.h	/^    bool operator!() const {$/;"	f	class:sylar::SharedArray	typeref:typename:bool	access:public	signature:() const
operator !=	sylar/sylar/address.cc	/^bool Address::operator!=(const Address& rhs) const {$/;"	f	class:sylar::Address	typeref:typename:bool	signature:(const Address & rhs) const
operator !=	sylar/sylar/address.h	/^    bool operator!=(const Address& rhs) const;$/;"	p	class:sylar::Address	typeref:typename:bool	access:public	signature:(const Address & rhs) const
operator !=	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::operator!= (const Bitmap& b) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(const Bitmap & b) const
operator !=	sylar/sylar/ds/bitmap.h	/^    bool operator!= (const Bitmap& b) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:(const Bitmap & b) const
operator !=	sylar/sylar/ds/roaring.hh	/^    bool operator!=(const Roaring64MapSetBitForwardIterator &o) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const Roaring64MapSetBitForwardIterator & o)
operator !=	sylar/sylar/ds/roaring.hh	/^    bool operator!=(const RoaringSetBitForwardIterator &o) const {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const RoaringSetBitForwardIterator & o) const
operator !=	sylar/sylar/ds/roaring.hh	/^    bool operator!=(const type_of_iterator &o) const {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o) const
operator !=	sylar/sylar/ds/roaring.hh	/^    bool operator!=(const type_of_iterator& o) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator !=	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::operator!= (const RoaringBitmap& b) const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:(const RoaringBitmap & b) const
operator !=	sylar/sylar/ds/roaring_bitmap.h	/^    bool operator!= (const RoaringBitmap& b) const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:(const RoaringBitmap & b) const
operator &	sylar/sylar/ds/bitmap.cc	/^Bitmap Bitmap::operator& (const Bitmap& b) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap	signature:(const Bitmap & b)
operator &	sylar/sylar/ds/bitmap.h	/^    Bitmap operator& (const Bitmap& b);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap	access:public	signature:(const Bitmap & b)
operator &	sylar/sylar/ds/roaring.hh	/^    Roaring operator&(const Roaring &o) const {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(const Roaring & o) const
operator &	sylar/sylar/ds/roaring.hh	/^    Roaring64Map operator&(const Roaring64Map &o) const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(const Roaring64Map & o) const
operator &	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap RoaringBitmap::operator& (const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	signature:(const RoaringBitmap & b)
operator &	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap operator& (const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	access:public	signature:(const RoaringBitmap & b)
operator &=	sylar/sylar/ds/bitmap.cc	/^Bitmap& Bitmap::operator&=(const Bitmap& b) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	signature:(const Bitmap & b)
operator &=	sylar/sylar/ds/bitmap.h	/^    Bitmap& operator&=(const Bitmap& b);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	access:public	signature:(const Bitmap & b)
operator &=	sylar/sylar/ds/roaring.hh	/^    Roaring &operator&=(const Roaring &r) {$/;"	f	class:Roaring	typeref:typename:Roaring &	access:public	signature:(const Roaring & r)
operator &=	sylar/sylar/ds/roaring.hh	/^    Roaring64Map &operator&=(const Roaring64Map &r) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map &	access:public	signature:(const Roaring64Map & r)
operator &=	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap& RoaringBitmap::operator&=(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	signature:(const RoaringBitmap & b)
operator &=	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap& operator&=(const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	access:public	signature:(const RoaringBitmap & b)
operator ()	sylar/sylar/config.h	/^    T operator()(const F& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:T	access:public	signature:(const F & v)
operator ()	sylar/sylar/config.h	/^    std::list<T> operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::list<T>	access:public	signature:(const std::string & v)
operator ()	sylar/sylar/config.h	/^    std::map<std::string, T> operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::map<std::string,T>	access:public	signature:(const std::string & v)
operator ()	sylar/sylar/config.h	/^    std::set<T> operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::set<T>	access:public	signature:(const std::string & v)
operator ()	sylar/sylar/config.h	/^    std::string operator()(const std::list<T>& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const std::list<T> & v)
operator ()	sylar/sylar/config.h	/^    std::string operator()(const std::map<std::string, T>& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const std::map<std::string,T> & v)
operator ()	sylar/sylar/config.h	/^    std::string operator()(const std::set<T>& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const std::set<T> & v)
operator ()	sylar/sylar/config.h	/^    std::string operator()(const std::unordered_map<std::string, T>& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const std::unordered_map<std::string,T> & v)
operator ()	sylar/sylar/config.h	/^    std::string operator()(const std::unordered_set<T>& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const std::unordered_set<T> & v)
operator ()	sylar/sylar/config.h	/^    std::string operator()(const std::vector<T>& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const std::vector<T> & v)
operator ()	sylar/sylar/config.h	/^    std::unordered_map<std::string, T> operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::unordered_map<std::string,T>	access:public	signature:(const std::string & v)
operator ()	sylar/sylar/config.h	/^    std::unordered_set<T> operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::unordered_set<T>	access:public	signature:(const std::string & v)
operator ()	sylar/sylar/config.h	/^    std::vector<T> operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::vector<T>	access:public	signature:(const std::string & v)
operator ()	sylar/sylar/ds/timed_lru_cache.h	/^        bool operator()(const value_type& a$/;"	f	struct:sylar::ds::TimedLruCache::ItemTimeOp	typeref:typename:bool	access:public	signature:(const value_type & a,const value_type & b) const
operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const Pair<K, V>& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const Pair<K,V> & data)
operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const T& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const T & data)
operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const int& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const int & data)
operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const int64_t& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const int64_t & data)
operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const std::string& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const std::string & data)
operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const std::vector<T>& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const std::vector<T> & data)
operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const std::vector<T>& data) {$/;"	f	class:sylar::ds::Murmur3Hash64	typeref:typename:uint32_t	access:public	signature:(const std::vector<T> & data)
operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const uint32_t& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const uint32_t & data)
operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const uint64_t& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const uint64_t & data)
operator ()	sylar/sylar/ds/util.h	/^    uint64_t operator()(const T& data) {$/;"	f	class:sylar::ds::Murmur3Hash64	typeref:typename:uint64_t	access:public	signature:(const T & data)
operator ()	sylar/sylar/ds/util.h	/^    uint64_t operator()(const std::string& data) {$/;"	f	class:sylar::ds::Murmur3Hash64	typeref:typename:uint64_t	access:public	signature:(const std::string & data)
operator ()	sylar/sylar/http/http.cc	/^bool CaseInsensitiveLess::operator()(const std::string& lhs$/;"	f	class:sylar::http::CaseInsensitiveLess	typeref:typename:bool	signature:(const std::string & lhs,const std::string & rhs) const
operator ()	sylar/sylar/http/http.h	/^    bool operator()(const std::string& lhs, const std::string& rhs) const;$/;"	p	struct:sylar::http::CaseInsensitiveLess	typeref:typename:bool	access:public	signature:(const std::string & lhs,const std::string & rhs) const
operator ()	sylar/sylar/library.cc	/^    void operator()(Module* module) {$/;"	f	class:sylar::ModuleCloser	typeref:typename:void	file:	access:public	signature:(Module * module)
operator ()	sylar/sylar/log.cc	/^    LogDefine operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:LogDefine	file:	access:public	signature:(const std::string & v)
operator ()	sylar/sylar/log.cc	/^    std::string operator()(const LogDefine& i) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	file:	access:public	signature:(const LogDefine & i)
operator ()	sylar/sylar/tcp_server.h	/^    TcpServerConf operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:TcpServerConf	access:public	signature:(const std::string & v)
operator ()	sylar/sylar/tcp_server.h	/^    std::string operator()(const TcpServerConf& conf) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const TcpServerConf & conf)
operator ()	sylar/sylar/timer.cc	/^bool Timer::Comparator::operator()(const Timer::ptr& lhs$/;"	f	class:sylar::Timer::Comparator	typeref:typename:bool	signature:(const Timer::ptr & lhs,const Timer::ptr & rhs) const
operator ()	sylar/sylar/timer.h	/^        bool operator()(const Timer::ptr& lhs, const Timer::ptr& rhs) const;$/;"	p	struct:sylar::Timer::Comparator	typeref:typename:bool	access:public	signature:(const Timer::ptr & lhs,const Timer::ptr & rhs) const
operator ()	sylar/sylar/util/hash_util.cc	/^    char operator()(char in) const { return in ^ m_value; }$/;"	f	struct:sylar::xorStruct	typeref:typename:char	file:	access:public	signature:(char in) const
operator ()	sylar/tests/test_config.cc	/^    Person operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:Person	file:	access:public	signature:(const std::string & v)
operator ()	sylar/tests/test_config.cc	/^    std::string operator()(const Person& p) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	file:	access:public	signature:(const Person & p)
operator *	sylar/sylar/ds/bitmap.cc	/^int32_t Bitmap::iterator_base::operator*() {$/;"	f	class:sylar::ds::Bitmap::iterator_base	typeref:typename:int32_t	signature:()
operator *	sylar/sylar/ds/bitmap.h	/^        int32_t operator*();$/;"	p	class:sylar::ds::Bitmap::iterator_base	typeref:typename:int32_t	access:public	signature:()
operator *	sylar/sylar/ds/roaring.hh	/^    value_type operator*() const { return i.current_value; }$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:value_type	access:public	signature:() const
operator *	sylar/sylar/ds/roaring.hh	/^    value_type operator*() const { return i.current_value; }$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:value_type	access:public	signature:() const
operator *	sylar/sylar/ds/roaring.hh	/^    value_type operator*() const {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:value_type	access:public	signature:() const
operator *	sylar/sylar/ds/roaring.hh	/^    value_type operator*() const {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:value_type	access:public	signature:() const
operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator &operator++() {  \/\/ ++i, must returned inc. value$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:type_of_iterator &	access:public	signature:()
operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator &operator++() {  \/\/ ++i, must returned inc. value$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:type_of_iterator &	access:public	signature:()
operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator &operator++() {  \/\/ ++i, must returned inc. value$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:type_of_iterator &	access:public	signature:()
operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator &operator++() {  \/\/ ++i, must returned inc. value$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:type_of_iterator &	access:public	signature:()
operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator operator++(int) {  \/\/ i++, must return orig. value$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator operator++(int) {  \/\/ i++, must return orig. value$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator operator++(int) {  \/\/ i++, must return orig. value$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
operator ++	sylar/sylar/ds/roaring.hh	/^    type_of_iterator operator++(int) {  \/\/ i++, must return orig. value$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
operator -	sylar/sylar/ds/roaring.hh	/^    Roaring operator-(const Roaring &o) const {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(const Roaring & o) const
operator -	sylar/sylar/ds/roaring.hh	/^    Roaring64Map operator-(const Roaring64Map &o) const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(const Roaring64Map & o) const
operator -	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap RoaringBitmap::operator-(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	signature:(const RoaringBitmap & b)
operator -	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap operator- (const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	access:public	signature:(const RoaringBitmap & b)
operator --	sylar/sylar/ds/roaring.hh	/^	type_of_iterator operator--(int) {  \/\/ i--, must return orig. value$/;"	f	class:Roaring64MapSetBitBiDirectionalIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
operator --	sylar/sylar/ds/roaring.hh	/^	type_of_iterator& operator--() { \/\/  --i, must return dec.value$/;"	f	class:Roaring64MapSetBitBiDirectionalIterator	typeref:typename:type_of_iterator &	access:public	signature:()
operator --	sylar/sylar/ds/roaring.hh	/^    type_of_iterator operator--(int) { \/\/ postfix --$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
operator --	sylar/sylar/ds/roaring.hh	/^    type_of_iterator operator--(int) { \/\/ postfix --$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:type_of_iterator	access:public	signature:(int)
operator --	sylar/sylar/ds/roaring.hh	/^    type_of_iterator& operator--() { \/\/ prefix --$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:type_of_iterator &	access:public	signature:()
operator --	sylar/sylar/ds/roaring.hh	/^    type_of_iterator& operator--() { \/\/ prefix --$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:type_of_iterator &	access:public	signature:()
operator -=	sylar/sylar/ds/roaring.hh	/^    Roaring &operator-=(const Roaring &r) {$/;"	f	class:Roaring	typeref:typename:Roaring &	access:public	signature:(const Roaring & r)
operator -=	sylar/sylar/ds/roaring.hh	/^    Roaring64Map &operator-=(const Roaring64Map &r) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map &	access:public	signature:(const Roaring64Map & r)
operator -=	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap& RoaringBitmap::operator-=(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	signature:(const RoaringBitmap & b)
operator -=	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap& operator-=(const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	access:public	signature:(const RoaringBitmap & b)
operator <	sylar/sylar/address.cc	/^bool Address::operator<(const Address& rhs) const {$/;"	f	class:sylar::Address	typeref:typename:bool	signature:(const Address & rhs) const
operator <	sylar/sylar/address.h	/^    bool operator<(const Address& rhs) const;$/;"	p	class:sylar::Address	typeref:typename:bool	access:public	signature:(const Address & rhs) const
operator <	sylar/sylar/ds/dict.h	/^        bool operator<(const Node& o) const {$/;"	f	struct:sylar::ds::Dict::Node	typeref:typename:bool	access:public	signature:(const Node & o) const
operator <	sylar/sylar/ds/hash_map.h	/^        bool operator<(const Node& o) const {$/;"	f	struct:sylar::ds::HashMap::Node	typeref:typename:bool	access:public	signature:(const Node & o) const
operator <	sylar/sylar/ds/hash_multimap.h	/^        bool operator<(const Node& o) const {$/;"	f	struct:sylar::ds::HashMultimap::Node	typeref:typename:bool	access:public	signature:(const Node & o) const
operator <	sylar/sylar/ds/roaring.hh	/^    bool operator<(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator <	sylar/sylar/ds/roaring.hh	/^    bool operator<(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator <	sylar/sylar/ds/roaring.hh	/^    bool operator<(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator <	sylar/sylar/ds/roaring.hh	/^    bool operator<(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator <	sylar/sylar/ds/timed_cache.h	/^        bool operator< (const Item& oth) const {$/;"	f	struct:sylar::ds::TimedCache::Item	typeref:typename:bool	access:public	signature:(const Item & oth) const
operator <	sylar/sylar/ds/timed_lru_cache.h	/^        bool operator< (const Item& oth) const {$/;"	f	struct:sylar::ds::TimedLruCache::Item	typeref:typename:bool	access:public	signature:(const Item & oth) const
operator <	sylar/sylar/ds/util.h	/^    bool operator<(const Pair<K, V>& o) const {$/;"	f	struct:sylar::ds::MultiPair	typeref:typename:bool	access:public	signature:(const Pair<K,V> & o) const
operator <	sylar/sylar/ds/util.h	/^    bool operator<(const Pair<K, V>& o) const {$/;"	f	struct:sylar::ds::Pair	typeref:typename:bool	access:public	signature:(const Pair<K,V> & o) const
operator <	sylar/sylar/log.cc	/^    bool operator<(const LogDefine& oth) const {$/;"	f	struct:sylar::LogDefine	typeref:typename:bool	file:	access:public	signature:(const LogDefine & oth) const
operator <	sylar/tests/test_array.cc	/^    bool operator<(const PidVid& o) const {$/;"	f	struct:PidVid	typeref:typename:bool	file:	access:public	signature:(const PidVid & o) const
operator <	sylar/tests/test_dict.cc	/^    bool operator<(const PidVid& o) const {$/;"	f	struct:PidVid	typeref:typename:bool	file:	access:public	signature:(const PidVid & o) const
operator <	sylar/tests/test_hashmap.cc	/^    bool operator<(const PidVid& o) const {$/;"	f	struct:PidVid	typeref:typename:bool	file:	access:public	signature:(const PidVid & o) const
operator <	sylar/tests/test_hashmultimap.cc	/^    bool operator<(const PidVid& o) const {$/;"	f	struct:PidVid	typeref:typename:bool	file:	access:public	signature:(const PidVid & o) const
operator <<	sylar/sylar/address.cc	/^std::ostream& operator<<(std::ostream& os, const Address& addr) {$/;"	f	namespace:sylar	typeref:typename:std::ostream &	signature:(std::ostream & os,const Address & addr)
operator <<	sylar/sylar/address.h	/^std::ostream& operator<<(std::ostream& os, const Address& addr);$/;"	p	namespace:sylar	typeref:typename:std::ostream &	signature:(std::ostream & os,const Address & addr)
operator <<	sylar/sylar/http/http.cc	/^std::ostream& operator<<(std::ostream& os, const HttpRequest& req) {$/;"	f	namespace:sylar::http	typeref:typename:std::ostream &	signature:(std::ostream & os,const HttpRequest & req)
operator <<	sylar/sylar/http/http.cc	/^std::ostream& operator<<(std::ostream& os, const HttpResponse& rsp) {$/;"	f	namespace:sylar::http	typeref:typename:std::ostream &	signature:(std::ostream & os,const HttpResponse & rsp)
operator <<	sylar/sylar/http/http.h	/^std::ostream& operator<<(std::ostream& os, const HttpRequest& req);$/;"	p	namespace:sylar::http	typeref:typename:std::ostream &	signature:(std::ostream & os,const HttpRequest & req)
operator <<	sylar/sylar/http/http.h	/^std::ostream& operator<<(std::ostream& os, const HttpResponse& rsp);$/;"	p	namespace:sylar::http	typeref:typename:std::ostream &	signature:(std::ostream & os,const HttpResponse & rsp)
operator <<	sylar/sylar/iomanager.cc	/^static std::ostream& operator<< (std::ostream& os, EPOLL_EVENTS events) {$/;"	f	namespace:sylar	typeref:typename:std::ostream &	file:	signature:(std::ostream & os,EPOLL_EVENTS events)
operator <<	sylar/sylar/iomanager.cc	/^static std::ostream& operator<< (std::ostream& os, const EpollCtlOp& op) {$/;"	f	namespace:sylar	typeref:typename:std::ostream &	file:	signature:(std::ostream & os,const EpollCtlOp & op)
operator <<	sylar/sylar/socket.cc	/^std::ostream& operator<<(std::ostream& os, const Socket& sock) {$/;"	f	namespace:sylar	typeref:typename:std::ostream &	signature:(std::ostream & os,const Socket & sock)
operator <<	sylar/sylar/socket.h	/^std::ostream& operator<<(std::ostream& os, const Socket& sock);$/;"	p	namespace:sylar	typeref:typename:std::ostream &	signature:(std::ostream & os,const Socket & sock)
operator <=	sylar/sylar/ds/roaring.hh	/^    bool operator<=(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator <=	sylar/sylar/ds/roaring.hh	/^    bool operator<=(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator <=	sylar/sylar/ds/roaring.hh	/^    bool operator<=(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator <=	sylar/sylar/ds/roaring.hh	/^    bool operator<=(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator =	sylar/sylar/ds/bitmap.cc	/^Bitmap& Bitmap::operator=(const Bitmap& b) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	signature:(const Bitmap & b)
operator =	sylar/sylar/ds/bitmap.h	/^    Bitmap& operator=(const Bitmap& b);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	access:public	signature:(const Bitmap & b)
operator =	sylar/sylar/ds/roaring.hh	/^	Roaring64Map &operator=(const Roaring64Map &r) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map &	access:public	signature:(const Roaring64Map & r)
operator =	sylar/sylar/ds/roaring.hh	/^	Roaring64MapSetBitBiDirectionalIterator &operator=(const Roaring64MapSetBitForwardIterator& r) /;"	f	class:Roaring64MapSetBitBiDirectionalIterator	typeref:typename:Roaring64MapSetBitBiDirectionalIterator &	access:public	signature:(const Roaring64MapSetBitForwardIterator & r)
operator =	sylar/sylar/ds/roaring.hh	/^	Roaring64MapSetBitForwardIterator &operator=(const Roaring64MapSetBitForwardIterator& r) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:Roaring64MapSetBitForwardIterator &	access:public	signature:(const Roaring64MapSetBitForwardIterator & r)
operator =	sylar/sylar/ds/roaring.hh	/^	type_of_iterator &operator=(const type_of_iterator& r) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:type_of_iterator &	access:public	signature:(const type_of_iterator & r)
operator =	sylar/sylar/ds/roaring.hh	/^    Roaring &operator=(Roaring &&r) noexcept {$/;"	f	class:Roaring	typeref:typename:Roaring &	access:public	signature:(Roaring && r)
operator =	sylar/sylar/ds/roaring.hh	/^    Roaring &operator=(const Roaring &r) {$/;"	f	class:Roaring	typeref:typename:Roaring &	access:public	signature:(const Roaring & r)
operator =	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap& RoaringBitmap::operator=(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	signature:(const RoaringBitmap & b)
operator =	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap& operator=(const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	access:public	signature:(const RoaringBitmap & b)
operator =	sylar/sylar/noncopyable.h	/^    Noncopyable& operator=(const Noncopyable&) = delete;$/;"	p	class:sylar::Noncopyable	typeref:typename:Noncopyable &	access:public	signature:(const Noncopyable &)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline Node& operator=(Node&& from) noexcept {$/;"	f	class:sylar::ns::Node	typeref:typename:Node &	access:public	signature:(Node && from)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline Node& operator=(const Node& from) {$/;"	f	class:sylar::ns::Node	typeref:typename:Node &	access:public	signature:(const Node & from)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline NodeInfo& operator=(NodeInfo&& from) noexcept {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:NodeInfo &	access:public	signature:(NodeInfo && from)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline NodeInfo& operator=(const NodeInfo& from) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:NodeInfo &	access:public	signature:(const NodeInfo & from)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline NotifyMessage& operator=(NotifyMessage&& from) noexcept {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:NotifyMessage &	access:public	signature:(NotifyMessage && from)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline NotifyMessage& operator=(const NotifyMessage& from) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:NotifyMessage &	access:public	signature:(const NotifyMessage & from)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline QueryRequest& operator=(QueryRequest&& from) noexcept {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:QueryRequest &	access:public	signature:(QueryRequest && from)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline QueryRequest& operator=(const QueryRequest& from) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:QueryRequest &	access:public	signature:(const QueryRequest & from)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline QueryResponse& operator=(QueryResponse&& from) noexcept {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:QueryResponse &	access:public	signature:(QueryResponse && from)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline QueryResponse& operator=(const QueryResponse& from) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:QueryResponse &	access:public	signature:(const QueryResponse & from)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline RegisterInfo& operator=(RegisterInfo&& from) noexcept {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:RegisterInfo &	access:public	signature:(RegisterInfo && from)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline RegisterInfo& operator=(const RegisterInfo& from) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:RegisterInfo &	access:public	signature:(const RegisterInfo & from)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:RegisterRequest &	access:public	signature:(RegisterRequest && from)
operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline RegisterRequest& operator=(const RegisterRequest& from) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:RegisterRequest &	access:public	signature:(const RegisterRequest & from)
operator =	sylar/sylar/util.h	/^    SharedArray& operator=(const SharedArray& r) {$/;"	f	class:sylar::SharedArray	typeref:typename:SharedArray &	access:public	signature:(const SharedArray & r)
operator ==	sylar/sylar/address.cc	/^bool Address::operator==(const Address& rhs) const {$/;"	f	class:sylar::Address	typeref:typename:bool	signature:(const Address & rhs) const
operator ==	sylar/sylar/address.h	/^    bool operator==(const Address& rhs) const;$/;"	p	class:sylar::Address	typeref:typename:bool	access:public	signature:(const Address & rhs) const
operator ==	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::operator== (const Bitmap& b) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(const Bitmap & b) const
operator ==	sylar/sylar/ds/bitmap.h	/^    bool operator== (const Bitmap& b) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:(const Bitmap & b) const
operator ==	sylar/sylar/ds/dict.h	/^        bool operator==(const Node& o) const {$/;"	f	struct:sylar::ds::Dict::Node	typeref:typename:bool	access:public	signature:(const Node & o) const
operator ==	sylar/sylar/ds/hash_map.h	/^        bool operator==(const Node& o) const {$/;"	f	struct:sylar::ds::HashMap::Node	typeref:typename:bool	access:public	signature:(const Node & o) const
operator ==	sylar/sylar/ds/roaring.hh	/^	bool operator==(const Roaring64MapSetBitForwardIterator &o) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const Roaring64MapSetBitForwardIterator & o)
operator ==	sylar/sylar/ds/roaring.hh	/^	bool operator==(const type_of_iterator& o) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator ==	sylar/sylar/ds/roaring.hh	/^    bool operator==(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(const Roaring & r) const
operator ==	sylar/sylar/ds/roaring.hh	/^    bool operator==(const Roaring64Map &r) const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(const Roaring64Map & r) const
operator ==	sylar/sylar/ds/roaring.hh	/^    bool operator==(const RoaringSetBitForwardIterator &o) const {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const RoaringSetBitForwardIterator & o) const
operator ==	sylar/sylar/ds/roaring.hh	/^    bool operator==(const type_of_iterator &o) const {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o) const
operator ==	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::operator== (const RoaringBitmap& b) const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:(const RoaringBitmap & b) const
operator ==	sylar/sylar/ds/roaring_bitmap.h	/^    bool operator== (const RoaringBitmap& b) const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:(const RoaringBitmap & b) const
operator ==	sylar/sylar/ds/util.h	/^    bool operator==(const Pair<K, V>& o) const {$/;"	f	struct:sylar::ds::MultiPair	typeref:typename:bool	access:public	signature:(const Pair<K,V> & o) const
operator ==	sylar/sylar/ds/util.h	/^    bool operator==(const Pair<K, V>& o) const {$/;"	f	struct:sylar::ds::Pair	typeref:typename:bool	access:public	signature:(const Pair<K,V> & o) const
operator ==	sylar/sylar/log.cc	/^    bool operator==(const LogAppenderDefine& oth) const {$/;"	f	struct:sylar::LogAppenderDefine	typeref:typename:bool	file:	access:public	signature:(const LogAppenderDefine & oth) const
operator ==	sylar/sylar/log.cc	/^    bool operator==(const LogDefine& oth) const {$/;"	f	struct:sylar::LogDefine	typeref:typename:bool	file:	access:public	signature:(const LogDefine & oth) const
operator ==	sylar/sylar/tcp_server.h	/^    bool operator==(const TcpServerConf& oth) const {$/;"	f	struct:sylar::TcpServerConf	typeref:typename:bool	access:public	signature:(const TcpServerConf & oth) const
operator ==	sylar/tests/test_config.cc	/^    bool operator==(const Person& oth) const {$/;"	f	class:Person	typeref:typename:bool	file:	access:public	signature:(const Person & oth) const
operator >	sylar/sylar/ds/roaring.hh	/^    bool operator>(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator >	sylar/sylar/ds/roaring.hh	/^    bool operator>(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator >	sylar/sylar/ds/roaring.hh	/^    bool operator>(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator >	sylar/sylar/ds/roaring.hh	/^    bool operator>(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator >=	sylar/sylar/ds/roaring.hh	/^    bool operator>=(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator >=	sylar/sylar/ds/roaring.hh	/^    bool operator>=(const type_of_iterator &o) {$/;"	f	class:Roaring64MapSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator >=	sylar/sylar/ds/roaring.hh	/^    bool operator>=(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitForwardIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator >=	sylar/sylar/ds/roaring.hh	/^    bool operator>=(const type_of_iterator &o) {$/;"	f	class:RoaringSetBitReverseIterator	typeref:typename:bool	access:public	signature:(const type_of_iterator & o)
operator []	sylar/sylar/ds/array.h	/^    T& operator[](uint64_t idx) {$/;"	f	class:sylar::ds::Array	typeref:typename:T &	access:public	signature:(uint64_t idx)
operator []	sylar/sylar/ds/array.h	/^    const T& operator[](uint64_t idx) const {$/;"	f	class:sylar::ds::Array	typeref:typename:const T &	access:public	signature:(uint64_t idx) const
operator []	sylar/sylar/util.h	/^    T& operator[](std::ptrdiff_t i) const {$/;"	f	class:sylar::SharedArray	typeref:typename:T &	access:public	signature:(std::ptrdiff_t i) const
operator ^	sylar/sylar/ds/roaring.hh	/^    Roaring operator^(const Roaring &o) const {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(const Roaring & o) const
operator ^	sylar/sylar/ds/roaring.hh	/^    Roaring64Map operator^(const Roaring64Map &o) const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(const Roaring64Map & o) const
operator ^	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap RoaringBitmap::operator^(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	signature:(const RoaringBitmap & b)
operator ^	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap operator^ (const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	access:public	signature:(const RoaringBitmap & b)
operator ^=	sylar/sylar/ds/roaring.hh	/^    Roaring &operator^=(const Roaring &r) {$/;"	f	class:Roaring	typeref:typename:Roaring &	access:public	signature:(const Roaring & r)
operator ^=	sylar/sylar/ds/roaring.hh	/^    Roaring64Map &operator^=(const Roaring64Map &r) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map &	access:public	signature:(const Roaring64Map & r)
operator ^=	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap& RoaringBitmap::operator^=(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	signature:(const RoaringBitmap & b)
operator ^=	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap& operator^=(const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	access:public	signature:(const RoaringBitmap & b)
operator |	sylar/sylar/ds/bitmap.cc	/^Bitmap Bitmap::operator| (const Bitmap& b) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap	signature:(const Bitmap & b)
operator |	sylar/sylar/ds/bitmap.h	/^    Bitmap operator| (const Bitmap& b);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap	access:public	signature:(const Bitmap & b)
operator |	sylar/sylar/ds/roaring.hh	/^    Roaring operator|(const Roaring &o) const {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(const Roaring & o) const
operator |	sylar/sylar/ds/roaring.hh	/^    Roaring64Map operator|(const Roaring64Map &o) const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(const Roaring64Map & o) const
operator |	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap RoaringBitmap::operator| (const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	signature:(const RoaringBitmap & b)
operator |	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap operator| (const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	access:public	signature:(const RoaringBitmap & b)
operator |=	sylar/sylar/ds/bitmap.cc	/^Bitmap& Bitmap::operator|=(const Bitmap& b) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	signature:(const Bitmap & b)
operator |=	sylar/sylar/ds/bitmap.h	/^    Bitmap& operator|=(const Bitmap& b);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	access:public	signature:(const Bitmap & b)
operator |=	sylar/sylar/ds/roaring.hh	/^    Roaring &operator|=(const Roaring &r) {$/;"	f	class:Roaring	typeref:typename:Roaring &	access:public	signature:(const Roaring & r)
operator |=	sylar/sylar/ds/roaring.hh	/^    Roaring64Map &operator|=(const Roaring64Map &r) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map &	access:public	signature:(const Roaring64Map & r)
operator |=	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap& RoaringBitmap::operator|=(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	signature:(const RoaringBitmap & b)
operator |=	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap& operator|=(const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	access:public	signature:(const RoaringBitmap & b)
operator ~	sylar/sylar/ds/bitmap.cc	/^Bitmap& Bitmap::operator~() {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	signature:()
operator ~	sylar/sylar/ds/bitmap.h	/^    Bitmap& operator~();$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	access:public	signature:()
orFetch	sylar/sylar/util.h	/^    static T orFetch(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
or_cardinality	sylar/sylar/ds/roaring.hh	/^    uint64_t or_cardinality(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:uint64_t	access:public	signature:(const Roaring & r) const
orm	build/Makefile	/^orm: cmake_check_build_system$/;"	t
orm	build/sylar/Makefile	/^orm: sylar\/CMakeFiles\/orm.dir\/rule$/;"	t
orm	sylar/sylar/orm/column.cc	/^namespace orm {$/;"	n	namespace:sylar	file:
orm	sylar/sylar/orm/column.h	/^namespace orm {$/;"	n	namespace:sylar
orm	sylar/sylar/orm/index.cc	/^namespace orm {$/;"	n	namespace:sylar	file:
orm	sylar/sylar/orm/index.h	/^namespace orm {$/;"	n	namespace:sylar
orm	sylar/sylar/orm/table.cc	/^namespace orm {$/;"	n	namespace:sylar	file:
orm	sylar/sylar/orm/table.h	/^namespace orm {$/;"	n	namespace:sylar
orm	sylar/sylar/orm/util.cc	/^namespace orm {$/;"	n	namespace:sylar	file:
orm	sylar/sylar/orm/util.h	/^namespace orm {$/;"	n	namespace:sylar
orm/fast	build/Makefile	/^orm\/fast:$/;"	t
orm/fast	build/sylar/Makefile	/^orm\/fast:$/;"	t
p	sylar/sylar/ds/roaring.hh	/^	const std::map<uint32_t, Roaring>& p;$/;"	m	class:Roaring64MapSetBitForwardIterator	typeref:typename:const std::map<uint32_t,Roaring> &	access:protected
p	sylar/sylar/ds/roaring.hh	/^	const std::map<uint32_t, Roaring>& p;$/;"	m	class:Roaring64MapSetBitReverseIterator	typeref:typename:const std::map<uint32_t,Roaring> &	access:protected
parent	sylar/sylar/ds/roaring.h	/^    const roaring_bitmap_t *parent;  \/\/ owner$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:const roaring_bitmap_t *	access:public
parent_id	sylar/sylar/daemon.h	/^    pid_t parent_id = 0;$/;"	m	struct:sylar::ProcessInfo	typeref:typename:pid_t	access:public
parent_start_time	sylar/sylar/daemon.h	/^    uint64_t parent_start_time = 0;$/;"	m	struct:sylar::ProcessInfo	typeref:typename:uint64_t	access:public
parseFrom	sylar/sylar/protocol.h	/^    virtual Message::ptr parseFrom(Stream::ptr stream) = 0;$/;"	p	class:sylar::MessageDecoder	typeref:typename:Message::ptr	access:public	signature:(Stream::ptr stream)
parseFrom	sylar/sylar/rock/rock_protocol.cc	/^Message::ptr RockMessageDecoder::parseFrom(Stream::ptr stream) {$/;"	f	class:sylar::RockMessageDecoder	typeref:typename:Message::ptr	signature:(Stream::ptr stream)
parseFrom	sylar/sylar/rock/rock_protocol.h	/^    virtual Message::ptr parseFrom(Stream::ptr stream) override;$/;"	p	class:sylar::RockMessageDecoder	typeref:typename:Message::ptr	access:public	signature:(Stream::ptr stream)
parseFromByteArray	sylar/sylar/protocol.cc	/^bool Notify::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::Notify	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/protocol.cc	/^bool Request::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::Request	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/protocol.cc	/^bool Response::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::Response	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) = 0;$/;"	p	class:sylar::Message	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::Notify	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::Request	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::Response	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockBody::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockBody	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockNotify::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockNotify	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockRequest::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockRequest	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockResponse::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockResponse	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::RockNotify	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::RockRequest	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::RockResponse	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
parseFromByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray);$/;"	p	class:sylar::RockBody	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
payload	sylar/sylar/http/ws_session.h	/^    uint32_t payload: 7;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:uint32_t:7	access:public
pcmd	sylar/sylar/db/redis.cc	/^void FoxRedis::pcmd(FCtx* fctx) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(FCtx * fctx)
pcmd	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::pcmd(FCtx* fctx) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(FCtx * fctx)
pcmd	sylar/sylar/db/redis.h	/^    virtual void pcmd(FCtx* ctx);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(FCtx * ctx)
pcmd	sylar/sylar/db/redis.h	/^    virtual void pcmd(FCtx* ctx);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(FCtx * ctx)
percolate_down	sylar/sylar/ds/roaring.c	/^static void percolate_down(roaring_pq_t *pq, uint32_t i) {$/;"	f	typeref:typename:void	file:	signature:(roaring_pq_t * pq,uint32_t i)
pid	sylar/tests/test_array.cc	/^    uint32_t pid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
pid	sylar/tests/test_dict.cc	/^    uint32_t pid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
pid	sylar/tests/test_hashmap.cc	/^    uint32_t pid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
pid	sylar/tests/test_hashmultimap.cc	/^    uint32_t pid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
ping	sylar/sylar/db/mysql.cc	/^bool MySQL::ping() {$/;"	f	class:sylar::MySQL	typeref:typename:bool	signature:()
ping	sylar/sylar/db/mysql.h	/^    bool ping();$/;"	p	class:sylar::MySQL	typeref:typename:bool	access:public	signature:()
ping	sylar/sylar/http/ws_connection.cc	/^int32_t WSConnection::ping() {$/;"	f	class:sylar::http::WSConnection	typeref:typename:int32_t	signature:()
ping	sylar/sylar/http/ws_connection.h	/^    int32_t ping();$/;"	p	class:sylar::http::WSConnection	typeref:typename:int32_t	access:public	signature:()
ping	sylar/sylar/http/ws_session.cc	/^int32_t WSSession::ping() {$/;"	f	class:sylar::http::WSSession	typeref:typename:int32_t	signature:()
ping	sylar/sylar/http/ws_session.h	/^    int32_t ping();$/;"	p	class:sylar::http::WSSession	typeref:typename:int32_t	access:public	signature:()
pinit	sylar/sylar/db/redis.cc	/^bool FoxRedis::pinit() {$/;"	f	class:sylar::FoxRedis	typeref:typename:bool	signature:()
pinit	sylar/sylar/db/redis.cc	/^bool FoxRedisCluster::pinit() {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:bool	signature:()
pinit	sylar/sylar/db/redis.h	/^    bool pinit();$/;"	p	class:sylar::FoxRedis	typeref:typename:bool	access:private	signature:()
pinit	sylar/sylar/db/redis.h	/^    bool pinit();$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:bool	access:private	signature:()
pointer	sylar/sylar/ds/roaring.hh	/^    typedef uint32_t *pointer;$/;"	t	class:RoaringSetBitForwardIterator	typeref:typename:uint32_t *	access:public
pointer	sylar/sylar/ds/roaring.hh	/^    typedef uint32_t *pointer;$/;"	t	class:RoaringSetBitReverseIterator	typeref:typename:uint32_t *	access:public
pointer	sylar/sylar/ds/roaring.hh	/^    typedef uint64_t *pointer;$/;"	t	class:Roaring64MapSetBitForwardIterator	typeref:typename:uint64_t *	access:public
pointer	sylar/sylar/ds/roaring.hh	/^    typedef uint64_t *pointer;$/;"	t	class:Roaring64MapSetBitReverseIterator	typeref:typename:uint64_t *	access:public
pong	sylar/sylar/http/ws_connection.cc	/^int32_t WSConnection::pong() {$/;"	f	class:sylar::http::WSConnection	typeref:typename:int32_t	signature:()
pong	sylar/sylar/http/ws_connection.h	/^    int32_t pong();$/;"	p	class:sylar::http::WSConnection	typeref:typename:int32_t	access:public	signature:()
pong	sylar/sylar/http/ws_session.cc	/^int32_t WSSession::pong() {$/;"	f	class:sylar::http::WSSession	typeref:typename:int32_t	signature:()
pong	sylar/sylar/http/ws_session.h	/^    int32_t pong();$/;"	p	class:sylar::http::WSSession	typeref:typename:int32_t	access:public	signature:()
popcount256	sylar/sylar/ds/roaring.h	/^static inline __m256i popcount256(__m256i v) {$/;"	f	typeref:typename:__m256i	signature:(__m256i v)
port	sylar/examples/echo_udp_client.cc	/^uint16_t port = 0;$/;"	v	typeref:typename:uint16_t
port	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t port() const;$/;"	p	class:sylar::ns::Node	typeref:typename:uint32_t	access:public	signature:() const
port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t Node::port() const {$/;"	f	class:sylar::ns::Node	typeref:typename:uint32_t	signature:() const
port	sylar/sylar/ns/ns_protobuf.proto	/^    optional uint32 port = 2;   \/\/端口号$/;"	f
port_	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t port_;$/;"	m	class:sylar::ns::Node	typeref:typename:uint32_t	access:private
posix_memalign	sylar/sylar/ds/roaring.h	/^extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size);$/;"	p	typeref:typename:int	signature:(void ** __memptr,size_t __alignment,size_t __size)
pq_add	sylar/sylar/ds/roaring.c	/^static void pq_add(roaring_pq_t *pq, roaring_pq_element_t *t) {$/;"	f	typeref:typename:void	file:	signature:(roaring_pq_t * pq,roaring_pq_element_t * t)
pq_free	sylar/sylar/ds/roaring.c	/^static void pq_free(roaring_pq_t *pq) {$/;"	f	typeref:typename:void	file:	signature:(roaring_pq_t * pq)
pq_poll	sylar/sylar/ds/roaring.c	/^static roaring_pq_element_t pq_poll(roaring_pq_t *pq) {$/;"	f	typeref:typename:roaring_pq_element_t	file:	signature:(roaring_pq_t * pq)
preinstall	build/Makefile	/^preinstall: all$/;"	t
preinstall	build/sylar/Makefile	/^preinstall: all$/;"	t
preinstall/fast	build/Makefile	/^preinstall\/fast:$/;"	t
preinstall/fast	build/sylar/Makefile	/^preinstall\/fast:$/;"	t
prepare	sylar/sylar/db/db.h	/^    virtual IStmt::ptr prepare(const std::string& stmt) = 0;$/;"	p	class:sylar::IDB	typeref:typename:IStmt::ptr	access:public	signature:(const std::string & stmt)
prepare	sylar/sylar/db/mysql.cc	/^sylar::IStmt::ptr MySQL::prepare(const std::string& sql) {$/;"	f	class:sylar::MySQL	typeref:typename:sylar::IStmt::ptr	signature:(const std::string & sql)
prepare	sylar/sylar/db/mysql.h	/^    sylar::IStmt::ptr prepare(const std::string& sql) override;$/;"	p	class:sylar::MySQL	typeref:typename:sylar::IStmt::ptr	access:public	signature:(const std::string & sql)
prepare	sylar/sylar/db/sqlite3.cc	/^IStmt::ptr SQLite3::prepare(const std::string& stmt) {$/;"	f	class:sylar::SQLite3	typeref:typename:IStmt::ptr	signature:(const std::string & stmt)
prepare	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::prepare(const char* stmt) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * stmt)
prepare	sylar/sylar/db/sqlite3.h	/^    IStmt::ptr prepare(const std::string& stmt) override;$/;"	p	class:sylar::SQLite3	typeref:typename:IStmt::ptr	access:public	signature:(const std::string & stmt)
prepare	sylar/sylar/db/sqlite3.h	/^    int prepare(const char* stmt);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * stmt)
prevValue	sylar/sylar/ds/util.cc	/^uint32_t PrimeGenerator::prevValue() {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	signature:()
prevValue	sylar/sylar/ds/util.h	/^    uint32_t prevValue();$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	access:public	signature:()
printHelp	sylar/sylar/env.cc	/^void Env::printHelp() {$/;"	f	class:sylar::Env	typeref:typename:void	signature:()
printHelp	sylar/sylar/env.h	/^    void printHelp();$/;"	p	class:sylar::Env	typeref:typename:void	access:public	signature:()
print_yaml	sylar/tests/test_config.cc	/^void print_yaml(const YAML::Node& node, int level) {$/;"	f	typeref:typename:void	signature:(const YAML::Node & node,int level)
printf	sylar/sylar/ds/roaring.hh	/^    void printf() const { roaring_bitmap_printf(&roaring); }$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:() const
printf	sylar/sylar/ds/roaring.hh	/^    void printf() const {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:() const
privateDecrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::privateDecrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,std::string & to,int padding)
privateDecrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::privateDecrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,void * to,int padding)
privateDecrypt	sylar/sylar/util/crypto_util.h	/^    int32_t privateDecrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,std::string & to,int padding=RSA_NO_PADDING)
privateDecrypt	sylar/sylar/util/crypto_util.h	/^    int32_t privateDecrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,void * to,int padding=RSA_NO_PADDING)
privateEncrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::privateEncrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,std::string & to,int padding)
privateEncrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::privateEncrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,void * to,int padding)
privateEncrypt	sylar/sylar/util/crypto_util.h	/^    int32_t privateEncrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,std::string & to,int padding=RSA_NO_PADDING)
privateEncrypt	sylar/sylar/util/crypto_util.h	/^    int32_t privateEncrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,void * to,int padding=RSA_NO_PADDING)
process_worker	sylar/sylar/tcp_server.h	/^    std::string process_worker;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
project_name	sylar/template/CMakeLists.txt	/^add_library(project_name SHARED ${LIB_SRC})$/;"	t
project_name	sylar/template/CMakeLists.txt	/^project(project_name)$/;"	p
protobuf_out	sylar/cmake/utils.cmake	/^    set(protobuf_out ${outputdir}\/${src_path}\/${src_file}.pb.cc)$/;"	v	function:protobufmaker
protobufmaker	sylar/cmake/utils.cmake	/^function(protobufmaker src_proto outputlist outputdir)$/;"	f
prune	sylar/sylar/ds/lru_cache.h	/^    size_t prune() {$/;"	f	class:sylar::ds::LruCache	typeref:typename:size_t	access:protected	signature:()
prune	sylar/sylar/ds/timed_cache.h	/^    size_t prune() {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:protected	signature:()
prune	sylar/sylar/ds/timed_lru_cache.h	/^    size_t prune() {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:protected	signature:()
prune_callback	sylar/sylar/ds/lru_cache.h	/^    typedef std::function<void(const K&, const V&)> prune_callback;$/;"	t	class:sylar::ds::LruCache	access:public
prune_callback	sylar/sylar/ds/timed_cache.h	/^    typedef std::function<void(const K&, const V&)> prune_callback;$/;"	t	class:sylar::ds::TimedCache	access:public
prune_callback	sylar/sylar/ds/timed_lru_cache.h	/^    typedef std::function<void(const K&, const V&)> prune_callback;$/;"	t	class:sylar::ds::TimedLruCache	access:public
ptr	chat/my_module.h	/^    typedef std::shared_ptr<MyModule> ptr;$/;"	t	class:chat::MyModule	typeref:typename:std::shared_ptr<MyModule>	access:public
ptr	sylar/sylar/address.h	/^    typedef std::shared_ptr<Address> ptr;$/;"	t	class:sylar::Address	typeref:typename:std::shared_ptr<Address>	access:public
ptr	sylar/sylar/address.h	/^    typedef std::shared_ptr<IPAddress> ptr;$/;"	t	class:sylar::IPAddress	typeref:typename:std::shared_ptr<IPAddress>	access:public
ptr	sylar/sylar/address.h	/^    typedef std::shared_ptr<IPv4Address> ptr;$/;"	t	class:sylar::IPv4Address	typeref:typename:std::shared_ptr<IPv4Address>	access:public
ptr	sylar/sylar/address.h	/^    typedef std::shared_ptr<IPv6Address> ptr;$/;"	t	class:sylar::IPv6Address	typeref:typename:std::shared_ptr<IPv6Address>	access:public
ptr	sylar/sylar/address.h	/^    typedef std::shared_ptr<UnixAddress> ptr;$/;"	t	class:sylar::UnixAddress	typeref:typename:std::shared_ptr<UnixAddress>	access:public
ptr	sylar/sylar/address.h	/^    typedef std::shared_ptr<UnknownAddress> ptr;$/;"	t	class:sylar::UnknownAddress	typeref:typename:std::shared_ptr<UnknownAddress>	access:public
ptr	sylar/sylar/bytearray.h	/^        char* ptr;$/;"	m	struct:sylar::ByteArray::Node	typeref:typename:char *	access:public
ptr	sylar/sylar/bytearray.h	/^    typedef std::shared_ptr<ByteArray> ptr;$/;"	t	class:sylar::ByteArray	typeref:typename:std::shared_ptr<ByteArray>	access:public
ptr	sylar/sylar/config.h	/^    typedef std::shared_ptr<ConfigVar> ptr;$/;"	t	class:sylar::ConfigVar	typeref:typename:std::shared_ptr<ConfigVar>	access:public
ptr	sylar/sylar/config.h	/^    typedef std::shared_ptr<ConfigVarBase> ptr;$/;"	t	class:sylar::ConfigVarBase	typeref:typename:std::shared_ptr<ConfigVarBase>	access:public
ptr	sylar/sylar/db/db.h	/^    typedef std::shared_ptr<IDB> ptr;$/;"	t	class:sylar::IDB	typeref:typename:std::shared_ptr<IDB>	access:public
ptr	sylar/sylar/db/db.h	/^    typedef std::shared_ptr<ISQLData> ptr;$/;"	t	class:sylar::ISQLData	typeref:typename:std::shared_ptr<ISQLData>	access:public
ptr	sylar/sylar/db/db.h	/^    typedef std::shared_ptr<IStmt> ptr;$/;"	t	class:sylar::IStmt	typeref:typename:std::shared_ptr<IStmt>	access:public
ptr	sylar/sylar/db/db.h	/^    typedef std::shared_ptr<ITransaction> ptr;$/;"	t	class:sylar::ITransaction	typeref:typename:std::shared_ptr<ITransaction>	access:public
ptr	sylar/sylar/db/fox_thread.h	/^    typedef std::shared_ptr<FoxThread> ptr;$/;"	t	class:sylar::FoxThread	typeref:typename:std::shared_ptr<FoxThread>	access:public
ptr	sylar/sylar/db/fox_thread.h	/^    typedef std::shared_ptr<FoxThreadPool> ptr;$/;"	t	class:sylar::FoxThreadPool	typeref:typename:std::shared_ptr<FoxThreadPool>	access:public
ptr	sylar/sylar/db/fox_thread.h	/^    typedef std::shared_ptr<IFoxThread> ptr;$/;"	t	class:sylar::IFoxThread	typeref:typename:std::shared_ptr<IFoxThread>	access:public
ptr	sylar/sylar/db/mysql.h	/^    typedef std::shared_ptr<MySQL> ptr;$/;"	t	class:sylar::MySQL	typeref:typename:std::shared_ptr<MySQL>	access:public
ptr	sylar/sylar/db/mysql.h	/^    typedef std::shared_ptr<MySQLRes> ptr;$/;"	t	class:sylar::MySQLRes	typeref:typename:std::shared_ptr<MySQLRes>	access:public
ptr	sylar/sylar/db/mysql.h	/^    typedef std::shared_ptr<MySQLStmt> ptr;$/;"	t	class:sylar::MySQLStmt	typeref:typename:std::shared_ptr<MySQLStmt>	access:public
ptr	sylar/sylar/db/mysql.h	/^    typedef std::shared_ptr<MySQLStmtRes> ptr;$/;"	t	class:sylar::MySQLStmtRes	typeref:typename:std::shared_ptr<MySQLStmtRes>	access:public
ptr	sylar/sylar/db/mysql.h	/^    typedef std::shared_ptr<MySQLTransaction> ptr;$/;"	t	class:sylar::MySQLTransaction	typeref:typename:std::shared_ptr<MySQLTransaction>	access:public
ptr	sylar/sylar/db/redis.h	/^        typedef std::shared_ptr<Ctx> ptr;$/;"	t	struct:sylar::FoxRedis::Ctx	typeref:typename:std::shared_ptr<Ctx>	access:public
ptr	sylar/sylar/db/redis.h	/^        typedef std::shared_ptr<Ctx> ptr;$/;"	t	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:std::shared_ptr<Ctx>	access:public
ptr	sylar/sylar/db/redis.h	/^    typedef std::shared_ptr<FoxRedis> ptr;$/;"	t	class:sylar::FoxRedis	typeref:typename:std::shared_ptr<FoxRedis>	access:public
ptr	sylar/sylar/db/redis.h	/^    typedef std::shared_ptr<FoxRedisCluster> ptr;$/;"	t	class:sylar::FoxRedisCluster	typeref:typename:std::shared_ptr<FoxRedisCluster>	access:public
ptr	sylar/sylar/db/redis.h	/^    typedef std::shared_ptr<IRedis> ptr;$/;"	t	class:sylar::IRedis	typeref:typename:std::shared_ptr<IRedis>	access:public
ptr	sylar/sylar/db/redis.h	/^    typedef std::shared_ptr<ISyncRedis> ptr;$/;"	t	class:sylar::ISyncRedis	typeref:typename:std::shared_ptr<ISyncRedis>	access:public
ptr	sylar/sylar/db/redis.h	/^    typedef std::shared_ptr<Redis> ptr;$/;"	t	class:sylar::Redis	typeref:typename:std::shared_ptr<Redis>	access:public
ptr	sylar/sylar/db/redis.h	/^    typedef std::shared_ptr<RedisCluster> ptr;$/;"	t	class:sylar::RedisCluster	typeref:typename:std::shared_ptr<RedisCluster>	access:public
ptr	sylar/sylar/db/sqlite3.h	/^    typedef std::shared_ptr<SQLite3> ptr;$/;"	t	class:sylar::SQLite3	typeref:typename:std::shared_ptr<SQLite3>	access:public
ptr	sylar/sylar/db/sqlite3.h	/^    typedef std::shared_ptr<SQLite3Data> ptr;$/;"	t	class:sylar::SQLite3Data	typeref:typename:std::shared_ptr<SQLite3Data>	access:public
ptr	sylar/sylar/db/sqlite3.h	/^    typedef std::shared_ptr<SQLite3Stmt> ptr;$/;"	t	class:sylar::SQLite3Stmt	typeref:typename:std::shared_ptr<SQLite3Stmt>	access:public
ptr	sylar/sylar/ds/array.h	/^    typedef std::shared_ptr<Array> ptr;$/;"	t	class:sylar::ds::Array	typeref:typename:std::shared_ptr<Array>	access:public
ptr	sylar/sylar/ds/bitmap.h	/^        typedef std::shared_ptr<iterator_base> ptr;$/;"	t	class:sylar::ds::Bitmap::iterator_base	typeref:typename:std::shared_ptr<iterator_base>	access:public
ptr	sylar/sylar/ds/bitmap.h	/^    typedef std::shared_ptr<Bitmap> ptr;$/;"	t	class:sylar::ds::Bitmap	typeref:typename:std::shared_ptr<Bitmap>	access:public
ptr	sylar/sylar/ds/dict.h	/^    typedef std::shared_ptr<Dict> ptr;$/;"	t	class:sylar::ds::Dict	typeref:typename:std::shared_ptr<Dict>	access:public
ptr	sylar/sylar/ds/hash_map.h	/^    typedef std::shared_ptr<HashMap> ptr;$/;"	t	class:sylar::ds::HashMap	typeref:typename:std::shared_ptr<HashMap>	access:public
ptr	sylar/sylar/ds/hash_multimap.h	/^    typedef std::shared_ptr<HashMultimap> ptr;$/;"	t	class:sylar::ds::HashMultimap	typeref:typename:std::shared_ptr<HashMultimap>	access:public
ptr	sylar/sylar/ds/lru_cache.h	/^    typedef std::shared_ptr<HashLruCache> ptr;$/;"	t	class:sylar::ds::HashLruCache	typeref:typename:std::shared_ptr<HashLruCache>	access:public
ptr	sylar/sylar/ds/lru_cache.h	/^    typedef std::shared_ptr<LruCache> ptr;$/;"	t	class:sylar::ds::LruCache	typeref:typename:std::shared_ptr<LruCache>	access:public
ptr	sylar/sylar/ds/roaring_bitmap.h	/^    typedef std::shared_ptr<RoaringBitmap> ptr;$/;"	t	class:sylar::ds::RoaringBitmap	typeref:typename:std::shared_ptr<RoaringBitmap>	access:public
ptr	sylar/sylar/ds/timed_cache.h	/^    typedef std::shared_ptr<HashTimedCache> ptr;$/;"	t	class:sylar::ds::HashTimedCache	typeref:typename:std::shared_ptr<HashTimedCache>	access:public
ptr	sylar/sylar/ds/timed_cache.h	/^    typedef std::shared_ptr<TimedCache> ptr;$/;"	t	class:sylar::ds::TimedCache	typeref:typename:std::shared_ptr<TimedCache>	access:public
ptr	sylar/sylar/ds/timed_lru_cache.h	/^    typedef std::shared_ptr<HashTimedLruCache> ptr;$/;"	t	class:sylar::ds::HashTimedLruCache	typeref:typename:std::shared_ptr<HashTimedLruCache>	access:public
ptr	sylar/sylar/ds/timed_lru_cache.h	/^    typedef std::shared_ptr<TimedLruCache> ptr;$/;"	t	class:sylar::ds::TimedLruCache	typeref:typename:std::shared_ptr<TimedLruCache>	access:public
ptr	sylar/sylar/email/email.h	/^    typedef std::shared_ptr<EMail> ptr;$/;"	t	class:sylar::EMail	typeref:typename:std::shared_ptr<EMail>	access:public
ptr	sylar/sylar/email/email.h	/^    typedef std::shared_ptr<EMailEntity> ptr;$/;"	t	class:sylar::EMailEntity	typeref:typename:std::shared_ptr<EMailEntity>	access:public
ptr	sylar/sylar/email/smtp.h	/^    typedef std::shared_ptr<SmtpClient> ptr;$/;"	t	class:sylar::SmtpClient	typeref:typename:std::shared_ptr<SmtpClient>	access:public
ptr	sylar/sylar/email/smtp.h	/^    typedef std::shared_ptr<SmtpResult> ptr;$/;"	t	struct:sylar::SmtpResult	typeref:typename:std::shared_ptr<SmtpResult>	access:public
ptr	sylar/sylar/fd_manager.h	/^    typedef std::shared_ptr<FdCtx> ptr;$/;"	t	class:sylar::FdCtx	typeref:typename:std::shared_ptr<FdCtx>	access:public
ptr	sylar/sylar/fiber.h	/^    typedef std::shared_ptr<Fiber> ptr;$/;"	t	class:sylar::Fiber	typeref:typename:std::shared_ptr<Fiber>	access:public
ptr	sylar/sylar/http/http.h	/^    typedef std::shared_ptr<HttpRequest> ptr;$/;"	t	class:sylar::http::HttpRequest	typeref:typename:std::shared_ptr<HttpRequest>	access:public
ptr	sylar/sylar/http/http.h	/^    typedef std::shared_ptr<HttpResponse> ptr;$/;"	t	class:sylar::http::HttpResponse	typeref:typename:std::shared_ptr<HttpResponse>	access:public
ptr	sylar/sylar/http/http_connection.h	/^    typedef std::shared_ptr<HttpConnection> ptr;$/;"	t	class:sylar::http::HttpConnection	typeref:typename:std::shared_ptr<HttpConnection>	access:public
ptr	sylar/sylar/http/http_connection.h	/^    typedef std::shared_ptr<HttpConnectionPool> ptr;$/;"	t	class:sylar::http::HttpConnectionPool	typeref:typename:std::shared_ptr<HttpConnectionPool>	access:public
ptr	sylar/sylar/http/http_connection.h	/^    typedef std::shared_ptr<HttpResult> ptr;$/;"	t	struct:sylar::http::HttpResult	typeref:typename:std::shared_ptr<HttpResult>	access:public
ptr	sylar/sylar/http/http_parser.h	/^    typedef std::shared_ptr<HttpRequestParser> ptr;$/;"	t	class:sylar::http::HttpRequestParser	typeref:typename:std::shared_ptr<HttpRequestParser>	access:public
ptr	sylar/sylar/http/http_parser.h	/^    typedef std::shared_ptr<HttpResponseParser> ptr;$/;"	t	class:sylar::http::HttpResponseParser	typeref:typename:std::shared_ptr<HttpResponseParser>	access:public
ptr	sylar/sylar/http/http_server.h	/^    typedef std::shared_ptr<HttpServer> ptr;$/;"	t	class:sylar::http::HttpServer	typeref:typename:std::shared_ptr<HttpServer>	access:public
ptr	sylar/sylar/http/http_session.h	/^    typedef std::shared_ptr<HttpSession> ptr;$/;"	t	class:sylar::http::HttpSession	typeref:typename:std::shared_ptr<HttpSession>	access:public
ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<FunctionServlet> ptr;$/;"	t	class:sylar::http::FunctionServlet	typeref:typename:std::shared_ptr<FunctionServlet>	access:public
ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<HoldServletCreator> ptr;$/;"	t	class:sylar::http::HoldServletCreator	typeref:typename:std::shared_ptr<HoldServletCreator>	access:public
ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<IServletCreator> ptr;$/;"	t	class:sylar::http::IServletCreator	typeref:typename:std::shared_ptr<IServletCreator>	access:public
ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<NotFoundServlet> ptr;$/;"	t	class:sylar::http::NotFoundServlet	typeref:typename:std::shared_ptr<NotFoundServlet>	access:public
ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<Servlet> ptr;$/;"	t	class:sylar::http::Servlet	typeref:typename:std::shared_ptr<Servlet>	access:public
ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<ServletCreator> ptr;$/;"	t	class:sylar::http::ServletCreator	typeref:typename:std::shared_ptr<ServletCreator>	access:public
ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<ServletDispatch> ptr;$/;"	t	class:sylar::http::ServletDispatch	typeref:typename:std::shared_ptr<ServletDispatch>	access:public
ptr	sylar/sylar/http/session_data.h	/^    typedef std::shared_ptr<SessionData> ptr;$/;"	t	class:sylar::http::SessionData	typeref:typename:std::shared_ptr<SessionData>	access:public
ptr	sylar/sylar/http/ws_connection.h	/^    typedef std::shared_ptr<WSConnection> ptr;$/;"	t	class:sylar::http::WSConnection	typeref:typename:std::shared_ptr<WSConnection>	access:public
ptr	sylar/sylar/http/ws_server.h	/^    typedef std::shared_ptr<WSServer> ptr;$/;"	t	class:sylar::http::WSServer	typeref:typename:std::shared_ptr<WSServer>	access:public
ptr	sylar/sylar/http/ws_servlet.h	/^    typedef std::shared_ptr<FunctionWSServlet> ptr;$/;"	t	class:sylar::http::FunctionWSServlet	typeref:typename:std::shared_ptr<FunctionWSServlet>	access:public
ptr	sylar/sylar/http/ws_servlet.h	/^    typedef std::shared_ptr<WSServlet> ptr;$/;"	t	class:sylar::http::WSServlet	typeref:typename:std::shared_ptr<WSServlet>	access:public
ptr	sylar/sylar/http/ws_servlet.h	/^    typedef std::shared_ptr<WSServletDispatch> ptr;$/;"	t	class:sylar::http::WSServletDispatch	typeref:typename:std::shared_ptr<WSServletDispatch>	access:public
ptr	sylar/sylar/http/ws_session.h	/^    typedef std::shared_ptr<WSFrameMessage> ptr;$/;"	t	class:sylar::http::WSFrameMessage	typeref:typename:std::shared_ptr<WSFrameMessage>	access:public
ptr	sylar/sylar/http/ws_session.h	/^    typedef std::shared_ptr<WSSession> ptr;$/;"	t	class:sylar::http::WSSession	typeref:typename:std::shared_ptr<WSSession>	access:public
ptr	sylar/sylar/iomanager.h	/^    typedef std::shared_ptr<IOManager> ptr;$/;"	t	class:sylar::IOManager	typeref:typename:std::shared_ptr<IOManager>	access:public
ptr	sylar/sylar/log.h	/^        typedef std::shared_ptr<FormatItem> ptr;$/;"	t	class:sylar::LogFormatter::FormatItem	typeref:typename:std::shared_ptr<FormatItem>	access:public
ptr	sylar/sylar/log.h	/^    typedef std::shared_ptr<FileLogAppender> ptr;$/;"	t	class:sylar::FileLogAppender	typeref:typename:std::shared_ptr<FileLogAppender>	access:public
ptr	sylar/sylar/log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:sylar::LogAppender	typeref:typename:std::shared_ptr<LogAppender>	access:public
ptr	sylar/sylar/log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:sylar::LogEvent	typeref:typename:std::shared_ptr<LogEvent>	access:public
ptr	sylar/sylar/log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:sylar::LogFormatter	typeref:typename:std::shared_ptr<LogFormatter>	access:public
ptr	sylar/sylar/log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:sylar::Logger	typeref:typename:std::shared_ptr<Logger>	access:public
ptr	sylar/sylar/log.h	/^    typedef std::shared_ptr<StdoutLogAppender> ptr;$/;"	t	class:sylar::StdoutLogAppender	typeref:typename:std::shared_ptr<StdoutLogAppender>	access:public
ptr	sylar/sylar/module.h	/^    typedef std::shared_ptr<Module> ptr;$/;"	t	class:sylar::Module	typeref:typename:std::shared_ptr<Module>	access:public
ptr	sylar/sylar/module.h	/^    typedef std::shared_ptr<RockModule> ptr;$/;"	t	class:sylar::RockModule	typeref:typename:std::shared_ptr<RockModule>	access:public
ptr	sylar/sylar/ns/name_server_module.h	/^    typedef std::shared_ptr<NSClientInfo> ptr;$/;"	t	class:sylar::ns::NSClientInfo	typeref:typename:std::shared_ptr<NSClientInfo>	access:public
ptr	sylar/sylar/ns/name_server_module.h	/^    typedef std::shared_ptr<NameServerModule> ptr;$/;"	t	class:sylar::ns::NameServerModule	typeref:typename:std::shared_ptr<NameServerModule>	access:public
ptr	sylar/sylar/ns/ns_client.h	/^    typedef std::shared_ptr<NSClient> ptr;$/;"	t	class:sylar::ns::NSClient	typeref:typename:std::shared_ptr<NSClient>	access:public
ptr	sylar/sylar/ns/ns_protocol.h	/^    typedef std::shared_ptr<NSDomain> ptr;$/;"	t	class:sylar::ns::NSDomain	typeref:typename:std::shared_ptr<NSDomain>	access:public
ptr	sylar/sylar/ns/ns_protocol.h	/^    typedef std::shared_ptr<NSDomainSet> ptr;$/;"	t	class:sylar::ns::NSDomainSet	typeref:typename:std::shared_ptr<NSDomainSet>	access:public
ptr	sylar/sylar/ns/ns_protocol.h	/^    typedef std::shared_ptr<NSNode> ptr;$/;"	t	class:sylar::ns::NSNode	typeref:typename:std::shared_ptr<NSNode>	access:public
ptr	sylar/sylar/ns/ns_protocol.h	/^    typedef std::shared_ptr<NSNodeSet> ptr;$/;"	t	class:sylar::ns::NSNodeSet	typeref:typename:std::shared_ptr<NSNodeSet>	access:public
ptr	sylar/sylar/orm/column.h	/^    typedef std::shared_ptr<Column> ptr;$/;"	t	class:sylar::orm::Column	typeref:typename:std::shared_ptr<Column>	access:public
ptr	sylar/sylar/orm/index.h	/^    typedef std::shared_ptr<Index> ptr;$/;"	t	class:sylar::orm::Index	typeref:typename:std::shared_ptr<Index>	access:public
ptr	sylar/sylar/orm/table.h	/^    typedef std::shared_ptr<Table> ptr;$/;"	t	class:sylar::orm::Table	typeref:typename:std::shared_ptr<Table>	access:public
ptr	sylar/sylar/protocol.h	/^    typedef std::shared_ptr<Message> ptr;$/;"	t	class:sylar::Message	typeref:typename:std::shared_ptr<Message>	access:public
ptr	sylar/sylar/protocol.h	/^    typedef std::shared_ptr<MessageDecoder> ptr;$/;"	t	class:sylar::MessageDecoder	typeref:typename:std::shared_ptr<MessageDecoder>	access:public
ptr	sylar/sylar/protocol.h	/^    typedef std::shared_ptr<Notify> ptr;$/;"	t	class:sylar::Notify	typeref:typename:std::shared_ptr<Notify>	access:public
ptr	sylar/sylar/protocol.h	/^    typedef std::shared_ptr<Request> ptr;$/;"	t	class:sylar::Request	typeref:typename:std::shared_ptr<Request>	access:public
ptr	sylar/sylar/protocol.h	/^    typedef std::shared_ptr<Response> ptr;$/;"	t	class:sylar::Response	typeref:typename:std::shared_ptr<Response>	access:public
ptr	sylar/sylar/rock/rock_protocol.h	/^    typedef std::shared_ptr<RockBody> ptr;$/;"	t	class:sylar::RockBody	typeref:typename:std::shared_ptr<RockBody>	access:public
ptr	sylar/sylar/rock/rock_protocol.h	/^    typedef std::shared_ptr<RockMessageDecoder> ptr;$/;"	t	class:sylar::RockMessageDecoder	typeref:typename:std::shared_ptr<RockMessageDecoder>	access:public
ptr	sylar/sylar/rock/rock_protocol.h	/^    typedef std::shared_ptr<RockNotify> ptr;$/;"	t	class:sylar::RockNotify	typeref:typename:std::shared_ptr<RockNotify>	access:public
ptr	sylar/sylar/rock/rock_protocol.h	/^    typedef std::shared_ptr<RockRequest> ptr;$/;"	t	class:sylar::RockRequest	typeref:typename:std::shared_ptr<RockRequest>	access:public
ptr	sylar/sylar/rock/rock_protocol.h	/^    typedef std::shared_ptr<RockResponse> ptr;$/;"	t	class:sylar::RockResponse	typeref:typename:std::shared_ptr<RockResponse>	access:public
ptr	sylar/sylar/rock/rock_server.h	/^    typedef std::shared_ptr<RockServer> ptr;$/;"	t	class:sylar::RockServer	typeref:typename:std::shared_ptr<RockServer>	access:public
ptr	sylar/sylar/rock/rock_stream.h	/^        typedef std::shared_ptr<RockCtx> ptr;$/;"	t	struct:sylar::RockStream::RockCtx	typeref:typename:std::shared_ptr<RockCtx>	access:public
ptr	sylar/sylar/rock/rock_stream.h	/^        typedef std::shared_ptr<RockSendCtx> ptr;$/;"	t	struct:sylar::RockStream::RockSendCtx	typeref:typename:std::shared_ptr<RockSendCtx>	access:public
ptr	sylar/sylar/rock/rock_stream.h	/^    typedef std::shared_ptr<RockConnection> ptr;$/;"	t	class:sylar::RockConnection	typeref:typename:std::shared_ptr<RockConnection>	access:public
ptr	sylar/sylar/rock/rock_stream.h	/^    typedef std::shared_ptr<RockSDLoadBalance> ptr;$/;"	t	class:sylar::RockSDLoadBalance	typeref:typename:std::shared_ptr<RockSDLoadBalance>	access:public
ptr	sylar/sylar/rock/rock_stream.h	/^    typedef std::shared_ptr<RockSession> ptr;$/;"	t	class:sylar::RockSession	typeref:typename:std::shared_ptr<RockSession>	access:public
ptr	sylar/sylar/rock/rock_stream.h	/^    typedef std::shared_ptr<RockStream> ptr;$/;"	t	class:sylar::RockStream	typeref:typename:std::shared_ptr<RockStream>	access:public
ptr	sylar/sylar/rock/rock_stream.h	/^   typedef std::shared_ptr<RockResult> ptr; $/;"	t	struct:sylar::RockResult	typeref:typename:std::shared_ptr<RockResult>	access:public
ptr	sylar/sylar/scheduler.h	/^    typedef std::shared_ptr<Scheduler> ptr;$/;"	t	class:sylar::Scheduler	typeref:typename:std::shared_ptr<Scheduler>	access:public
ptr	sylar/sylar/socket.h	/^    typedef std::shared_ptr<SSLSocket> ptr;$/;"	t	class:sylar::SSLSocket	typeref:typename:std::shared_ptr<SSLSocket>	access:public
ptr	sylar/sylar/socket.h	/^    typedef std::shared_ptr<Socket> ptr;$/;"	t	class:sylar::Socket	typeref:typename:std::shared_ptr<Socket>	access:public
ptr	sylar/sylar/stream.h	/^    typedef std::shared_ptr<Stream> ptr;$/;"	t	class:sylar::Stream	typeref:typename:std::shared_ptr<Stream>	access:public
ptr	sylar/sylar/streams/async_socket_stream.h	/^        typedef std::shared_ptr<Ctx> ptr;$/;"	t	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:std::shared_ptr<Ctx>	access:public
ptr	sylar/sylar/streams/async_socket_stream.h	/^        typedef std::shared_ptr<SendCtx> ptr;$/;"	t	struct:sylar::AsyncSocketStream::SendCtx	typeref:typename:std::shared_ptr<SendCtx>	access:public
ptr	sylar/sylar/streams/async_socket_stream.h	/^    typedef std::shared_ptr<AsyncSocketStream> ptr;$/;"	t	class:sylar::AsyncSocketStream	typeref:typename:std::shared_ptr<AsyncSocketStream>	access:public
ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<FairLoadBalanceItem> ptr;$/;"	t	class:sylar::FairLoadBalanceItem	typeref:typename:std::shared_ptr<FairLoadBalanceItem>	access:public
ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<ILoadBalance> ptr;$/;"	t	class:sylar::ILoadBalance	typeref:typename:std::shared_ptr<ILoadBalance>	access:public
ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<LoadBalance> ptr;$/;"	t	class:sylar::LoadBalance	typeref:typename:std::shared_ptr<LoadBalance>	access:public
ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<LoadBalanceItem> ptr;$/;"	t	class:sylar::LoadBalanceItem	typeref:typename:std::shared_ptr<LoadBalanceItem>	access:public
ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<RoundRobinLoadBalance> ptr;$/;"	t	class:sylar::RoundRobinLoadBalance	typeref:typename:std::shared_ptr<RoundRobinLoadBalance>	access:public
ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<SDLoadBalance> ptr;$/;"	t	class:sylar::SDLoadBalance	typeref:typename:std::shared_ptr<SDLoadBalance>	access:public
ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<WeightLoadBalance> ptr;$/;"	t	class:sylar::WeightLoadBalance	typeref:typename:std::shared_ptr<WeightLoadBalance>	access:public
ptr	sylar/sylar/streams/service_discovery.h	/^    typedef std::shared_ptr<IServiceDiscovery> ptr;$/;"	t	class:sylar::IServiceDiscovery	typeref:typename:std::shared_ptr<IServiceDiscovery>	access:public
ptr	sylar/sylar/streams/service_discovery.h	/^    typedef std::shared_ptr<ServiceItemInfo> ptr;$/;"	t	class:sylar::ServiceItemInfo	typeref:typename:std::shared_ptr<ServiceItemInfo>	access:public
ptr	sylar/sylar/streams/service_discovery.h	/^    typedef std::shared_ptr<ZKServiceDiscovery> ptr;$/;"	t	class:sylar::ZKServiceDiscovery	typeref:typename:std::shared_ptr<ZKServiceDiscovery>	access:public
ptr	sylar/sylar/streams/socket_stream.h	/^    typedef std::shared_ptr<SocketStream> ptr;$/;"	t	class:sylar::SocketStream	typeref:typename:std::shared_ptr<SocketStream>	access:public
ptr	sylar/sylar/streams/zlib_stream.h	/^    typedef std::shared_ptr<ZlibStream> ptr;$/;"	t	class:sylar::ZlibStream	typeref:typename:std::shared_ptr<ZlibStream>	access:public
ptr	sylar/sylar/tcp_server.h	/^    typedef std::shared_ptr<TcpServer> ptr;$/;"	t	class:sylar::TcpServer	typeref:typename:std::shared_ptr<TcpServer>	access:public
ptr	sylar/sylar/tcp_server.h	/^    typedef std::shared_ptr<TcpServerConf> ptr;$/;"	t	struct:sylar::TcpServerConf	typeref:typename:std::shared_ptr<TcpServerConf>	access:public
ptr	sylar/sylar/thread.h	/^    typedef std::shared_ptr<Thread> ptr;$/;"	t	class:sylar::Thread	typeref:typename:std::shared_ptr<Thread>	access:public
ptr	sylar/sylar/timer.h	/^    typedef std::shared_ptr<Timer> ptr;$/;"	t	class:sylar::Timer	typeref:typename:std::shared_ptr<Timer>	access:public
ptr	sylar/sylar/uri.h	/^    typedef std::shared_ptr<Uri> ptr;$/;"	t	class:sylar::Uri	typeref:typename:std::shared_ptr<Uri>	access:public
ptr	sylar/sylar/util.h	/^    typedef std::shared_ptr<SpeedLimit> ptr;$/;"	t	class:sylar::SpeedLimit	typeref:typename:std::shared_ptr<SpeedLimit>	access:public
ptr	sylar/sylar/util/crypto_util.h	/^    typedef std::shared_ptr<RSACipher> ptr;$/;"	t	class:sylar::RSACipher	typeref:typename:std::shared_ptr<RSACipher>	access:public
ptr	sylar/sylar/worker.h	/^    typedef std::shared_ptr<WorkerGroup> ptr;$/;"	t	class:sylar::WorkerGroup	typeref:typename:std::shared_ptr<WorkerGroup>	access:public
ptr	sylar/sylar/zk_client.h	/^    typedef std::shared_ptr<ZKClient> ptr;$/;"	t	class:sylar::ZKClient	typeref:typename:std::shared_ptr<ZKClient>	access:public
ptr	sylar/template/template/my_module.h	/^    typedef std::shared_ptr<MyModule> ptr;$/;"	t	class:name_space::MyModule	typeref:typename:std::shared_ptr<MyModule>	access:public
publicDecrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::publicDecrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,std::string & to,int padding)
publicDecrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::publicDecrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,void * to,int padding)
publicDecrypt	sylar/sylar/util/crypto_util.h	/^    int32_t publicDecrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,std::string & to,int padding=RSA_NO_PADDING)
publicDecrypt	sylar/sylar/util/crypto_util.h	/^    int32_t publicDecrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,void * to,int padding=RSA_NO_PADDING)
publicEncrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::publicEncrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,std::string & to,int padding)
publicEncrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::publicEncrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,void * to,int padding)
publicEncrypt	sylar/sylar/util/crypto_util.h	/^    int32_t publicEncrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,std::string & to,int padding=RSA_NO_PADDING)
publicEncrypt	sylar/sylar/util/crypto_util.h	/^    int32_t publicEncrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,void * to,int padding=RSA_NO_PADDING)
qnxnto	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	build/CMakeFiles/3.16.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
query	sylar/sylar/db/db.h	/^    virtual ISQLData::ptr query() = 0;$/;"	p	class:sylar::IStmt	typeref:typename:ISQLData::ptr	access:public	signature:()
query	sylar/sylar/db/db.h	/^    virtual ISQLData::ptr query(const char* format, ...) = 0;$/;"	p	class:sylar::ISQLQuery	typeref:typename:ISQLData::ptr	access:public	signature:(const char * format,...)
query	sylar/sylar/db/db.h	/^    virtual ISQLData::ptr query(const std::string& sql) = 0;$/;"	p	class:sylar::ISQLQuery	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & sql)
query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQL::query(const char* format, ...) {$/;"	f	class:sylar::MySQL	typeref:typename:ISQLData::ptr	signature:(const char * format,...)
query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQL::query(const char* format, va_list ap) {$/;"	f	class:sylar::MySQL	typeref:typename:ISQLData::ptr	signature:(const char * format,va_list ap)
query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQL::query(const std::string& sql) {$/;"	f	class:sylar::MySQL	typeref:typename:ISQLData::ptr	signature:(const std::string & sql)
query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLManager::query(const std::string& name, const char* format, ...) {$/;"	f	class:sylar::MySQLManager	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const char * format,...)
query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLManager::query(const std::string& name, const char* format, va_list ap) {$/;"	f	class:sylar::MySQLManager	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const char * format,va_list ap)
query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLManager::query(const std::string& name, const std::string& sql) {$/;"	f	class:sylar::MySQLManager	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const std::string & sql)
query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLStmt::query() {$/;"	f	class:sylar::MySQLStmt	typeref:typename:ISQLData::ptr	signature:()
query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query() override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:ISQLData::ptr	access:public	signature:()
query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query(const char* format, ...) override;$/;"	p	class:sylar::MySQL	typeref:typename:ISQLData::ptr	access:public	signature:(const char * format,...)
query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query(const char* format, va_list ap); $/;"	p	class:sylar::MySQL	typeref:typename:ISQLData::ptr	access:public	signature:(const char * format,va_list ap)
query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query(const std::string& name, const char* format, ...);$/;"	p	class:sylar::MySQLManager	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const char * format,...)
query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query(const std::string& name, const char* format, va_list ap); $/;"	p	class:sylar::MySQLManager	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const char * format,va_list ap)
query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query(const std::string& name, const std::string& sql);$/;"	p	class:sylar::MySQLManager	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const std::string & sql)
query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query(const std::string& sql) override;$/;"	p	class:sylar::MySQL	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & sql)
query	sylar/sylar/db/sqlite3.cc	/^ISQLData::ptr SQLite3::query(const char* format, ...) {$/;"	f	class:sylar::SQLite3	typeref:typename:ISQLData::ptr	signature:(const char * format,...)
query	sylar/sylar/db/sqlite3.cc	/^ISQLData::ptr SQLite3::query(const std::string& sql) {$/;"	f	class:sylar::SQLite3	typeref:typename:ISQLData::ptr	signature:(const std::string & sql)
query	sylar/sylar/db/sqlite3.cc	/^ISQLData::ptr SQLite3Manager::query(const std::string& name, const char* format, ...) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const char * format,...)
query	sylar/sylar/db/sqlite3.cc	/^ISQLData::ptr SQLite3Manager::query(const std::string& name, const char* format, va_list ap) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const char * format,va_list ap)
query	sylar/sylar/db/sqlite3.cc	/^ISQLData::ptr SQLite3Manager::query(const std::string& name, const std::string& sql) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const std::string & sql)
query	sylar/sylar/db/sqlite3.cc	/^ISQLData::ptr SQLite3Stmt::query() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:ISQLData::ptr	signature:()
query	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr query() override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:ISQLData::ptr	access:public	signature:()
query	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr query(const char* format, ...) override;$/;"	p	class:sylar::SQLite3	typeref:typename:ISQLData::ptr	access:public	signature:(const char * format,...)
query	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr query(const std::string& name, const char* format, ...);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const char * format,...)
query	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr query(const std::string& name, const char* format, va_list ap); $/;"	p	class:sylar::SQLite3Manager	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const char * format,va_list ap)
query	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr query(const std::string& name, const std::string& sql);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const std::string & sql)
query	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr query(const std::string& sql) override;$/;"	p	class:sylar::SQLite3	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & sql)
query	sylar/sylar/ns/ns_client.cc	/^RockResult::ptr NSClient::query() {$/;"	f	class:sylar::ns::NSClient	typeref:typename:RockResult::ptr	signature:()
query	sylar/sylar/ns/ns_client.h	/^    RockResult::ptr query();$/;"	p	class:sylar::ns::NSClient	typeref:typename:RockResult::ptr	access:public	signature:()
queryData	sylar/sylar/streams/service_discovery.cc	/^bool ZKServiceDiscovery::queryData(const std::string& domain, const std::string& service) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:bool	signature:(const std::string & domain,const std::string & service)
queryData	sylar/sylar/streams/service_discovery.h	/^    bool queryData(const std::string& domain, const std::string& service);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:bool	access:private	signature:(const std::string & domain,const std::string & service)
queryInfo	sylar/sylar/streams/service_discovery.cc	/^bool ZKServiceDiscovery::queryInfo(const std::string& domain, const std::string& service) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:bool	signature:(const std::string & domain,const std::string & service)
queryInfo	sylar/sylar/streams/service_discovery.h	/^    bool queryInfo(const std::string& domain, const std::string& service);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:bool	access:private	signature:(const std::string & domain,const std::string & service)
queryServer	sylar/sylar/streams/service_discovery.cc	/^void IServiceDiscovery::queryServer(const std::string& domain, const std::string& service) {$/;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	signature:(const std::string & domain,const std::string & service)
queryServer	sylar/sylar/streams/service_discovery.h	/^    void queryServer(const std::string& domain, const std::string& service);$/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(const std::string & domain,const std::string & service)
queryStmt	sylar/sylar/db/mysql.h	/^    ISQLData::ptr queryStmt(const char* stmt, Args&&... args);$/;"	p	class:sylar::MySQL	typeref:typename:ISQLData::ptr	access:public	signature:(const char * stmt,Args &&...args)
queryStmt	sylar/sylar/db/mysql.h	/^ISQLData::ptr MySQL::queryStmt(const char* stmt, Args&&... args) {$/;"	f	class:sylar::MySQL	typeref:typename:ISQLData::ptr	signature:(const char * stmt,Args &&...args)
queryStmt	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr queryStmt(const char* stmt, const Args&... args);$/;"	p	class:sylar::SQLite3	typeref:typename:ISQLData::ptr	access:public	signature:(const char * stmt,const Args &...args)
queryStmt	sylar/sylar/db/sqlite3.h	/^ISQLData::ptr SQLite3::queryStmt(const char* stmt, const Args&... args) {$/;"	f	class:sylar::SQLite3	typeref:typename:ISQLData::ptr	signature:(const char * stmt,const Args &...args)
query_start	sylar/sylar/http/http11_parser.h	/^  size_t query_start;$/;"	m	struct:http_parser	typeref:typename:size_t	access:public
query_string	sylar/sylar/http/http11_parser.h	/^  element_cb query_string;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
quick_hash	sylar/sylar/util/hash_util.cc	/^uint32_t quick_hash(const char * str) {$/;"	f	namespace:sylar	typeref:typename:uint32_t	signature:(const char * str)
quick_hash	sylar/sylar/util/hash_util.cc	/^uint32_t quick_hash(const void* tmp, uint32_t size) {$/;"	f	namespace:sylar	typeref:typename:uint32_t	signature:(const void * tmp,uint32_t size)
quick_hash	sylar/sylar/util/hash_util.h	/^uint32_t quick_hash(const char * str);$/;"	p	namespace:sylar	typeref:typename:uint32_t	signature:(const char * str)
quick_hash	sylar/sylar/util/hash_util.h	/^uint32_t quick_hash(const void* str, uint32_t size);$/;"	p	namespace:sylar	typeref:typename:uint32_t	signature:(const void * str,uint32_t size)
ra_advance_until	sylar/sylar/ds/roaring.c	/^extern inline int32_t ra_advance_until(const roaring_array_t *ra, uint16_t x,$/;"	p	typeref:typename:int32_t	file:	signature:(const roaring_array_t * ra,uint16_t x,int32_t pos)
ra_advance_until	sylar/sylar/ds/roaring.h	/^static inline int32_t ra_advance_until(const roaring_array_t *ra, uint16_t x,$/;"	f	typeref:typename:int32_t	signature:(const roaring_array_t * ra,uint16_t x,int32_t pos)
ra_advance_until_freeing	sylar/sylar/ds/roaring.c	/^int32_t ra_advance_until_freeing(roaring_array_t *ra, uint16_t x, int32_t pos) {$/;"	f	typeref:typename:int32_t	signature:(roaring_array_t * ra,uint16_t x,int32_t pos)
ra_advance_until_freeing	sylar/sylar/ds/roaring.h	/^int32_t ra_advance_until_freeing(roaring_array_t *ra, uint16_t x, int32_t pos);$/;"	p	typeref:typename:int32_t	signature:(roaring_array_t * ra,uint16_t x,int32_t pos)
ra_append	sylar/sylar/ds/roaring.c	/^void ra_append(roaring_array_t *ra, uint16_t key, void *container,$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,uint16_t key,void * container,uint8_t typecode)
ra_append	sylar/sylar/ds/roaring.h	/^void ra_append(roaring_array_t *ra, uint16_t s, void *c, uint8_t typecode);$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra,uint16_t s,void * c,uint8_t typecode)
ra_append_copies_after	sylar/sylar/ds/roaring.c	/^void ra_append_copies_after(roaring_array_t *ra, const roaring_array_t *sa,$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,const roaring_array_t * sa,uint16_t before_start,bool copy_on_write)
ra_append_copies_after	sylar/sylar/ds/roaring.h	/^void ra_append_copies_after(roaring_array_t *ra, const roaring_array_t *sa,$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra,const roaring_array_t * sa,uint16_t before_start,bool copy_on_write)
ra_append_copies_until	sylar/sylar/ds/roaring.c	/^void ra_append_copies_until(roaring_array_t *ra, const roaring_array_t *sa,$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,const roaring_array_t * sa,uint16_t stopping_key,bool copy_on_write)
ra_append_copies_until	sylar/sylar/ds/roaring.h	/^void ra_append_copies_until(roaring_array_t *ra, const roaring_array_t *sa,$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra,const roaring_array_t * sa,uint16_t stopping_key,bool copy_on_write)
ra_append_copy	sylar/sylar/ds/roaring.c	/^void ra_append_copy(roaring_array_t *ra, const roaring_array_t *sa,$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,const roaring_array_t * sa,uint16_t index,bool copy_on_write)
ra_append_copy	sylar/sylar/ds/roaring.h	/^void ra_append_copy(roaring_array_t *ra, const roaring_array_t *sa,$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra,const roaring_array_t * sa,uint16_t index,bool copy_on_write)
ra_append_copy_range	sylar/sylar/ds/roaring.c	/^void ra_append_copy_range(roaring_array_t *ra, const roaring_array_t *sa,$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,const roaring_array_t * sa,int32_t start_index,int32_t end_index,bool copy_on_write)
ra_append_copy_range	sylar/sylar/ds/roaring.h	/^void ra_append_copy_range(roaring_array_t *ra, const roaring_array_t *sa,$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra,const roaring_array_t * sa,int32_t start_index,int32_t end_index,bool copy_on_write)
ra_append_move_range	sylar/sylar/ds/roaring.c	/^void ra_append_move_range(roaring_array_t *ra, roaring_array_t *sa,$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,roaring_array_t * sa,int32_t start_index,int32_t end_index)
ra_append_move_range	sylar/sylar/ds/roaring.h	/^void ra_append_move_range(roaring_array_t *ra, roaring_array_t *sa,$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra,roaring_array_t * sa,int32_t start_index,int32_t end_index)
ra_append_range	sylar/sylar/ds/roaring.c	/^void ra_append_range(roaring_array_t *ra, roaring_array_t *sa,$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,roaring_array_t * sa,int32_t start_index,int32_t end_index,bool copy_on_write)
ra_append_range	sylar/sylar/ds/roaring.h	/^void ra_append_range(roaring_array_t *ra, roaring_array_t *sa,$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra,roaring_array_t * sa,int32_t start_index,int32_t end_index,bool copy_on_write)
ra_clear	sylar/sylar/ds/roaring.c	/^void ra_clear(roaring_array_t *ra) {$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra)
ra_clear	sylar/sylar/ds/roaring.h	/^void ra_clear(roaring_array_t *r);$/;"	p	typeref:typename:void	signature:(roaring_array_t * r)
ra_clear_containers	sylar/sylar/ds/roaring.c	/^void ra_clear_containers(roaring_array_t *ra) {$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra)
ra_clear_containers	sylar/sylar/ds/roaring.h	/^void ra_clear_containers(roaring_array_t *ra);$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra)
ra_clear_without_containers	sylar/sylar/ds/roaring.c	/^void ra_clear_without_containers(roaring_array_t *ra) {$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra)
ra_clear_without_containers	sylar/sylar/ds/roaring.h	/^void ra_clear_without_containers(roaring_array_t *r);$/;"	p	typeref:typename:void	signature:(roaring_array_t * r)
ra_copy	sylar/sylar/ds/roaring.c	/^bool ra_copy(const roaring_array_t *source, roaring_array_t *dest,$/;"	f	typeref:typename:bool	signature:(const roaring_array_t * source,roaring_array_t * dest,bool copy_on_write)
ra_copy	sylar/sylar/ds/roaring.h	/^bool ra_copy(const roaring_array_t *source, roaring_array_t *dest,$/;"	p	typeref:typename:bool	signature:(const roaring_array_t * source,roaring_array_t * dest,bool copy_on_write)
ra_copy_range	sylar/sylar/ds/roaring.c	/^void ra_copy_range(roaring_array_t *ra, uint32_t begin, uint32_t end,$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,uint32_t begin,uint32_t end,uint32_t new_begin)
ra_copy_range	sylar/sylar/ds/roaring.h	/^void ra_copy_range(roaring_array_t *ra, uint32_t begin, uint32_t end,$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra,uint32_t begin,uint32_t end,uint32_t new_begin)
ra_create	sylar/sylar/ds/roaring.h	/^roaring_array_t *ra_create(void);$/;"	p	typeref:typename:roaring_array_t *	signature:(void)
ra_downsize	sylar/sylar/ds/roaring.c	/^void ra_downsize(roaring_array_t *ra, int32_t new_length) {$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,int32_t new_length)
ra_downsize	sylar/sylar/ds/roaring.h	/^void ra_downsize(roaring_array_t *ra, int32_t new_length);$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra,int32_t new_length)
ra_get_container	sylar/sylar/ds/roaring.c	/^void *ra_get_container(roaring_array_t *ra, uint16_t x, uint8_t *typecode) {$/;"	f	typeref:typename:void *	signature:(roaring_array_t * ra,uint16_t x,uint8_t * typecode)
ra_get_container_at_index	sylar/sylar/ds/roaring.c	/^extern inline void *ra_get_container_at_index(const roaring_array_t *ra, uint16_t i,$/;"	p	typeref:typename:void *	file:	signature:(const roaring_array_t * ra,uint16_t i,uint8_t * typecode)
ra_get_container_at_index	sylar/sylar/ds/roaring.c	/^extern inline void *ra_get_container_at_index(const roaring_array_t *ra,$/;"	p	typeref:typename:void *	file:	signature:(const roaring_array_t * ra,uint16_t i,uint8_t * typecode)
ra_get_container_at_index	sylar/sylar/ds/roaring.h	/^inline void *ra_get_container_at_index(const roaring_array_t *ra, uint16_t i,$/;"	f	typeref:typename:void *	signature:(const roaring_array_t * ra,uint16_t i,uint8_t * typecode)
ra_get_index	sylar/sylar/ds/roaring.c	/^extern inline int32_t ra_get_index(const roaring_array_t *ra, uint16_t x);$/;"	p	typeref:typename:int32_t	file:	signature:(const roaring_array_t * ra,uint16_t x)
ra_get_index	sylar/sylar/ds/roaring.h	/^inline int32_t ra_get_index(const roaring_array_t *ra, uint16_t x) {$/;"	f	typeref:typename:int32_t	signature:(const roaring_array_t * ra,uint16_t x)
ra_get_key_at_index	sylar/sylar/ds/roaring.c	/^uint16_t ra_get_key_at_index(const roaring_array_t *ra, uint16_t i) {$/;"	f	typeref:typename:uint16_t	signature:(const roaring_array_t * ra,uint16_t i)
ra_get_key_at_index	sylar/sylar/ds/roaring.h	/^uint16_t ra_get_key_at_index(const roaring_array_t *ra, uint16_t i);$/;"	p	typeref:typename:uint16_t	signature:(const roaring_array_t * ra,uint16_t i)
ra_get_size	sylar/sylar/ds/roaring.c	/^extern inline int32_t ra_get_size(const roaring_array_t *ra);$/;"	p	typeref:typename:int32_t	file:	signature:(const roaring_array_t * ra)
ra_get_size	sylar/sylar/ds/roaring.h	/^inline int32_t ra_get_size(const roaring_array_t *ra) { return ra->size; }$/;"	f	typeref:typename:int32_t	signature:(const roaring_array_t * ra)
ra_get_writable_container	sylar/sylar/ds/roaring.c	/^void *ra_get_writable_container(roaring_array_t *ra, uint16_t x,$/;"	f	typeref:typename:void *	signature:(roaring_array_t * ra,uint16_t x,uint8_t * typecode)
ra_get_writable_container_at_index	sylar/sylar/ds/roaring.c	/^void *ra_get_writable_container_at_index(roaring_array_t *ra, uint16_t i,$/;"	f	typeref:typename:void *	signature:(roaring_array_t * ra,uint16_t i,uint8_t * typecode)
ra_has_run_container	sylar/sylar/ds/roaring.c	/^bool ra_has_run_container(const roaring_array_t *ra) {$/;"	f	typeref:typename:bool	signature:(const roaring_array_t * ra)
ra_has_run_container	sylar/sylar/ds/roaring.h	/^bool ra_has_run_container(const roaring_array_t *ra);$/;"	p	typeref:typename:bool	signature:(const roaring_array_t * ra)
ra_init	sylar/sylar/ds/roaring.c	/^void ra_init(roaring_array_t *new_ra) {$/;"	f	typeref:typename:void	signature:(roaring_array_t * new_ra)
ra_init	sylar/sylar/ds/roaring.h	/^void ra_init(roaring_array_t *t);$/;"	p	typeref:typename:void	signature:(roaring_array_t * t)
ra_init_with_capacity	sylar/sylar/ds/roaring.c	/^bool ra_init_with_capacity(roaring_array_t *new_ra, uint32_t cap) {$/;"	f	typeref:typename:bool	signature:(roaring_array_t * new_ra,uint32_t cap)
ra_init_with_capacity	sylar/sylar/ds/roaring.h	/^bool ra_init_with_capacity(roaring_array_t *new_ra, uint32_t cap);$/;"	p	typeref:typename:bool	signature:(roaring_array_t * new_ra,uint32_t cap)
ra_insert_new_key_value_at	sylar/sylar/ds/roaring.c	/^void ra_insert_new_key_value_at(roaring_array_t *ra, int32_t i, uint16_t key,$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,int32_t i,uint16_t key,void * container,uint8_t typecode)
ra_insert_new_key_value_at	sylar/sylar/ds/roaring.h	/^void ra_insert_new_key_value_at(roaring_array_t *ra, int32_t i, uint16_t key,$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra,int32_t i,uint16_t key,void * container,uint8_t typecode)
ra_overwrite	sylar/sylar/ds/roaring.c	/^bool ra_overwrite(const roaring_array_t *source, roaring_array_t *dest,$/;"	f	typeref:typename:bool	signature:(const roaring_array_t * source,roaring_array_t * dest,bool copy_on_write)
ra_overwrite	sylar/sylar/ds/roaring.h	/^bool ra_overwrite(const roaring_array_t *source, roaring_array_t *dest,$/;"	p	typeref:typename:bool	signature:(const roaring_array_t * source,roaring_array_t * dest,bool copy_on_write)
ra_portable_deserialize	sylar/sylar/ds/roaring.c	/^bool ra_portable_deserialize(roaring_array_t *answer, const char *buf, const size_t maxbytes, si/;"	f	typeref:typename:bool	signature:(roaring_array_t * answer,const char * buf,const size_t maxbytes,size_t * readbytes)
ra_portable_deserialize	sylar/sylar/ds/roaring.h	/^bool ra_portable_deserialize(roaring_array_t *ra, const char *buf, const size_t maxbytes, size_t/;"	p	typeref:typename:bool	signature:(roaring_array_t * ra,const char * buf,const size_t maxbytes,size_t * readbytes)
ra_portable_deserialize_size	sylar/sylar/ds/roaring.c	/^size_t ra_portable_deserialize_size(const char *buf, const size_t maxbytes) {$/;"	f	typeref:typename:size_t	signature:(const char * buf,const size_t maxbytes)
ra_portable_deserialize_size	sylar/sylar/ds/roaring.h	/^size_t ra_portable_deserialize_size(const char *buf, const size_t maxbytes);$/;"	p	typeref:typename:size_t	signature:(const char * buf,const size_t maxbytes)
ra_portable_header_size	sylar/sylar/ds/roaring.c	/^uint32_t ra_portable_header_size(const roaring_array_t *ra) {$/;"	f	typeref:typename:uint32_t	signature:(const roaring_array_t * ra)
ra_portable_header_size	sylar/sylar/ds/roaring.h	/^uint32_t ra_portable_header_size(const roaring_array_t *ra);$/;"	p	typeref:typename:uint32_t	signature:(const roaring_array_t * ra)
ra_portable_serialize	sylar/sylar/ds/roaring.c	/^size_t ra_portable_serialize(const roaring_array_t *ra, char *buf) {$/;"	f	typeref:typename:size_t	signature:(const roaring_array_t * ra,char * buf)
ra_portable_serialize	sylar/sylar/ds/roaring.h	/^size_t ra_portable_serialize(const roaring_array_t *ra, char *buf);$/;"	p	typeref:typename:size_t	signature:(const roaring_array_t * ra,char * buf)
ra_portable_size_in_bytes	sylar/sylar/ds/roaring.c	/^size_t ra_portable_size_in_bytes(const roaring_array_t *ra) {$/;"	f	typeref:typename:size_t	signature:(const roaring_array_t * ra)
ra_portable_size_in_bytes	sylar/sylar/ds/roaring.h	/^size_t ra_portable_size_in_bytes(const roaring_array_t *ra);$/;"	p	typeref:typename:size_t	signature:(const roaring_array_t * ra)
ra_range_uint32_array	sylar/sylar/ds/roaring.c	/^bool ra_range_uint32_array(const roaring_array_t *ra, size_t offset, size_t limit, uint32_t *ans/;"	f	typeref:typename:bool	signature:(const roaring_array_t * ra,size_t offset,size_t limit,uint32_t * ans)
ra_range_uint32_array	sylar/sylar/ds/roaring.h	/^bool ra_range_uint32_array(const roaring_array_t *ra, size_t offset, size_t limit, uint32_t *ans/;"	p	typeref:typename:bool	signature:(const roaring_array_t * ra,size_t offset,size_t limit,uint32_t * ans)
ra_remove_at_index	sylar/sylar/ds/roaring.c	/^void ra_remove_at_index(roaring_array_t *ra, int32_t i) {$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,int32_t i)
ra_remove_at_index	sylar/sylar/ds/roaring.h	/^void ra_remove_at_index(roaring_array_t *ra, int32_t i);$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra,int32_t i)
ra_remove_at_index_and_free	sylar/sylar/ds/roaring.c	/^void ra_remove_at_index_and_free(roaring_array_t *ra, int32_t i) {$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,int32_t i)
ra_remove_at_index_and_free	sylar/sylar/ds/roaring.h	/^void ra_remove_at_index_and_free(roaring_array_t *ra, int32_t i);$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra,int32_t i)
ra_replace_key_and_container_at_index	sylar/sylar/ds/roaring.c	/^extern inline void ra_replace_key_and_container_at_index(roaring_array_t *ra,$/;"	p	typeref:typename:void	file:	signature:(roaring_array_t * ra,int32_t i,uint16_t key,void * c,uint8_t typecode)
ra_replace_key_and_container_at_index	sylar/sylar/ds/roaring.h	/^inline void ra_replace_key_and_container_at_index(roaring_array_t *ra,$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,int32_t i,uint16_t key,void * c,uint8_t typecode)
ra_reset	sylar/sylar/ds/roaring.c	/^void ra_reset(roaring_array_t *ra) {$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra)
ra_reset	sylar/sylar/ds/roaring.h	/^void ra_reset(roaring_array_t *ra);$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra)
ra_set_container_at_index	sylar/sylar/ds/roaring.c	/^extern inline void ra_set_container_at_index(const roaring_array_t *ra,$/;"	p	typeref:typename:void	file:	signature:(const roaring_array_t * ra,int32_t i,void * c,uint8_t typecode)
ra_set_container_at_index	sylar/sylar/ds/roaring.h	/^inline void ra_set_container_at_index(const roaring_array_t *ra, int32_t i,$/;"	f	typeref:typename:void	signature:(const roaring_array_t * ra,int32_t i,void * c,uint8_t typecode)
ra_shift_tail	sylar/sylar/ds/roaring.c	/^void ra_shift_tail(roaring_array_t *ra, int32_t count, int32_t distance) {$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,int32_t count,int32_t distance)
ra_shift_tail	sylar/sylar/ds/roaring.h	/^void ra_shift_tail(roaring_array_t *ra, int32_t count, int32_t distance);$/;"	p	typeref:typename:void	signature:(roaring_array_t * ra,int32_t count,int32_t distance)
ra_shrink_to_fit	sylar/sylar/ds/roaring.c	/^int ra_shrink_to_fit(roaring_array_t *ra) {$/;"	f	typeref:typename:int	signature:(roaring_array_t * ra)
ra_shrink_to_fit	sylar/sylar/ds/roaring.h	/^int ra_shrink_to_fit(roaring_array_t *ra);$/;"	p	typeref:typename:int	signature:(roaring_array_t * ra)
ra_size_in_bytes	sylar/sylar/ds/roaring.c	/^size_t ra_size_in_bytes(roaring_array_t *ra) {$/;"	f	typeref:typename:size_t	signature:(roaring_array_t * ra)
ra_to_uint32_array	sylar/sylar/ds/roaring.c	/^void ra_to_uint32_array(const roaring_array_t *ra, uint32_t *ans) {$/;"	f	typeref:typename:void	signature:(const roaring_array_t * ra,uint32_t * ans)
ra_to_uint32_array	sylar/sylar/ds/roaring.h	/^void ra_to_uint32_array(const roaring_array_t *ra, uint32_t *ans);$/;"	p	typeref:typename:void	signature:(const roaring_array_t * ra,uint32_t * ans)
ra_unshare_container_at_index	sylar/sylar/ds/roaring.c	/^extern inline void ra_unshare_container_at_index(roaring_array_t *ra,$/;"	p	typeref:typename:void	file:	signature:(roaring_array_t * ra,uint16_t i)
ra_unshare_container_at_index	sylar/sylar/ds/roaring.h	/^static inline void ra_unshare_container_at_index(roaring_array_t *ra,$/;"	f	typeref:typename:void	signature:(roaring_array_t * ra,uint16_t i)
ragelmaker	sylar/cmake/utils.cmake	/^function(ragelmaker src_rl outputlist outputdir)$/;"	f
random_string	sylar/sylar/util/hash_util.cc	/^std::string random_string(size_t len, const std::string& chars) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(size_t len,const std::string & chars)
random_string	sylar/sylar/util/hash_util.h	/^std::string random_string(size_t len$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(size_t len,const std::string & chars="")
rangeUint32Array	sylar/sylar/ds/roaring.hh	/^    void rangeUint32Array(uint32_t *ans, size_t offset, size_t limit) const {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(uint32_t * ans,size_t offset,size_t limit) const
rank	sylar/sylar/ds/roaring.hh	/^    uint64_t rank(uint32_t x) const { return roaring_bitmap_rank(&roaring, x); }$/;"	f	class:Roaring	typeref:typename:uint64_t	access:public	signature:(uint32_t x) const
rank	sylar/sylar/ds/roaring.hh	/^    uint64_t rank(uint64_t x) const {$/;"	f	class:Roaring64Map	typeref:typename:uint64_t	access:public	signature:(uint64_t x) const
rbegin	sylar/sylar/ds/bitmap.h	/^    iterator_reverse rbegin() { return iterator_reverse(this);}$/;"	f	class:sylar::ds::Bitmap	typeref:typename:iterator_reverse	access:public	signature:()
rbegin	sylar/sylar/ds/roaring.hh	/^    const_reverse_iterator rbegin() const;$/;"	p	class:Roaring	typeref:typename:const_reverse_iterator	access:public	signature:() const
rbegin	sylar/sylar/ds/roaring.hh	/^    const_reverse_iterator rbegin() const;$/;"	p	class:Roaring64Map	typeref:typename:const_reverse_iterator	access:public	signature:() const
rbegin	sylar/sylar/ds/roaring.hh	/^inline Roaring64MapSetBitReverseIterator Roaring64Map::rbegin() const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64MapSetBitReverseIterator	signature:() const
rbegin	sylar/sylar/ds/roaring.hh	/^inline RoaringSetBitReverseIterator Roaring::rbegin() const {$/;"	f	class:Roaring	typeref:typename:RoaringSetBitReverseIterator	signature:() const
rbegin	sylar/sylar/ds/roaring_bitmap.h	/^    reverse_iterator rbegin() const { return m_bitmap.rbegin();}$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:reverse_iterator	access:public	signature:() const
rbegin_new	sylar/sylar/ds/bitmap.cc	/^Bitmap::iterator_base::ptr Bitmap::rbegin_new() {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap::iterator_base::ptr	signature:()
rbegin_new	sylar/sylar/ds/bitmap.h	/^    typename iterator_base::ptr rbegin_new();$/;"	p	class:sylar::ds::Bitmap	typeref:typename:iterator_base::ptr	access:public	signature:()
rcallback	sylar/sylar/ds/hash_map.h	/^    typedef std::function<bool(const K& k, const V& v)> rcallback;$/;"	t	class:sylar::ds::HashMap	access:public
rcallback	sylar/sylar/ds/hash_multimap.h	/^    typedef std::function<bool(const K& k, const V* v, int)> rcallback;$/;"	t	class:sylar::ds::HashMultimap	access:public
rdlock	sylar/sylar/mutex.h	/^    void rdlock() {$/;"	f	class:sylar::RWMutex	typeref:typename:void	access:public	signature:()
rdlock	sylar/sylar/mutex.h	/^    void rdlock() {}$/;"	f	class:sylar::NullRWMutex	typeref:typename:void	access:public	signature:()
rds	sylar/sylar/db/redis.h	/^        FoxRedis* rds;$/;"	m	struct:sylar::FoxRedis::Ctx	typeref:typename:FoxRedis *	access:public
rds	sylar/sylar/db/redis.h	/^        FoxRedisCluster* rds;$/;"	m	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:FoxRedisCluster *	access:public
read	sylar/sylar/bytearray.cc	/^void ByteArray::read(void* buf, size_t size) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(void * buf,size_t size)
read	sylar/sylar/bytearray.cc	/^void ByteArray::read(void* buf, size_t size, size_t position) const {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(void * buf,size_t size,size_t position) const
read	sylar/sylar/bytearray.h	/^    void read(void* buf, size_t size);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(void * buf,size_t size)
read	sylar/sylar/bytearray.h	/^    void read(void* buf, size_t size, size_t position) const;$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(void * buf,size_t size,size_t position) const
read	sylar/sylar/ds/roaring.hh	/^    static Roaring read(const char *buf, bool portable = true) {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(const char * buf,bool portable=true)
read	sylar/sylar/ds/roaring.hh	/^    static Roaring64Map read(const char *buf, bool portable = true) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(const char * buf,bool portable=true)
read	sylar/sylar/hook.cc	/^ssize_t read(int fd, void *buf, size_t count) {$/;"	f	typeref:typename:ssize_t	signature:(int fd,void * buf,size_t count)
read	sylar/sylar/iomanager.h	/^        EventContext read;$/;"	m	struct:sylar::IOManager::FdContext	typeref:typename:EventContext	access:public
read	sylar/sylar/stream.h	/^    virtual int read(ByteArray::ptr ba, size_t length) = 0;$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
read	sylar/sylar/stream.h	/^    virtual int read(void* buffer, size_t length) = 0;$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(void * buffer,size_t length)
read	sylar/sylar/streams/socket_stream.cc	/^int SocketStream::read(ByteArray::ptr ba, size_t length) {$/;"	f	class:sylar::SocketStream	typeref:typename:int	signature:(ByteArray::ptr ba,size_t length)
read	sylar/sylar/streams/socket_stream.cc	/^int SocketStream::read(void* buffer, size_t length) {$/;"	f	class:sylar::SocketStream	typeref:typename:int	signature:(void * buffer,size_t length)
read	sylar/sylar/streams/socket_stream.h	/^    virtual int read(ByteArray::ptr ba, size_t length) override;$/;"	p	class:sylar::SocketStream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
read	sylar/sylar/streams/socket_stream.h	/^    virtual int read(void* buffer, size_t length) override;$/;"	p	class:sylar::SocketStream	typeref:typename:int	access:public	signature:(void * buffer,size_t length)
read	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::read(ByteArray::ptr ba, size_t length) {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(ByteArray::ptr ba,size_t length)
read	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::read(void* buffer, size_t length) {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(void * buffer,size_t length)
read	sylar/sylar/streams/zlib_stream.h	/^    virtual int read(ByteArray::ptr ba, size_t length) override;$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
read	sylar/sylar/streams/zlib_stream.h	/^    virtual int read(void* buffer, size_t length) override;$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:public	signature:(void * buffer,size_t length)
readDouble	sylar/sylar/bytearray.cc	/^double   ByteArray::readDouble() {$/;"	f	class:sylar::ByteArray	typeref:typename:double	signature:()
readDouble	sylar/sylar/bytearray.h	/^    double   readDouble();$/;"	p	class:sylar::ByteArray	typeref:typename:double	access:public	signature:()
readFint16	sylar/sylar/bytearray.cc	/^int16_t  ByteArray::readFint16() {$/;"	f	class:sylar::ByteArray	typeref:typename:int16_t	signature:()
readFint16	sylar/sylar/bytearray.h	/^    int16_t  readFint16();$/;"	p	class:sylar::ByteArray	typeref:typename:int16_t	access:public	signature:()
readFint32	sylar/sylar/bytearray.cc	/^int32_t  ByteArray::readFint32() {$/;"	f	class:sylar::ByteArray	typeref:typename:int32_t	signature:()
readFint32	sylar/sylar/bytearray.h	/^    int32_t  readFint32();$/;"	p	class:sylar::ByteArray	typeref:typename:int32_t	access:public	signature:()
readFint64	sylar/sylar/bytearray.cc	/^int64_t  ByteArray::readFint64() {$/;"	f	class:sylar::ByteArray	typeref:typename:int64_t	signature:()
readFint64	sylar/sylar/bytearray.h	/^    int64_t  readFint64();$/;"	p	class:sylar::ByteArray	typeref:typename:int64_t	access:public	signature:()
readFint8	sylar/sylar/bytearray.cc	/^int8_t   ByteArray::readFint8() {$/;"	f	class:sylar::ByteArray	typeref:typename:int8_t	signature:()
readFint8	sylar/sylar/bytearray.h	/^    int8_t   readFint8();$/;"	p	class:sylar::ByteArray	typeref:typename:int8_t	access:public	signature:()
readFixSize	sylar/sylar/stream.cc	/^int Stream::readFixSize(ByteArray::ptr ba, size_t length) {$/;"	f	class:sylar::Stream	typeref:typename:int	signature:(ByteArray::ptr ba,size_t length)
readFixSize	sylar/sylar/stream.cc	/^int Stream::readFixSize(void* buffer, size_t length) {$/;"	f	class:sylar::Stream	typeref:typename:int	signature:(void * buffer,size_t length)
readFixSize	sylar/sylar/stream.h	/^    virtual int readFixSize(ByteArray::ptr ba, size_t length);$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
readFixSize	sylar/sylar/stream.h	/^    virtual int readFixSize(void* buffer, size_t length);$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(void * buffer,size_t length)
readFloat	sylar/sylar/bytearray.cc	/^float    ByteArray::readFloat() {$/;"	f	class:sylar::ByteArray	typeref:typename:float	signature:()
readFloat	sylar/sylar/bytearray.h	/^    float    readFloat();$/;"	p	class:sylar::ByteArray	typeref:typename:float	access:public	signature:()
readFrom	sylar/sylar/ds/array.h	/^    bool readFrom(std::istream& is, uint64_t speed = -1) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(std::istream & is,uint64_t speed=-1)
readFrom	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::readFrom(sylar::ByteArray::ptr ba) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(sylar::ByteArray::ptr ba)
readFrom	sylar/sylar/ds/bitmap.h	/^    bool readFrom(sylar::ByteArray::ptr ba);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:(sylar::ByteArray::ptr ba)
readFrom	sylar/sylar/ds/dict.h	/^    bool readFrom(std::istream& is, uint64_t speed = -1) {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:public	signature:(std::istream & is,uint64_t speed=-1)
readFrom	sylar/sylar/ds/dict.h	/^    bool readFrom(std::istream& is, uint64_t speed = -1) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:bool	access:public	signature:(std::istream & is,uint64_t speed=-1)
readFrom	sylar/sylar/ds/hash_map.h	/^    bool readFrom(std::istream& is, uint64_t speed = -1) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:public	signature:(std::istream & is,uint64_t speed=-1)
readFrom	sylar/sylar/ds/hash_multimap.h	/^    bool readFrom(std::istream& is, uint64_t speed = -1) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(std::istream & is,uint64_t speed=-1)
readFrom	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::readFrom(sylar::ByteArray::ptr ba) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:(sylar::ByteArray::ptr ba)
readFrom	sylar/sylar/ds/roaring_bitmap.h	/^    bool readFrom(sylar::ByteArray::ptr ba);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:(sylar::ByteArray::ptr ba)
readFromFile	sylar/sylar/bytearray.cc	/^bool ByteArray::readFromFile(const std::string& name) {$/;"	f	class:sylar::ByteArray	typeref:typename:bool	signature:(const std::string & name)
readFromFile	sylar/sylar/bytearray.h	/^    bool readFromFile(const std::string& name);$/;"	p	class:sylar::ByteArray	typeref:typename:bool	access:public	signature:(const std::string & name)
readFuint16	sylar/sylar/bytearray.cc	/^uint16_t ByteArray::readFuint16() {$/;"	f	class:sylar::ByteArray	typeref:typename:uint16_t	signature:()
readFuint16	sylar/sylar/bytearray.h	/^    uint16_t readFuint16();$/;"	p	class:sylar::ByteArray	typeref:typename:uint16_t	access:public	signature:()
readFuint32	sylar/sylar/bytearray.cc	/^uint32_t ByteArray::readFuint32() {$/;"	f	class:sylar::ByteArray	typeref:typename:uint32_t	signature:()
readFuint32	sylar/sylar/bytearray.h	/^    uint32_t readFuint32();$/;"	p	class:sylar::ByteArray	typeref:typename:uint32_t	access:public	signature:()
readFuint64	sylar/sylar/bytearray.cc	/^uint64_t ByteArray::readFuint64() {$/;"	f	class:sylar::ByteArray	typeref:typename:uint64_t	signature:()
readFuint64	sylar/sylar/bytearray.h	/^    uint64_t readFuint64();$/;"	p	class:sylar::ByteArray	typeref:typename:uint64_t	access:public	signature:()
readFuint8	sylar/sylar/bytearray.cc	/^uint8_t  ByteArray::readFuint8() {$/;"	f	class:sylar::ByteArray	typeref:typename:uint8_t	signature:()
readFuint8	sylar/sylar/bytearray.h	/^    uint8_t  readFuint8();$/;"	p	class:sylar::ByteArray	typeref:typename:uint8_t	access:public	signature:()
readInt32	sylar/sylar/bytearray.cc	/^int32_t  ByteArray::readInt32() {$/;"	f	class:sylar::ByteArray	typeref:typename:int32_t	signature:()
readInt32	sylar/sylar/bytearray.h	/^    int32_t  readInt32();$/;"	p	class:sylar::ByteArray	typeref:typename:int32_t	access:public	signature:()
readInt64	sylar/sylar/bytearray.cc	/^int64_t  ByteArray::readInt64() {$/;"	f	class:sylar::ByteArray	typeref:typename:int64_t	signature:()
readInt64	sylar/sylar/bytearray.h	/^    int64_t  readInt64();$/;"	p	class:sylar::ByteArray	typeref:typename:int64_t	access:public	signature:()
readSafe	sylar/sylar/ds/roaring.hh	/^    static Roaring readSafe(const char *buf, size_t maxbytes) {$/;"	f	class:Roaring	typeref:typename:Roaring	access:public	signature:(const char * buf,size_t maxbytes)
readSafe	sylar/sylar/ds/roaring.hh	/^    static Roaring64Map readSafe(const char *buf, size_t maxbytes) {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64Map	access:public	signature:(const char * buf,size_t maxbytes)
readStringF16	sylar/sylar/bytearray.cc	/^std::string ByteArray::readStringF16() {$/;"	f	class:sylar::ByteArray	typeref:typename:std::string	signature:()
readStringF16	sylar/sylar/bytearray.h	/^    std::string readStringF16();$/;"	p	class:sylar::ByteArray	typeref:typename:std::string	access:public	signature:()
readStringF32	sylar/sylar/bytearray.cc	/^std::string ByteArray::readStringF32() {$/;"	f	class:sylar::ByteArray	typeref:typename:std::string	signature:()
readStringF32	sylar/sylar/bytearray.h	/^    std::string readStringF32();$/;"	p	class:sylar::ByteArray	typeref:typename:std::string	access:public	signature:()
readStringF64	sylar/sylar/bytearray.cc	/^std::string ByteArray::readStringF64() {$/;"	f	class:sylar::ByteArray	typeref:typename:std::string	signature:()
readStringF64	sylar/sylar/bytearray.h	/^    std::string readStringF64();$/;"	p	class:sylar::ByteArray	typeref:typename:std::string	access:public	signature:()
readStringVint	sylar/sylar/bytearray.cc	/^std::string ByteArray::readStringVint() {$/;"	f	class:sylar::ByteArray	typeref:typename:std::string	signature:()
readStringVint	sylar/sylar/bytearray.h	/^    std::string readStringVint();$/;"	p	class:sylar::ByteArray	typeref:typename:std::string	access:public	signature:()
readUint32	sylar/sylar/bytearray.cc	/^uint32_t ByteArray::readUint32() {$/;"	f	class:sylar::ByteArray	typeref:typename:uint32_t	signature:()
readUint32	sylar/sylar/bytearray.h	/^    uint32_t readUint32();$/;"	p	class:sylar::ByteArray	typeref:typename:uint32_t	access:public	signature:()
readUint64	sylar/sylar/bytearray.cc	/^uint64_t ByteArray::readUint64() {$/;"	f	class:sylar::ByteArray	typeref:typename:uint64_t	signature:()
readUint64	sylar/sylar/bytearray.h	/^    uint64_t readUint64();$/;"	p	class:sylar::ByteArray	typeref:typename:uint64_t	access:public	signature:()
read_cb	sylar/sylar/db/fox_thread.cc	/^void FoxThread::read_cb(evutil_socket_t sock, short which, void* args) {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:(evutil_socket_t sock,short which,void * args)
read_cb	sylar/sylar/db/fox_thread.h	/^    static void read_cb(evutil_socket_t sock, short which, void* args);$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:private	signature:(evutil_socket_t sock,short which,void * args)
read_fun	sylar/sylar/hook.h	/^typedef ssize_t (*read_fun)(int fd, void *buf, size_t count);$/;"	t	typeref:typename:ssize_t (*)(int fd,void * buf,size_t count)
readv	sylar/sylar/hook.cc	/^ssize_t readv(int fd, const struct iovec *iov, int iovcnt) {$/;"	f	typeref:typename:ssize_t	signature:(int fd,const struct iovec * iov,int iovcnt)
readv_fun	sylar/sylar/hook.h	/^typedef ssize_t (*readv_fun)(int fd, const struct iovec *iov, int iovcnt);$/;"	t	typeref:typename:ssize_t (*)(int fd,const struct iovec * iov,int iovcnt)
real_daemon	sylar/sylar/daemon.cc	/^static int real_daemon(int argc, char** argv,$/;"	f	namespace:sylar	typeref:typename:int	file:	signature:(int argc,char ** argv,std::function<int (int argc,char ** argv)> main_cb)
real_start	sylar/sylar/daemon.cc	/^static int real_start(int argc, char** argv,$/;"	f	namespace:sylar	typeref:typename:int	file:	signature:(int argc,char ** argv,std::function<int (int argc,char ** argv)> main_cb)
realloc_array	sylar/sylar/ds/roaring.c	/^static bool realloc_array(roaring_array_t *ra, int32_t new_capacity) {$/;"	f	typeref:typename:bool	file:	signature:(roaring_array_t * ra,int32_t new_capacity)
reason_phrase	sylar/sylar/http/httpclient_parser.h	/^  element_cb reason_phrase;$/;"	m	struct:httpclient_parser	typeref:typename:element_cb	access:public
rebuild_cache	build/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache	build/sylar/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache/fast	build/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
rebuild_cache/fast	build/sylar/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
reconnect	sylar/sylar/db/redis.cc	/^bool Redis::reconnect() {$/;"	f	class:sylar::Redis	typeref:typename:bool	signature:()
reconnect	sylar/sylar/db/redis.cc	/^bool RedisCluster::reconnect() {$/;"	f	class:sylar::RedisCluster	typeref:typename:bool	signature:()
reconnect	sylar/sylar/db/redis.h	/^    virtual bool reconnect() = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:bool	access:public	signature:()
reconnect	sylar/sylar/db/redis.h	/^    virtual bool reconnect();$/;"	p	class:sylar::Redis	typeref:typename:bool	access:public	signature:()
reconnect	sylar/sylar/db/redis.h	/^    virtual bool reconnect();$/;"	p	class:sylar::RedisCluster	typeref:typename:bool	access:public	signature:()
reconnect	sylar/sylar/socket.cc	/^bool Socket::reconnect(uint64_t timeout_ms) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(uint64_t timeout_ms)
reconnect	sylar/sylar/socket.h	/^    virtual bool reconnect(uint64_t timeout_ms = -1);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:(uint64_t timeout_ms=-1)
reconnect	sylar/sylar/zk_client.cc	/^bool ZKClient::reconnect() {$/;"	f	class:sylar::ZKClient	typeref:typename:bool	signature:()
reconnect	sylar/sylar/zk_client.h	/^    bool reconnect();$/;"	p	class:sylar::ZKClient	typeref:typename:bool	access:public	signature:()
recoverRoomAtIndex	sylar/sylar/ds/roaring.h	/^static inline void recoverRoomAtIndex(run_container_t *run, uint16_t index) {$/;"	f	typeref:typename:void	signature:(run_container_t * run,uint16_t index)
recv	sylar/sylar/hook.cc	/^ssize_t recv(int sockfd, void *buf, size_t len, int flags) {$/;"	f	typeref:typename:ssize_t	signature:(int sockfd,void * buf,size_t len,int flags)
recv	sylar/sylar/socket.cc	/^int SSLSocket::recv(iovec* buffers, size_t length, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(iovec * buffers,size_t length,int flags)
recv	sylar/sylar/socket.cc	/^int SSLSocket::recv(void* buffer, size_t length, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(void * buffer,size_t length,int flags)
recv	sylar/sylar/socket.cc	/^int Socket::recv(iovec* buffers, size_t length, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(iovec * buffers,size_t length,int flags)
recv	sylar/sylar/socket.cc	/^int Socket::recv(void* buffer, size_t length, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(void * buffer,size_t length,int flags)
recv	sylar/sylar/socket.h	/^    virtual int recv(iovec* buffers, size_t length, int flags = 0) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(iovec * buffers,size_t length,int flags=0)
recv	sylar/sylar/socket.h	/^    virtual int recv(iovec* buffers, size_t length, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(iovec * buffers,size_t length,int flags=0)
recv	sylar/sylar/socket.h	/^    virtual int recv(void* buffer, size_t length, int flags = 0) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(void * buffer,size_t length,int flags=0)
recv	sylar/sylar/socket.h	/^    virtual int recv(void* buffer, size_t length, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(void * buffer,size_t length,int flags=0)
recvFrom	sylar/sylar/socket.cc	/^int SSLSocket::recvFrom(iovec* buffers, size_t length, Address::ptr from, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(iovec * buffers,size_t length,Address::ptr from,int flags)
recvFrom	sylar/sylar/socket.cc	/^int SSLSocket::recvFrom(void* buffer, size_t length, Address::ptr from, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(void * buffer,size_t length,Address::ptr from,int flags)
recvFrom	sylar/sylar/socket.cc	/^int Socket::recvFrom(iovec* buffers, size_t length, Address::ptr from, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(iovec * buffers,size_t length,Address::ptr from,int flags)
recvFrom	sylar/sylar/socket.cc	/^int Socket::recvFrom(void* buffer, size_t length, Address::ptr from, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(void * buffer,size_t length,Address::ptr from,int flags)
recvFrom	sylar/sylar/socket.h	/^    virtual int recvFrom(iovec* buffers, size_t length, Address::ptr from, int flags = 0) overri/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(iovec * buffers,size_t length,Address::ptr from,int flags=0)
recvFrom	sylar/sylar/socket.h	/^    virtual int recvFrom(iovec* buffers, size_t length, Address::ptr from, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(iovec * buffers,size_t length,Address::ptr from,int flags=0)
recvFrom	sylar/sylar/socket.h	/^    virtual int recvFrom(void* buffer, size_t length, Address::ptr from, int flags = 0) override/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(void * buffer,size_t length,Address::ptr from,int flags=0)
recvFrom	sylar/sylar/socket.h	/^    virtual int recvFrom(void* buffer, size_t length, Address::ptr from, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(void * buffer,size_t length,Address::ptr from,int flags=0)
recvMessage	sylar/sylar/http/ws_connection.cc	/^WSFrameMessage::ptr WSConnection::recvMessage() {$/;"	f	class:sylar::http::WSConnection	typeref:typename:WSFrameMessage::ptr	signature:()
recvMessage	sylar/sylar/http/ws_connection.h	/^    WSFrameMessage::ptr recvMessage();$/;"	p	class:sylar::http::WSConnection	typeref:typename:WSFrameMessage::ptr	access:public	signature:()
recvMessage	sylar/sylar/http/ws_session.cc	/^WSFrameMessage::ptr WSSession::recvMessage() {$/;"	f	class:sylar::http::WSSession	typeref:typename:WSFrameMessage::ptr	signature:()
recvMessage	sylar/sylar/http/ws_session.h	/^    WSFrameMessage::ptr recvMessage();$/;"	p	class:sylar::http::WSSession	typeref:typename:WSFrameMessage::ptr	access:public	signature:()
recvRequest	sylar/sylar/http/http_session.cc	/^HttpRequest::ptr HttpSession::recvRequest() {$/;"	f	class:sylar::http::HttpSession	typeref:typename:HttpRequest::ptr	signature:()
recvRequest	sylar/sylar/http/http_session.h	/^    HttpRequest::ptr recvRequest();$/;"	p	class:sylar::http::HttpSession	typeref:typename:HttpRequest::ptr	access:public	signature:()
recvResponse	sylar/sylar/http/http_connection.cc	/^HttpResponse::ptr HttpConnection::recvResponse() {$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResponse::ptr	signature:()
recvResponse	sylar/sylar/http/http_connection.h	/^    HttpResponse::ptr recvResponse();$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResponse::ptr	access:public	signature:()
recv_fun	sylar/sylar/hook.h	/^typedef ssize_t (*recv_fun)(int sockfd, void *buf, size_t len, int flags);$/;"	t	typeref:typename:ssize_t (*)(int sockfd,void * buf,size_t len,int flags)
recvfrom	sylar/sylar/hook.cc	/^ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, sockle/;"	f	typeref:typename:ssize_t	signature:(int sockfd,void * buf,size_t len,int flags,struct sockaddr * src_addr,socklen_t * addrlen)
recvfrom_fun	sylar/sylar/hook.h	/^typedef ssize_t (*recvfrom_fun)(int sockfd, void *buf, size_t len, int flags, struct sockaddr *s/;"	t	typeref:typename:ssize_t (*)(int sockfd,void * buf,size_t len,int flags,struct sockaddr * src_addr,socklen_t * addrlen)
recvmsg	sylar/sylar/hook.cc	/^ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags) {$/;"	f	typeref:typename:ssize_t	signature:(int sockfd,struct msghdr * msg,int flags)
recvmsg_fun	sylar/sylar/hook.h	/^typedef ssize_t (*recvmsg_fun)(int sockfd, struct msghdr *msg, int flags);$/;"	t	typeref:typename:ssize_t (*)(int sockfd,struct msghdr * msg,int flags)
reference_type	sylar/sylar/ds/roaring.hh	/^    typedef uint32_t &reference_type;$/;"	t	class:RoaringSetBitForwardIterator	typeref:typename:uint32_t &	access:public
reference_type	sylar/sylar/ds/roaring.hh	/^    typedef uint32_t &reference_type;$/;"	t	class:RoaringSetBitReverseIterator	typeref:typename:uint32_t &	access:public
reference_type	sylar/sylar/ds/roaring.hh	/^    typedef uint64_t &reference_type;$/;"	t	class:Roaring64MapSetBitForwardIterator	typeref:typename:uint64_t &	access:public
reference_type	sylar/sylar/ds/roaring.hh	/^    typedef uint64_t &reference_type;$/;"	t	class:Roaring64MapSetBitReverseIterator	typeref:typename:uint64_t &	access:public
refresh	sylar/sylar/timer.cc	/^bool Timer::refresh() {$/;"	f	class:sylar::Timer	typeref:typename:bool	signature:()
refresh	sylar/sylar/timer.h	/^    bool refresh();$/;"	p	class:sylar::Timer	typeref:typename:bool	access:public	signature:()
registerInfo	sylar/sylar/streams/service_discovery.cc	/^bool ZKServiceDiscovery::registerInfo(const std::string& domain, const std::string& service, $/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:bool	signature:(const std::string & domain,const std::string & service,const std::string & ip_and_port,const std::string & data)
registerInfo	sylar/sylar/streams/service_discovery.h	/^    bool registerInfo(const std::string& domain, const std::string& service, $/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:bool	access:private	signature:(const std::string & domain,const std::string & service,const std::string & ip_and_port,const std::string & data)
registerMySQL	sylar/sylar/db/mysql.cc	/^void MySQLManager::registerMySQL(const std::string& name, const std::map<std::string, std::strin/;"	f	class:sylar::MySQLManager	typeref:typename:void	signature:(const std::string & name,const std::map<std::string,std::string> & params)
registerMySQL	sylar/sylar/db/mysql.h	/^    void registerMySQL(const std::string& name, const std::map<std::string, std::string>& params/;"	p	class:sylar::MySQLManager	typeref:typename:void	access:public	signature:(const std::string & name,const std::map<std::string,std::string> & params)
registerSQLite3	sylar/sylar/db/sqlite3.cc	/^void SQLite3Manager::registerSQLite3(const std::string& name, const std::map<std::string, std::s/;"	f	class:sylar::SQLite3Manager	typeref:typename:void	signature:(const std::string & name,const std::map<std::string,std::string> & params)
registerSQLite3	sylar/sylar/db/sqlite3.h	/^    void registerSQLite3(const std::string& name, const std::map<std::string, std::string>& para/;"	p	class:sylar::SQLite3Manager	typeref:typename:void	access:public	signature:(const std::string & name,const std::map<std::string,std::string> & params)
registerServer	sylar/sylar/streams/service_discovery.cc	/^void IServiceDiscovery::registerServer(const std::string& domain, const std::string& service,$/;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	signature:(const std::string & domain,const std::string & service,const std::string & ip_and_port,const std::string & data)
registerServer	sylar/sylar/streams/service_discovery.h	/^    void registerServer(const std::string& domain, const std::string& service,$/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(const std::string & domain,const std::string & service,const std::string & ip_and_port,const std::string & data)
registerService	sylar/sylar/module.cc	/^void Module::registerService(const std::string& server_type,$/;"	f	class:sylar::Module	typeref:typename:void	signature:(const std::string & server_type,const std::string & domain,const std::string & service)
registerService	sylar/sylar/module.h	/^    void registerService(const std::string& server_type,$/;"	p	class:sylar::Module	typeref:typename:void	access:public	signature:(const std::string & server_type,const std::string & domain,const std::string & service)
rehash	sylar/sylar/ds/dict.h	/^    void rehash() {$/;"	f	class:sylar::ds::Dict	typeref:typename:void	access:public	signature:()
rehash	sylar/sylar/ds/hash_map.h	/^    void rehash() {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:public	signature:()
rehash	sylar/sylar/ds/hash_multimap.h	/^    void rehash() {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:void	access:public	signature:()
rehashUnlock	sylar/sylar/ds/dict.h	/^    void rehashUnlock() {$/;"	f	class:sylar::ds::Dict	typeref:typename:void	access:private	signature:()
rehashUnlock	sylar/sylar/ds/hash_map.h	/^    void rehashUnlock() {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:private	signature:()
rehashUnlock	sylar/sylar/ds/hash_multimap.h	/^    void rehashUnlock() {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:void	access:private	signature:()
releaseFoxThread	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::releaseFoxThread(FoxThread* t) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:(FoxThread * t)
releaseFoxThread	sylar/sylar/db/fox_thread.h	/^    void releaseFoxThread(FoxThread* t);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:private	signature:(FoxThread * t)
release_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_NODISCARD std::string* release_domain();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:PROTOBUF_NODISCARD std::string *	access:public	signature:()
release_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_NODISCARD std::string* release_domain();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:PROTOBUF_NODISCARD std::string *	access:public	signature:()
release_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* NodeInfo::release_domain() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:std::string *	signature:()
release_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* RegisterInfo::release_domain() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:std::string *	signature:()
release_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_NODISCARD std::string* release_ip();$/;"	p	class:sylar::ns::Node	typeref:typename:PROTOBUF_NODISCARD std::string *	access:public	signature:()
release_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* Node::release_ip() {$/;"	f	class:sylar::ns::Node	typeref:typename:std::string *	signature:()
release_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_NODISCARD ::sylar::ns::Node* release_node();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:PROTOBUF_NODISCARD::sylar::ns::Node *	access:public	signature:()
release_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* RegisterInfo::release_node() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::sylar::ns::Node *	signature:()
remove	sylar/sylar/ds/roaring.hh	/^    void remove(uint32_t x) { roaring_bitmap_remove(&roaring, x); }$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(uint32_t x)
remove	sylar/sylar/ds/roaring.hh	/^    void remove(uint32_t x) { roarings[0].remove(x); }$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(uint32_t x)
remove	sylar/sylar/ds/roaring.hh	/^    void remove(uint64_t x) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(uint64_t x)
removeChecked	sylar/sylar/ds/roaring.hh	/^    bool removeChecked(uint32_t x) {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(uint32_t x)
removeChecked	sylar/sylar/ds/roaring.hh	/^    bool removeChecked(uint32_t x) {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint32_t x)
removeChecked	sylar/sylar/ds/roaring.hh	/^    bool removeChecked(uint64_t x) {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint64_t x)
removeHelp	sylar/sylar/env.cc	/^void Env::removeHelp(const std::string& key) {$/;"	f	class:sylar::Env	typeref:typename:void	signature:(const std::string & key)
removeHelp	sylar/sylar/env.h	/^    void removeHelp(const std::string& key);$/;"	p	class:sylar::Env	typeref:typename:void	access:public	signature:(const std::string & key)
removeRunCompression	sylar/sylar/ds/roaring.hh	/^    bool removeRunCompression() {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:()
removeRunCompression	sylar/sylar/ds/roaring.hh	/^    bool removeRunCompression() {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:()
rend	sylar/sylar/ds/roaring.hh	/^    const_reverse_iterator rend() const;$/;"	p	class:Roaring64Map	typeref:typename:const_reverse_iterator	access:public	signature:() const
rend	sylar/sylar/ds/roaring.hh	/^    const_reverse_iterator& rend() const;$/;"	p	class:Roaring	typeref:typename:const_reverse_iterator &	access:public	signature:() const
rend	sylar/sylar/ds/roaring.hh	/^inline Roaring64MapSetBitReverseIterator Roaring64Map::rend() const {$/;"	f	class:Roaring64Map	typeref:typename:Roaring64MapSetBitReverseIterator	signature:() const
rend	sylar/sylar/ds/roaring.hh	/^inline RoaringSetBitReverseIterator &Roaring::rend() const {$/;"	f	class:Roaring	typeref:typename:RoaringSetBitReverseIterator &	signature:() const
rend	sylar/sylar/ds/roaring_bitmap.h	/^    reverse_iterator rend() const { return m_bitmap.rend();}$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:reverse_iterator	access:public	signature:() const
reopen	sylar/sylar/log.cc	/^bool FileLogAppender::reopen() {$/;"	f	class:sylar::FileLogAppender	typeref:typename:bool	signature:()
reopen	sylar/sylar/log.h	/^    bool reopen();$/;"	p	class:sylar::FileLogAppender	typeref:typename:bool	access:public	signature:()
replace	sylar/sylar/util/hash_util.cc	/^std::string replace(const std::string &str1, char find, char replaceWith) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & str1,char find,char replaceWith)
replace	sylar/sylar/util/hash_util.cc	/^std::string replace(const std::string &str1, char find, const std::string &replaceWith) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & str1,char find,const std::string & replaceWith)
replace	sylar/sylar/util/hash_util.cc	/^std::string replace(const std::string &str1, const std::string &find, const std::string &replace/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & str1,const std::string & find,const std::string & replaceWith)
replace	sylar/sylar/util/hash_util.h	/^std::string replace(const std::string &str, char find, char replaceWith);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & str,char find,char replaceWith)
replace	sylar/sylar/util/hash_util.h	/^std::string replace(const std::string &str, char find, const std::string &replaceWith);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & str,char find,const std::string & replaceWith)
replace	sylar/sylar/util/hash_util.h	/^std::string replace(const std::string &str, const std::string &find, const std::string &replaceW/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & str,const std::string & find,const std::string & replaceWith)
request	sylar/sylar/rock/rock_stream.cc	/^RockResult::ptr RockSDLoadBalance::request(const std::string& domain, const std::string& service/;"	f	class:sylar::RockSDLoadBalance	typeref:typename:RockResult::ptr	signature:(const std::string & domain,const std::string & service,RockRequest::ptr req,uint32_t timeout_ms,uint64_t idx)
request	sylar/sylar/rock/rock_stream.cc	/^RockResult::ptr RockStream::request(RockRequest::ptr req, uint32_t timeout_ms) {$/;"	f	class:sylar::RockStream	typeref:typename:RockResult::ptr	signature:(RockRequest::ptr req,uint32_t timeout_ms)
request	sylar/sylar/rock/rock_stream.h	/^        RockRequest::ptr request;$/;"	m	struct:sylar::RockStream::RockCtx	typeref:typename:RockRequest::ptr	access:public
request	sylar/sylar/rock/rock_stream.h	/^    RockResult::ptr request(RockRequest::ptr req, uint32_t timeout_ms);$/;"	p	class:sylar::RockStream	typeref:typename:RockResult::ptr	access:public	signature:(RockRequest::ptr req,uint32_t timeout_ms)
request	sylar/sylar/rock/rock_stream.h	/^    RockResult::ptr request(const std::string& domain, const std::string& service,$/;"	p	class:sylar::RockSDLoadBalance	typeref:typename:RockResult::ptr	access:public	signature:(const std::string & domain,const std::string & service,RockRequest::ptr req,uint32_t timeout_ms,uint64_t idx=-1)
request	sylar/sylar/rock/rock_stream.h	/^   RockRequest::ptr request;$/;"	m	struct:sylar::RockResult	typeref:typename:RockRequest::ptr	access:public
request_handler	sylar/sylar/rock/rock_stream.h	/^                               ,sylar::RockStream::ptr)> request_handler;$/;"	t	class:sylar::RockStream	access:public
request_method	sylar/sylar/http/http11_parser.h	/^  element_cb request_method;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
request_path	sylar/sylar/http/http11_parser.h	/^  element_cb request_path;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
request_uri	sylar/sylar/http/http11_parser.h	/^  element_cb request_uri;$/;"	m	struct:http_parser	typeref:typename:element_cb	access:public
reset	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::reset() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:()
reset	sylar/sylar/db/sqlite3.h	/^    int reset();$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:()
reset	sylar/sylar/fiber.cc	/^void Fiber::reset(std::function<void()> cb) {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:(std::function<void ()> cb)
reset	sylar/sylar/fiber.h	/^    void reset(std::function<void()> cb);$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:(std::function<void ()> cb)
reset	sylar/sylar/mutex.h	/^    void reset() { m_concurrency = 0;}$/;"	f	class:sylar::FiberSemaphore	typeref:typename:void	access:public	signature:()
reset	sylar/sylar/scheduler.h	/^        void reset() {$/;"	f	struct:sylar::Scheduler::FiberAndThread	typeref:typename:void	access:public	signature:()
reset	sylar/sylar/timer.cc	/^bool Timer::reset(uint64_t ms, bool from_now) {$/;"	f	class:sylar::Timer	typeref:typename:bool	signature:(uint64_t ms,bool from_now)
reset	sylar/sylar/timer.h	/^    bool reset(uint64_t ms, bool from_now);$/;"	p	class:sylar::Timer	typeref:typename:bool	access:public	signature:(uint64_t ms,bool from_now)
resetContext	sylar/sylar/iomanager.cc	/^void IOManager::FdContext::resetContext(EventContext& ctx) {$/;"	f	class:sylar::IOManager::FdContext	typeref:typename:void	signature:(EventContext & ctx)
resetContext	sylar/sylar/iomanager.h	/^        void resetContext(EventContext& ctx);$/;"	p	struct:sylar::IOManager::FdContext	typeref:typename:void	access:public	signature:(EventContext & ctx)
resize	sylar/sylar/ds/bitmap.cc	/^void Bitmap::resize(uint32_t size, bool v) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(uint32_t size,bool v)
resize	sylar/sylar/ds/bitmap.h	/^    void resize(uint32_t size, bool v = false);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(uint32_t size,bool v=false)
response	sylar/sylar/http/http_connection.h	/^    HttpResponse::ptr response;$/;"	m	struct:sylar::http::HttpResult	typeref:typename:HttpResponse::ptr	access:public
response	sylar/sylar/rock/rock_stream.h	/^        RockResponse::ptr response;$/;"	m	struct:sylar::RockStream::RockCtx	typeref:typename:RockResponse::ptr	access:public
response	sylar/sylar/rock/rock_stream.h	/^   RockResponse::ptr response;$/;"	m	struct:sylar::RockResult	typeref:typename:RockResponse::ptr	access:public
restart_count	sylar/sylar/daemon.h	/^    uint32_t restart_count = 0;$/;"	m	struct:sylar::ProcessInfo	typeref:typename:uint32_t	access:public
result	sylar/sylar/email/smtp.h	/^    int result;$/;"	m	struct:sylar::SmtpResult	typeref:typename:int	access:public
result	sylar/sylar/http/http_connection.h	/^    int result;$/;"	m	struct:sylar::http::HttpResult	typeref:typename:int	access:public
result	sylar/sylar/rock/rock_stream.h	/^   int32_t result;$/;"	m	struct:sylar::RockResult	typeref:typename:int32_t	access:public
result	sylar/sylar/streams/async_socket_stream.h	/^        uint32_t result;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:uint32_t	access:public
reverse_iterator	sylar/sylar/ds/roaring_bitmap.h	/^    typedef RoaringSetBitReverseIterator reverse_iterator;$/;"	t	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringSetBitReverseIterator	access:public
rforeach	sylar/sylar/ds/bitmap.cc	/^void Bitmap::rforeach(std::function<bool(uint32_t)> cb) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(std::function<bool (uint32_t)> cb)
rforeach	sylar/sylar/ds/bitmap.h	/^    void rforeach(std::function<bool(uint32_t)> cb);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(std::function<bool (uint32_t)> cb)
rforeach	sylar/sylar/ds/hash_map.h	/^    void rforeach(rcallback cb) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:public	signature:(rcallback cb)
rforeach	sylar/sylar/ds/hash_multimap.h	/^    void rforeach(rcallback cb) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:void	access:public	signature:(rcallback cb)
rforeach	sylar/sylar/ds/roaring_bitmap.cc	/^void RoaringBitmap::rforeach(std::function<bool(uint32_t)> cb) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:void	signature:(std::function<bool (uint32_t)> cb)
rforeach	sylar/sylar/ds/roaring_bitmap.h	/^    void rforeach(std::function<bool(uint32_t)> cb);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:void	access:public	signature:(std::function<bool (uint32_t)> cb)
rl_out	sylar/cmake/utils.cmake	/^    set(rl_out ${outputdir}\/${src_file}.rl.cc)$/;"	v	function:ragelmaker
rle16_count_greater	sylar/sylar/ds/roaring.h	/^static inline int32_t rle16_count_greater(const rle16_t* array, int32_t lenarray,$/;"	f	typeref:typename:int32_t	signature:(const rle16_t * array,int32_t lenarray,uint16_t key)
rle16_count_less	sylar/sylar/ds/roaring.h	/^static inline int32_t rle16_count_less(const rle16_t* array, int32_t lenarray,$/;"	f	typeref:typename:int32_t	signature:(const rle16_t * array,int32_t lenarray,uint16_t key)
rle16_find_run	sylar/sylar/ds/roaring.h	/^static inline int32_t rle16_find_run(const rle16_t *array, int32_t lenarray,$/;"	f	typeref:typename:int32_t	signature:(const rle16_t * array,int32_t lenarray,uint16_t ikey)
rle16_s	sylar/sylar/ds/roaring.h	/^struct rle16_s {$/;"	s
rle16_s::length	sylar/sylar/ds/roaring.h	/^    uint16_t length;$/;"	m	struct:rle16_s	typeref:typename:uint16_t	access:public
rle16_s::value	sylar/sylar/ds/roaring.h	/^    uint16_t value;$/;"	m	struct:rle16_s	typeref:typename:uint16_t	access:public
rle16_t	sylar/sylar/ds/roaring.h	/^typedef struct rle16_s rle16_t;$/;"	t	typeref:struct:rle16_s
roaring	sylar/sylar/ds/roaring.hh	/^    roaring_bitmap_t roaring;$/;"	m	class:Roaring	typeref:typename:roaring_bitmap_t	access:public
roaring_advance_uint32_iterator	sylar/sylar/ds/roaring.c	/^bool roaring_advance_uint32_iterator(roaring_uint32_iterator_t *it) {$/;"	f	typeref:typename:bool	signature:(roaring_uint32_iterator_t * it)
roaring_advance_uint32_iterator	sylar/sylar/ds/roaring.h	/^bool roaring_advance_uint32_iterator(roaring_uint32_iterator_t *it);$/;"	p	typeref:typename:bool	signature:(roaring_uint32_iterator_t * it)
roaring_array_s	sylar/sylar/ds/roaring.h	/^typedef struct roaring_array_s {$/;"	s
roaring_array_s::allocation_size	sylar/sylar/ds/roaring.h	/^    int32_t allocation_size;$/;"	m	struct:roaring_array_s	typeref:typename:int32_t	access:public
roaring_array_s::containers	sylar/sylar/ds/roaring.h	/^    void **containers;$/;"	m	struct:roaring_array_s	typeref:typename:void **	access:public
roaring_array_s::flags	sylar/sylar/ds/roaring.h	/^    uint8_t flags;$/;"	m	struct:roaring_array_s	typeref:typename:uint8_t	access:public
roaring_array_s::keys	sylar/sylar/ds/roaring.h	/^    uint16_t *keys;$/;"	m	struct:roaring_array_s	typeref:typename:uint16_t *	access:public
roaring_array_s::size	sylar/sylar/ds/roaring.h	/^    int32_t size;$/;"	m	struct:roaring_array_s	typeref:typename:int32_t	access:public
roaring_array_s::typecodes	sylar/sylar/ds/roaring.h	/^    uint8_t *typecodes;$/;"	m	struct:roaring_array_s	typeref:typename:uint8_t *	access:public
roaring_array_t	sylar/sylar/ds/roaring.h	/^} roaring_array_t;$/;"	t	typeref:struct:roaring_array_s
roaring_bitmap_add	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_add(roaring_bitmap_t *r, uint32_t val) {$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * r,uint32_t val)
roaring_bitmap_add	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_add(roaring_bitmap_t *r, uint32_t x);$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * r,uint32_t x)
roaring_bitmap_add_checked	sylar/sylar/ds/roaring.c	/^bool roaring_bitmap_add_checked(roaring_bitmap_t *r, uint32_t val) {$/;"	f	typeref:typename:bool	signature:(roaring_bitmap_t * r,uint32_t val)
roaring_bitmap_add_checked	sylar/sylar/ds/roaring.h	/^bool roaring_bitmap_add_checked(roaring_bitmap_t *r, uint32_t x);$/;"	p	typeref:typename:bool	signature:(roaring_bitmap_t * r,uint32_t x)
roaring_bitmap_add_many	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_add_many(roaring_bitmap_t *r, size_t n_args,$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * r,size_t n_args,const uint32_t * vals)
roaring_bitmap_add_many	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_add_many(roaring_bitmap_t *r, size_t n_args,$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * r,size_t n_args,const uint32_t * vals)
roaring_bitmap_add_range	sylar/sylar/ds/roaring.c	/^extern inline void roaring_bitmap_add_range(roaring_bitmap_t *ra, uint64_t min, uint64_t max);$/;"	p	typeref:typename:void	file:	signature:(roaring_bitmap_t * ra,uint64_t min,uint64_t max)
roaring_bitmap_add_range	sylar/sylar/ds/roaring.h	/^inline void roaring_bitmap_add_range(roaring_bitmap_t *ra, uint64_t min, uint64_t max) {$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * ra,uint64_t min,uint64_t max)
roaring_bitmap_add_range_closed	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_add_range_closed(roaring_bitmap_t *ra, uint32_t min, uint32_t max) {$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * ra,uint32_t min,uint32_t max)
roaring_bitmap_add_range_closed	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_add_range_closed(roaring_bitmap_t *ra, uint32_t min, uint32_t max);$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * ra,uint32_t min,uint32_t max)
roaring_bitmap_aligned_free	sylar/sylar/ds/roaring.h	/^static inline void roaring_bitmap_aligned_free(void *memblock) {$/;"	f	typeref:typename:void	signature:(void * memblock)
roaring_bitmap_aligned_malloc	sylar/sylar/ds/roaring.h	/^static inline void *roaring_bitmap_aligned_malloc(size_t alignment, size_t size) {$/;"	f	typeref:typename:void *	signature:(size_t alignment,size_t size)
roaring_bitmap_and	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_and(const roaring_bitmap_t *x1,$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_and	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_and(const roaring_bitmap_t *x1,$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_and_cardinality	sylar/sylar/ds/roaring.c	/^uint64_t roaring_bitmap_and_cardinality(const roaring_bitmap_t *x1,$/;"	f	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_and_cardinality	sylar/sylar/ds/roaring.h	/^uint64_t roaring_bitmap_and_cardinality(const roaring_bitmap_t *x1,$/;"	p	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_and_inplace	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_and_inplace(roaring_bitmap_t *x1,$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_and_inplace	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_and_inplace(roaring_bitmap_t *x1,$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_andnot	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_andnot(const roaring_bitmap_t *x1,$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_andnot	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_andnot(const roaring_bitmap_t *x1,$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_andnot_cardinality	sylar/sylar/ds/roaring.c	/^uint64_t roaring_bitmap_andnot_cardinality(const roaring_bitmap_t *x1,$/;"	f	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_andnot_cardinality	sylar/sylar/ds/roaring.h	/^uint64_t roaring_bitmap_andnot_cardinality(const roaring_bitmap_t *x1,$/;"	p	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_andnot_inplace	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_andnot_inplace(roaring_bitmap_t *x1,$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_andnot_inplace	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_andnot_inplace(roaring_bitmap_t *x1,$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_clear	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_clear(roaring_bitmap_t *r) {$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * r)
roaring_bitmap_clear	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_clear(roaring_bitmap_t *ra);$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * ra)
roaring_bitmap_contains	sylar/sylar/ds/roaring.c	/^extern inline bool roaring_bitmap_contains(const roaring_bitmap_t *r,$/;"	p	typeref:typename:bool	file:	signature:(const roaring_bitmap_t * r,uint32_t val)
roaring_bitmap_contains	sylar/sylar/ds/roaring.h	/^inline bool roaring_bitmap_contains(const roaring_bitmap_t *r, uint32_t val) {$/;"	f	typeref:typename:bool	signature:(const roaring_bitmap_t * r,uint32_t val)
roaring_bitmap_contains_range	sylar/sylar/ds/roaring.c	/^bool roaring_bitmap_contains_range(const roaring_bitmap_t *r, uint64_t range_start, uint64_t ran/;"	f	typeref:typename:bool	signature:(const roaring_bitmap_t * r,uint64_t range_start,uint64_t range_end)
roaring_bitmap_contains_range	sylar/sylar/ds/roaring.h	/^bool roaring_bitmap_contains_range(const roaring_bitmap_t *r, uint64_t range_start, uint64_t ran/;"	p	typeref:typename:bool	signature:(const roaring_bitmap_t * r,uint64_t range_start,uint64_t range_end)
roaring_bitmap_copy	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_copy(const roaring_bitmap_t *r) {$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * r)
roaring_bitmap_copy	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_copy(const roaring_bitmap_t *r);$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * r)
roaring_bitmap_create	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_create() {$/;"	f	typeref:typename:roaring_bitmap_t *	signature:()
roaring_bitmap_create	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_create(void);$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(void)
roaring_bitmap_create_with_capacity	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_create_with_capacity(uint32_t cap) {$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(uint32_t cap)
roaring_bitmap_create_with_capacity	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_create_with_capacity(uint32_t cap);$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(uint32_t cap)
roaring_bitmap_deserialize	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_deserialize(const void *buf) {$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(const void * buf)
roaring_bitmap_deserialize	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_deserialize(const void *buf);$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(const void * buf)
roaring_bitmap_equals	sylar/sylar/ds/roaring.c	/^bool roaring_bitmap_equals(const roaring_bitmap_t *ra1,$/;"	f	typeref:typename:bool	signature:(const roaring_bitmap_t * ra1,const roaring_bitmap_t * ra2)
roaring_bitmap_equals	sylar/sylar/ds/roaring.h	/^bool roaring_bitmap_equals(const roaring_bitmap_t *ra1,$/;"	p	typeref:typename:bool	signature:(const roaring_bitmap_t * ra1,const roaring_bitmap_t * ra2)
roaring_bitmap_flip	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_flip(const roaring_bitmap_t *x1,$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,uint64_t range_start,uint64_t range_end)
roaring_bitmap_flip	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_flip(const roaring_bitmap_t *x1,$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,uint64_t range_start,uint64_t range_end)
roaring_bitmap_flip_inplace	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_flip_inplace(roaring_bitmap_t *x1, uint64_t range_start,$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * x1,uint64_t range_start,uint64_t range_end)
roaring_bitmap_flip_inplace	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_flip_inplace(roaring_bitmap_t *x1, uint64_t range_start,$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * x1,uint64_t range_start,uint64_t range_end)
roaring_bitmap_free	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_free(const roaring_bitmap_t *r) {$/;"	f	typeref:typename:void	signature:(const roaring_bitmap_t * r)
roaring_bitmap_free	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_free(const roaring_bitmap_t *r);$/;"	p	typeref:typename:void	signature:(const roaring_bitmap_t * r)
roaring_bitmap_from_range	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_from_range(uint64_t min, uint64_t max,$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(uint64_t min,uint64_t max,uint32_t step)
roaring_bitmap_from_range	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_from_range(uint64_t min, uint64_t max,$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(uint64_t min,uint64_t max,uint32_t step)
roaring_bitmap_frozen_serialize	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_frozen_serialize(const roaring_bitmap_t *rb, char *buf) {$/;"	f	typeref:typename:void	signature:(const roaring_bitmap_t * rb,char * buf)
roaring_bitmap_frozen_serialize	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_frozen_serialize(const roaring_bitmap_t *ra, char *buf);$/;"	p	typeref:typename:void	signature:(const roaring_bitmap_t * ra,char * buf)
roaring_bitmap_frozen_size_in_bytes	sylar/sylar/ds/roaring.c	/^size_t roaring_bitmap_frozen_size_in_bytes(const roaring_bitmap_t *rb) {$/;"	f	typeref:typename:size_t	signature:(const roaring_bitmap_t * rb)
roaring_bitmap_frozen_size_in_bytes	sylar/sylar/ds/roaring.h	/^size_t roaring_bitmap_frozen_size_in_bytes(const roaring_bitmap_t *ra);$/;"	p	typeref:typename:size_t	signature:(const roaring_bitmap_t * ra)
roaring_bitmap_frozen_view	sylar/sylar/ds/roaring.c	/^roaring_bitmap_frozen_view(const char *buf, size_t length) {$/;"	f	typeref:typename:const roaring_bitmap_t *	signature:(const char * buf,size_t length)
roaring_bitmap_frozen_view	sylar/sylar/ds/roaring.h	/^const roaring_bitmap_t *roaring_bitmap_frozen_view(const char *buf, size_t length);$/;"	p	typeref:typename:const roaring_bitmap_t *	signature:(const char * buf,size_t length)
roaring_bitmap_get_cardinality	sylar/sylar/ds/roaring.c	/^uint64_t roaring_bitmap_get_cardinality(const roaring_bitmap_t *ra) {$/;"	f	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * ra)
roaring_bitmap_get_cardinality	sylar/sylar/ds/roaring.h	/^uint64_t roaring_bitmap_get_cardinality(const roaring_bitmap_t *ra);$/;"	p	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * ra)
roaring_bitmap_get_copy_on_write	sylar/sylar/ds/roaring.c	/^extern inline bool roaring_bitmap_get_copy_on_write(const roaring_bitmap_t* r);$/;"	p	typeref:typename:bool	file:	signature:(const roaring_bitmap_t * r)
roaring_bitmap_get_copy_on_write	sylar/sylar/ds/roaring.h	/^inline bool roaring_bitmap_get_copy_on_write(const roaring_bitmap_t* r) {$/;"	f	typeref:typename:bool	signature:(const roaring_bitmap_t * r)
roaring_bitmap_intersect	sylar/sylar/ds/roaring.c	/^bool roaring_bitmap_intersect(const roaring_bitmap_t *x1,$/;"	f	typeref:typename:bool	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_intersect	sylar/sylar/ds/roaring.h	/^bool roaring_bitmap_intersect(const roaring_bitmap_t *x1,$/;"	p	typeref:typename:bool	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_is_empty	sylar/sylar/ds/roaring.c	/^bool roaring_bitmap_is_empty(const roaring_bitmap_t *ra) {$/;"	f	typeref:typename:bool	signature:(const roaring_bitmap_t * ra)
roaring_bitmap_is_empty	sylar/sylar/ds/roaring.h	/^bool roaring_bitmap_is_empty(const roaring_bitmap_t *ra);$/;"	p	typeref:typename:bool	signature:(const roaring_bitmap_t * ra)
roaring_bitmap_is_strict_subset	sylar/sylar/ds/roaring.c	/^bool roaring_bitmap_is_strict_subset(const roaring_bitmap_t *ra1,$/;"	f	typeref:typename:bool	signature:(const roaring_bitmap_t * ra1,const roaring_bitmap_t * ra2)
roaring_bitmap_is_strict_subset	sylar/sylar/ds/roaring.h	/^bool roaring_bitmap_is_strict_subset(const roaring_bitmap_t *ra1,$/;"	p	typeref:typename:bool	signature:(const roaring_bitmap_t * ra1,const roaring_bitmap_t * ra2)
roaring_bitmap_is_subset	sylar/sylar/ds/roaring.c	/^bool roaring_bitmap_is_subset(const roaring_bitmap_t *ra1,$/;"	f	typeref:typename:bool	signature:(const roaring_bitmap_t * ra1,const roaring_bitmap_t * ra2)
roaring_bitmap_is_subset	sylar/sylar/ds/roaring.h	/^bool roaring_bitmap_is_subset(const roaring_bitmap_t *ra1,$/;"	p	typeref:typename:bool	signature:(const roaring_bitmap_t * ra1,const roaring_bitmap_t * ra2)
roaring_bitmap_jaccard_index	sylar/sylar/ds/roaring.c	/^double roaring_bitmap_jaccard_index(const roaring_bitmap_t *x1,$/;"	f	typeref:typename:double	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_jaccard_index	sylar/sylar/ds/roaring.h	/^double roaring_bitmap_jaccard_index(const roaring_bitmap_t *x1,$/;"	p	typeref:typename:double	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_lazy_or	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_lazy_or(const roaring_bitmap_t *x1,$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2,const bool bitsetconversion)
roaring_bitmap_lazy_or	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_lazy_or(const roaring_bitmap_t *x1,$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2,const bool bitsetconversion)
roaring_bitmap_lazy_or_inplace	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_lazy_or_inplace(roaring_bitmap_t *x1,$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * x1,const roaring_bitmap_t * x2,const bool bitsetconversion)
roaring_bitmap_lazy_or_inplace	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_lazy_or_inplace(roaring_bitmap_t *x1,$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * x1,const roaring_bitmap_t * x2,const bool bitsetconversion)
roaring_bitmap_lazy_xor	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_lazy_xor(const roaring_bitmap_t *x1,$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_lazy_xor	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_lazy_xor(const roaring_bitmap_t *x1,$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_lazy_xor_inplace	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_lazy_xor_inplace(roaring_bitmap_t *x1,$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_lazy_xor_inplace	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_lazy_xor_inplace(roaring_bitmap_t *x1,$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_maximum	sylar/sylar/ds/roaring.c	/^uint32_t roaring_bitmap_maximum(const roaring_bitmap_t *bm) {$/;"	f	typeref:typename:uint32_t	signature:(const roaring_bitmap_t * bm)
roaring_bitmap_maximum	sylar/sylar/ds/roaring.h	/^uint32_t roaring_bitmap_maximum(const roaring_bitmap_t *bm);$/;"	p	typeref:typename:uint32_t	signature:(const roaring_bitmap_t * bm)
roaring_bitmap_minimum	sylar/sylar/ds/roaring.c	/^uint32_t roaring_bitmap_minimum(const roaring_bitmap_t *bm) {$/;"	f	typeref:typename:uint32_t	signature:(const roaring_bitmap_t * bm)
roaring_bitmap_minimum	sylar/sylar/ds/roaring.h	/^uint32_t roaring_bitmap_minimum(const roaring_bitmap_t *bm);$/;"	p	typeref:typename:uint32_t	signature:(const roaring_bitmap_t * bm)
roaring_bitmap_of	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_of(size_t n_args, ...) {$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(size_t n_args,...)
roaring_bitmap_of	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_of(size_t n, ...);$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(size_t n,...)
roaring_bitmap_of_ptr	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_of_ptr(size_t n_args, const uint32_t *vals) {$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(size_t n_args,const uint32_t * vals)
roaring_bitmap_of_ptr	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_of_ptr(size_t n_args, const uint32_t *vals);$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(size_t n_args,const uint32_t * vals)
roaring_bitmap_or	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_or(const roaring_bitmap_t *x1,$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_or	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_or(const roaring_bitmap_t *x1,$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_or_cardinality	sylar/sylar/ds/roaring.c	/^uint64_t roaring_bitmap_or_cardinality(const roaring_bitmap_t *x1,$/;"	f	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_or_cardinality	sylar/sylar/ds/roaring.h	/^uint64_t roaring_bitmap_or_cardinality(const roaring_bitmap_t *x1,$/;"	p	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_or_inplace	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_or_inplace(roaring_bitmap_t *x1,$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_or_inplace	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_or_inplace(roaring_bitmap_t *x1,$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_or_many	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_or_many(size_t number,$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(size_t number,const roaring_bitmap_t ** x)
roaring_bitmap_or_many	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_or_many(size_t number,$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(size_t number,const roaring_bitmap_t ** x)
roaring_bitmap_or_many_heap	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_or_many_heap(uint32_t number,$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(uint32_t number,const roaring_bitmap_t ** x)
roaring_bitmap_or_many_heap	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_or_many_heap(uint32_t number,$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(uint32_t number,const roaring_bitmap_t ** x)
roaring_bitmap_overwrite	sylar/sylar/ds/roaring.c	/^bool roaring_bitmap_overwrite(roaring_bitmap_t *dest,$/;"	f	typeref:typename:bool	signature:(roaring_bitmap_t * dest,const roaring_bitmap_t * src)
roaring_bitmap_overwrite	sylar/sylar/ds/roaring.h	/^bool roaring_bitmap_overwrite(roaring_bitmap_t *dest,$/;"	p	typeref:typename:bool	signature:(roaring_bitmap_t * dest,const roaring_bitmap_t * src)
roaring_bitmap_portable_deserialize	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_portable_deserialize(const char *buf) {$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(const char * buf)
roaring_bitmap_portable_deserialize	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_portable_deserialize(const char *buf);$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(const char * buf)
roaring_bitmap_portable_deserialize_safe	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_portable_deserialize_safe(const char *buf, size_t maxbytes) {$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(const char * buf,size_t maxbytes)
roaring_bitmap_portable_deserialize_safe	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_portable_deserialize_safe(const char *buf, size_t maxbytes);$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(const char * buf,size_t maxbytes)
roaring_bitmap_portable_deserialize_size	sylar/sylar/ds/roaring.c	/^size_t roaring_bitmap_portable_deserialize_size(const char *buf, size_t maxbytes) {$/;"	f	typeref:typename:size_t	signature:(const char * buf,size_t maxbytes)
roaring_bitmap_portable_deserialize_size	sylar/sylar/ds/roaring.h	/^size_t roaring_bitmap_portable_deserialize_size(const char *buf, size_t maxbytes);$/;"	p	typeref:typename:size_t	signature:(const char * buf,size_t maxbytes)
roaring_bitmap_portable_serialize	sylar/sylar/ds/roaring.c	/^size_t roaring_bitmap_portable_serialize(const roaring_bitmap_t *ra,$/;"	f	typeref:typename:size_t	signature:(const roaring_bitmap_t * ra,char * buf)
roaring_bitmap_portable_serialize	sylar/sylar/ds/roaring.h	/^size_t roaring_bitmap_portable_serialize(const roaring_bitmap_t *ra, char *buf);$/;"	p	typeref:typename:size_t	signature:(const roaring_bitmap_t * ra,char * buf)
roaring_bitmap_portable_size_in_bytes	sylar/sylar/ds/roaring.c	/^size_t roaring_bitmap_portable_size_in_bytes(const roaring_bitmap_t *ra) {$/;"	f	typeref:typename:size_t	signature:(const roaring_bitmap_t * ra)
roaring_bitmap_portable_size_in_bytes	sylar/sylar/ds/roaring.h	/^size_t roaring_bitmap_portable_size_in_bytes(const roaring_bitmap_t *ra);$/;"	p	typeref:typename:size_t	signature:(const roaring_bitmap_t * ra)
roaring_bitmap_printf	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_printf(const roaring_bitmap_t *ra) {$/;"	f	typeref:typename:void	signature:(const roaring_bitmap_t * ra)
roaring_bitmap_printf	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_printf(const roaring_bitmap_t *ra);$/;"	p	typeref:typename:void	signature:(const roaring_bitmap_t * ra)
roaring_bitmap_printf_describe	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_printf_describe(const roaring_bitmap_t *ra) {$/;"	f	typeref:typename:void	signature:(const roaring_bitmap_t * ra)
roaring_bitmap_printf_describe	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_printf_describe(const roaring_bitmap_t *ra);$/;"	p	typeref:typename:void	signature:(const roaring_bitmap_t * ra)
roaring_bitmap_range_cardinality	sylar/sylar/ds/roaring.c	/^uint64_t roaring_bitmap_range_cardinality(const roaring_bitmap_t *ra,$/;"	f	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * ra,uint64_t range_start,uint64_t range_end)
roaring_bitmap_range_cardinality	sylar/sylar/ds/roaring.h	/^uint64_t roaring_bitmap_range_cardinality(const roaring_bitmap_t *ra,$/;"	p	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * ra,uint64_t range_start,uint64_t range_end)
roaring_bitmap_range_uint32_array	sylar/sylar/ds/roaring.c	/^bool roaring_bitmap_range_uint32_array(const roaring_bitmap_t *ra, size_t offset, size_t limit, /;"	f	typeref:typename:bool	signature:(const roaring_bitmap_t * ra,size_t offset,size_t limit,uint32_t * ans)
roaring_bitmap_range_uint32_array	sylar/sylar/ds/roaring.h	/^bool roaring_bitmap_range_uint32_array(const roaring_bitmap_t *ra, size_t offset, size_t limit, /;"	p	typeref:typename:bool	signature:(const roaring_bitmap_t * ra,size_t offset,size_t limit,uint32_t * ans)
roaring_bitmap_rank	sylar/sylar/ds/roaring.c	/^uint64_t roaring_bitmap_rank(const roaring_bitmap_t *bm, uint32_t x) {$/;"	f	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * bm,uint32_t x)
roaring_bitmap_rank	sylar/sylar/ds/roaring.h	/^uint64_t roaring_bitmap_rank(const roaring_bitmap_t *bm, uint32_t x);$/;"	p	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * bm,uint32_t x)
roaring_bitmap_remove	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_remove(roaring_bitmap_t *r, uint32_t val) {$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * r,uint32_t val)
roaring_bitmap_remove	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_remove(roaring_bitmap_t *r, uint32_t x);$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * r,uint32_t x)
roaring_bitmap_remove_checked	sylar/sylar/ds/roaring.c	/^bool roaring_bitmap_remove_checked(roaring_bitmap_t *r, uint32_t val) {$/;"	f	typeref:typename:bool	signature:(roaring_bitmap_t * r,uint32_t val)
roaring_bitmap_remove_checked	sylar/sylar/ds/roaring.h	/^bool roaring_bitmap_remove_checked(roaring_bitmap_t *r, uint32_t x);$/;"	p	typeref:typename:bool	signature:(roaring_bitmap_t * r,uint32_t x)
roaring_bitmap_remove_many	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_remove_many(roaring_bitmap_t *r, size_t n_args,$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * r,size_t n_args,const uint32_t * vals)
roaring_bitmap_remove_many	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_remove_many(roaring_bitmap_t *r, size_t n_args,$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * r,size_t n_args,const uint32_t * vals)
roaring_bitmap_remove_range	sylar/sylar/ds/roaring.c	/^extern inline void roaring_bitmap_remove_range(roaring_bitmap_t *ra, uint64_t min, uint64_t max)/;"	p	typeref:typename:void	file:	signature:(roaring_bitmap_t * ra,uint64_t min,uint64_t max)
roaring_bitmap_remove_range	sylar/sylar/ds/roaring.h	/^inline void roaring_bitmap_remove_range(roaring_bitmap_t *ra, uint64_t min, uint64_t max) {$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * ra,uint64_t min,uint64_t max)
roaring_bitmap_remove_range_closed	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_remove_range_closed(roaring_bitmap_t *ra, uint32_t min, uint32_t max) {$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * ra,uint32_t min,uint32_t max)
roaring_bitmap_remove_range_closed	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_remove_range_closed(roaring_bitmap_t *ra, uint32_t min, uint32_t max);$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * ra,uint32_t min,uint32_t max)
roaring_bitmap_remove_run_compression	sylar/sylar/ds/roaring.c	/^bool roaring_bitmap_remove_run_compression(roaring_bitmap_t *r) {$/;"	f	typeref:typename:bool	signature:(roaring_bitmap_t * r)
roaring_bitmap_remove_run_compression	sylar/sylar/ds/roaring.h	/^bool roaring_bitmap_remove_run_compression(roaring_bitmap_t *r);$/;"	p	typeref:typename:bool	signature:(roaring_bitmap_t * r)
roaring_bitmap_repair_after_lazy	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_repair_after_lazy(roaring_bitmap_t *ra) {$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * ra)
roaring_bitmap_repair_after_lazy	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_repair_after_lazy(roaring_bitmap_t *x1);$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * x1)
roaring_bitmap_run_optimize	sylar/sylar/ds/roaring.c	/^bool roaring_bitmap_run_optimize(roaring_bitmap_t *r) {$/;"	f	typeref:typename:bool	signature:(roaring_bitmap_t * r)
roaring_bitmap_run_optimize	sylar/sylar/ds/roaring.h	/^bool roaring_bitmap_run_optimize(roaring_bitmap_t *r);$/;"	p	typeref:typename:bool	signature:(roaring_bitmap_t * r)
roaring_bitmap_s	sylar/sylar/ds/roaring.h	/^typedef struct roaring_bitmap_s {$/;"	s
roaring_bitmap_s::high_low_container	sylar/sylar/ds/roaring.h	/^    roaring_array_t high_low_container;$/;"	m	struct:roaring_bitmap_s	typeref:typename:roaring_array_t	access:public
roaring_bitmap_select	sylar/sylar/ds/roaring.c	/^bool roaring_bitmap_select(const roaring_bitmap_t *bm, uint32_t rank,$/;"	f	typeref:typename:bool	signature:(const roaring_bitmap_t * bm,uint32_t rank,uint32_t * element)
roaring_bitmap_select	sylar/sylar/ds/roaring.h	/^bool roaring_bitmap_select(const roaring_bitmap_t *ra, uint32_t rank,$/;"	p	typeref:typename:bool	signature:(const roaring_bitmap_t * ra,uint32_t rank,uint32_t * element)
roaring_bitmap_serialize	sylar/sylar/ds/roaring.c	/^size_t roaring_bitmap_serialize(const roaring_bitmap_t *ra, char *buf) {$/;"	f	typeref:typename:size_t	signature:(const roaring_bitmap_t * ra,char * buf)
roaring_bitmap_serialize	sylar/sylar/ds/roaring.h	/^size_t roaring_bitmap_serialize(const roaring_bitmap_t *ra, char *buf);$/;"	p	typeref:typename:size_t	signature:(const roaring_bitmap_t * ra,char * buf)
roaring_bitmap_set_copy_on_write	sylar/sylar/ds/roaring.c	/^extern inline void roaring_bitmap_set_copy_on_write(roaring_bitmap_t* r, bool cow);$/;"	p	typeref:typename:void	file:	signature:(roaring_bitmap_t * r,bool cow)
roaring_bitmap_set_copy_on_write	sylar/sylar/ds/roaring.h	/^inline void roaring_bitmap_set_copy_on_write(roaring_bitmap_t* r, bool cow) {$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * r,bool cow)
roaring_bitmap_shrink_to_fit	sylar/sylar/ds/roaring.c	/^size_t roaring_bitmap_shrink_to_fit(roaring_bitmap_t *r) {$/;"	f	typeref:typename:size_t	signature:(roaring_bitmap_t * r)
roaring_bitmap_shrink_to_fit	sylar/sylar/ds/roaring.h	/^size_t roaring_bitmap_shrink_to_fit(roaring_bitmap_t *r);$/;"	p	typeref:typename:size_t	signature:(roaring_bitmap_t * r)
roaring_bitmap_size_in_bytes	sylar/sylar/ds/roaring.c	/^size_t roaring_bitmap_size_in_bytes(const roaring_bitmap_t *ra) {$/;"	f	typeref:typename:size_t	signature:(const roaring_bitmap_t * ra)
roaring_bitmap_size_in_bytes	sylar/sylar/ds/roaring.h	/^size_t roaring_bitmap_size_in_bytes(const roaring_bitmap_t *ra);$/;"	p	typeref:typename:size_t	signature:(const roaring_bitmap_t * ra)
roaring_bitmap_statistics	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_statistics(const roaring_bitmap_t *ra,$/;"	f	typeref:typename:void	signature:(const roaring_bitmap_t * ra,roaring_statistics_t * stat)
roaring_bitmap_statistics	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_statistics(const roaring_bitmap_t *ra,$/;"	p	typeref:typename:void	signature:(const roaring_bitmap_t * ra,roaring_statistics_t * stat)
roaring_bitmap_t	sylar/sylar/ds/roaring.h	/^} roaring_bitmap_t;$/;"	t	typeref:struct:roaring_bitmap_s
roaring_bitmap_to_uint32_array	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_to_uint32_array(const roaring_bitmap_t *ra, uint32_t *ans) {$/;"	f	typeref:typename:void	signature:(const roaring_bitmap_t * ra,uint32_t * ans)
roaring_bitmap_to_uint32_array	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_to_uint32_array(const roaring_bitmap_t *ra, uint32_t *ans);$/;"	p	typeref:typename:void	signature:(const roaring_bitmap_t * ra,uint32_t * ans)
roaring_bitmap_xor	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_xor(const roaring_bitmap_t *x1,$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_xor	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_xor(const roaring_bitmap_t *x1,$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_xor_cardinality	sylar/sylar/ds/roaring.c	/^uint64_t roaring_bitmap_xor_cardinality(const roaring_bitmap_t *x1,$/;"	f	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_xor_cardinality	sylar/sylar/ds/roaring.h	/^uint64_t roaring_bitmap_xor_cardinality(const roaring_bitmap_t *x1,$/;"	p	typeref:typename:uint64_t	signature:(const roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_xor_inplace	sylar/sylar/ds/roaring.c	/^void roaring_bitmap_xor_inplace(roaring_bitmap_t *x1,$/;"	f	typeref:typename:void	signature:(roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_xor_inplace	sylar/sylar/ds/roaring.h	/^void roaring_bitmap_xor_inplace(roaring_bitmap_t *x1,$/;"	p	typeref:typename:void	signature:(roaring_bitmap_t * x1,const roaring_bitmap_t * x2)
roaring_bitmap_xor_many	sylar/sylar/ds/roaring.c	/^roaring_bitmap_t *roaring_bitmap_xor_many(size_t number,$/;"	f	typeref:typename:roaring_bitmap_t *	signature:(size_t number,const roaring_bitmap_t ** x)
roaring_bitmap_xor_many	sylar/sylar/ds/roaring.h	/^roaring_bitmap_t *roaring_bitmap_xor_many(size_t number,$/;"	p	typeref:typename:roaring_bitmap_t *	signature:(size_t number,const roaring_bitmap_t ** x)
roaring_copy_uint32_iterator	sylar/sylar/ds/roaring.c	/^roaring_uint32_iterator_t *roaring_copy_uint32_iterator($/;"	f	typeref:typename:roaring_uint32_iterator_t *	signature:(const roaring_uint32_iterator_t * it)
roaring_copy_uint32_iterator	sylar/sylar/ds/roaring.h	/^roaring_uint32_iterator_t *roaring_copy_uint32_iterator($/;"	p	typeref:typename:roaring_uint32_iterator_t *	signature:(const roaring_uint32_iterator_t * it)
roaring_create_iterator	sylar/sylar/ds/roaring.c	/^roaring_uint32_iterator_t *roaring_create_iterator(const roaring_bitmap_t *ra) {$/;"	f	typeref:typename:roaring_uint32_iterator_t *	signature:(const roaring_bitmap_t * ra)
roaring_create_iterator	sylar/sylar/ds/roaring.h	/^roaring_uint32_iterator_t *roaring_create_iterator(const roaring_bitmap_t *ra);$/;"	p	typeref:typename:roaring_uint32_iterator_t *	signature:(const roaring_bitmap_t * ra)
roaring_free_uint32_iterator	sylar/sylar/ds/roaring.c	/^void roaring_free_uint32_iterator(roaring_uint32_iterator_t *it) { free(it); }$/;"	f	typeref:typename:void	signature:(roaring_uint32_iterator_t * it)
roaring_free_uint32_iterator	sylar/sylar/ds/roaring.h	/^void roaring_free_uint32_iterator(roaring_uint32_iterator_t *it);$/;"	p	typeref:typename:void	signature:(roaring_uint32_iterator_t * it)
roaring_init_iterator	sylar/sylar/ds/roaring.c	/^void roaring_init_iterator(const roaring_bitmap_t *ra,$/;"	f	typeref:typename:void	signature:(const roaring_bitmap_t * ra,roaring_uint32_iterator_t * newit)
roaring_init_iterator	sylar/sylar/ds/roaring.h	/^void roaring_init_iterator(const roaring_bitmap_t *ra,$/;"	p	typeref:typename:void	signature:(const roaring_bitmap_t * ra,roaring_uint32_iterator_t * newit)
roaring_init_iterator_last	sylar/sylar/ds/roaring.c	/^void roaring_init_iterator_last(const roaring_bitmap_t *ra,$/;"	f	typeref:typename:void	signature:(const roaring_bitmap_t * ra,roaring_uint32_iterator_t * newit)
roaring_init_iterator_last	sylar/sylar/ds/roaring.h	/^void roaring_init_iterator_last(const roaring_bitmap_t *ra,$/;"	p	typeref:typename:void	signature:(const roaring_bitmap_t * ra,roaring_uint32_iterator_t * newit)
roaring_iterate	sylar/sylar/ds/roaring.c	/^bool roaring_iterate(const roaring_bitmap_t *ra, roaring_iterator iterator,$/;"	f	typeref:typename:bool	signature:(const roaring_bitmap_t * ra,roaring_iterator iterator,void * ptr)
roaring_iterate	sylar/sylar/ds/roaring.h	/^bool roaring_iterate(const roaring_bitmap_t *ra, roaring_iterator iterator,$/;"	p	typeref:typename:bool	signature:(const roaring_bitmap_t * ra,roaring_iterator iterator,void * ptr)
roaring_iterate64	sylar/sylar/ds/roaring.c	/^bool roaring_iterate64(const roaring_bitmap_t *ra, roaring_iterator64 iterator,$/;"	f	typeref:typename:bool	signature:(const roaring_bitmap_t * ra,roaring_iterator64 iterator,uint64_t high_bits,void * ptr)
roaring_iterate64	sylar/sylar/ds/roaring.h	/^bool roaring_iterate64(const roaring_bitmap_t *ra, roaring_iterator64 iterator,$/;"	p	typeref:typename:bool	signature:(const roaring_bitmap_t * ra,roaring_iterator64 iterator,uint64_t high_bits,void * ptr)
roaring_iterator	sylar/sylar/ds/roaring.h	/^typedef bool (*roaring_iterator)(uint32_t value, void *param);$/;"	t	typeref:typename:bool (*)(uint32_t value,void * param)
roaring_iterator64	sylar/sylar/ds/roaring.h	/^typedef bool (*roaring_iterator64)(uint64_t value, void *param);$/;"	t	typeref:typename:bool (*)(uint64_t value,void * param)
roaring_move_uint32_iterator_equalorlarger	sylar/sylar/ds/roaring.c	/^bool roaring_move_uint32_iterator_equalorlarger(roaring_uint32_iterator_t *it, uint32_t val) {$/;"	f	typeref:typename:bool	signature:(roaring_uint32_iterator_t * it,uint32_t val)
roaring_move_uint32_iterator_equalorlarger	sylar/sylar/ds/roaring.h	/^bool roaring_move_uint32_iterator_equalorlarger(roaring_uint32_iterator_t *it, uint32_t val) ;$/;"	p	typeref:typename:bool	signature:(roaring_uint32_iterator_t * it,uint32_t val)
roaring_pq_element_s	sylar/sylar/ds/roaring.c	/^struct roaring_pq_element_s {$/;"	s	file:
roaring_pq_element_s::bitmap	sylar/sylar/ds/roaring.c	/^    roaring_bitmap_t *bitmap;$/;"	m	struct:roaring_pq_element_s	typeref:typename:roaring_bitmap_t *	file:	access:public
roaring_pq_element_s::is_temporary	sylar/sylar/ds/roaring.c	/^    bool is_temporary;$/;"	m	struct:roaring_pq_element_s	typeref:typename:bool	file:	access:public
roaring_pq_element_s::size	sylar/sylar/ds/roaring.c	/^    uint64_t size;$/;"	m	struct:roaring_pq_element_s	typeref:typename:uint64_t	file:	access:public
roaring_pq_element_t	sylar/sylar/ds/roaring.c	/^typedef struct roaring_pq_element_s roaring_pq_element_t;$/;"	t	typeref:struct:roaring_pq_element_s	file:
roaring_pq_s	sylar/sylar/ds/roaring.c	/^struct roaring_pq_s {$/;"	s	file:
roaring_pq_s::elements	sylar/sylar/ds/roaring.c	/^    roaring_pq_element_t *elements;$/;"	m	struct:roaring_pq_s	typeref:typename:roaring_pq_element_t *	file:	access:public
roaring_pq_s::size	sylar/sylar/ds/roaring.c	/^    uint64_t size;$/;"	m	struct:roaring_pq_s	typeref:typename:uint64_t	file:	access:public
roaring_pq_t	sylar/sylar/ds/roaring.c	/^typedef struct roaring_pq_s roaring_pq_t;$/;"	t	typeref:struct:roaring_pq_s	file:
roaring_previous_uint32_iterator	sylar/sylar/ds/roaring.c	/^bool roaring_previous_uint32_iterator(roaring_uint32_iterator_t *it) {$/;"	f	typeref:typename:bool	signature:(roaring_uint32_iterator_t * it)
roaring_previous_uint32_iterator	sylar/sylar/ds/roaring.h	/^bool roaring_previous_uint32_iterator(roaring_uint32_iterator_t *it);$/;"	p	typeref:typename:bool	signature:(roaring_uint32_iterator_t * it)
roaring_read_uint32_iterator	sylar/sylar/ds/roaring.c	/^uint32_t roaring_read_uint32_iterator(roaring_uint32_iterator_t *it, uint32_t* buf, uint32_t cou/;"	f	typeref:typename:uint32_t	signature:(roaring_uint32_iterator_t * it,uint32_t * buf,uint32_t count)
roaring_read_uint32_iterator	sylar/sylar/ds/roaring.h	/^uint32_t roaring_read_uint32_iterator(roaring_uint32_iterator_t *it, uint32_t* buf, uint32_t cou/;"	p	typeref:typename:uint32_t	signature:(roaring_uint32_iterator_t * it,uint32_t * buf,uint32_t count)
roaring_statistics_s	sylar/sylar/ds/roaring.h	/^typedef struct roaring_statistics_s {$/;"	s
roaring_statistics_s::cardinality	sylar/sylar/ds/roaring.h	/^    uint64_t cardinality; \/* total number of values stored in the bitmap *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint64_t	access:public
roaring_statistics_s::max_value	sylar/sylar/ds/roaring.h	/^        max_value; \/* the maximal value, undefined if cardinality is zero *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
roaring_statistics_s::min_value	sylar/sylar/ds/roaring.h	/^        min_value; \/* the minimal value, undefined if cardinality is zero *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
roaring_statistics_s::n_array_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_array_containers;  \/* number of array containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
roaring_statistics_s::n_bitset_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_bitset_containers; \/* number of bitmap containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
roaring_statistics_s::n_bytes_array_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_bytes_array_containers;  \/* number of allocated bytes in array$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
roaring_statistics_s::n_bytes_bitset_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_bytes_bitset_containers; \/* number of allocated bytes in  bitmap$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
roaring_statistics_s::n_bytes_run_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_bytes_run_containers;    \/* number of allocated bytes in run$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
roaring_statistics_s::n_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_containers; \/* number of containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
roaring_statistics_s::n_run_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_run_containers;    \/* number of run containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
roaring_statistics_s::n_values_array_containers	sylar/sylar/ds/roaring.h	/^        n_values_array_containers;    \/* number of values in array containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
roaring_statistics_s::n_values_bitset_containers	sylar/sylar/ds/roaring.h	/^        n_values_bitset_containers; \/* number of values in  bitmap containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
roaring_statistics_s::n_values_run_containers	sylar/sylar/ds/roaring.h	/^    uint32_t n_values_run_containers; \/* number of values in run containers *\/$/;"	m	struct:roaring_statistics_s	typeref:typename:uint32_t	access:public
roaring_statistics_s::sum_value	sylar/sylar/ds/roaring.h	/^    uint64_t sum_value; \/* the sum of all values (could be used to compute$/;"	m	struct:roaring_statistics_s	typeref:typename:uint64_t	access:public
roaring_statistics_t	sylar/sylar/ds/roaring.h	/^} roaring_statistics_t;$/;"	t	typeref:struct:roaring_statistics_s
roaring_uint32_iterator_s	sylar/sylar/ds/roaring.h	/^typedef struct roaring_uint32_iterator_s {$/;"	s
roaring_uint32_iterator_s::container	sylar/sylar/ds/roaring.h	/^        *container;  \/\/ should be:$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:const void *	access:public
roaring_uint32_iterator_s::container_index	sylar/sylar/ds/roaring.h	/^    int32_t container_index;         \/\/ point to the current container index$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:int32_t	access:public
roaring_uint32_iterator_s::current_value	sylar/sylar/ds/roaring.h	/^    uint32_t current_value;$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:uint32_t	access:public
roaring_uint32_iterator_s::has_value	sylar/sylar/ds/roaring.h	/^    bool has_value;$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:bool	access:public
roaring_uint32_iterator_s::highbits	sylar/sylar/ds/roaring.h	/^    uint32_t highbits;  \/\/ should be:$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:uint32_t	access:public
roaring_uint32_iterator_s::in_container_index	sylar/sylar/ds/roaring.h	/^    int32_t in_container_index;  \/\/ for bitset and array container, this is out$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:int32_t	access:public
roaring_uint32_iterator_s::parent	sylar/sylar/ds/roaring.h	/^    const roaring_bitmap_t *parent;  \/\/ owner$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:const roaring_bitmap_t *	access:public
roaring_uint32_iterator_s::run_index	sylar/sylar/ds/roaring.h	/^    int32_t run_index;           \/\/ for run container, this points  at the run$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:int32_t	access:public
roaring_uint32_iterator_s::typecode	sylar/sylar/ds/roaring.h	/^    uint8_t typecode;  \/\/ should be:$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:uint8_t	access:public
roaring_uint32_iterator_t	sylar/sylar/ds/roaring.h	/^} roaring_uint32_iterator_t;$/;"	t	typeref:struct:roaring_uint32_iterator_s
roarings	sylar/sylar/ds/roaring.hh	/^    std::map<uint32_t, Roaring> roarings;$/;"	m	class:Roaring64Map	typeref:typename:std::map<uint32_t,Roaring>	access:private
rollback	sylar/sylar/db/db.h	/^    virtual bool rollback() = 0;$/;"	p	class:sylar::ITransaction	typeref:typename:bool	access:public	signature:()
rollback	sylar/sylar/db/mysql.cc	/^bool MySQLTransaction::rollback() {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:bool	signature:()
rollback	sylar/sylar/db/mysql.h	/^    bool rollback() override;$/;"	p	class:sylar::MySQLTransaction	typeref:typename:bool	access:public	signature:()
rollback	sylar/sylar/db/sqlite3.cc	/^bool SQLite3Transaction::rollback() {$/;"	f	class:sylar::SQLite3Transaction	typeref:typename:bool	signature:()
rollback	sylar/sylar/db/sqlite3.h	/^    bool rollback() override;$/;"	p	class:sylar::SQLite3Transaction	typeref:typename:bool	access:public	signature:()
rpy	sylar/sylar/db/redis.h	/^        ReplyPtr rpy;$/;"	m	struct:sylar::FoxRedis::FCtx	typeref:typename:ReplyPtr	access:public
rpy	sylar/sylar/db/redis.h	/^        ReplyPtr rpy;$/;"	m	struct:sylar::FoxRedisCluster::FCtx	typeref:typename:ReplyPtr	access:public
rsdlb	sylar/tests/test_service_discovery.cc	/^sylar::RockSDLoadBalance::ptr rsdlb(new sylar::RockSDLoadBalance(zksd));$/;"	p	typeref:typename:sylar::RockSDLoadBalance::ptr	file:	signature:(new sylar::RockSDLoadBalance (zksd))
rsv1	sylar/sylar/http/ws_session.h	/^    bool rsv1: 1;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:bool:1	access:public
rsv2	sylar/sylar/http/ws_session.h	/^    bool rsv2: 1;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:bool:1	access:public
rsv3	sylar/sylar/http/ws_session.h	/^    bool rsv3: 1;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:bool:1	access:public
run	sylar/examples/echo_server.cc	/^void run() {$/;"	f	typeref:typename:void	signature:()
run	sylar/examples/echo_server_udp.cc	/^void run() {$/;"	f	typeref:typename:void	signature:()
run	sylar/examples/echo_udp_client.cc	/^void run() {$/;"	f	typeref:typename:void	signature:()
run	sylar/samples/my_http_server.cc	/^void run() {$/;"	f	typeref:typename:void	signature:()
run	sylar/sylar/application.cc	/^bool Application::run() {$/;"	f	class:sylar::Application	typeref:typename:bool	signature:()
run	sylar/sylar/application.h	/^    bool run();$/;"	p	class:sylar::Application	typeref:typename:bool	access:public	signature:()
run	sylar/sylar/scheduler.cc	/^void Scheduler::run() {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:()
run	sylar/sylar/scheduler.h	/^    void run();$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:protected	signature:()
run	sylar/sylar/thread.cc	/^void* Thread::run(void* arg) {$/;"	f	class:sylar::Thread	typeref:typename:void *	signature:(void * arg)
run	sylar/sylar/thread.h	/^    static void* run(void* arg);$/;"	p	class:sylar::Thread	typeref:typename:void *	access:private	signature:(void * arg)
run	sylar/tests/test_bitmap.cc	/^void run(const char* name, std::function<void()> cb) {$/;"	f	typeref:typename:void	signature:(const char * name,std::function<void ()> cb)
run	sylar/tests/test_http_connection.cc	/^void run() {$/;"	f	typeref:typename:void	signature:()
run	sylar/tests/test_http_server.cc	/^void run() {$/;"	f	typeref:typename:void	signature:()
run	sylar/tests/test_mysql.cc	/^void run() {$/;"	f	typeref:typename:void	signature:()
run	sylar/tests/test_nameserver.cc	/^void run() {$/;"	f	typeref:typename:void	signature:()
run	sylar/tests/test_rock.cc	/^void run() {$/;"	f	typeref:typename:void	signature:()
run	sylar/tests/test_service_discovery.cc	/^void run() {$/;"	f	typeref:typename:void	signature:()
run	sylar/tests/test_tcp_server.cc	/^void run() {$/;"	f	typeref:typename:void	signature:()
run	sylar/tests/test_ws_client.cc	/^void run() {$/;"	f	typeref:typename:void	signature:()
run	sylar/tests/test_ws_server.cc	/^void run() {$/;"	f	typeref:typename:void	signature:()
runOptimize	sylar/sylar/ds/roaring.hh	/^    bool runOptimize() { return roaring_bitmap_run_optimize(&roaring); }$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:()
runOptimize	sylar/sylar/ds/roaring.hh	/^    bool runOptimize() {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:()
run_array_array_subtract	sylar/sylar/ds/roaring.c	/^static int run_array_array_subtract(const run_container_t *r,$/;"	f	typeref:typename:int	file:	signature:(const run_container_t * r,const array_container_t * a_in,array_container_t * a_out)
run_array_container_andnot	sylar/sylar/ds/roaring.c	/^int run_array_container_andnot(const run_container_t *src_1,$/;"	f	typeref:typename:int	signature:(const run_container_t * src_1,const array_container_t * src_2,void ** dst)
run_array_container_andnot	sylar/sylar/ds/roaring.h	/^int run_array_container_andnot(const run_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const run_container_t * src_1,const array_container_t * src_2,void ** dst)
run_array_container_iandnot	sylar/sylar/ds/roaring.c	/^int run_array_container_iandnot(run_container_t *src_1,$/;"	f	typeref:typename:int	signature:(run_container_t * src_1,const array_container_t * src_2,void ** dst)
run_array_container_iandnot	sylar/sylar/ds/roaring.h	/^int run_array_container_iandnot(run_container_t *src_1,$/;"	p	typeref:typename:int	signature:(run_container_t * src_1,const array_container_t * src_2,void ** dst)
run_array_container_ixor	sylar/sylar/ds/roaring.c	/^int run_array_container_ixor(run_container_t *src_1,$/;"	f	typeref:typename:int	signature:(run_container_t * src_1,const array_container_t * src_2,void ** dst)
run_array_container_ixor	sylar/sylar/ds/roaring.h	/^int run_array_container_ixor(run_container_t *src_1,$/;"	p	typeref:typename:int	signature:(run_container_t * src_1,const array_container_t * src_2,void ** dst)
run_bitset_container_andnot	sylar/sylar/ds/roaring.c	/^bool run_bitset_container_andnot(const run_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const run_container_t * src_1,const bitset_container_t * src_2,void ** dst)
run_bitset_container_andnot	sylar/sylar/ds/roaring.h	/^bool run_bitset_container_andnot(const run_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const run_container_t * src_1,const bitset_container_t * src_2,void ** dst)
run_bitset_container_iandnot	sylar/sylar/ds/roaring.c	/^bool run_bitset_container_iandnot(run_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(run_container_t * src_1,const bitset_container_t * src_2,void ** dst)
run_bitset_container_iandnot	sylar/sylar/ds/roaring.h	/^bool run_bitset_container_iandnot(run_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(run_container_t * src_1,const bitset_container_t * src_2,void ** dst)
run_bitset_container_intersect	sylar/sylar/ds/roaring.c	/^bool run_bitset_container_intersect(const run_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const run_container_t * src_1,const bitset_container_t * src_2)
run_bitset_container_intersect	sylar/sylar/ds/roaring.h	/^bool run_bitset_container_intersect(const run_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const run_container_t * src_1,const bitset_container_t * src_2)
run_bitset_container_intersection	sylar/sylar/ds/roaring.c	/^bool run_bitset_container_intersection(const run_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const run_container_t * src_1,const bitset_container_t * src_2,void ** dst)
run_bitset_container_intersection	sylar/sylar/ds/roaring.h	/^bool run_bitset_container_intersection(const run_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const run_container_t * src_1,const bitset_container_t * src_2,void ** dst)
run_bitset_container_intersection_cardinality	sylar/sylar/ds/roaring.c	/^int run_bitset_container_intersection_cardinality($/;"	f	typeref:typename:int	signature:(const run_container_t * src_1,const bitset_container_t * src_2)
run_bitset_container_intersection_cardinality	sylar/sylar/ds/roaring.h	/^int run_bitset_container_intersection_cardinality(const run_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const run_container_t * src_1,const bitset_container_t * src_2)
run_bitset_container_ixor	sylar/sylar/ds/roaring.c	/^bool run_bitset_container_ixor(run_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(run_container_t * src_1,const bitset_container_t * src_2,void ** dst)
run_bitset_container_ixor	sylar/sylar/ds/roaring.h	/^bool run_bitset_container_ixor(run_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(run_container_t * src_1,const bitset_container_t * src_2,void ** dst)
run_bitset_container_lazy_union	sylar/sylar/ds/roaring.c	/^void run_bitset_container_lazy_union(const run_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const run_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
run_bitset_container_lazy_union	sylar/sylar/ds/roaring.h	/^void run_bitset_container_lazy_union(const run_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const run_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
run_bitset_container_lazy_xor	sylar/sylar/ds/roaring.c	/^void run_bitset_container_lazy_xor(const run_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const run_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
run_bitset_container_lazy_xor	sylar/sylar/ds/roaring.h	/^void run_bitset_container_lazy_xor(const run_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const run_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
run_bitset_container_union	sylar/sylar/ds/roaring.c	/^void run_bitset_container_union(const run_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const run_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
run_bitset_container_union	sylar/sylar/ds/roaring.h	/^void run_bitset_container_union(const run_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const run_container_t * src_1,const bitset_container_t * src_2,bitset_container_t * dst)
run_bitset_container_xor	sylar/sylar/ds/roaring.c	/^bool run_bitset_container_xor(const run_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const run_container_t * src_1,const bitset_container_t * src_2,void ** dst)
run_bitset_container_xor	sylar/sylar/ds/roaring.h	/^bool run_bitset_container_xor(const run_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const run_container_t * src_1,const bitset_container_t * src_2,void ** dst)
run_container_add	sylar/sylar/ds/roaring.c	/^bool run_container_add(run_container_t *run, uint16_t pos) {$/;"	f	typeref:typename:bool	signature:(run_container_t * run,uint16_t pos)
run_container_add	sylar/sylar/ds/roaring.h	/^bool run_container_add(run_container_t *run, uint16_t pos);$/;"	p	typeref:typename:bool	signature:(run_container_t * run,uint16_t pos)
run_container_add_range	sylar/sylar/ds/roaring.h	/^static inline void run_container_add_range(run_container_t* run,$/;"	f	typeref:typename:void	signature:(run_container_t * run,uint32_t min,uint32_t max)
run_container_add_range_nruns	sylar/sylar/ds/roaring.h	/^static inline void run_container_add_range_nruns(run_container_t* run,$/;"	f	typeref:typename:void	signature:(run_container_t * run,uint32_t min,uint32_t max,int32_t nruns_less,int32_t nruns_greater)
run_container_andnot	sylar/sylar/ds/roaring.c	/^void run_container_andnot(const run_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const run_container_t * src_1,const run_container_t * src_2,run_container_t * dst)
run_container_andnot	sylar/sylar/ds/roaring.h	/^void run_container_andnot(const run_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const run_container_t * src_1,const run_container_t * src_2,run_container_t * dst)
run_container_append	sylar/sylar/ds/roaring.h	/^static inline void run_container_append(run_container_t *run, rle16_t vl,$/;"	f	typeref:typename:void	signature:(run_container_t * run,rle16_t vl,rle16_t * previousrl)
run_container_append_first	sylar/sylar/ds/roaring.h	/^static inline rle16_t run_container_append_first(run_container_t *run,$/;"	f	typeref:typename:rle16_t	signature:(run_container_t * run,rle16_t vl)
run_container_append_value	sylar/sylar/ds/roaring.h	/^static inline void run_container_append_value(run_container_t *run,$/;"	f	typeref:typename:void	signature:(run_container_t * run,uint16_t val,rle16_t * previousrl)
run_container_append_value_first	sylar/sylar/ds/roaring.h	/^static inline rle16_t run_container_append_value_first(run_container_t *run,$/;"	f	typeref:typename:rle16_t	signature:(run_container_t * run,uint16_t val)
run_container_cardinality	sylar/sylar/ds/roaring.h	/^static inline int run_container_cardinality(const run_container_t *run) {$/;"	f	typeref:typename:int	signature:(const run_container_t * run)
run_container_clear	sylar/sylar/ds/roaring.c	/^extern inline void run_container_clear(run_container_t *run);$/;"	p	typeref:typename:void	file:	signature:(run_container_t * run)
run_container_clear	sylar/sylar/ds/roaring.h	/^static inline void run_container_clear(run_container_t *run) {$/;"	f	typeref:typename:void	signature:(run_container_t * run)
run_container_clone	sylar/sylar/ds/roaring.c	/^run_container_t *run_container_clone(const run_container_t *src) {$/;"	f	typeref:typename:run_container_t *	signature:(const run_container_t * src)
run_container_clone	sylar/sylar/ds/roaring.h	/^run_container_t *run_container_clone(const run_container_t *src);$/;"	p	typeref:typename:run_container_t *	signature:(const run_container_t * src)
run_container_contains	sylar/sylar/ds/roaring.c	/^extern inline bool run_container_contains(const run_container_t *run,$/;"	p	typeref:typename:bool	file:	signature:(const run_container_t * run,uint16_t pos)
run_container_contains	sylar/sylar/ds/roaring.h	/^inline bool run_container_contains(const run_container_t *run, uint16_t pos) {$/;"	f	typeref:typename:bool	signature:(const run_container_t * run,uint16_t pos)
run_container_contains_range	sylar/sylar/ds/roaring.h	/^static inline bool run_container_contains_range(const run_container_t *run,$/;"	f	typeref:typename:bool	signature:(const run_container_t * run,uint32_t pos_start,uint32_t pos_end)
run_container_copy	sylar/sylar/ds/roaring.c	/^void run_container_copy(const run_container_t *src, run_container_t *dst) {$/;"	f	typeref:typename:void	signature:(const run_container_t * src,run_container_t * dst)
run_container_copy	sylar/sylar/ds/roaring.h	/^void run_container_copy(const run_container_t *src, run_container_t *dst);$/;"	p	typeref:typename:void	signature:(const run_container_t * src,run_container_t * dst)
run_container_create	sylar/sylar/ds/roaring.c	/^run_container_t *run_container_create(void) {$/;"	f	typeref:typename:run_container_t *	signature:(void)
run_container_create	sylar/sylar/ds/roaring.h	/^run_container_t *run_container_create(void);$/;"	p	typeref:typename:run_container_t *	signature:(void)
run_container_create_given_capacity	sylar/sylar/ds/roaring.c	/^run_container_t *run_container_create_given_capacity(int32_t size) {$/;"	f	typeref:typename:run_container_t *	signature:(int32_t size)
run_container_create_given_capacity	sylar/sylar/ds/roaring.h	/^run_container_t *run_container_create_given_capacity(int32_t size);$/;"	p	typeref:typename:run_container_t *	signature:(int32_t size)
run_container_create_range	sylar/sylar/ds/roaring.c	/^extern inline run_container_t *run_container_create_range(uint32_t start,$/;"	p	typeref:typename:run_container_t *	file:	signature:(uint32_t start,uint32_t stop)
run_container_create_range	sylar/sylar/ds/roaring.h	/^static inline run_container_t *run_container_create_range(uint32_t start,$/;"	f	typeref:typename:run_container_t *	signature:(uint32_t start,uint32_t stop)
run_container_deserialize	sylar/sylar/ds/roaring.c	/^void *run_container_deserialize(const char *buf, size_t buf_len) {$/;"	f	typeref:typename:void *	signature:(const char * buf,size_t buf_len)
run_container_deserialize	sylar/sylar/ds/roaring.h	/^void *run_container_deserialize(const char *buf, size_t buf_len);$/;"	p	typeref:typename:void *	signature:(const char * buf,size_t buf_len)
run_container_empty	sylar/sylar/ds/roaring.h	/^static inline bool run_container_empty($/;"	f	typeref:typename:bool	signature:(const run_container_t * run)
run_container_equals	sylar/sylar/ds/roaring.h	/^static inline bool run_container_equals(const run_container_t *container1,$/;"	f	typeref:typename:bool	signature:(const run_container_t * container1,const run_container_t * container2)
run_container_equals_array	sylar/sylar/ds/roaring.c	/^bool run_container_equals_array(const run_container_t* container1,$/;"	f	typeref:typename:bool	signature:(const run_container_t * container1,const array_container_t * container2)
run_container_equals_array	sylar/sylar/ds/roaring.h	/^bool run_container_equals_array(const run_container_t* container1,$/;"	p	typeref:typename:bool	signature:(const run_container_t * container1,const array_container_t * container2)
run_container_equals_bitset	sylar/sylar/ds/roaring.c	/^bool run_container_equals_bitset(const run_container_t* container1,$/;"	f	typeref:typename:bool	signature:(const run_container_t * container1,const bitset_container_t * container2)
run_container_equals_bitset	sylar/sylar/ds/roaring.h	/^bool run_container_equals_bitset(const run_container_t* container1,$/;"	p	typeref:typename:bool	signature:(const run_container_t * container1,const bitset_container_t * container2)
run_container_free	sylar/sylar/ds/roaring.c	/^void run_container_free(run_container_t *run) {$/;"	f	typeref:typename:void	signature:(run_container_t * run)
run_container_free	sylar/sylar/ds/roaring.h	/^void run_container_free(run_container_t *run);$/;"	p	typeref:typename:void	signature:(run_container_t * run)
run_container_from_array	sylar/sylar/ds/roaring.c	/^run_container_t *run_container_from_array(const array_container_t *c) {$/;"	f	typeref:typename:run_container_t *	signature:(const array_container_t * c)
run_container_from_array	sylar/sylar/ds/roaring.h	/^run_container_t *run_container_from_array(const array_container_t *c);$/;"	p	typeref:typename:run_container_t *	signature:(const array_container_t * c)
run_container_grow	sylar/sylar/ds/roaring.c	/^void run_container_grow(run_container_t *run, int32_t min, bool copy) {$/;"	f	typeref:typename:void	signature:(run_container_t * run,int32_t min,bool copy)
run_container_grow	sylar/sylar/ds/roaring.h	/^void run_container_grow(run_container_t *run, int32_t min, bool copy);$/;"	p	typeref:typename:void	signature:(run_container_t * run,int32_t min,bool copy)
run_container_index_equalorlarger	sylar/sylar/ds/roaring.c	/^extern inline int run_container_index_equalorlarger(const run_container_t *arr, uint16_t x);$/;"	p	typeref:typename:int	file:	signature:(const run_container_t * arr,uint16_t x)
run_container_index_equalorlarger	sylar/sylar/ds/roaring.h	/^inline int run_container_index_equalorlarger(const run_container_t *arr, uint16_t x) {$/;"	f	typeref:typename:int	signature:(const run_container_t * arr,uint16_t x)
run_container_intersect	sylar/sylar/ds/roaring.c	/^bool run_container_intersect(const run_container_t *src_1,$/;"	f	typeref:typename:bool	signature:(const run_container_t * src_1,const run_container_t * src_2)
run_container_intersect	sylar/sylar/ds/roaring.h	/^bool run_container_intersect(const run_container_t *src_1,$/;"	p	typeref:typename:bool	signature:(const run_container_t * src_1,const run_container_t * src_2)
run_container_intersection	sylar/sylar/ds/roaring.c	/^void run_container_intersection(const run_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const run_container_t * src_1,const run_container_t * src_2,run_container_t * dst)
run_container_intersection	sylar/sylar/ds/roaring.h	/^void run_container_intersection(const run_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const run_container_t * src_1,const run_container_t * src_2,run_container_t * dst)
run_container_intersection_cardinality	sylar/sylar/ds/roaring.c	/^int run_container_intersection_cardinality(const run_container_t *src_1,$/;"	f	typeref:typename:int	signature:(const run_container_t * src_1,const run_container_t * src_2)
run_container_intersection_cardinality	sylar/sylar/ds/roaring.h	/^int run_container_intersection_cardinality(const run_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const run_container_t * src_1,const run_container_t * src_2)
run_container_is_full	sylar/sylar/ds/roaring.c	/^extern inline bool run_container_is_full(const run_container_t *run);$/;"	p	typeref:typename:bool	file:	signature:(const run_container_t * run)
run_container_is_full	sylar/sylar/ds/roaring.h	/^static inline bool run_container_is_full(const run_container_t *run) {$/;"	f	typeref:typename:bool	signature:(const run_container_t * run)
run_container_is_subset	sylar/sylar/ds/roaring.c	/^bool run_container_is_subset(const run_container_t *container1,$/;"	f	typeref:typename:bool	signature:(const run_container_t * container1,const run_container_t * container2)
run_container_is_subset	sylar/sylar/ds/roaring.h	/^bool run_container_is_subset(const run_container_t *container1,$/;"	p	typeref:typename:bool	signature:(const run_container_t * container1,const run_container_t * container2)
run_container_is_subset_array	sylar/sylar/ds/roaring.c	/^bool run_container_is_subset_array(const run_container_t* container1,$/;"	f	typeref:typename:bool	signature:(const run_container_t * container1,const array_container_t * container2)
run_container_is_subset_array	sylar/sylar/ds/roaring.h	/^bool run_container_is_subset_array(const run_container_t* container1,$/;"	p	typeref:typename:bool	signature:(const run_container_t * container1,const array_container_t * container2)
run_container_is_subset_bitset	sylar/sylar/ds/roaring.c	/^bool run_container_is_subset_bitset(const run_container_t* container1,$/;"	f	typeref:typename:bool	signature:(const run_container_t * container1,const bitset_container_t * container2)
run_container_is_subset_bitset	sylar/sylar/ds/roaring.h	/^bool run_container_is_subset_bitset(const run_container_t* container1,$/;"	p	typeref:typename:bool	signature:(const run_container_t * container1,const bitset_container_t * container2)
run_container_iterate	sylar/sylar/ds/roaring.c	/^bool run_container_iterate(const run_container_t *cont, uint32_t base,$/;"	f	typeref:typename:bool	signature:(const run_container_t * cont,uint32_t base,roaring_iterator iterator,void * ptr)
run_container_iterate	sylar/sylar/ds/roaring.h	/^bool run_container_iterate(const run_container_t *cont, uint32_t base,$/;"	p	typeref:typename:bool	signature:(const run_container_t * cont,uint32_t base,roaring_iterator iterator,void * ptr)
run_container_iterate64	sylar/sylar/ds/roaring.c	/^bool run_container_iterate64(const run_container_t *cont, uint32_t base,$/;"	f	typeref:typename:bool	signature:(const run_container_t * cont,uint32_t base,roaring_iterator64 iterator,uint64_t high_bits,void * ptr)
run_container_iterate64	sylar/sylar/ds/roaring.h	/^bool run_container_iterate64(const run_container_t *cont, uint32_t base,$/;"	p	typeref:typename:bool	signature:(const run_container_t * cont,uint32_t base,roaring_iterator64 iterator,uint64_t high_bits,void * ptr)
run_container_maximum	sylar/sylar/ds/roaring.c	/^extern inline uint16_t run_container_maximum(const run_container_t *run);$/;"	p	typeref:typename:uint16_t	file:	signature:(const run_container_t * run)
run_container_maximum	sylar/sylar/ds/roaring.h	/^inline uint16_t run_container_maximum(const run_container_t *run) {$/;"	f	typeref:typename:uint16_t	signature:(const run_container_t * run)
run_container_minimum	sylar/sylar/ds/roaring.c	/^extern inline uint16_t run_container_minimum(const run_container_t *run);$/;"	p	typeref:typename:uint16_t	file:	signature:(const run_container_t * run)
run_container_minimum	sylar/sylar/ds/roaring.h	/^inline uint16_t run_container_minimum(const run_container_t *run) {$/;"	f	typeref:typename:uint16_t	signature:(const run_container_t * run)
run_container_negation	sylar/sylar/ds/roaring.c	/^int run_container_negation(const run_container_t *src, void **dst) {$/;"	f	typeref:typename:int	signature:(const run_container_t * src,void ** dst)
run_container_negation	sylar/sylar/ds/roaring.h	/^int run_container_negation(const run_container_t *src, void **dst);$/;"	p	typeref:typename:int	signature:(const run_container_t * src,void ** dst)
run_container_negation_inplace	sylar/sylar/ds/roaring.c	/^int run_container_negation_inplace(run_container_t *src, void **dst) {$/;"	f	typeref:typename:int	signature:(run_container_t * src,void ** dst)
run_container_negation_inplace	sylar/sylar/ds/roaring.h	/^int run_container_negation_inplace(run_container_t *src, void **dst);$/;"	p	typeref:typename:int	signature:(run_container_t * src,void ** dst)
run_container_negation_range	sylar/sylar/ds/roaring.c	/^int run_container_negation_range(const run_container_t *src,$/;"	f	typeref:typename:int	signature:(const run_container_t * src,const int range_start,const int range_end,void ** dst)
run_container_negation_range	sylar/sylar/ds/roaring.h	/^int run_container_negation_range(const run_container_t *src,$/;"	p	typeref:typename:int	signature:(const run_container_t * src,const int range_start,const int range_end,void ** dst)
run_container_negation_range_inplace	sylar/sylar/ds/roaring.c	/^int run_container_negation_range_inplace(run_container_t *src,$/;"	f	typeref:typename:int	signature:(run_container_t * src,const int range_start,const int range_end,void ** dst)
run_container_negation_range_inplace	sylar/sylar/ds/roaring.h	/^int run_container_negation_range_inplace(run_container_t *src,$/;"	p	typeref:typename:int	signature:(run_container_t * src,const int range_start,const int range_end,void ** dst)
run_container_nonzero_cardinality	sylar/sylar/ds/roaring.c	/^extern inline bool run_container_nonzero_cardinality(const run_container_t *r);$/;"	p	typeref:typename:bool	file:	signature:(const run_container_t * r)
run_container_nonzero_cardinality	sylar/sylar/ds/roaring.h	/^static inline bool run_container_nonzero_cardinality($/;"	f	typeref:typename:bool	signature:(const run_container_t * run)
run_container_printf	sylar/sylar/ds/roaring.c	/^void run_container_printf(const run_container_t *cont) {$/;"	f	typeref:typename:void	signature:(const run_container_t * cont)
run_container_printf	sylar/sylar/ds/roaring.h	/^void run_container_printf(const run_container_t *v);$/;"	p	typeref:typename:void	signature:(const run_container_t * v)
run_container_printf_as_uint32_array	sylar/sylar/ds/roaring.c	/^void run_container_printf_as_uint32_array(const run_container_t *cont,$/;"	f	typeref:typename:void	signature:(const run_container_t * cont,uint32_t base)
run_container_printf_as_uint32_array	sylar/sylar/ds/roaring.h	/^void run_container_printf_as_uint32_array(const run_container_t *v,$/;"	p	typeref:typename:void	signature:(const run_container_t * v,uint32_t base)
run_container_rank	sylar/sylar/ds/roaring.c	/^int run_container_rank(const run_container_t *container, uint16_t x) {$/;"	f	typeref:typename:int	signature:(const run_container_t * container,uint16_t x)
run_container_rank	sylar/sylar/ds/roaring.h	/^int run_container_rank(const run_container_t *arr, uint16_t x);$/;"	p	typeref:typename:int	signature:(const run_container_t * arr,uint16_t x)
run_container_read	sylar/sylar/ds/roaring.c	/^int32_t run_container_read(int32_t cardinality, run_container_t *container,$/;"	f	typeref:typename:int32_t	signature:(int32_t cardinality,run_container_t * container,const char * buf)
run_container_read	sylar/sylar/ds/roaring.h	/^int32_t run_container_read(int32_t cardinality, run_container_t *container,$/;"	p	typeref:typename:int32_t	signature:(int32_t cardinality,run_container_t * container,const char * buf)
run_container_remove	sylar/sylar/ds/roaring.h	/^static inline bool run_container_remove(run_container_t *run, uint16_t pos) {$/;"	f	typeref:typename:bool	signature:(run_container_t * run,uint16_t pos)
run_container_remove_range	sylar/sylar/ds/roaring.h	/^static inline void run_container_remove_range(run_container_t *run, uint32_t min, uint32_t max) /;"	f	typeref:typename:void	signature:(run_container_t * run,uint32_t min,uint32_t max)
run_container_s	sylar/sylar/ds/roaring.h	/^struct run_container_s {$/;"	s
run_container_s::capacity	sylar/sylar/ds/roaring.h	/^    int32_t capacity;$/;"	m	struct:run_container_s	typeref:typename:int32_t	access:public
run_container_s::n_runs	sylar/sylar/ds/roaring.h	/^    int32_t n_runs;$/;"	m	struct:run_container_s	typeref:typename:int32_t	access:public
run_container_s::runs	sylar/sylar/ds/roaring.h	/^    rle16_t *runs;$/;"	m	struct:run_container_s	typeref:typename:rle16_t *	access:public
run_container_select	sylar/sylar/ds/roaring.c	/^bool run_container_select(const run_container_t *container,$/;"	f	typeref:typename:bool	signature:(const run_container_t * container,uint32_t * start_rank,uint32_t rank,uint32_t * element)
run_container_select	sylar/sylar/ds/roaring.h	/^bool run_container_select(const run_container_t *container,$/;"	p	typeref:typename:bool	signature:(const run_container_t * container,uint32_t * start_rank,uint32_t rank,uint32_t * element)
run_container_serialization_len	sylar/sylar/ds/roaring.c	/^uint32_t run_container_serialization_len(const run_container_t *container) {$/;"	f	typeref:typename:uint32_t	signature:(const run_container_t * container)
run_container_serialization_len	sylar/sylar/ds/roaring.h	/^uint32_t run_container_serialization_len(const run_container_t *container);$/;"	p	typeref:typename:uint32_t	signature:(const run_container_t * container)
run_container_serialize	sylar/sylar/ds/roaring.c	/^int32_t run_container_serialize(const run_container_t *container, char *buf) {$/;"	f	typeref:typename:int32_t	signature:(const run_container_t * container,char * buf)
run_container_serialize	sylar/sylar/ds/roaring.h	/^int32_t run_container_serialize(const run_container_t *container,$/;"	p	typeref:typename:int32_t	signature:(const run_container_t * container,char * buf)
run_container_serialized_size_in_bytes	sylar/sylar/ds/roaring.c	/^extern inline int32_t run_container_serialized_size_in_bytes(int32_t num_runs);$/;"	p	typeref:typename:int32_t	file:	signature:(int32_t num_runs)
run_container_serialized_size_in_bytes	sylar/sylar/ds/roaring.h	/^static inline int32_t run_container_serialized_size_in_bytes(int32_t num_runs) {$/;"	f	typeref:typename:int32_t	signature:(int32_t num_runs)
run_container_shift_tail	sylar/sylar/ds/roaring.h	/^static inline void run_container_shift_tail(run_container_t* run,$/;"	f	typeref:typename:void	signature:(run_container_t * run,int32_t count,int32_t distance)
run_container_shrink_to_fit	sylar/sylar/ds/roaring.c	/^int run_container_shrink_to_fit(run_container_t *src) {$/;"	f	typeref:typename:int	signature:(run_container_t * src)
run_container_shrink_to_fit	sylar/sylar/ds/roaring.h	/^int run_container_shrink_to_fit(run_container_t *src);$/;"	p	typeref:typename:int	signature:(run_container_t * src)
run_container_size_in_bytes	sylar/sylar/ds/roaring.h	/^static inline int32_t run_container_size_in_bytes($/;"	f	typeref:typename:int32_t	signature:(const run_container_t * container)
run_container_smart_append_exclusive	sylar/sylar/ds/roaring.c	/^void run_container_smart_append_exclusive(run_container_t *src,$/;"	f	typeref:typename:void	signature:(run_container_t * src,const uint16_t start,const uint16_t length)
run_container_smart_append_exclusive	sylar/sylar/ds/roaring.h	/^void run_container_smart_append_exclusive(run_container_t *src,$/;"	p	typeref:typename:void	signature:(run_container_t * src,const uint16_t start,const uint16_t length)
run_container_t	sylar/sylar/ds/roaring.h	/^typedef struct run_container_s run_container_t;$/;"	t	typeref:struct:run_container_s
run_container_to_uint32_array	sylar/sylar/ds/roaring.c	/^int run_container_to_uint32_array(void *vout, const run_container_t *cont,$/;"	f	typeref:typename:int	signature:(void * vout,const run_container_t * cont,uint32_t base)
run_container_to_uint32_array	sylar/sylar/ds/roaring.h	/^int run_container_to_uint32_array(void *vout, const run_container_t *cont,$/;"	p	typeref:typename:int	signature:(void * vout,const run_container_t * cont,uint32_t base)
run_container_union	sylar/sylar/ds/roaring.c	/^void run_container_union(const run_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const run_container_t * src_1,const run_container_t * src_2,run_container_t * dst)
run_container_union	sylar/sylar/ds/roaring.h	/^void run_container_union(const run_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const run_container_t * src_1,const run_container_t * src_2,run_container_t * dst)
run_container_union_inplace	sylar/sylar/ds/roaring.c	/^void run_container_union_inplace(run_container_t *src_1,$/;"	f	typeref:typename:void	signature:(run_container_t * src_1,const run_container_t * src_2)
run_container_union_inplace	sylar/sylar/ds/roaring.h	/^void run_container_union_inplace(run_container_t *src_1,$/;"	p	typeref:typename:void	signature:(run_container_t * src_1,const run_container_t * src_2)
run_container_write	sylar/sylar/ds/roaring.c	/^int32_t run_container_write(const run_container_t *container, char *buf) {$/;"	f	typeref:typename:int32_t	signature:(const run_container_t * container,char * buf)
run_container_write	sylar/sylar/ds/roaring.h	/^int32_t run_container_write(const run_container_t *container, char *buf);$/;"	p	typeref:typename:int32_t	signature:(const run_container_t * container,char * buf)
run_container_xor	sylar/sylar/ds/roaring.c	/^void run_container_xor(const run_container_t *src_1,$/;"	f	typeref:typename:void	signature:(const run_container_t * src_1,const run_container_t * src_2,run_container_t * dst)
run_container_xor	sylar/sylar/ds/roaring.h	/^void run_container_xor(const run_container_t *src_1,$/;"	p	typeref:typename:void	signature:(const run_container_t * src_1,const run_container_t * src_2,run_container_t * dst)
run_fiber	sylar/sylar/application.cc	/^int Application::run_fiber() {$/;"	f	class:sylar::Application	typeref:typename:int	signature:()
run_fiber	sylar/sylar/application.h	/^    int run_fiber();$/;"	p	class:sylar::Application	typeref:typename:int	access:private	signature:()
run_in_fiber	sylar/tests/test_fiber.cc	/^void run_in_fiber() {$/;"	f	typeref:typename:void	signature:()
run_index	sylar/sylar/ds/roaring.h	/^    int32_t run_index;           \/\/ for run container, this points  at the run$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:int32_t	access:public
run_run_container_andnot	sylar/sylar/ds/roaring.c	/^int run_run_container_andnot(const run_container_t *src_1,$/;"	f	typeref:typename:int	signature:(const run_container_t * src_1,const run_container_t * src_2,void ** dst)
run_run_container_andnot	sylar/sylar/ds/roaring.h	/^int run_run_container_andnot(const run_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const run_container_t * src_1,const run_container_t * src_2,void ** dst)
run_run_container_iandnot	sylar/sylar/ds/roaring.c	/^int run_run_container_iandnot(run_container_t *src_1,$/;"	f	typeref:typename:int	signature:(run_container_t * src_1,const run_container_t * src_2,void ** dst)
run_run_container_iandnot	sylar/sylar/ds/roaring.h	/^int run_run_container_iandnot(run_container_t *src_1,$/;"	p	typeref:typename:int	signature:(run_container_t * src_1,const run_container_t * src_2,void ** dst)
run_run_container_ixor	sylar/sylar/ds/roaring.c	/^int run_run_container_ixor(run_container_t *src_1, const run_container_t *src_2,$/;"	f	typeref:typename:int	signature:(run_container_t * src_1,const run_container_t * src_2,void ** dst)
run_run_container_ixor	sylar/sylar/ds/roaring.h	/^int run_run_container_ixor(run_container_t *src_1, const run_container_t *src_2,$/;"	p	typeref:typename:int	signature:(run_container_t * src_1,const run_container_t * src_2,void ** dst)
run_run_container_xor	sylar/sylar/ds/roaring.c	/^int run_run_container_xor(const run_container_t *src_1,$/;"	f	typeref:typename:int	signature:(const run_container_t * src_1,const run_container_t * src_2,void ** dst)
run_run_container_xor	sylar/sylar/ds/roaring.h	/^int run_run_container_xor(const run_container_t *src_1,$/;"	p	typeref:typename:int	signature:(const run_container_t * src_1,const run_container_t * src_2,void ** dst)
runs	sylar/sylar/ds/roaring.h	/^    rle16_t *runs;$/;"	m	struct:run_container_s	typeref:typename:rle16_t *	access:public
s_connect_timeout	sylar/sylar/hook.cc	/^static uint64_t s_connect_timeout = -1;$/;"	v	namespace:sylar	typeref:typename:uint64_t	file:
s_fiber_count	sylar/sylar/fiber.cc	/^static std::atomic<uint64_t> s_fiber_count {0};$/;"	v	namespace:sylar	typeref:typename:std::atomic<uint64_t>	file:
s_fiber_id	sylar/sylar/fiber.cc	/^static std::atomic<uint64_t> s_fiber_id {0};$/;"	v	namespace:sylar	typeref:typename:std::atomic<uint64_t>	file:
s_file2modifytime	sylar/sylar/config.cc	/^static std::map<std::string, uint64_t> s_file2modifytime;$/;"	v	namespace:sylar	typeref:typename:std::map<std::string,uint64_t>	file:
s_hook_initer	sylar/sylar/hook.cc	/^static _HookIniter s_hook_initer;$/;"	v	namespace:sylar	typeref:typename:_HookIniter	file:
s_http_request_buffer_size	sylar/sylar/http/http_parser.cc	/^static uint64_t s_http_request_buffer_size = 0;$/;"	v	namespace:sylar::http	typeref:typename:uint64_t	file:
s_http_request_max_body_size	sylar/sylar/http/http_parser.cc	/^static uint64_t s_http_request_max_body_size = 0;$/;"	v	namespace:sylar::http	typeref:typename:uint64_t	file:
s_http_response_buffer_size	sylar/sylar/http/http_parser.cc	/^static uint64_t s_http_response_buffer_size = 0;$/;"	v	namespace:sylar::http	typeref:typename:uint64_t	file:
s_http_response_max_body_size	sylar/sylar/http/http_parser.cc	/^static uint64_t s_http_response_max_body_size = 0;$/;"	v	namespace:sylar::http	typeref:typename:uint64_t	file:
s_id	sylar/tests/test_service_discovery.cc	/^std::atomic<uint32_t> s_id;$/;"	v	typeref:typename:std::atomic<uint32_t>
s_init	sylar/sylar/ds/bitmap.cc	/^static bool s_init = Bitmap::init();$/;"	v	namespace:sylar::ds	typeref:typename:bool	file:
s_init	sylar/sylar/socket.cc	/^static _SSLInit s_init;$/;"	v	namespace:sylar::__anonca51b6360110	typeref:typename:_SSLInit	file:
s_instance	sylar/sylar/application.cc	/^Application* Application::s_instance = nullptr;$/;"	m	class:sylar::Application	typeref:typename:Application *
s_instance	sylar/sylar/application.h	/^    static Application* s_instance;$/;"	m	class:sylar::Application	typeref:typename:Application *	access:private
s_method_string	sylar/sylar/http/http.cc	/^static const char* s_method_string[] = {$/;"	v	namespace:sylar::http	typeref:typename:const char * []	file:
s_mutex	sylar/sylar/config.cc	/^static sylar::Mutex s_mutex;$/;"	v	namespace:sylar	typeref:typename:sylar::Mutex	file:
s_mutex	sylar/sylar/ds/dict.h	/^    static sylar::RWMutex s_mutex[MAX_MUTEX];$/;"	m	class:sylar::ds::Dict	typeref:typename:sylar::RWMutex[]	access:private
s_mutex	sylar/sylar/ds/dict.h	/^sylar::RWMutex Dict<K, V, PosHash>::s_mutex[MAX_MUTEX];$/;"	m	class:sylar::ds::Dict<K, V, PosHash>	typeref:typename:sylar::RWMutex[]
s_mutex	sylar/sylar/ds/hash_map.h	/^    static sylar::RWMutex s_mutex[MAX_MUTEX];$/;"	m	class:sylar::ds::HashMap	typeref:typename:sylar::RWMutex[]	access:private
s_mutex	sylar/sylar/ds/hash_map.h	/^sylar::RWMutex HashMap<K, V, PosHash>::s_mutex[MAX_MUTEX];$/;"	m	class:sylar::ds::HashMap<K, V, PosHash>	typeref:typename:sylar::RWMutex[]
s_mutex	sylar/sylar/ds/hash_multimap.h	/^    static sylar::RWMutex s_mutex[MAX_MUTEX];$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:sylar::RWMutex[]	access:private
s_mutex	sylar/sylar/ds/hash_multimap.h	/^sylar::RWMutex HashMultimap<K, V, PosHash>::s_mutex[MAX_MUTEX];$/;"	m	class:sylar::ds::HashMultimap<K, V, PosHash>	typeref:typename:sylar::RWMutex[]
s_mutex	sylar/tests/test_thread.cc	/^sylar::Mutex s_mutex;$/;"	v	typeref:typename:sylar::Mutex
s_on_connect	sylar/sylar/ns/name_server_module.cc	/^uint64_t s_on_connect = 0;$/;"	v	namespace:sylar::ns	typeref:typename:uint64_t
s_on_disconnect	sylar/sylar/ns/name_server_module.cc	/^uint64_t s_on_disconnect = 0;$/;"	v	namespace:sylar::ns	typeref:typename:uint64_t
s_prime_end	sylar/sylar/ds/util.cc	/^static const uint32_t* s_prime_end = s_prime_list + s_prime_size;$/;"	v	namespace:sylar::ds	typeref:typename:const uint32_t *	file:
s_prime_list	sylar/sylar/ds/util.cc	/^static const uint32_t s_prime_list[] = {$/;"	v	namespace:sylar::ds	typeref:typename:const uint32_t[]	file:
s_prime_size	sylar/sylar/ds/util.cc	/^static const uint32_t s_prime_size = 1250;$/;"	v	namespace:sylar::ds	typeref:typename:const uint32_t	file:
s_request_count	sylar/sylar/ns/name_server_module.cc	/^uint64_t s_request_count = 0;$/;"	v	namespace:sylar::ns	typeref:typename:uint64_t
s_rock_magic	sylar/sylar/rock/rock_protocol.cc	/^static const uint8_t s_rock_magic[2] = {0xab, 0xcd};$/;"	v	namespace:sylar	typeref:typename:const uint8_t[2]	file:
s_thread	sylar/sylar/db/fox_thread.cc	/^thread_local FoxThread* s_thread = nullptr;$/;"	v	namespace:sylar	typeref:typename:thread_local FoxThread *
s_thread_mutex	sylar/sylar/db/fox_thread.cc	/^static RWMutex s_thread_mutex;$/;"	v	namespace:sylar	typeref:typename:RWMutex	file:
s_thread_names	sylar/sylar/db/fox_thread.cc	/^static std::map<uint64_t, std::string> s_thread_names;$/;"	v	namespace:sylar	typeref:typename:std::map<uint64_t,std::string>	file:
s_timer	sylar/tests/test_iomanager.cc	/^sylar::Timer::ptr s_timer;$/;"	v	typeref:typename:sylar::Timer::ptr
schedule	sylar/sylar/scheduler.h	/^    void schedule(FiberOrCb fc, int thread = -1) {$/;"	f	class:sylar::Scheduler	typeref:typename:void	access:public	signature:(FiberOrCb fc,int thread=-1)
schedule	sylar/sylar/scheduler.h	/^    void schedule(InputIterator begin, InputIterator end) {$/;"	f	class:sylar::Scheduler	typeref:typename:void	access:public	signature:(InputIterator begin,InputIterator end)
schedule	sylar/sylar/worker.cc	/^void WorkerGroup::schedule(std::function<void()> cb, int thread) {$/;"	f	class:sylar::WorkerGroup	typeref:typename:void	signature:(std::function<void ()> cb,int thread)
schedule	sylar/sylar/worker.h	/^    void schedule(const std::string& name, FiberOrCb fc, int thread = -1) {$/;"	f	class:sylar::WorkerManager	typeref:typename:void	access:public	signature:(const std::string & name,FiberOrCb fc,int thread=-1)
schedule	sylar/sylar/worker.h	/^    void schedule(const std::string& name, Iter begin, Iter end) {$/;"	f	class:sylar::WorkerManager	typeref:typename:void	access:public	signature:(const std::string & name,Iter begin,Iter end)
schedule	sylar/sylar/worker.h	/^    void schedule(std::function<void()> cb, int thread = -1);$/;"	p	class:sylar::WorkerGroup	typeref:typename:void	access:public	signature:(std::function<void ()> cb,int thread=-1)
scheduleNoLock	sylar/sylar/scheduler.h	/^    bool scheduleNoLock(FiberOrCb fc, int thread) {$/;"	f	class:sylar::Scheduler	typeref:typename:bool	access:private	signature:(FiberOrCb fc,int thread)
scheduler	sylar/sylar/db/redis.h	/^        sylar::Scheduler* scheduler;$/;"	m	struct:sylar::FoxRedis::FCtx	typeref:typename:sylar::Scheduler *	access:public
scheduler	sylar/sylar/db/redis.h	/^        sylar::Scheduler* scheduler;$/;"	m	struct:sylar::FoxRedisCluster::FCtx	typeref:typename:sylar::Scheduler *	access:public
scheduler	sylar/sylar/iomanager.h	/^            Scheduler* scheduler = nullptr;$/;"	m	struct:sylar::IOManager::FdContext::EventContext	typeref:typename:Scheduler *	access:public
scheduler	sylar/sylar/streams/async_socket_stream.h	/^        Scheduler* scheduler;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:Scheduler *	access:public
second	sylar/sylar/ds/util.h	/^    V second;$/;"	m	struct:sylar::ds::MultiPair	typeref:typename:V	access:public
second	sylar/sylar/ds/util.h	/^    V second;$/;"	m	struct:sylar::ds::Pair	typeref:typename:V	access:public
select	sylar/sylar/ds/roaring.hh	/^    bool select(uint32_t rnk, uint32_t *element) const {$/;"	f	class:Roaring	typeref:typename:bool	access:public	signature:(uint32_t rnk,uint32_t * element) const
select	sylar/sylar/ds/roaring.hh	/^    bool select(uint64_t rnk, uint64_t *element) const {$/;"	f	class:Roaring64Map	typeref:typename:bool	access:public	signature:(uint64_t rnk,uint64_t * element) const
send	sylar/sylar/email/smtp.cc	/^SmtpResult::ptr SmtpClient::send(EMail::ptr email, int64_t timeout_ms, bool debug) {$/;"	f	class:sylar::SmtpClient	typeref:typename:SmtpResult::ptr	signature:(EMail::ptr email,int64_t timeout_ms,bool debug)
send	sylar/sylar/email/smtp.h	/^    SmtpResult::ptr send(EMail::ptr email, int64_t timeout_ms = 1000, bool debug = false);$/;"	p	class:sylar::SmtpClient	typeref:typename:SmtpResult::ptr	access:public	signature:(EMail::ptr email,int64_t timeout_ms=1000,bool debug=false)
send	sylar/sylar/hook.cc	/^ssize_t send(int s, const void *msg, size_t len, int flags) {$/;"	f	typeref:typename:ssize_t	signature:(int s,const void * msg,size_t len,int flags)
send	sylar/sylar/socket.cc	/^int SSLSocket::send(const iovec* buffers, size_t length, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(const iovec * buffers,size_t length,int flags)
send	sylar/sylar/socket.cc	/^int SSLSocket::send(const void* buffer, size_t length, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(const void * buffer,size_t length,int flags)
send	sylar/sylar/socket.cc	/^int Socket::send(const iovec* buffers, size_t length, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(const iovec * buffers,size_t length,int flags)
send	sylar/sylar/socket.cc	/^int Socket::send(const void* buffer, size_t length, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(const void * buffer,size_t length,int flags)
send	sylar/sylar/socket.h	/^    virtual int send(const iovec* buffers, size_t length, int flags = 0) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(const iovec * buffers,size_t length,int flags=0)
send	sylar/sylar/socket.h	/^    virtual int send(const iovec* buffers, size_t length, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(const iovec * buffers,size_t length,int flags=0)
send	sylar/sylar/socket.h	/^    virtual int send(const void* buffer, size_t length, int flags = 0) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(const void * buffer,size_t length,int flags=0)
send	sylar/sylar/socket.h	/^    virtual int send(const void* buffer, size_t length, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(const void * buffer,size_t length,int flags=0)
sendMessage	sylar/sylar/http/ws_connection.cc	/^int32_t WSConnection::sendMessage(WSFrameMessage::ptr msg, bool fin) {$/;"	f	class:sylar::http::WSConnection	typeref:typename:int32_t	signature:(WSFrameMessage::ptr msg,bool fin)
sendMessage	sylar/sylar/http/ws_connection.cc	/^int32_t WSConnection::sendMessage(const std::string& msg, int32_t opcode, bool fin) {$/;"	f	class:sylar::http::WSConnection	typeref:typename:int32_t	signature:(const std::string & msg,int32_t opcode,bool fin)
sendMessage	sylar/sylar/http/ws_connection.h	/^    int32_t sendMessage(WSFrameMessage::ptr msg, bool fin = true);$/;"	p	class:sylar::http::WSConnection	typeref:typename:int32_t	access:public	signature:(WSFrameMessage::ptr msg,bool fin=true)
sendMessage	sylar/sylar/http/ws_connection.h	/^    int32_t sendMessage(const std::string& msg, int32_t opcode = WSFrameHead::TEXT_FRAME, bool f/;"	p	class:sylar::http::WSConnection	typeref:typename:int32_t	access:public	signature:(const std::string & msg,int32_t opcode=WSFrameHead::TEXT_FRAME,bool fin=true)
sendMessage	sylar/sylar/http/ws_session.cc	/^int32_t WSSession::sendMessage(WSFrameMessage::ptr msg, bool fin) {$/;"	f	class:sylar::http::WSSession	typeref:typename:int32_t	signature:(WSFrameMessage::ptr msg,bool fin)
sendMessage	sylar/sylar/http/ws_session.cc	/^int32_t WSSession::sendMessage(const std::string& msg, int32_t opcode, bool fin) {$/;"	f	class:sylar::http::WSSession	typeref:typename:int32_t	signature:(const std::string & msg,int32_t opcode,bool fin)
sendMessage	sylar/sylar/http/ws_session.h	/^    int32_t sendMessage(WSFrameMessage::ptr msg, bool fin = true);$/;"	p	class:sylar::http::WSSession	typeref:typename:int32_t	access:public	signature:(WSFrameMessage::ptr msg,bool fin=true)
sendMessage	sylar/sylar/http/ws_session.h	/^    int32_t sendMessage(const std::string& msg, int32_t opcode = WSFrameHead::TEXT_FRAME, bool f/;"	p	class:sylar::http::WSSession	typeref:typename:int32_t	access:public	signature:(const std::string & msg,int32_t opcode=WSFrameHead::TEXT_FRAME,bool fin=true)
sendMessage	sylar/sylar/rock/rock_stream.cc	/^int32_t RockStream::sendMessage(Message::ptr msg) {$/;"	f	class:sylar::RockStream	typeref:typename:int32_t	signature:(Message::ptr msg)
sendMessage	sylar/sylar/rock/rock_stream.h	/^    int32_t sendMessage(Message::ptr msg);$/;"	p	class:sylar::RockStream	typeref:typename:int32_t	access:public	signature:(Message::ptr msg)
sendRequest	sylar/sylar/http/http_connection.cc	/^int HttpConnection::sendRequest(HttpRequest::ptr rsp) {$/;"	f	class:sylar::http::HttpConnection	typeref:typename:int	signature:(HttpRequest::ptr rsp)
sendRequest	sylar/sylar/http/http_connection.h	/^    int sendRequest(HttpRequest::ptr req);$/;"	p	class:sylar::http::HttpConnection	typeref:typename:int	access:public	signature:(HttpRequest::ptr req)
sendResponse	sylar/sylar/http/http_session.cc	/^int HttpSession::sendResponse(HttpResponse::ptr rsp) {$/;"	f	class:sylar::http::HttpSession	typeref:typename:int	signature:(HttpResponse::ptr rsp)
sendResponse	sylar/sylar/http/http_session.h	/^    int sendResponse(HttpResponse::ptr rsp);$/;"	p	class:sylar::http::HttpSession	typeref:typename:int	access:public	signature:(HttpResponse::ptr rsp)
sendTo	sylar/sylar/socket.cc	/^int SSLSocket::sendTo(const iovec* buffers, size_t length, const Address::ptr to, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(const iovec * buffers,size_t length,const Address::ptr to,int flags)
sendTo	sylar/sylar/socket.cc	/^int SSLSocket::sendTo(const void* buffer, size_t length, const Address::ptr to, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(const void * buffer,size_t length,const Address::ptr to,int flags)
sendTo	sylar/sylar/socket.cc	/^int Socket::sendTo(const iovec* buffers, size_t length, const Address::ptr to, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(const iovec * buffers,size_t length,const Address::ptr to,int flags)
sendTo	sylar/sylar/socket.cc	/^int Socket::sendTo(const void* buffer, size_t length, const Address::ptr to, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(const void * buffer,size_t length,const Address::ptr to,int flags)
sendTo	sylar/sylar/socket.h	/^    virtual int sendTo(const iovec* buffers, size_t length, const Address::ptr to, int flags = 0/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(const iovec * buffers,size_t length,const Address::ptr to,int flags=0)
sendTo	sylar/sylar/socket.h	/^    virtual int sendTo(const iovec* buffers, size_t length, const Address::ptr to, int flags = 0/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(const iovec * buffers,size_t length,const Address::ptr to,int flags=0)
sendTo	sylar/sylar/socket.h	/^    virtual int sendTo(const void* buffer, size_t length, const Address::ptr to, int flags = 0) /;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(const void * buffer,size_t length,const Address::ptr to,int flags=0)
sendTo	sylar/sylar/socket.h	/^    virtual int sendTo(const void* buffer, size_t length, const Address::ptr to, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(const void * buffer,size_t length,const Address::ptr to,int flags=0)
send_fun	sylar/sylar/hook.h	/^typedef ssize_t (*send_fun)(int s, const void *msg, size_t len, int flags);$/;"	t	typeref:typename:ssize_t (*)(int s,const void * msg,size_t len,int flags)
sendmsg	sylar/sylar/hook.cc	/^ssize_t sendmsg(int s, const struct msghdr *msg, int flags) {$/;"	f	typeref:typename:ssize_t	signature:(int s,const struct msghdr * msg,int flags)
sendmsg_fun	sylar/sylar/hook.h	/^typedef ssize_t (*sendmsg_fun)(int s, const struct msghdr *msg, int flags);$/;"	t	typeref:typename:ssize_t (*)(int s,const struct msghdr * msg,int flags)
sendto	sylar/sylar/hook.cc	/^ssize_t sendto(int s, const void *msg, size_t len, int flags, const struct sockaddr *to, socklen/;"	f	typeref:typename:ssize_t	signature:(int s,const void * msg,size_t len,int flags,const struct sockaddr * to,socklen_t tolen)
sendto_fun	sylar/sylar/hook.h	/^typedef ssize_t (*sendto_fun)(int s, const void *msg, size_t len, int flags, const struct sockad/;"	t	typeref:typename:ssize_t (*)(int s,const void * msg,size_t len,int flags,const struct sockaddr * to,socklen_t tolen)
serialization_table	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];$/;"	m	struct:TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto	typeref:typename:const::PROTOBUF_NAMESPACE_ID::internal::SerializationTable[]	access:public
serializeTo	sylar/sylar/protocol.h	/^    virtual int32_t serializeTo(Stream::ptr stream, Message::ptr msg) = 0;$/;"	p	class:sylar::MessageDecoder	typeref:typename:int32_t	access:public	signature:(Stream::ptr stream,Message::ptr msg)
serializeTo	sylar/sylar/rock/rock_protocol.cc	/^int32_t RockMessageDecoder::serializeTo(Stream::ptr stream, Message::ptr msg) {$/;"	f	class:sylar::RockMessageDecoder	typeref:typename:int32_t	signature:(Stream::ptr stream,Message::ptr msg)
serializeTo	sylar/sylar/rock/rock_protocol.h	/^    virtual int32_t serializeTo(Stream::ptr stream, Message::ptr msg) override;$/;"	p	class:sylar::RockMessageDecoder	typeref:typename:int32_t	access:public	signature:(Stream::ptr stream,Message::ptr msg)
serializeToByteArray	sylar/sylar/protocol.cc	/^bool Notify::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::Notify	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/protocol.cc	/^bool Request::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::Request	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/protocol.cc	/^bool Response::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::Response	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) = 0;$/;"	p	class:sylar::Message	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::Notify	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::Request	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::Response	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockBody::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockBody	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockNotify::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockNotify	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockRequest::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockRequest	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockResponse::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockResponse	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::RockNotify	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::RockRequest	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::RockResponse	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
serializeToByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray);$/;"	p	class:sylar::RockBody	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
serialize_message	sylar/sylar/util.cc	/^static void serialize_message(const google::protobuf::Message& message, Json::Value& jnode) {$/;"	f	namespace:sylar	typeref:typename:void	file:	signature:(const google::protobuf::Message & message,Json::Value & jnode)
serialize_unknowfieldset	sylar/sylar/util.cc	/^static void serialize_unknowfieldset(const google::protobuf::UnknownFieldSet& ufs, Json::Value& /;"	f	namespace:sylar	typeref:typename:void	file:	signature:(const google::protobuf::UnknownFieldSet & ufs,Json::Value & jnode)
server_main	sylar/tests/test_daemon.cc	/^int server_main(int argc, char** argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
service_callback	sylar/sylar/streams/service_discovery.h	/^                ,const std::unordered_map<uint64_t, ServiceItemInfo::ptr>& new_value)> service_c/;"	t	class:sylar::IServiceDiscovery	access:public
set	sylar/sylar/ds/bitmap.cc	/^void Bitmap::set(uint32_t from, uint32_t size, bool v) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(uint32_t from,uint32_t size,bool v)
set	sylar/sylar/ds/bitmap.cc	/^void Bitmap::set(uint32_t idx, bool v) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(uint32_t idx,bool v)
set	sylar/sylar/ds/bitmap.h	/^    void set(uint32_t from, uint32_t size, bool v);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(uint32_t from,uint32_t size,bool v)
set	sylar/sylar/ds/bitmap.h	/^    void set(uint32_t idx, bool v);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(uint32_t idx,bool v)
set	sylar/sylar/ds/hash_map.h	/^    bool set(const K& k, const V& v) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:public	signature:(const K & k,const V & v)
set	sylar/sylar/ds/hash_multimap.h	/^    bool set(const K& k, const V* v, const uint32_t& size) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,const V * v,const uint32_t & size)
set	sylar/sylar/ds/lru_cache.h	/^    void set(const K& k, const V& v) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:void	access:public	signature:(const K & k,const V & v)
set	sylar/sylar/ds/lru_cache.h	/^    void set(const K& k, const V& v) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:void	access:public	signature:(const K & k,const V & v)
set	sylar/sylar/ds/roaring_bitmap.cc	/^void RoaringBitmap::set(uint32_t from, uint32_t size, bool v) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:void	signature:(uint32_t from,uint32_t size,bool v)
set	sylar/sylar/ds/roaring_bitmap.cc	/^void RoaringBitmap::set(uint32_t idx, bool v) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:void	signature:(uint32_t idx,bool v)
set	sylar/sylar/ds/roaring_bitmap.h	/^    void set(uint32_t from, uint32_t size, bool v);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:void	access:public	signature:(uint32_t from,uint32_t size,bool v)
set	sylar/sylar/ds/roaring_bitmap.h	/^    void set(uint32_t idx, bool v);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:void	access:public	signature:(uint32_t idx,bool v)
set	sylar/sylar/ds/timed_cache.h	/^    void set(const K& k, const V& v, uint64_t expired) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:void	access:public	signature:(const K & k,const V & v,uint64_t expired)
set	sylar/sylar/ds/timed_cache.h	/^    void set(const K& k, const V& v, uint64_t expired) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:void	access:public	signature:(const K & k,const V & v,uint64_t expired)
set	sylar/sylar/ds/timed_lru_cache.h	/^    void set(const K& k, const V& v, uint64_t expired) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:void	access:public	signature:(const K & k,const V & v,uint64_t expired)
set	sylar/sylar/ds/timed_lru_cache.h	/^    void set(const K& k, const V& v, uint64_t expired) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:void	access:public	signature:(const K & k,const V & v,uint64_t expired)
set	sylar/sylar/ns/name_server_module.cc	/^void NameServerModule::set(sylar::RockStream::ptr rs, NSClientInfo::ptr new_value) {$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:void	signature:(sylar::RockStream::ptr rs,NSClientInfo::ptr new_value)
set	sylar/sylar/ns/name_server_module.h	/^    void set(sylar::RockStream::ptr rs, NSClientInfo::ptr info);$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:void	access:private	signature:(sylar::RockStream::ptr rs,NSClientInfo::ptr info)
set	sylar/sylar/streams/load_balance.cc	/^void LoadBalance::set(const std::vector<LoadBalanceItem::ptr>& vs) {$/;"	f	class:sylar::LoadBalance	typeref:typename:void	signature:(const std::vector<LoadBalanceItem::ptr> & vs)
set	sylar/sylar/streams/load_balance.h	/^    void set(const std::vector<LoadBalanceItem::ptr>& vs);$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:public	signature:(const std::vector<LoadBalanceItem::ptr> & vs)
set	sylar/sylar/zk_client.cc	/^int32_t ZKClient::set(const std::string& path, const std::string& val, int version, Stat* stat) /;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & path,const std::string & val,int version,Stat * stat)
set	sylar/sylar/zk_client.h	/^    int32_t set(const std::string& path, const std::string& val, int version = -1, Stat* stat = /;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & path,const std::string & val,int version=-1,Stat * stat=nullptr)
setAddrLen	sylar/sylar/address.cc	/^void UnixAddress::setAddrLen(uint32_t v) {$/;"	f	class:sylar::UnixAddress	typeref:typename:void	signature:(uint32_t v)
setAddrLen	sylar/sylar/address.h	/^    void setAddrLen(uint32_t v);$/;"	p	class:sylar::UnixAddress	typeref:typename:void	access:public	signature:(uint32_t v)
setAsPB	sylar/sylar/rock/rock_protocol.h	/^    bool setAsPB(const T& v) {$/;"	f	class:sylar::RockBody	typeref:typename:bool	access:public	signature:(const T & v)
setAutoConnect	sylar/sylar/streams/async_socket_stream.h	/^    void setAutoConnect(bool v) { m_autoConnect = v;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:(bool v)
setBccEMailAddress	sylar/sylar/email/email.h	/^    void setBccEMailAddress(const std::vector<std::string>& v) { m_bccEMailAddress = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::vector<std::string> & v)
setBody	sylar/sylar/email/email.h	/^    void setBody(const std::string& v) { m_body = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::string & v)
setBody	sylar/sylar/http/http.h	/^    void setBody(const std::string& v) { m_body = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & v)
setBody	sylar/sylar/http/http.h	/^    void setBody(const std::string& v) { m_body = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const std::string & v)
setBody	sylar/sylar/rock/rock_protocol.h	/^    void setBody(const std::string& v) { m_body = v;}$/;"	f	class:sylar::RockBody	typeref:typename:void	access:public	signature:(const std::string & v)
setCb	sylar/sylar/streams/load_balance.h	/^    void setCb(stream_callback v) { m_cb = v;}$/;"	f	class:sylar::SDLoadBalance	typeref:typename:void	access:public	signature:(stream_callback v)
setCcEMailAddress	sylar/sylar/email/email.h	/^    void setCcEMailAddress(const std::vector<std::string>& v) { m_ccEMailAddress = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::vector<std::string> & v)
setClose	sylar/sylar/http/http.h	/^    void setClose(bool v) { m_close = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(bool v)
setClose	sylar/sylar/http/http.h	/^    void setClose(bool v) { m_close = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(bool v)
setCmd	sylar/sylar/ns/ns_protocol.h	/^    void setCmd(uint32_t v) { m_cmd = v;}$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:void	access:public	signature:(uint32_t v)
setCmd	sylar/sylar/protocol.h	/^    void setCmd(uint32_t v) { m_cmd = v;}$/;"	f	class:sylar::Request	typeref:typename:void	access:public	signature:(uint32_t v)
setCmd	sylar/sylar/protocol.h	/^    void setCmd(uint32_t v) { m_cmd = v;}$/;"	f	class:sylar::Response	typeref:typename:void	access:public	signature:(uint32_t v)
setConf	sylar/sylar/tcp_server.cc	/^void TcpServer::setConf(const TcpServerConf& v) {$/;"	f	class:sylar::TcpServer	typeref:typename:void	signature:(const TcpServerConf & v)
setConf	sylar/sylar/tcp_server.h	/^    void setConf(TcpServerConf::ptr v) { m_conf = v;}$/;"	f	class:sylar::TcpServer	typeref:typename:void	access:public	signature:(TcpServerConf::ptr v)
setConf	sylar/sylar/tcp_server.h	/^    void setConf(const TcpServerConf& v);$/;"	p	class:sylar::TcpServer	typeref:typename:void	access:public	signature:(const TcpServerConf & v)
setConnectCb	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStreamManager::setConnectCb(connect_callback v) {$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:void	signature:(connect_callback v)
setConnectCb	sylar/sylar/streams/async_socket_stream.h	/^    void setConnectCb(connect_callback v) { m_connectCb = v;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:(connect_callback v)
setConnectCb	sylar/sylar/streams/async_socket_stream.h	/^    void setConnectCb(connect_callback v);$/;"	p	class:sylar::AsyncSocketStreamManager	typeref:typename:void	access:public	signature:(connect_callback v)
setConnection	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStreamManager::setConnection(const std::vector<AsyncSocketStream::ptr>& streams)/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:void	signature:(const std::vector<AsyncSocketStream::ptr> & streams)
setConnection	sylar/sylar/streams/async_socket_stream.h	/^    void setConnection(const std::vector<AsyncSocketStream::ptr>& streams);$/;"	p	class:sylar::AsyncSocketStreamManager	typeref:typename:void	access:public	signature:(const std::vector<AsyncSocketStream::ptr> & streams)
setContent	sylar/sylar/email/email.h	/^    void setContent(const std::string& v) { m_content = v;}$/;"	f	class:sylar::EMailEntity	typeref:typename:void	access:public	signature:(const std::string & v)
setCookie	sylar/sylar/http/http.cc	/^void HttpRequest::setCookie(const std::string& key, const std::string& val) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:(const std::string & key,const std::string & val)
setCookie	sylar/sylar/http/http.cc	/^void HttpResponse::setCookie(const std::string& key, const std::string& val,$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	signature:(const std::string & key,const std::string & val,time_t expired,const std::string & path,const std::string & domain,bool secure)
setCookie	sylar/sylar/http/http.h	/^    void setCookie(const std::string& key, const std::string& val);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val)
setCookie	sylar/sylar/http/http.h	/^    void setCookie(const std::string& key, const std::string& val,$/;"	p	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val,time_t expired=0,const std::string & path="",const std::string & domain="",bool secure=false)
setCookies	sylar/sylar/http/http.h	/^    void setCookies(const MapType& v) { m_cookies = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const MapType & v)
setCopyOnWrite	sylar/sylar/ds/roaring.hh	/^    void setCopyOnWrite(bool val) {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(bool val)
setCopyOnWrite	sylar/sylar/ds/roaring.hh	/^    void setCopyOnWrite(bool val) {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(bool val)
setData	sylar/sylar/db/fox_thread.cc	/^void  FoxThread::setData(const std::string& name, void* v) {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:(const std::string & name,void * v)
setData	sylar/sylar/db/fox_thread.h	/^    void setData(const std::string& name, void* v);$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:(const std::string & name,void * v)
setData	sylar/sylar/http/session_data.h	/^    void setData(const std::string& key, const T& v) {$/;"	f	class:sylar::http::SessionData	typeref:typename:void	access:public	signature:(const std::string & key,const T & v)
setData	sylar/sylar/http/ws_session.h	/^    void setData(const std::string& v) { m_data = v;}$/;"	f	class:sylar::http::WSFrameMessage	typeref:typename:void	access:public	signature:(const std::string & v)
setData	sylar/sylar/rock/rock_stream.h	/^    void setData(const T& v) {$/;"	f	class:sylar::RockStream	typeref:typename:void	access:public	signature:(const T & v)
setData	sylar/sylar/streams/async_socket_stream.h	/^    void setData(const T& v) { m_data = v;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:(const T & v)
setDefault	sylar/sylar/http/servlet.h	/^    void setDefault(Servlet::ptr v) { m_default = v;}$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(Servlet::ptr v)
setDisconnectCb	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStreamManager::setDisconnectCb(disconnect_callback v) {$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:void	signature:(disconnect_callback v)
setDisconnectCb	sylar/sylar/streams/async_socket_stream.h	/^    void setDisconnectCb(disconnect_callback v) { m_disconnectCb = v;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:(disconnect_callback v)
setDisconnectCb	sylar/sylar/streams/async_socket_stream.h	/^    void setDisconnectCb(disconnect_callback v);$/;"	p	class:sylar::AsyncSocketStreamManager	typeref:typename:void	access:public	signature:(disconnect_callback v)
setDomain	sylar/sylar/ns/ns_protocol.h	/^    void setDomain(const std::string& v) { m_domain = v;}$/;"	f	class:sylar::ns::NSDomain	typeref:typename:void	access:public	signature:(const std::string & v)
setElasticity	sylar/sylar/ds/lru_cache.h	/^    void setElasticity(const size_t& v) { m_elasticity = v;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:void	access:public	signature:(const size_t & v)
setElasticity	sylar/sylar/ds/lru_cache.h	/^    void setElasticity(const size_t& v) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:void	access:public	signature:(const size_t & v)
setElasticity	sylar/sylar/ds/timed_cache.h	/^    void setElasticity(const size_t& v) { m_elasticity = v;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:void	access:public	signature:(const size_t & v)
setElasticity	sylar/sylar/ds/timed_cache.h	/^    void setElasticity(const size_t& v) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:void	access:public	signature:(const size_t & v)
setElasticity	sylar/sylar/ds/timed_lru_cache.h	/^    void setElasticity(const size_t& v) { m_elasticity = v;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:void	access:public	signature:(const size_t & v)
setElasticity	sylar/sylar/ds/timed_lru_cache.h	/^    void setElasticity(const size_t& v) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:void	access:public	signature:(const size_t & v)
setEndcode	sylar/sylar/streams/zlib_stream.h	/^    void setEndcode(bool v) { m_encode = v;}$/;"	f	class:sylar::ZlibStream	typeref:typename:void	access:public	signature:(bool v)
setEnv	sylar/sylar/env.cc	/^bool Env::setEnv(const std::string& key, const std::string& val) {$/;"	f	class:sylar::Env	typeref:typename:bool	signature:(const std::string & key,const std::string & val)
setEnv	sylar/sylar/env.h	/^    bool setEnv(const std::string& key, const std::string& val);$/;"	p	class:sylar::Env	typeref:typename:bool	access:public	signature:(const std::string & key,const std::string & val)
setError	sylar/sylar/http/http_parser.h	/^    void setError(int v) { m_error = v;}$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:void	access:public	signature:(int v)
setError	sylar/sylar/http/http_parser.h	/^    void setError(int v) { m_error = v;}$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:void	access:public	signature:(int v)
setFilename	sylar/sylar/module.h	/^    void setFilename(const std::string& v) { m_filename = v;}$/;"	f	class:sylar::Module	typeref:typename:void	access:public	signature:(const std::string & v)
setFormatter	sylar/sylar/log.cc	/^void LogAppender::setFormatter(LogFormatter::ptr val) {$/;"	f	class:sylar::LogAppender	typeref:typename:void	signature:(LogFormatter::ptr val)
setFormatter	sylar/sylar/log.cc	/^void Logger::setFormatter(LogFormatter::ptr val) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogFormatter::ptr val)
setFormatter	sylar/sylar/log.cc	/^void Logger::setFormatter(const std::string& val) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(const std::string & val)
setFormatter	sylar/sylar/log.h	/^    void setFormatter(LogFormatter::ptr val);$/;"	p	class:sylar::LogAppender	typeref:typename:void	access:public	signature:(LogFormatter::ptr val)
setFormatter	sylar/sylar/log.h	/^    void setFormatter(LogFormatter::ptr val);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogFormatter::ptr val)
setFormatter	sylar/sylar/log.h	/^    void setFormatter(const std::string& val);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(const std::string & val)
setFragment	sylar/sylar/http/http.h	/^    void setFragment(const std::string& v) { m_fragment = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & v)
setFragment	sylar/sylar/uri.h	/^    void setFragment(const std::string& v) { m_fragment = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(const std::string & v)
setFree	sylar/sylar/streams/zlib_stream.h	/^    void setFree(bool v) { m_free = v;}$/;"	f	class:sylar::ZlibStream	typeref:typename:void	access:public	signature:(bool v)
setFromEMailAddress	sylar/sylar/email/email.h	/^    void setFromEMailAddress(const std::string& v) { m_fromEMailAddress = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::string & v)
setFromEMailPasswd	sylar/sylar/email/email.h	/^    void setFromEMailPasswd(const std::string& v) { m_fromEMailPasswd = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::string & v)
setHeader	sylar/sylar/http/http.cc	/^void HttpRequest::setHeader(const std::string& key, const std::string& val) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:(const std::string & key,const std::string & val)
setHeader	sylar/sylar/http/http.cc	/^void HttpResponse::setHeader(const std::string& key, const std::string& val) {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	signature:(const std::string & key,const std::string & val)
setHeader	sylar/sylar/http/http.h	/^    void setHeader(const std::string& key, const std::string& val);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val)
setHeader	sylar/sylar/http/http.h	/^    void setHeader(const std::string& key, const std::string& val);$/;"	p	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val)
setHeaders	sylar/sylar/http/http.h	/^    void setHeaders(const MapType& v) { m_headers = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const MapType & v)
setHeaders	sylar/sylar/http/http.h	/^    void setHeaders(const MapType& v) { m_headers = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const MapType & v)
setHost	sylar/sylar/uri.h	/^    void setHost(const std::string& v) { m_host = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(const std::string & v)
setIOManager	sylar/sylar/streams/async_socket_stream.h	/^    void setIOManager(sylar::IOManager* v) { m_iomanager = v;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:(sylar::IOManager * v)
setId	sylar/sylar/http/session_data.h	/^    void setId(const std::string& val) { m_id = val;}$/;"	f	class:sylar::http::SessionData	typeref:typename:void	access:public	signature:(const std::string & val)
setId	sylar/sylar/streams/load_balance.h	/^    void setId(uint64_t v) { m_id = v;}$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:void	access:public	signature:(uint64_t v)
setIndex	sylar/sylar/ds/util.cc	/^void PrimeGenerator::setIndex(uint32_t idx) {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:void	signature:(uint32_t idx)
setIndex	sylar/sylar/ds/util.h	/^    void setIndex(uint32_t idx);$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:void	access:public	signature:(uint32_t idx)
setInitCb	sylar/sylar/db/fox_thread.h	/^    void setInitCb(FoxThread::init_cb v) { m_initCb = v;}$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	access:public	signature:(FoxThread::init_cb v)
setInitCb	sylar/sylar/db/fox_thread.h	/^    void setInitCb(init_cb v) { m_initCb = v;}$/;"	f	class:sylar::FoxThread	typeref:typename:void	access:public	signature:(init_cb v)
setIsLittleEndian	sylar/sylar/bytearray.cc	/^void ByteArray::setIsLittleEndian(bool val) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(bool val)
setIsLittleEndian	sylar/sylar/bytearray.h	/^    void setIsLittleEndian(bool val);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(bool val)
setLastAccessTime	sylar/sylar/http/session_data.h	/^    void setLastAccessTime(uint64_t v) { m_lastAccessTime = v;}$/;"	f	class:sylar::http::SessionData	typeref:typename:void	access:public	signature:(uint64_t v)
setLastActiveTime	sylar/sylar/db/redis.h	/^    void setLastActiveTime(uint64_t v) { m_lastActiveTime = v;}$/;"	f	class:sylar::ISyncRedis	typeref:typename:void	access:public	signature:(uint64_t v)
setLevel	sylar/sylar/log.h	/^    void setLevel(LogLevel::Level val) { m_level = val;}$/;"	f	class:sylar::LogAppender	typeref:typename:void	access:public	signature:(LogLevel::Level val)
setLevel	sylar/sylar/log.h	/^    void setLevel(LogLevel::Level val) { m_level = val;}$/;"	f	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogLevel::Level val)
setMaxConn	sylar/sylar/db/mysql.h	/^    void setMaxConn(uint32_t v) { m_maxConn = v;}$/;"	f	class:sylar::MySQLManager	typeref:typename:void	access:public	signature:(uint32_t v)
setMaxConn	sylar/sylar/db/sqlite3.h	/^    void setMaxConn(uint32_t v) { m_maxConn = v;}$/;"	f	class:sylar::SQLite3Manager	typeref:typename:void	access:public	signature:(uint32_t v)
setMaxSize	sylar/sylar/ds/lru_cache.h	/^    void setMaxSize(const size_t& v) { m_maxSize = v;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:void	access:public	signature:(const size_t & v)
setMaxSize	sylar/sylar/ds/lru_cache.h	/^    void setMaxSize(const size_t& v) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:void	access:public	signature:(const size_t & v)
setMaxSize	sylar/sylar/ds/timed_cache.h	/^    void setMaxSize(const size_t& v) { m_maxSize = v;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:void	access:public	signature:(const size_t & v)
setMaxSize	sylar/sylar/ds/timed_cache.h	/^    void setMaxSize(const size_t& v) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:void	access:public	signature:(const size_t & v)
setMaxSize	sylar/sylar/ds/timed_lru_cache.h	/^    void setMaxSize(const size_t& v) { m_maxSize = v;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:void	access:public	signature:(const size_t & v)
setMaxSize	sylar/sylar/ds/timed_lru_cache.h	/^    void setMaxSize(const size_t& v) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:void	access:public	signature:(const size_t & v)
setMethod	sylar/sylar/http/http.h	/^    void setMethod(HttpMethod v) { m_method = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(HttpMethod v)
setName	sylar/sylar/db/redis.h	/^    void setName(const std::string& v) { m_name = v;}$/;"	f	class:sylar::IRedis	typeref:typename:void	access:public	signature:(const std::string & v)
setName	sylar/sylar/http/http_server.cc	/^void HttpServer::setName(const std::string& v) {$/;"	f	class:sylar::http::HttpServer	typeref:typename:void	signature:(const std::string & v)
setName	sylar/sylar/http/http_server.h	/^    virtual void setName(const std::string& v) override;$/;"	p	class:sylar::http::HttpServer	typeref:typename:void	access:public	signature:(const std::string & v)
setName	sylar/sylar/tcp_server.h	/^    virtual void setName(const std::string& v) { m_name = v;}$/;"	f	class:sylar::TcpServer	typeref:typename:void	access:public	signature:(const std::string & v)
setNotify	sylar/sylar/protocol.h	/^    void setNotify(uint32_t v) { m_notify = v;}$/;"	f	class:sylar::Notify	typeref:typename:void	access:public	signature:(uint32_t v)
setNotifyHandler	sylar/sylar/rock/rock_stream.h	/^    void setNotifyHandler(notify_handler v) { m_notifyHandler = v;}$/;"	f	class:sylar::RockStream	typeref:typename:void	access:public	signature:(notify_handler v)
setOpcode	sylar/sylar/http/ws_session.h	/^    void setOpcode(int v) { m_opcode = v;}$/;"	f	class:sylar::http::WSFrameMessage	typeref:typename:void	access:public	signature:(int v)
setOption	sylar/sylar/socket.cc	/^bool Socket::setOption(int level, int option, const void* result, socklen_t len) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(int level,int option,const void * result,socklen_t len)
setOption	sylar/sylar/socket.h	/^    bool setOption(int level, int option, const T& value) {$/;"	f	class:sylar::Socket	typeref:typename:bool	access:public	signature:(int level,int option,const T & value)
setOption	sylar/sylar/socket.h	/^    bool setOption(int level, int option, const void* result, socklen_t len);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:(int level,int option,const void * result,socklen_t len)
setParam	sylar/sylar/http/http.cc	/^void HttpRequest::setParam(const std::string& key, const std::string& val) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:(const std::string & key,const std::string & val)
setParam	sylar/sylar/http/http.h	/^    void setParam(const std::string& key, const std::string& val);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val)
setParams	sylar/sylar/http/http.h	/^    void setParams(const MapType& v) { m_params = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const MapType & v)
setPasswd	sylar/sylar/db/redis.h	/^    void setPasswd(const std::string& v) { m_passwd = v;}$/;"	f	class:sylar::IRedis	typeref:typename:void	access:public	signature:(const std::string & v)
setPath	sylar/sylar/http/http.h	/^    void setPath(const std::string& v) { m_path = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & v)
setPath	sylar/sylar/uri.h	/^    void setPath(const std::string& v) { m_path = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(const std::string & v)
setPort	sylar/sylar/address.cc	/^void IPv4Address::setPort(uint16_t v) {$/;"	f	class:sylar::IPv4Address	typeref:typename:void	signature:(uint16_t v)
setPort	sylar/sylar/address.cc	/^void IPv6Address::setPort(uint16_t v) {$/;"	f	class:sylar::IPv6Address	typeref:typename:void	signature:(uint16_t v)
setPort	sylar/sylar/address.h	/^    virtual void setPort(uint16_t v) = 0;$/;"	p	class:sylar::IPAddress	typeref:typename:void	access:public	signature:(uint16_t v)
setPort	sylar/sylar/address.h	/^    void setPort(uint16_t v) override;$/;"	p	class:sylar::IPv4Address	typeref:typename:void	access:public	signature:(uint16_t v)
setPort	sylar/sylar/address.h	/^    void setPort(uint16_t v) override;$/;"	p	class:sylar::IPv6Address	typeref:typename:void	access:public	signature:(uint16_t v)
setPort	sylar/sylar/uri.h	/^    void setPort(int32_t v) { m_port = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(int32_t v)
setPosition	sylar/sylar/bytearray.cc	/^void ByteArray::setPosition(size_t v) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(size_t v)
setPosition	sylar/sylar/bytearray.h	/^    void setPosition(size_t v);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(size_t v)
setPruneCallback	sylar/sylar/ds/lru_cache.h	/^    void setPruneCallback(prune_callback cb) { m_cb = cb;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:void	access:public	signature:(prune_callback cb)
setPruneCallback	sylar/sylar/ds/lru_cache.h	/^    void setPruneCallback(typename cache_type::prune_callback cb) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:void	access:public	signature:(typename cache_type::prune_callback cb)
setPruneCallback	sylar/sylar/ds/timed_cache.h	/^    void setPruneCallback(prune_callback cb) { m_cb = cb;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:void	access:public	signature:(prune_callback cb)
setPruneCallback	sylar/sylar/ds/timed_cache.h	/^    void setPruneCallback(typename cache_type::prune_callback cb) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:void	access:public	signature:(typename cache_type::prune_callback cb)
setPruneCallback	sylar/sylar/ds/timed_lru_cache.h	/^    void setPruneCallback(prune_callback cb) { m_cb = cb;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:void	access:public	signature:(prune_callback cb)
setPruneCallback	sylar/sylar/ds/timed_lru_cache.h	/^    void setPruneCallback(typename cache_type::prune_callback cb) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:void	access:public	signature:(typename cache_type::prune_callback cb)
setQuery	sylar/sylar/http/http.h	/^    void setQuery(const std::string& v) { m_query = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & v)
setQuery	sylar/sylar/uri.h	/^    void setQuery(const std::string& v) { m_query = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(const std::string & v)
setQueryDomain	sylar/sylar/ns/name_server_module.cc	/^void NameServerModule::setQueryDomain(sylar::RockStream::ptr rs, const std::set<std::string>& ds/;"	f	class:sylar::ns::NameServerModule	typeref:typename:void	signature:(sylar::RockStream::ptr rs,const std::set<std::string> & ds)
setQueryDomain	sylar/sylar/ns/name_server_module.h	/^    void setQueryDomain(sylar::RockStream::ptr rs, const std::set<std::string>& ds);$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:void	access:private	signature:(sylar::RockStream::ptr rs,const std::set<std::string> & ds)
setQueryDomains	sylar/sylar/ns/ns_client.cc	/^void NSClient::setQueryDomains(const std::set<std::string>& v) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:(const std::set<std::string> & v)
setQueryDomains	sylar/sylar/ns/ns_client.h	/^    void setQueryDomains(const std::set<std::string>& v);$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:public	signature:(const std::set<std::string> & v)
setQueryServer	sylar/sylar/streams/service_discovery.cc	/^void IServiceDiscovery::setQueryServer(const std::unordered_map<std::string, std::unordered_set</;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	signature:(const std::unordered_map<std::string,std::unordered_set<std::string>> & v)
setQueryServer	sylar/sylar/streams/service_discovery.h	/^    void setQueryServer(const std::unordered_map<std::string, std::unordered_set<std::string> >&/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(const std::unordered_map<std::string,std::unordered_set<std::string>> & v)
setReason	sylar/sylar/http/http.h	/^    void setReason(const std::string& v) { m_reason = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const std::string & v)
setRecvTimeout	sylar/sylar/socket.cc	/^void Socket::setRecvTimeout(int64_t v) {$/;"	f	class:sylar::Socket	typeref:typename:void	signature:(int64_t v)
setRecvTimeout	sylar/sylar/socket.h	/^    void setRecvTimeout(int64_t v);$/;"	p	class:sylar::Socket	typeref:typename:void	access:public	signature:(int64_t v)
setRecvTimeout	sylar/sylar/tcp_server.h	/^    void setRecvTimeout(uint64_t v) { m_recvTimeout = v;}$/;"	f	class:sylar::TcpServer	typeref:typename:void	access:public	signature:(uint64_t v)
setRedirect	sylar/sylar/http/http.cc	/^void HttpResponse::setRedirect(const std::string& uri) {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	signature:(const std::string & uri)
setRedirect	sylar/sylar/http/http.h	/^    void setRedirect(const std::string& uri);$/;"	p	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const std::string & uri)
setRequestHandler	sylar/sylar/rock/rock_stream.h	/^    void setRequestHandler(request_handler v) { m_requestHandler = v;}$/;"	f	class:sylar::RockStream	typeref:typename:void	access:public	signature:(request_handler v)
setResult	sylar/sylar/protocol.h	/^    void setResult(uint32_t v) { m_result = v;}$/;"	f	class:sylar::Response	typeref:typename:void	access:public	signature:(uint32_t v)
setResultStr	sylar/sylar/protocol.h	/^    void setResultStr(const std::string& v) { m_resultStr = v;}$/;"	f	class:sylar::Response	typeref:typename:void	access:public	signature:(const std::string & v)
setScheme	sylar/sylar/uri.h	/^    void setScheme(const std::string& v) { m_scheme = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(const std::string & v)
setSelfData	sylar/sylar/streams/service_discovery.h	/^    void setSelfData(const std::string& v) { m_selfData = v;}$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:public	signature:(const std::string & v)
setSelfInfo	sylar/sylar/streams/service_discovery.h	/^    void setSelfInfo(const std::string& v) { m_selfInfo = v;}$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:public	signature:(const std::string & v)
setSendTimeout	sylar/sylar/socket.cc	/^void Socket::setSendTimeout(int64_t v) {$/;"	f	class:sylar::Socket	typeref:typename:void	signature:(int64_t v)
setSendTimeout	sylar/sylar/socket.h	/^    void setSendTimeout(int64_t v);$/;"	p	class:sylar::Socket	typeref:typename:void	access:public	signature:(int64_t v)
setServers	sylar/sylar/zk_client.cc	/^int32_t ZKClient::setServers(const std::string& hosts) {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & hosts)
setServers	sylar/sylar/zk_client.h	/^    int32_t setServers(const std::string& hosts);$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & hosts)
setServiceCallback	sylar/sylar/streams/service_discovery.h	/^    void setServiceCallback(service_callback v) { m_cb = v;}$/;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(service_callback v)
setServletDispatch	sylar/sylar/http/http_server.h	/^    void setServletDispatch(ServletDispatch::ptr v) { m_dispatch = v;}$/;"	f	class:sylar::http::HttpServer	typeref:typename:void	access:public	signature:(ServletDispatch::ptr v)
setSn	sylar/sylar/protocol.h	/^    void setSn(uint32_t v) { m_sn = v;}$/;"	f	class:sylar::Request	typeref:typename:void	access:public	signature:(uint32_t v)
setSn	sylar/sylar/protocol.h	/^    void setSn(uint32_t v) { m_sn = v;}$/;"	f	class:sylar::Response	typeref:typename:void	access:public	signature:(uint32_t v)
setStatus	sylar/sylar/ds/lru_cache.h	/^    void setStatus(CacheStatus* v, bool owner = false) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:void	access:public	signature:(CacheStatus * v,bool owner=false)
setStatus	sylar/sylar/ds/timed_cache.h	/^    void setStatus(CacheStatus* v, bool owner = false) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:void	access:public	signature:(CacheStatus * v,bool owner=false)
setStatus	sylar/sylar/ds/timed_lru_cache.h	/^    void setStatus(CacheStatus* v, bool owner = false) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:void	access:public	signature:(CacheStatus * v,bool owner=false)
setStatus	sylar/sylar/http/http.h	/^    void setStatus(HttpStatus v) { m_status = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(HttpStatus v)
setStream	sylar/sylar/streams/load_balance.h	/^    void setStream(SocketStream::ptr v) { m_stream = v;}$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:void	access:public	signature:(SocketStream::ptr v)
setSysNonblock	sylar/sylar/fd_manager.h	/^    void setSysNonblock(bool v) { m_sysNonblock = v;}$/;"	f	class:sylar::FdCtx	typeref:typename:void	access:public	signature:(bool v)
setThis	sylar/sylar/db/fox_thread.cc	/^void FoxThread::setThis() {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:()
setThis	sylar/sylar/db/fox_thread.h	/^    void setThis();$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:()
setThis	sylar/sylar/scheduler.cc	/^void Scheduler::setThis() {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:()
setThis	sylar/sylar/scheduler.h	/^    void setThis();$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:protected	signature:()
setTimeout	sylar/sylar/db/redis.cc	/^bool Redis::setTimeout(uint64_t v) {$/;"	f	class:sylar::Redis	typeref:typename:bool	signature:(uint64_t v)
setTimeout	sylar/sylar/db/redis.cc	/^bool RedisCluster::setTimeout(uint64_t ms) {$/;"	f	class:sylar::RedisCluster	typeref:typename:bool	signature:(uint64_t ms)
setTimeout	sylar/sylar/db/redis.h	/^    virtual bool setTimeout(uint64_t ms) = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:bool	access:public	signature:(uint64_t ms)
setTimeout	sylar/sylar/db/redis.h	/^    virtual bool setTimeout(uint64_t ms);$/;"	p	class:sylar::Redis	typeref:typename:bool	access:public	signature:(uint64_t ms)
setTimeout	sylar/sylar/db/redis.h	/^    virtual bool setTimeout(uint64_t ms);$/;"	p	class:sylar::RedisCluster	typeref:typename:bool	access:public	signature:(uint64_t ms)
setTimeout	sylar/sylar/fd_manager.cc	/^void FdCtx::setTimeout(int type, uint64_t v) {$/;"	f	class:sylar::FdCtx	typeref:typename:void	signature:(int type,uint64_t v)
setTimeout	sylar/sylar/fd_manager.h	/^    void setTimeout(int type, uint64_t v);$/;"	p	class:sylar::FdCtx	typeref:typename:void	access:public	signature:(int type,uint64_t v)
setTitle	sylar/sylar/email/email.h	/^    void setTitle(const std::string& v) { m_title = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::string & v)
setToEMailAddress	sylar/sylar/email/email.h	/^    void setToEMailAddress(const std::vector<std::string>& v) { m_toEMailAddress = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::vector<std::string> & v)
setUserNonblock	sylar/sylar/fd_manager.h	/^    void setUserNonblock(bool v) { m_userNonblock = v;}$/;"	f	class:sylar::FdCtx	typeref:typename:void	access:public	signature:(bool v)
setUserinfo	sylar/sylar/uri.h	/^    void setUserinfo(const std::string& v) { m_userinfo = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(const std::string & v)
setValue	sylar/sylar/config.h	/^    void setValue(const T& v) {$/;"	f	class:sylar::ConfigVar	typeref:typename:void	access:public	signature:(const T & v)
setVersion	sylar/sylar/http/http.h	/^    void setVersion(uint8_t v) { m_version = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(uint8_t v)
setVersion	sylar/sylar/http/http.h	/^    void setVersion(uint8_t v) { m_version = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(uint8_t v)
setWSServletDispatch	sylar/sylar/http/ws_server.h	/^    void setWSServletDispatch(WSServletDispatch::ptr v) { m_dispatch = v;}$/;"	f	class:sylar::http::WSServer	typeref:typename:void	access:public	signature:(WSServletDispatch::ptr v)
setWebsocket	sylar/sylar/http/http.h	/^    void setWebsocket(bool v) { m_websocket = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(bool v)
setWebsocket	sylar/sylar/http/http.h	/^    void setWebsocket(bool v) { m_websocket = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(bool v)
setWeight	sylar/sylar/ns/ns_protocol.h	/^    void setWeight(uint32_t v) { m_weight = v;}$/;"	f	class:sylar::ns::NSNode	typeref:typename:void	access:public	signature:(uint32_t v)
setWeight	sylar/sylar/streams/load_balance.h	/^    void setWeight(int32_t v) { m_weight = v;}$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:void	access:public	signature:(int32_t v)
setWorker	sylar/sylar/streams/async_socket_stream.h	/^    void setWorker(sylar::IOManager* v) { m_worker = v;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:(sylar::IOManager * v)
set_allocated_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_allocated_domain(std::string* domain);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(std::string * domain)
set_allocated_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_allocated_domain(std::string* domain);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(std::string * domain)
set_allocated_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::set_allocated_domain(std::string* domain) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(std::string * domain)
set_allocated_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::set_allocated_domain(std::string* domain) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(std::string * domain)
set_allocated_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_allocated_ip(std::string* ip);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(std::string * ip)
set_allocated_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::set_allocated_ip(std::string* ip) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(std::string * ip)
set_allocated_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_allocated_node(::sylar::ns::Node* node);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(::sylar::ns::Node * node)
set_allocated_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::set_allocated_node(::sylar::ns::Node* node) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(::sylar::ns::Node * node)
set_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_cmd(uint32_t value);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(uint32_t value)
set_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::set_cmd(uint32_t value) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(uint32_t value)
set_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_cmds(int index, uint32_t value);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(int index,uint32_t value)
set_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::set_cmds(int index, uint32_t value) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(int index,uint32_t value)
set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_domain(ArgT0&& arg0, ArgT... args);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(ArgT0 && arg0,ArgT...args)
set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_domain(ArgT0&& arg0, ArgT... args);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(ArgT0 && arg0,ArgT...args)
set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^void NodeInfo::set_domain(ArgT0&& arg0, ArgT... args) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:PROTOBUF_ALWAYS_INLINE void	signature:(ArgT0 && arg0,ArgT...args)
set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^void RegisterInfo::set_domain(ArgT0&& arg0, ArgT... args) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:PROTOBUF_ALWAYS_INLINE void	signature:(ArgT0 && arg0,ArgT...args)
set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_domains(int index, const char* value);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(int index,const char * value)
set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_domains(int index, const char* value, size_t size);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(int index,const char * value,size_t size)
set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_domains(int index, const std::string& value);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(int index,const std::string & value)
set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_domains(int index, std::string&& value);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(int index,std::string && value)
set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::set_domains(int index, const char* value) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(int index,const char * value)
set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::set_domains(int index, const char* value, size_t size) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(int index,const char * value,size_t size)
set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::set_domains(int index, const std::string& value) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(int index,const std::string & value)
set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::set_domains(int index, std::string&& value) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(int index,std::string && value)
set_has_cmd	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_cmd(HasBits* has_bits) {$/;"	f	class:sylar::ns::NodeInfo::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
set_has_domain	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_domain(HasBits* has_bits) {$/;"	f	class:sylar::ns::NodeInfo::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
set_has_domain	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_domain(HasBits* has_bits) {$/;"	f	class:sylar::ns::RegisterInfo::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
set_has_ip	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_ip(HasBits* has_bits) {$/;"	f	class:sylar::ns::Node::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
set_has_node	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_node(HasBits* has_bits) {$/;"	f	class:sylar::ns::RegisterInfo::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
set_has_port	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_port(HasBits* has_bits) {$/;"	f	class:sylar::ns::Node::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
set_has_weight	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_weight(HasBits* has_bits) {$/;"	f	class:sylar::ns::Node::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
set_hook_enable	sylar/sylar/hook.cc	/^void set_hook_enable(bool flag) {$/;"	f	namespace:sylar	typeref:typename:void	signature:(bool flag)
set_hook_enable	sylar/sylar/hook.h	/^    void set_hook_enable(bool flag);$/;"	p	namespace:sylar	typeref:typename:void	signature:(bool flag)
set_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_ip(ArgT0&& arg0, ArgT... args);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(ArgT0 && arg0,ArgT...args)
set_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^void Node::set_ip(ArgT0&& arg0, ArgT... args) {$/;"	f	class:sylar::ns::Node	typeref:typename:PROTOBUF_ALWAYS_INLINE void	signature:(ArgT0 && arg0,ArgT...args)
set_port	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_port(uint32_t value);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(uint32_t value)
set_port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::set_port(uint32_t value) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(uint32_t value)
set_type	sylar/sylar/ds/timed_cache.h	/^    typedef std::set<item_type> set_type;$/;"	t	class:sylar::ds::TimedCache	typeref:typename:std::set<item_type>	access:public
set_type	sylar/sylar/ds/timed_lru_cache.h	/^    typedef std::set<value_type, ItemTimeOp> set_type;$/;"	t	class:sylar::ds::TimedLruCache	typeref:typename:std::set<value_type,ItemTimeOp>	access:public
set_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_weight(uint32_t value);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(uint32_t value)
set_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::set_weight(uint32_t value) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(uint32_t value)
setsockopt	sylar/sylar/hook.cc	/^int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen) {$/;"	f	typeref:typename:int	signature:(int sockfd,int level,int optname,const void * optval,socklen_t optlen)
setsockopt_fun	sylar/sylar/hook.h	/^typedef int (*setsockopt_fun)(int sockfd, int level, int optname, const void *optval, socklen_t /;"	t	typeref:typename:int (*)(int sockfd,int level,int optname,const void * optval,socklen_t optlen)
sha0sum	sylar/sylar/util/hash_util.cc	/^std::string sha0sum(const std::string & data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sha0sum	sylar/sylar/util/hash_util.cc	/^std::string sha0sum(const void *data, size_t len) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
sha0sum	sylar/sylar/util/hash_util.h	/^std::string sha0sum(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sha0sum	sylar/sylar/util/hash_util.h	/^std::string sha0sum(const void *data, size_t len);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
sha1	sylar/sylar/util/hash_util.cc	/^std::string sha1(const std::string &data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sha1	sylar/sylar/util/hash_util.h	/^std::string sha1(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sha1sum	sylar/sylar/util/hash_util.cc	/^std::string sha1sum(const std::string &data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sha1sum	sylar/sylar/util/hash_util.cc	/^std::string sha1sum(const void *data, size_t len) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
sha1sum	sylar/sylar/util/hash_util.h	/^std::string sha1sum(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sha1sum	sylar/sylar/util/hash_util.h	/^std::string sha1sum(const void *data, size_t len);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
shared_container_extract_copy	sylar/sylar/ds/roaring.c	/^void *shared_container_extract_copy(shared_container_t *container,$/;"	f	typeref:typename:void *	signature:(shared_container_t * container,uint8_t * typecode)
shared_container_extract_copy	sylar/sylar/ds/roaring.h	/^void *shared_container_extract_copy(shared_container_t *container,$/;"	p	typeref:typename:void *	signature:(shared_container_t * container,uint8_t * typecode)
shared_container_free	sylar/sylar/ds/roaring.c	/^void shared_container_free(shared_container_t *container) {$/;"	f	typeref:typename:void	signature:(shared_container_t * container)
shared_container_free	sylar/sylar/ds/roaring.h	/^void shared_container_free(shared_container_t *container);$/;"	p	typeref:typename:void	signature:(shared_container_t * container)
shared_container_names	sylar/sylar/ds/roaring.h	/^static const char *shared_container_names[] = {$/;"	v	typeref:typename:const char * []
shared_container_s	sylar/sylar/ds/roaring.h	/^struct shared_container_s {$/;"	s
shared_container_s::container	sylar/sylar/ds/roaring.h	/^    void *container;$/;"	m	struct:shared_container_s	typeref:typename:void *	access:public
shared_container_s::counter	sylar/sylar/ds/roaring.h	/^    uint32_t counter;  \/\/ to be managed atomically$/;"	m	struct:shared_container_s	typeref:typename:uint32_t	access:public
shared_container_s::typecode	sylar/sylar/ds/roaring.h	/^    uint8_t typecode;$/;"	m	struct:shared_container_s	typeref:typename:uint8_t	access:public
shared_container_t	sylar/sylar/ds/roaring.h	/^typedef struct shared_container_s shared_container_t;$/;"	t	typeref:struct:shared_container_s
shrinkToFit	sylar/sylar/ds/roaring.hh	/^    size_t shrinkToFit() { return roaring_bitmap_shrink_to_fit(&roaring); }$/;"	f	class:Roaring	typeref:typename:size_t	access:public	signature:()
shrinkToFit	sylar/sylar/ds/roaring.hh	/^    size_t shrinkToFit() {$/;"	f	class:Roaring64Map	typeref:typename:size_t	access:public	signature:()
size	sylar/sylar/bytearray.h	/^        size_t size;$/;"	m	struct:sylar::ByteArray::Node	typeref:typename:size_t	access:public
size	sylar/sylar/ds/array.h	/^    uint64_t size() const { return m_size;}$/;"	f	class:sylar::ds::Array	typeref:typename:uint64_t	access:public	signature:() const
size	sylar/sylar/ds/dict.h	/^        int size;$/;"	m	struct:sylar::ds::Dict::Node	typeref:typename:int	access:public
size	sylar/sylar/ds/hash_multimap.h	/^        int size;$/;"	m	struct:sylar::ds::HashMultimap::Node	typeref:typename:int	access:public
size	sylar/sylar/ds/lru_cache.h	/^    size_t size() {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:public	signature:()
size	sylar/sylar/ds/lru_cache.h	/^    size_t size() {$/;"	f	class:sylar::ds::LruCache	typeref:typename:size_t	access:public	signature:()
size	sylar/sylar/ds/roaring.c	/^    uint64_t size;$/;"	m	struct:roaring_pq_element_s	typeref:typename:uint64_t	file:	access:public
size	sylar/sylar/ds/roaring.c	/^    uint64_t size;$/;"	m	struct:roaring_pq_s	typeref:typename:uint64_t	file:	access:public
size	sylar/sylar/ds/roaring.h	/^    int32_t size;$/;"	m	struct:roaring_array_s	typeref:typename:int32_t	access:public
size	sylar/sylar/ds/timed_cache.h	/^    size_t size() {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:public	signature:()
size	sylar/sylar/ds/timed_cache.h	/^    size_t size() {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:public	signature:()
size	sylar/sylar/ds/timed_lru_cache.h	/^    size_t size() {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:public	signature:()
size	sylar/sylar/ds/timed_lru_cache.h	/^    size_t size() {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:public	signature:()
size	sylar/sylar/ns/ns_protocol.cc	/^size_t NSDomain::size() {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:size_t	signature:()
size	sylar/sylar/ns/ns_protocol.cc	/^size_t NSNodeSet::size() {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:size_t	signature:()
size	sylar/sylar/ns/ns_protocol.h	/^    size_t size();$/;"	p	class:sylar::ns::NSDomain	typeref:typename:size_t	access:public	signature:()
size	sylar/sylar/ns/ns_protocol.h	/^    size_t size();$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:size_t	access:public	signature:()
size	sylar/sylar/util.h	/^    uint64_t size() const {$/;"	f	class:sylar::SharedArray	typeref:typename:uint64_t	access:public	signature:() const
sleep	sylar/sylar/hook.cc	/^unsigned int sleep(unsigned int seconds) {$/;"	f	typeref:typename:unsigned int	signature:(unsigned int seconds)
sleep_fun	sylar/sylar/hook.h	/^typedef unsigned int (*sleep_fun)(unsigned int seconds);$/;"	t	typeref:typename:unsigned int (*)(unsigned int seconds)
sn	sylar/sylar/streams/async_socket_stream.h	/^        uint32_t sn;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:uint32_t	access:public
sock	sylar/tests/test_iomanager.cc	/^int sock = 0;$/;"	v	typeref:typename:int
socket	sylar/sylar/hook.cc	/^int socket(int domain, int type, int protocol) {$/;"	f	typeref:typename:int	signature:(int domain,int type,int protocol)
socket_fun	sylar/sylar/hook.h	/^typedef int (*socket_fun)(int domain, int type, int protocol);$/;"	t	typeref:typename:int (*)(int domain,int type,int protocol)
sort	sylar/sylar/ds/array.h	/^    void sort() {$/;"	f	class:sylar::ds::Array	typeref:typename:void	access:public	signature:()
sort	sylar/sylar/ds/array.h	/^    void sort(std::function<bool(const T&, const T&)> cmp) {$/;"	f	class:sylar::ds::Array	typeref:typename:void	access:public	signature:(std::function<bool (const T &,const T &)> cmp)
split	sylar/sylar/util/hash_util.cc	/^std::vector<std::string> split(const std::string &str, char delim, size_t max) {$/;"	f	namespace:sylar	typeref:typename:std::vector<std::string>	signature:(const std::string & str,char delim,size_t max)
split	sylar/sylar/util/hash_util.cc	/^std::vector<std::string> split(const std::string &str, const char *delims, size_t max) {$/;"	f	namespace:sylar	typeref:typename:std::vector<std::string>	signature:(const std::string & str,const char * delims,size_t max)
split	sylar/sylar/util/hash_util.h	/^std::vector<std::string> split(const std::string &str, char delim, size_t max = ~0);$/;"	p	namespace:sylar	typeref:typename:std::vector<std::string>	signature:(const std::string & str,char delim,size_t max=~0)
split	sylar/sylar/util/hash_util.h	/^std::vector<std::string> split(const std::string &str, const char *delims, size_t max = ~0);$/;"	p	namespace:sylar	typeref:typename:std::vector<std::string>	signature:(const std::string & str,const char * delims,size_t max=~0)
sse_merge	sylar/sylar/ds/roaring.c	/^static inline void sse_merge(const __m128i *vInput1,$/;"	f	typeref:typename:void	file:	signature:(const __m128i * vInput1,const __m128i * vInput2,__m128i * vecMin,__m128i * vecMax)
ssl	sylar/sylar/tcp_server.h	/^    int ssl = 0;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:int	access:public
start	sylar/sylar/db/fox_thread.cc	/^void FoxThread::start() {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:()
start	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::start() {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:()
start	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::start() {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:()
start	sylar/sylar/db/fox_thread.h	/^    virtual void start() = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:void	access:public	signature:()
start	sylar/sylar/db/fox_thread.h	/^    void start();$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:()
start	sylar/sylar/db/fox_thread.h	/^    void start();$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:()
start	sylar/sylar/db/fox_thread.h	/^    void start();$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:public	signature:()
start	sylar/sylar/rock/rock_stream.cc	/^void RockSDLoadBalance::start() {$/;"	f	class:sylar::RockSDLoadBalance	typeref:typename:void	signature:()
start	sylar/sylar/rock/rock_stream.cc	/^void RockSDLoadBalance::start(const std::unordered_map<std::string$/;"	f	class:sylar::RockSDLoadBalance	typeref:typename:void	signature:(const std::unordered_map<std::string,std::unordered_map<std::string,std::string>> & confs)
start	sylar/sylar/rock/rock_stream.h	/^    virtual void start();$/;"	p	class:sylar::RockSDLoadBalance	typeref:typename:void	access:public	signature:()
start	sylar/sylar/rock/rock_stream.h	/^    void start(const std::unordered_map<std::string$/;"	p	class:sylar::RockSDLoadBalance	typeref:typename:void	access:public	signature:(const std::unordered_map<std::string,std::unordered_map<std::string,std::string>> & confs)
start	sylar/sylar/scheduler.cc	/^void Scheduler::start() {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:()
start	sylar/sylar/scheduler.h	/^    void start();$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:public	signature:()
start	sylar/sylar/streams/async_socket_stream.cc	/^bool AsyncSocketStream::start() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:bool	signature:()
start	sylar/sylar/streams/async_socket_stream.h	/^    virtual bool start();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:bool	access:public	signature:()
start	sylar/sylar/streams/load_balance.cc	/^void SDLoadBalance::start() {$/;"	f	class:sylar::SDLoadBalance	typeref:typename:void	signature:()
start	sylar/sylar/streams/load_balance.h	/^    virtual void start();$/;"	p	class:sylar::SDLoadBalance	typeref:typename:void	access:public	signature:()
start	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::start() {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:()
start	sylar/sylar/streams/service_discovery.h	/^    virtual void start() = 0;$/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:()
start	sylar/sylar/streams/service_discovery.h	/^    virtual void start();$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:public	signature:()
start	sylar/sylar/tcp_server.cc	/^bool TcpServer::start() {$/;"	f	class:sylar::TcpServer	typeref:typename:bool	signature:()
start	sylar/sylar/tcp_server.h	/^    virtual bool start();$/;"	p	class:sylar::TcpServer	typeref:typename:bool	access:public	signature:()
startAccept	sylar/sylar/tcp_server.cc	/^void TcpServer::startAccept(Socket::ptr sock) {$/;"	f	class:sylar::TcpServer	typeref:typename:void	signature:(Socket::ptr sock)
startAccept	sylar/sylar/tcp_server.h	/^    virtual void startAccept(Socket::ptr sock);$/;"	p	class:sylar::TcpServer	typeref:typename:void	access:protected	signature:(Socket::ptr sock)
startRead	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::startRead() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	signature:()
startRead	sylar/sylar/streams/async_socket_stream.h	/^    virtual void startRead();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:void	access:protected	signature:()
startWrite	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::startWrite() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	signature:()
startWrite	sylar/sylar/streams/async_socket_stream.h	/^    virtual void startWrite();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:void	access:protected	signature:()
start_daemon	sylar/sylar/daemon.cc	/^int start_daemon(int argc, char** argv$/;"	f	namespace:sylar	typeref:typename:int	signature:(int argc,char ** argv,std::function<int (int argc,char ** argv)> main_cb,bool is_daemon)
start_daemon	sylar/sylar/daemon.h	/^int start_daemon(int argc, char** argv$/;"	p	namespace:sylar	typeref:typename:int	signature:(int argc,char ** argv,std::function<int (int argc,char ** argv)> main_cb,bool is_daemon)
status	sylar/sylar/http/httpclient_parser.h	/^  int status;$/;"	m	struct:httpclient_parser	typeref:typename:int	access:public
statusString	sylar/sylar/module.cc	/^std::string Module::statusString() {$/;"	f	class:sylar::Module	typeref:typename:std::string	signature:()
statusString	sylar/sylar/module.h	/^    virtual std::string statusString();$/;"	p	class:sylar::Module	typeref:typename:std::string	access:public	signature:()
statusString	sylar/sylar/ns/name_server_module.cc	/^std::string NameServerModule::statusString() {$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:std::string	signature:()
statusString	sylar/sylar/ns/name_server_module.h	/^    virtual std::string statusString() override;$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:std::string	access:public	signature:()
statusString	sylar/sylar/streams/load_balance.cc	/^std::string LoadBalance::statusString(const std::string& prefix) {$/;"	f	class:sylar::LoadBalance	typeref:typename:std::string	signature:(const std::string & prefix)
statusString	sylar/sylar/streams/load_balance.cc	/^std::string SDLoadBalance::statusString() {$/;"	f	class:sylar::SDLoadBalance	typeref:typename:std::string	signature:()
statusString	sylar/sylar/streams/load_balance.h	/^    std::string statusString();$/;"	p	class:sylar::SDLoadBalance	typeref:typename:std::string	access:public	signature:()
statusString	sylar/sylar/streams/load_balance.h	/^    std::string statusString(const std::string& prefix);$/;"	p	class:sylar::LoadBalance	typeref:typename:std::string	access:public	signature:(const std::string & prefix)
status_code	sylar/sylar/http/httpclient_parser.h	/^  element_cb status_code;$/;"	m	struct:httpclient_parser	typeref:typename:element_cb	access:public
step	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::step() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:()
step	sylar/sylar/db/sqlite3.h	/^    int step();$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:()
stop	sylar/sylar/db/fox_thread.cc	/^void FoxThread::stop() {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:()
stop	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::stop() {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:()
stop	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::stop() {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:()
stop	sylar/sylar/db/fox_thread.h	/^    virtual void stop() = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:void	access:public	signature:()
stop	sylar/sylar/db/fox_thread.h	/^    void stop();$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:()
stop	sylar/sylar/db/fox_thread.h	/^    void stop();$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:()
stop	sylar/sylar/db/fox_thread.h	/^    void stop();$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:public	signature:()
stop	sylar/sylar/rock/rock_stream.cc	/^void RockSDLoadBalance::stop() {$/;"	f	class:sylar::RockSDLoadBalance	typeref:typename:void	signature:()
stop	sylar/sylar/rock/rock_stream.h	/^    virtual void stop();$/;"	p	class:sylar::RockSDLoadBalance	typeref:typename:void	access:public	signature:()
stop	sylar/sylar/scheduler.cc	/^void Scheduler::stop() {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:()
stop	sylar/sylar/scheduler.h	/^    void stop();$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:public	signature:()
stop	sylar/sylar/streams/load_balance.cc	/^void SDLoadBalance::stop() {$/;"	f	class:sylar::SDLoadBalance	typeref:typename:void	signature:()
stop	sylar/sylar/streams/load_balance.h	/^    virtual void stop();$/;"	p	class:sylar::SDLoadBalance	typeref:typename:void	access:public	signature:()
stop	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::stop() {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:()
stop	sylar/sylar/streams/service_discovery.h	/^    virtual void stop() = 0;$/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:()
stop	sylar/sylar/streams/service_discovery.h	/^    virtual void stop();$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:public	signature:()
stop	sylar/sylar/tcp_server.cc	/^void TcpServer::stop() {$/;"	f	class:sylar::TcpServer	typeref:typename:void	signature:()
stop	sylar/sylar/tcp_server.h	/^    virtual void stop();$/;"	p	class:sylar::TcpServer	typeref:typename:void	access:public	signature:()
stop	sylar/sylar/worker.cc	/^void WorkerManager::stop() {$/;"	f	class:sylar::WorkerManager	typeref:typename:void	signature:()
stop	sylar/sylar/worker.h	/^    void stop();$/;"	p	class:sylar::WorkerManager	typeref:typename:void	access:public	signature:()
stopping	sylar/sylar/iomanager.cc	/^bool IOManager::stopping() {$/;"	f	class:sylar::IOManager	typeref:typename:bool	signature:()
stopping	sylar/sylar/iomanager.cc	/^bool IOManager::stopping(uint64_t& timeout) {$/;"	f	class:sylar::IOManager	typeref:typename:bool	signature:(uint64_t & timeout)
stopping	sylar/sylar/iomanager.h	/^    bool stopping() override;$/;"	p	class:sylar::IOManager	typeref:typename:bool	access:protected	signature:()
stopping	sylar/sylar/iomanager.h	/^    bool stopping(uint64_t& timeout);$/;"	p	class:sylar::IOManager	typeref:typename:bool	access:protected	signature:(uint64_t & timeout)
stopping	sylar/sylar/scheduler.cc	/^bool Scheduler::stopping() {$/;"	f	class:sylar::Scheduler	typeref:typename:bool	signature:()
stopping	sylar/sylar/scheduler.h	/^    virtual bool stopping();$/;"	p	class:sylar::Scheduler	typeref:typename:bool	access:protected	signature:()
store_unique	sylar/sylar/ds/roaring.c	/^static inline int store_unique(__m128i old, __m128i newval, uint16_t *output) {$/;"	f	typeref:typename:int	file:	signature:(__m128i old,__m128i newval,uint16_t * output)
store_unique_xor	sylar/sylar/ds/roaring.c	/^static inline int store_unique_xor(__m128i old, __m128i newval,$/;"	f	typeref:typename:int	file:	signature:(__m128i old,__m128i newval,uint16_t * output)
str	sylar/sylar/ds/roaring.hh	/^            std::string str;$/;"	m	struct:Roaring64Map::toString::iter_data	typeref:typename:std::string	access:public
str	sylar/sylar/ds/roaring.hh	/^            std::string str;$/;"	m	struct:Roaring::toString::iter_data	typeref:typename:std::string	access:public
stream_callback	sylar/sylar/streams/load_balance.h	/^    typedef std::function<SocketStream::ptr(ServiceItemInfo::ptr)> stream_callback;$/;"	t	class:sylar::SDLoadBalance	access:public
subFetch	sylar/sylar/util.h	/^    static T subFetch(volatile T& t, S v = 1) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v=1)
subnetMask	sylar/sylar/address.cc	/^IPAddress::ptr IPv4Address::subnetMask(uint32_t prefix_len) {$/;"	f	class:sylar::IPv4Address	typeref:typename:IPAddress::ptr	signature:(uint32_t prefix_len)
subnetMask	sylar/sylar/address.cc	/^IPAddress::ptr IPv6Address::subnetMask(uint32_t prefix_len) {$/;"	f	class:sylar::IPv6Address	typeref:typename:IPAddress::ptr	signature:(uint32_t prefix_len)
subnetMask	sylar/sylar/address.h	/^    IPAddress::ptr subnetMask(uint32_t prefix_len) override;$/;"	p	class:sylar::IPv4Address	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
subnetMask	sylar/sylar/address.h	/^    IPAddress::ptr subnetMask(uint32_t prefix_len) override;$/;"	p	class:sylar::IPv6Address	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
subnetMask	sylar/sylar/address.h	/^    virtual IPAddress::ptr subnetMask(uint32_t prefix_len) = 0;$/;"	p	class:sylar::IPAddress	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
sum	sylar/sylar/ds/roaring.c	/^    uint64_t sum;$/;"	m	struct:min_max_sum_s	typeref:typename:uint64_t	file:	access:public
sum_value	sylar/sylar/ds/roaring.h	/^    uint64_t sum_value; \/* the sum of all values (could be used to compute$/;"	m	struct:roaring_statistics_s	typeref:typename:uint64_t	access:public
swap	sylar/sylar/ds/hash_map.h	/^    void swap(HashMap& oth) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:public	signature:(HashMap & oth)
swap	sylar/sylar/ds/roaring.hh	/^    void swap(Roaring &r) { std::swap(r.roaring, roaring); }$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(Roaring & r)
swap	sylar/sylar/ds/roaring.hh	/^    void swap(Roaring64Map &r) { roarings.swap(r.roarings); }$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(Roaring64Map & r)
swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(Node& a, Node& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(Node & a,Node & b)
swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(NodeInfo& a, NodeInfo& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(NodeInfo & a,NodeInfo & b)
swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(NotifyMessage& a, NotifyMessage& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(NotifyMessage & a,NotifyMessage & b)
swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(QueryRequest& a, QueryRequest& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(QueryRequest & a,QueryRequest & b)
swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(QueryResponse& a, QueryResponse& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(QueryResponse & a,QueryResponse & b)
swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(RegisterInfo& a, RegisterInfo& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(RegisterInfo & a,RegisterInfo & b)
swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(RegisterRequest& a, RegisterRequest& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(RegisterRequest & a,RegisterRequest & b)
swap	sylar/sylar/ns/ns_protocol.cc	/^void NSDomainSet::swap(NSDomainSet& ds) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:void	signature:(NSDomainSet & ds)
swap	sylar/sylar/ns/ns_protocol.h	/^    void swap(NSDomainSet& ds);$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:void	access:public	signature:(NSDomainSet & ds)
swapIn	sylar/sylar/fiber.cc	/^void Fiber::swapIn() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
swapIn	sylar/sylar/fiber.h	/^    void swapIn();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
swapOut	sylar/sylar/fiber.cc	/^void Fiber::swapOut() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
swapOut	sylar/sylar/fiber.h	/^    void swapOut();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
switchTo	sylar/sylar/scheduler.cc	/^void Scheduler::switchTo(int thread) {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:(int thread)
switchTo	sylar/sylar/scheduler.h	/^    void switchTo(int thread = -1);$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:public	signature:(int thread=-1)
sylar	build/Makefile	/^sylar: cmake_check_build_system$/;"	t
sylar	build/sylar/Makefile	/^sylar: sylar\/CMakeFiles\/sylar.dir\/rule$/;"	t
sylar	sylar/CMakeLists.txt	/^add_library(sylar SHARED ${LIB_SRC})$/;"	t
sylar	sylar/CMakeLists.txt	/^project(sylar)$/;"	p
sylar	sylar/sylar/address.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/address.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/application.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/application.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/bytearray.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/bytearray.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/config.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/config.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/daemon.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/daemon.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/db/db.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/db/fox_thread.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/db/fox_thread.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/db/mysql.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/db/mysql.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/db/redis.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/db/redis.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/db/sqlite3.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/db/sqlite3.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ds/array.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ds/bitmap.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/ds/bitmap.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ds/cache_status.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ds/dict.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ds/hash_map.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ds/hash_multimap.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ds/lru_cache.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ds/roaring_bitmap.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/ds/roaring_bitmap.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ds/timed_cache.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ds/timed_lru_cache.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ds/util.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/ds/util.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/email/email.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/email/email.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/email/smtp.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/email/smtp.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/endian.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/env.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/env.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/fd_manager.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/fd_manager.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/fiber.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/fiber.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/hook.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/hook.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/http/http.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/http/http.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/http/http_connection.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/http/http_connection.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/http/http_parser.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/http/http_parser.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/http/http_server.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/http/http_server.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/http/http_session.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/http/http_session.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/http/servlet.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/http/servlet.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/http/servlets/config_servlet.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/http/servlets/config_servlet.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/http/servlets/status_servlet.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/http/servlets/status_servlet.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/http/session_data.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/http/session_data.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/http/ws_connection.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/http/ws_connection.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/http/ws_server.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/http/ws_server.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/http/ws_servlet.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/http/ws_servlet.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/http/ws_session.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/http/ws_session.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/iomanager.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/iomanager.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/library.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/library.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/log.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/log.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/module.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/module.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/mutex.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/mutex.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/noncopyable.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ns/name_server_module.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/ns/name_server_module.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ns/ns_client.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/ns/ns_client.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ns/ns_protobuf.pb.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/ns/ns_protobuf.pb.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/ns/ns_protobuf.proto	/^package sylar.ns;$/;"	p
sylar	sylar/sylar/ns/ns_protocol.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/ns/ns_protocol.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/orm/column.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/orm/column.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/orm/index.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/orm/index.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/orm/table.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/orm/table.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/orm/util.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/orm/util.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/protocol.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/protocol.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/rock/rock_protocol.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/rock/rock_protocol.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/rock/rock_server.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/rock/rock_server.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/rock/rock_stream.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/rock/rock_stream.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/scheduler.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/scheduler.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/singleton.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/socket.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/socket.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/stream.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/stream.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/streams/async_socket_stream.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/streams/async_socket_stream.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/streams/load_balance.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/streams/load_balance.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/streams/service_discovery.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/streams/service_discovery.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/streams/socket_stream.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/streams/socket_stream.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/streams/zlib_stream.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/streams/zlib_stream.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/tcp_server.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/tcp_server.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/thread.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/thread.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/timer.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/timer.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/uri.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/uri.rl.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/util.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/util.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/util/crypto_util.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/util/crypto_util.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/util/hash_util.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/util/hash_util.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/util/json_util.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/util/json_util.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/worker.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/worker.h	/^namespace sylar {$/;"	n
sylar	sylar/sylar/zk_client.cc	/^namespace sylar {$/;"	n	file:
sylar	sylar/sylar/zk_client.h	/^namespace sylar {$/;"	n
sylar	sylar/tests/test_config.cc	/^namespace sylar {$/;"	n	file:
sylar/CMakeFiles/bin_sylar.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/bin_sylar.dir\/rule:$/;"	t
sylar/CMakeFiles/orm.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/orm.dir\/rule:$/;"	t
sylar/CMakeFiles/sylar.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/sylar.dir\/rule:$/;"	t
sylar/CMakeFiles/test_array.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_array.dir\/rule:$/;"	t
sylar/CMakeFiles/test_bitmap.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_bitmap.dir\/rule:$/;"	t
sylar/CMakeFiles/test_crypto.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_crypto.dir\/rule:$/;"	t
sylar/CMakeFiles/test_dict.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_dict.dir\/rule:$/;"	t
sylar/CMakeFiles/test_email.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_email.dir\/rule:$/;"	t
sylar/CMakeFiles/test_hashmap.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_hashmap.dir\/rule:$/;"	t
sylar/CMakeFiles/test_hashmultimap.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_hashmultimap.dir\/rule:$/;"	t
sylar/CMakeFiles/test_module.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_module.dir\/rule:$/;"	t
sylar/CMakeFiles/test_mysql.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_mysql.dir\/rule:$/;"	t
sylar/CMakeFiles/test_nameserver.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_nameserver.dir\/rule:$/;"	t
sylar/CMakeFiles/test_rock.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_rock.dir\/rule:$/;"	t
sylar/CMakeFiles/test_service_discovery.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_service_discovery.dir\/rule:$/;"	t
sylar/CMakeFiles/test_sqlite3.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_sqlite3.dir\/rule:$/;"	t
sylar/CMakeFiles/test_util.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_util.dir\/rule:$/;"	t
sylar/CMakeFiles/test_zkclient.dir/rule	build/sylar/Makefile	/^sylar\/CMakeFiles\/test_zkclient.dir\/rule:$/;"	t
sylar/address.cc.i	build/sylar/Makefile	/^sylar\/address.cc.i:$/;"	t
sylar/address.cc.o	build/sylar/Makefile	/^sylar\/address.cc.o:$/;"	t
sylar/address.cc.s	build/sylar/Makefile	/^sylar\/address.cc.s:$/;"	t
sylar/address.i	build/sylar/Makefile	/^sylar\/address.i: sylar\/address.cc.i$/;"	t
sylar/address.o	build/sylar/Makefile	/^sylar\/address.o: sylar\/address.cc.o$/;"	t
sylar/address.s	build/sylar/Makefile	/^sylar\/address.s: sylar\/address.cc.s$/;"	t
sylar/application.cc.i	build/sylar/Makefile	/^sylar\/application.cc.i:$/;"	t
sylar/application.cc.o	build/sylar/Makefile	/^sylar\/application.cc.o:$/;"	t
sylar/application.cc.s	build/sylar/Makefile	/^sylar\/application.cc.s:$/;"	t
sylar/application.i	build/sylar/Makefile	/^sylar\/application.i: sylar\/application.cc.i$/;"	t
sylar/application.o	build/sylar/Makefile	/^sylar\/application.o: sylar\/application.cc.o$/;"	t
sylar/application.s	build/sylar/Makefile	/^sylar\/application.s: sylar\/application.cc.s$/;"	t
sylar/bytearray.cc.i	build/sylar/Makefile	/^sylar\/bytearray.cc.i:$/;"	t
sylar/bytearray.cc.o	build/sylar/Makefile	/^sylar\/bytearray.cc.o:$/;"	t
sylar/bytearray.cc.s	build/sylar/Makefile	/^sylar\/bytearray.cc.s:$/;"	t
sylar/bytearray.i	build/sylar/Makefile	/^sylar\/bytearray.i: sylar\/bytearray.cc.i$/;"	t
sylar/bytearray.o	build/sylar/Makefile	/^sylar\/bytearray.o: sylar\/bytearray.cc.o$/;"	t
sylar/bytearray.s	build/sylar/Makefile	/^sylar\/bytearray.s: sylar\/bytearray.cc.s$/;"	t
sylar/config.cc.i	build/sylar/Makefile	/^sylar\/config.cc.i:$/;"	t
sylar/config.cc.o	build/sylar/Makefile	/^sylar\/config.cc.o:$/;"	t
sylar/config.cc.s	build/sylar/Makefile	/^sylar\/config.cc.s:$/;"	t
sylar/config.i	build/sylar/Makefile	/^sylar\/config.i: sylar\/config.cc.i$/;"	t
sylar/config.o	build/sylar/Makefile	/^sylar\/config.o: sylar\/config.cc.o$/;"	t
sylar/config.s	build/sylar/Makefile	/^sylar\/config.s: sylar\/config.cc.s$/;"	t
sylar/daemon.cc.i	build/sylar/Makefile	/^sylar\/daemon.cc.i:$/;"	t
sylar/daemon.cc.o	build/sylar/Makefile	/^sylar\/daemon.cc.o:$/;"	t
sylar/daemon.cc.s	build/sylar/Makefile	/^sylar\/daemon.cc.s:$/;"	t
sylar/daemon.i	build/sylar/Makefile	/^sylar\/daemon.i: sylar\/daemon.cc.i$/;"	t
sylar/daemon.o	build/sylar/Makefile	/^sylar\/daemon.o: sylar\/daemon.cc.o$/;"	t
sylar/daemon.s	build/sylar/Makefile	/^sylar\/daemon.s: sylar\/daemon.cc.s$/;"	t
sylar/db/fox_thread.cc.i	build/sylar/Makefile	/^sylar\/db\/fox_thread.cc.i:$/;"	t
sylar/db/fox_thread.cc.o	build/sylar/Makefile	/^sylar\/db\/fox_thread.cc.o:$/;"	t
sylar/db/fox_thread.cc.s	build/sylar/Makefile	/^sylar\/db\/fox_thread.cc.s:$/;"	t
sylar/db/fox_thread.i	build/sylar/Makefile	/^sylar\/db\/fox_thread.i: sylar\/db\/fox_thread.cc.i$/;"	t
sylar/db/fox_thread.o	build/sylar/Makefile	/^sylar\/db\/fox_thread.o: sylar\/db\/fox_thread.cc.o$/;"	t
sylar/db/fox_thread.s	build/sylar/Makefile	/^sylar\/db\/fox_thread.s: sylar\/db\/fox_thread.cc.s$/;"	t
sylar/db/mysql.cc.i	build/sylar/Makefile	/^sylar\/db\/mysql.cc.i:$/;"	t
sylar/db/mysql.cc.o	build/sylar/Makefile	/^sylar\/db\/mysql.cc.o:$/;"	t
sylar/db/mysql.cc.s	build/sylar/Makefile	/^sylar\/db\/mysql.cc.s:$/;"	t
sylar/db/mysql.i	build/sylar/Makefile	/^sylar\/db\/mysql.i: sylar\/db\/mysql.cc.i$/;"	t
sylar/db/mysql.o	build/sylar/Makefile	/^sylar\/db\/mysql.o: sylar\/db\/mysql.cc.o$/;"	t
sylar/db/mysql.s	build/sylar/Makefile	/^sylar\/db\/mysql.s: sylar\/db\/mysql.cc.s$/;"	t
sylar/db/redis.cc.i	build/sylar/Makefile	/^sylar\/db\/redis.cc.i:$/;"	t
sylar/db/redis.cc.o	build/sylar/Makefile	/^sylar\/db\/redis.cc.o:$/;"	t
sylar/db/redis.cc.s	build/sylar/Makefile	/^sylar\/db\/redis.cc.s:$/;"	t
sylar/db/redis.i	build/sylar/Makefile	/^sylar\/db\/redis.i: sylar\/db\/redis.cc.i$/;"	t
sylar/db/redis.o	build/sylar/Makefile	/^sylar\/db\/redis.o: sylar\/db\/redis.cc.o$/;"	t
sylar/db/redis.s	build/sylar/Makefile	/^sylar\/db\/redis.s: sylar\/db\/redis.cc.s$/;"	t
sylar/db/sqlite3.cc.i	build/sylar/Makefile	/^sylar\/db\/sqlite3.cc.i:$/;"	t
sylar/db/sqlite3.cc.o	build/sylar/Makefile	/^sylar\/db\/sqlite3.cc.o:$/;"	t
sylar/db/sqlite3.cc.s	build/sylar/Makefile	/^sylar\/db\/sqlite3.cc.s:$/;"	t
sylar/db/sqlite3.i	build/sylar/Makefile	/^sylar\/db\/sqlite3.i: sylar\/db\/sqlite3.cc.i$/;"	t
sylar/db/sqlite3.o	build/sylar/Makefile	/^sylar\/db\/sqlite3.o: sylar\/db\/sqlite3.cc.o$/;"	t
sylar/db/sqlite3.s	build/sylar/Makefile	/^sylar\/db\/sqlite3.s: sylar\/db\/sqlite3.cc.s$/;"	t
sylar/ds/bitmap.cc.i	build/sylar/Makefile	/^sylar\/ds\/bitmap.cc.i:$/;"	t
sylar/ds/bitmap.cc.o	build/sylar/Makefile	/^sylar\/ds\/bitmap.cc.o:$/;"	t
sylar/ds/bitmap.cc.s	build/sylar/Makefile	/^sylar\/ds\/bitmap.cc.s:$/;"	t
sylar/ds/bitmap.i	build/sylar/Makefile	/^sylar\/ds\/bitmap.i: sylar\/ds\/bitmap.cc.i$/;"	t
sylar/ds/bitmap.o	build/sylar/Makefile	/^sylar\/ds\/bitmap.o: sylar\/ds\/bitmap.cc.o$/;"	t
sylar/ds/bitmap.s	build/sylar/Makefile	/^sylar\/ds\/bitmap.s: sylar\/ds\/bitmap.cc.s$/;"	t
sylar/ds/roaring.c.i	build/sylar/Makefile	/^sylar\/ds\/roaring.c.i:$/;"	t
sylar/ds/roaring.c.o	build/sylar/Makefile	/^sylar\/ds\/roaring.c.o:$/;"	t
sylar/ds/roaring.c.s	build/sylar/Makefile	/^sylar\/ds\/roaring.c.s:$/;"	t
sylar/ds/roaring.i	build/sylar/Makefile	/^sylar\/ds\/roaring.i: sylar\/ds\/roaring.c.i$/;"	t
sylar/ds/roaring.o	build/sylar/Makefile	/^sylar\/ds\/roaring.o: sylar\/ds\/roaring.c.o$/;"	t
sylar/ds/roaring.s	build/sylar/Makefile	/^sylar\/ds\/roaring.s: sylar\/ds\/roaring.c.s$/;"	t
sylar/ds/roaring_bitmap.cc.i	build/sylar/Makefile	/^sylar\/ds\/roaring_bitmap.cc.i:$/;"	t
sylar/ds/roaring_bitmap.cc.o	build/sylar/Makefile	/^sylar\/ds\/roaring_bitmap.cc.o:$/;"	t
sylar/ds/roaring_bitmap.cc.s	build/sylar/Makefile	/^sylar\/ds\/roaring_bitmap.cc.s:$/;"	t
sylar/ds/roaring_bitmap.i	build/sylar/Makefile	/^sylar\/ds\/roaring_bitmap.i: sylar\/ds\/roaring_bitmap.cc.i$/;"	t
sylar/ds/roaring_bitmap.o	build/sylar/Makefile	/^sylar\/ds\/roaring_bitmap.o: sylar\/ds\/roaring_bitmap.cc.o$/;"	t
sylar/ds/roaring_bitmap.s	build/sylar/Makefile	/^sylar\/ds\/roaring_bitmap.s: sylar\/ds\/roaring_bitmap.cc.s$/;"	t
sylar/ds/util.cc.i	build/sylar/Makefile	/^sylar\/ds\/util.cc.i:$/;"	t
sylar/ds/util.cc.o	build/sylar/Makefile	/^sylar\/ds\/util.cc.o:$/;"	t
sylar/ds/util.cc.s	build/sylar/Makefile	/^sylar\/ds\/util.cc.s:$/;"	t
sylar/ds/util.i	build/sylar/Makefile	/^sylar\/ds\/util.i: sylar\/ds\/util.cc.i$/;"	t
sylar/ds/util.o	build/sylar/Makefile	/^sylar\/ds\/util.o: sylar\/ds\/util.cc.o$/;"	t
sylar/ds/util.s	build/sylar/Makefile	/^sylar\/ds\/util.s: sylar\/ds\/util.cc.s$/;"	t
sylar/email/email.cc.i	build/sylar/Makefile	/^sylar\/email\/email.cc.i:$/;"	t
sylar/email/email.cc.o	build/sylar/Makefile	/^sylar\/email\/email.cc.o:$/;"	t
sylar/email/email.cc.s	build/sylar/Makefile	/^sylar\/email\/email.cc.s:$/;"	t
sylar/email/email.i	build/sylar/Makefile	/^sylar\/email\/email.i: sylar\/email\/email.cc.i$/;"	t
sylar/email/email.o	build/sylar/Makefile	/^sylar\/email\/email.o: sylar\/email\/email.cc.o$/;"	t
sylar/email/email.s	build/sylar/Makefile	/^sylar\/email\/email.s: sylar\/email\/email.cc.s$/;"	t
sylar/email/smtp.cc.i	build/sylar/Makefile	/^sylar\/email\/smtp.cc.i:$/;"	t
sylar/email/smtp.cc.o	build/sylar/Makefile	/^sylar\/email\/smtp.cc.o:$/;"	t
sylar/email/smtp.cc.s	build/sylar/Makefile	/^sylar\/email\/smtp.cc.s:$/;"	t
sylar/email/smtp.i	build/sylar/Makefile	/^sylar\/email\/smtp.i: sylar\/email\/smtp.cc.i$/;"	t
sylar/email/smtp.o	build/sylar/Makefile	/^sylar\/email\/smtp.o: sylar\/email\/smtp.cc.o$/;"	t
sylar/email/smtp.s	build/sylar/Makefile	/^sylar\/email\/smtp.s: sylar\/email\/smtp.cc.s$/;"	t
sylar/env.cc.i	build/sylar/Makefile	/^sylar\/env.cc.i:$/;"	t
sylar/env.cc.o	build/sylar/Makefile	/^sylar\/env.cc.o:$/;"	t
sylar/env.cc.s	build/sylar/Makefile	/^sylar\/env.cc.s:$/;"	t
sylar/env.i	build/sylar/Makefile	/^sylar\/env.i: sylar\/env.cc.i$/;"	t
sylar/env.o	build/sylar/Makefile	/^sylar\/env.o: sylar\/env.cc.o$/;"	t
sylar/env.s	build/sylar/Makefile	/^sylar\/env.s: sylar\/env.cc.s$/;"	t
sylar/fast	build/Makefile	/^sylar\/fast:$/;"	t
sylar/fast	build/sylar/Makefile	/^sylar\/fast:$/;"	t
sylar/fd_manager.cc.i	build/sylar/Makefile	/^sylar\/fd_manager.cc.i:$/;"	t
sylar/fd_manager.cc.o	build/sylar/Makefile	/^sylar\/fd_manager.cc.o:$/;"	t
sylar/fd_manager.cc.s	build/sylar/Makefile	/^sylar\/fd_manager.cc.s:$/;"	t
sylar/fd_manager.i	build/sylar/Makefile	/^sylar\/fd_manager.i: sylar\/fd_manager.cc.i$/;"	t
sylar/fd_manager.o	build/sylar/Makefile	/^sylar\/fd_manager.o: sylar\/fd_manager.cc.o$/;"	t
sylar/fd_manager.s	build/sylar/Makefile	/^sylar\/fd_manager.s: sylar\/fd_manager.cc.s$/;"	t
sylar/fiber.cc.i	build/sylar/Makefile	/^sylar\/fiber.cc.i:$/;"	t
sylar/fiber.cc.o	build/sylar/Makefile	/^sylar\/fiber.cc.o:$/;"	t
sylar/fiber.cc.s	build/sylar/Makefile	/^sylar\/fiber.cc.s:$/;"	t
sylar/fiber.i	build/sylar/Makefile	/^sylar\/fiber.i: sylar\/fiber.cc.i$/;"	t
sylar/fiber.o	build/sylar/Makefile	/^sylar\/fiber.o: sylar\/fiber.cc.o$/;"	t
sylar/fiber.s	build/sylar/Makefile	/^sylar\/fiber.s: sylar\/fiber.cc.s$/;"	t
sylar/hook.cc.i	build/sylar/Makefile	/^sylar\/hook.cc.i:$/;"	t
sylar/hook.cc.o	build/sylar/Makefile	/^sylar\/hook.cc.o:$/;"	t
sylar/hook.cc.s	build/sylar/Makefile	/^sylar\/hook.cc.s:$/;"	t
sylar/hook.i	build/sylar/Makefile	/^sylar\/hook.i: sylar\/hook.cc.i$/;"	t
sylar/hook.o	build/sylar/Makefile	/^sylar\/hook.o: sylar\/hook.cc.o$/;"	t
sylar/hook.s	build/sylar/Makefile	/^sylar\/hook.s: sylar\/hook.cc.s$/;"	t
sylar/http/http.cc.i	build/sylar/Makefile	/^sylar\/http\/http.cc.i:$/;"	t
sylar/http/http.cc.o	build/sylar/Makefile	/^sylar\/http\/http.cc.o:$/;"	t
sylar/http/http.cc.s	build/sylar/Makefile	/^sylar\/http\/http.cc.s:$/;"	t
sylar/http/http.i	build/sylar/Makefile	/^sylar\/http\/http.i: sylar\/http\/http.cc.i$/;"	t
sylar/http/http.o	build/sylar/Makefile	/^sylar\/http\/http.o: sylar\/http\/http.cc.o$/;"	t
sylar/http/http.s	build/sylar/Makefile	/^sylar\/http\/http.s: sylar\/http\/http.cc.s$/;"	t
sylar/http/http11_parser.rl.cc.i	build/sylar/Makefile	/^sylar\/http\/http11_parser.rl.cc.i:$/;"	t
sylar/http/http11_parser.rl.cc.o	build/sylar/Makefile	/^sylar\/http\/http11_parser.rl.cc.o:$/;"	t
sylar/http/http11_parser.rl.cc.s	build/sylar/Makefile	/^sylar\/http\/http11_parser.rl.cc.s:$/;"	t
sylar/http/http11_parser.rl.i	build/sylar/Makefile	/^sylar\/http\/http11_parser.rl.i: sylar\/http\/http11_parser.rl.cc.i$/;"	t
sylar/http/http11_parser.rl.o	build/sylar/Makefile	/^sylar\/http\/http11_parser.rl.o: sylar\/http\/http11_parser.rl.cc.o$/;"	t
sylar/http/http11_parser.rl.s	build/sylar/Makefile	/^sylar\/http\/http11_parser.rl.s: sylar\/http\/http11_parser.rl.cc.s$/;"	t
sylar/http/http_connection.cc.i	build/sylar/Makefile	/^sylar\/http\/http_connection.cc.i:$/;"	t
sylar/http/http_connection.cc.o	build/sylar/Makefile	/^sylar\/http\/http_connection.cc.o:$/;"	t
sylar/http/http_connection.cc.s	build/sylar/Makefile	/^sylar\/http\/http_connection.cc.s:$/;"	t
sylar/http/http_connection.i	build/sylar/Makefile	/^sylar\/http\/http_connection.i: sylar\/http\/http_connection.cc.i$/;"	t
sylar/http/http_connection.o	build/sylar/Makefile	/^sylar\/http\/http_connection.o: sylar\/http\/http_connection.cc.o$/;"	t
sylar/http/http_connection.s	build/sylar/Makefile	/^sylar\/http\/http_connection.s: sylar\/http\/http_connection.cc.s$/;"	t
sylar/http/http_parser.cc.i	build/sylar/Makefile	/^sylar\/http\/http_parser.cc.i:$/;"	t
sylar/http/http_parser.cc.o	build/sylar/Makefile	/^sylar\/http\/http_parser.cc.o:$/;"	t
sylar/http/http_parser.cc.s	build/sylar/Makefile	/^sylar\/http\/http_parser.cc.s:$/;"	t
sylar/http/http_parser.i	build/sylar/Makefile	/^sylar\/http\/http_parser.i: sylar\/http\/http_parser.cc.i$/;"	t
sylar/http/http_parser.o	build/sylar/Makefile	/^sylar\/http\/http_parser.o: sylar\/http\/http_parser.cc.o$/;"	t
sylar/http/http_parser.s	build/sylar/Makefile	/^sylar\/http\/http_parser.s: sylar\/http\/http_parser.cc.s$/;"	t
sylar/http/http_server.cc.i	build/sylar/Makefile	/^sylar\/http\/http_server.cc.i:$/;"	t
sylar/http/http_server.cc.o	build/sylar/Makefile	/^sylar\/http\/http_server.cc.o:$/;"	t
sylar/http/http_server.cc.s	build/sylar/Makefile	/^sylar\/http\/http_server.cc.s:$/;"	t
sylar/http/http_server.i	build/sylar/Makefile	/^sylar\/http\/http_server.i: sylar\/http\/http_server.cc.i$/;"	t
sylar/http/http_server.o	build/sylar/Makefile	/^sylar\/http\/http_server.o: sylar\/http\/http_server.cc.o$/;"	t
sylar/http/http_server.s	build/sylar/Makefile	/^sylar\/http\/http_server.s: sylar\/http\/http_server.cc.s$/;"	t
sylar/http/http_session.cc.i	build/sylar/Makefile	/^sylar\/http\/http_session.cc.i:$/;"	t
sylar/http/http_session.cc.o	build/sylar/Makefile	/^sylar\/http\/http_session.cc.o:$/;"	t
sylar/http/http_session.cc.s	build/sylar/Makefile	/^sylar\/http\/http_session.cc.s:$/;"	t
sylar/http/http_session.i	build/sylar/Makefile	/^sylar\/http\/http_session.i: sylar\/http\/http_session.cc.i$/;"	t
sylar/http/http_session.o	build/sylar/Makefile	/^sylar\/http\/http_session.o: sylar\/http\/http_session.cc.o$/;"	t
sylar/http/http_session.s	build/sylar/Makefile	/^sylar\/http\/http_session.s: sylar\/http\/http_session.cc.s$/;"	t
sylar/http/httpclient_parser.rl.cc.i	build/sylar/Makefile	/^sylar\/http\/httpclient_parser.rl.cc.i:$/;"	t
sylar/http/httpclient_parser.rl.cc.o	build/sylar/Makefile	/^sylar\/http\/httpclient_parser.rl.cc.o:$/;"	t
sylar/http/httpclient_parser.rl.cc.s	build/sylar/Makefile	/^sylar\/http\/httpclient_parser.rl.cc.s:$/;"	t
sylar/http/httpclient_parser.rl.i	build/sylar/Makefile	/^sylar\/http\/httpclient_parser.rl.i: sylar\/http\/httpclient_parser.rl.cc.i$/;"	t
sylar/http/httpclient_parser.rl.o	build/sylar/Makefile	/^sylar\/http\/httpclient_parser.rl.o: sylar\/http\/httpclient_parser.rl.cc.o$/;"	t
sylar/http/httpclient_parser.rl.s	build/sylar/Makefile	/^sylar\/http\/httpclient_parser.rl.s: sylar\/http\/httpclient_parser.rl.cc.s$/;"	t
sylar/http/servlet.cc.i	build/sylar/Makefile	/^sylar\/http\/servlet.cc.i:$/;"	t
sylar/http/servlet.cc.o	build/sylar/Makefile	/^sylar\/http\/servlet.cc.o:$/;"	t
sylar/http/servlet.cc.s	build/sylar/Makefile	/^sylar\/http\/servlet.cc.s:$/;"	t
sylar/http/servlet.i	build/sylar/Makefile	/^sylar\/http\/servlet.i: sylar\/http\/servlet.cc.i$/;"	t
sylar/http/servlet.o	build/sylar/Makefile	/^sylar\/http\/servlet.o: sylar\/http\/servlet.cc.o$/;"	t
sylar/http/servlet.s	build/sylar/Makefile	/^sylar\/http\/servlet.s: sylar\/http\/servlet.cc.s$/;"	t
sylar/http/servlets/config_servlet.cc.i	build/sylar/Makefile	/^sylar\/http\/servlets\/config_servlet.cc.i:$/;"	t
sylar/http/servlets/config_servlet.cc.o	build/sylar/Makefile	/^sylar\/http\/servlets\/config_servlet.cc.o:$/;"	t
sylar/http/servlets/config_servlet.cc.s	build/sylar/Makefile	/^sylar\/http\/servlets\/config_servlet.cc.s:$/;"	t
sylar/http/servlets/config_servlet.i	build/sylar/Makefile	/^sylar\/http\/servlets\/config_servlet.i: sylar\/http\/servlets\/config_servlet.cc.i$/;"	t
sylar/http/servlets/config_servlet.o	build/sylar/Makefile	/^sylar\/http\/servlets\/config_servlet.o: sylar\/http\/servlets\/config_servlet.cc.o$/;"	t
sylar/http/servlets/config_servlet.s	build/sylar/Makefile	/^sylar\/http\/servlets\/config_servlet.s: sylar\/http\/servlets\/config_servlet.cc.s$/;"	t
sylar/http/servlets/status_servlet.cc.i	build/sylar/Makefile	/^sylar\/http\/servlets\/status_servlet.cc.i:$/;"	t
sylar/http/servlets/status_servlet.cc.o	build/sylar/Makefile	/^sylar\/http\/servlets\/status_servlet.cc.o:$/;"	t
sylar/http/servlets/status_servlet.cc.s	build/sylar/Makefile	/^sylar\/http\/servlets\/status_servlet.cc.s:$/;"	t
sylar/http/servlets/status_servlet.i	build/sylar/Makefile	/^sylar\/http\/servlets\/status_servlet.i: sylar\/http\/servlets\/status_servlet.cc.i$/;"	t
sylar/http/servlets/status_servlet.o	build/sylar/Makefile	/^sylar\/http\/servlets\/status_servlet.o: sylar\/http\/servlets\/status_servlet.cc.o$/;"	t
sylar/http/servlets/status_servlet.s	build/sylar/Makefile	/^sylar\/http\/servlets\/status_servlet.s: sylar\/http\/servlets\/status_servlet.cc.s$/;"	t
sylar/http/session_data.cc.i	build/sylar/Makefile	/^sylar\/http\/session_data.cc.i:$/;"	t
sylar/http/session_data.cc.o	build/sylar/Makefile	/^sylar\/http\/session_data.cc.o:$/;"	t
sylar/http/session_data.cc.s	build/sylar/Makefile	/^sylar\/http\/session_data.cc.s:$/;"	t
sylar/http/session_data.i	build/sylar/Makefile	/^sylar\/http\/session_data.i: sylar\/http\/session_data.cc.i$/;"	t
sylar/http/session_data.o	build/sylar/Makefile	/^sylar\/http\/session_data.o: sylar\/http\/session_data.cc.o$/;"	t
sylar/http/session_data.s	build/sylar/Makefile	/^sylar\/http\/session_data.s: sylar\/http\/session_data.cc.s$/;"	t
sylar/http/ws_connection.cc.i	build/sylar/Makefile	/^sylar\/http\/ws_connection.cc.i:$/;"	t
sylar/http/ws_connection.cc.o	build/sylar/Makefile	/^sylar\/http\/ws_connection.cc.o:$/;"	t
sylar/http/ws_connection.cc.s	build/sylar/Makefile	/^sylar\/http\/ws_connection.cc.s:$/;"	t
sylar/http/ws_connection.i	build/sylar/Makefile	/^sylar\/http\/ws_connection.i: sylar\/http\/ws_connection.cc.i$/;"	t
sylar/http/ws_connection.o	build/sylar/Makefile	/^sylar\/http\/ws_connection.o: sylar\/http\/ws_connection.cc.o$/;"	t
sylar/http/ws_connection.s	build/sylar/Makefile	/^sylar\/http\/ws_connection.s: sylar\/http\/ws_connection.cc.s$/;"	t
sylar/http/ws_server.cc.i	build/sylar/Makefile	/^sylar\/http\/ws_server.cc.i:$/;"	t
sylar/http/ws_server.cc.o	build/sylar/Makefile	/^sylar\/http\/ws_server.cc.o:$/;"	t
sylar/http/ws_server.cc.s	build/sylar/Makefile	/^sylar\/http\/ws_server.cc.s:$/;"	t
sylar/http/ws_server.i	build/sylar/Makefile	/^sylar\/http\/ws_server.i: sylar\/http\/ws_server.cc.i$/;"	t
sylar/http/ws_server.o	build/sylar/Makefile	/^sylar\/http\/ws_server.o: sylar\/http\/ws_server.cc.o$/;"	t
sylar/http/ws_server.s	build/sylar/Makefile	/^sylar\/http\/ws_server.s: sylar\/http\/ws_server.cc.s$/;"	t
sylar/http/ws_servlet.cc.i	build/sylar/Makefile	/^sylar\/http\/ws_servlet.cc.i:$/;"	t
sylar/http/ws_servlet.cc.o	build/sylar/Makefile	/^sylar\/http\/ws_servlet.cc.o:$/;"	t
sylar/http/ws_servlet.cc.s	build/sylar/Makefile	/^sylar\/http\/ws_servlet.cc.s:$/;"	t
sylar/http/ws_servlet.i	build/sylar/Makefile	/^sylar\/http\/ws_servlet.i: sylar\/http\/ws_servlet.cc.i$/;"	t
sylar/http/ws_servlet.o	build/sylar/Makefile	/^sylar\/http\/ws_servlet.o: sylar\/http\/ws_servlet.cc.o$/;"	t
sylar/http/ws_servlet.s	build/sylar/Makefile	/^sylar\/http\/ws_servlet.s: sylar\/http\/ws_servlet.cc.s$/;"	t
sylar/http/ws_session.cc.i	build/sylar/Makefile	/^sylar\/http\/ws_session.cc.i:$/;"	t
sylar/http/ws_session.cc.o	build/sylar/Makefile	/^sylar\/http\/ws_session.cc.o:$/;"	t
sylar/http/ws_session.cc.s	build/sylar/Makefile	/^sylar\/http\/ws_session.cc.s:$/;"	t
sylar/http/ws_session.i	build/sylar/Makefile	/^sylar\/http\/ws_session.i: sylar\/http\/ws_session.cc.i$/;"	t
sylar/http/ws_session.o	build/sylar/Makefile	/^sylar\/http\/ws_session.o: sylar\/http\/ws_session.cc.o$/;"	t
sylar/http/ws_session.s	build/sylar/Makefile	/^sylar\/http\/ws_session.s: sylar\/http\/ws_session.cc.s$/;"	t
sylar/iomanager.cc.i	build/sylar/Makefile	/^sylar\/iomanager.cc.i:$/;"	t
sylar/iomanager.cc.o	build/sylar/Makefile	/^sylar\/iomanager.cc.o:$/;"	t
sylar/iomanager.cc.s	build/sylar/Makefile	/^sylar\/iomanager.cc.s:$/;"	t
sylar/iomanager.i	build/sylar/Makefile	/^sylar\/iomanager.i: sylar\/iomanager.cc.i$/;"	t
sylar/iomanager.o	build/sylar/Makefile	/^sylar\/iomanager.o: sylar\/iomanager.cc.o$/;"	t
sylar/iomanager.s	build/sylar/Makefile	/^sylar\/iomanager.s: sylar\/iomanager.cc.s$/;"	t
sylar/library.cc.i	build/sylar/Makefile	/^sylar\/library.cc.i:$/;"	t
sylar/library.cc.o	build/sylar/Makefile	/^sylar\/library.cc.o:$/;"	t
sylar/library.cc.s	build/sylar/Makefile	/^sylar\/library.cc.s:$/;"	t
sylar/library.i	build/sylar/Makefile	/^sylar\/library.i: sylar\/library.cc.i$/;"	t
sylar/library.o	build/sylar/Makefile	/^sylar\/library.o: sylar\/library.cc.o$/;"	t
sylar/library.s	build/sylar/Makefile	/^sylar\/library.s: sylar\/library.cc.s$/;"	t
sylar/log.cc.i	build/sylar/Makefile	/^sylar\/log.cc.i:$/;"	t
sylar/log.cc.o	build/sylar/Makefile	/^sylar\/log.cc.o:$/;"	t
sylar/log.cc.s	build/sylar/Makefile	/^sylar\/log.cc.s:$/;"	t
sylar/log.i	build/sylar/Makefile	/^sylar\/log.i: sylar\/log.cc.i$/;"	t
sylar/log.o	build/sylar/Makefile	/^sylar\/log.o: sylar\/log.cc.o$/;"	t
sylar/log.s	build/sylar/Makefile	/^sylar\/log.s: sylar\/log.cc.s$/;"	t
sylar/main.cc.i	build/sylar/Makefile	/^sylar\/main.cc.i:$/;"	t
sylar/main.cc.o	build/sylar/Makefile	/^sylar\/main.cc.o:$/;"	t
sylar/main.cc.s	build/sylar/Makefile	/^sylar\/main.cc.s:$/;"	t
sylar/main.i	build/sylar/Makefile	/^sylar\/main.i: sylar\/main.cc.i$/;"	t
sylar/main.o	build/sylar/Makefile	/^sylar\/main.o: sylar\/main.cc.o$/;"	t
sylar/main.s	build/sylar/Makefile	/^sylar\/main.s: sylar\/main.cc.s$/;"	t
sylar/module.cc.i	build/sylar/Makefile	/^sylar\/module.cc.i:$/;"	t
sylar/module.cc.o	build/sylar/Makefile	/^sylar\/module.cc.o:$/;"	t
sylar/module.cc.s	build/sylar/Makefile	/^sylar\/module.cc.s:$/;"	t
sylar/module.i	build/sylar/Makefile	/^sylar\/module.i: sylar\/module.cc.i$/;"	t
sylar/module.o	build/sylar/Makefile	/^sylar\/module.o: sylar\/module.cc.o$/;"	t
sylar/module.s	build/sylar/Makefile	/^sylar\/module.s: sylar\/module.cc.s$/;"	t
sylar/mutex.cc.i	build/sylar/Makefile	/^sylar\/mutex.cc.i:$/;"	t
sylar/mutex.cc.o	build/sylar/Makefile	/^sylar\/mutex.cc.o:$/;"	t
sylar/mutex.cc.s	build/sylar/Makefile	/^sylar\/mutex.cc.s:$/;"	t
sylar/mutex.i	build/sylar/Makefile	/^sylar\/mutex.i: sylar\/mutex.cc.i$/;"	t
sylar/mutex.o	build/sylar/Makefile	/^sylar\/mutex.o: sylar\/mutex.cc.o$/;"	t
sylar/mutex.s	build/sylar/Makefile	/^sylar\/mutex.s: sylar\/mutex.cc.s$/;"	t
sylar/ns/name_server_module.cc.i	build/sylar/Makefile	/^sylar\/ns\/name_server_module.cc.i:$/;"	t
sylar/ns/name_server_module.cc.o	build/sylar/Makefile	/^sylar\/ns\/name_server_module.cc.o:$/;"	t
sylar/ns/name_server_module.cc.s	build/sylar/Makefile	/^sylar\/ns\/name_server_module.cc.s:$/;"	t
sylar/ns/name_server_module.i	build/sylar/Makefile	/^sylar\/ns\/name_server_module.i: sylar\/ns\/name_server_module.cc.i$/;"	t
sylar/ns/name_server_module.o	build/sylar/Makefile	/^sylar\/ns\/name_server_module.o: sylar\/ns\/name_server_module.cc.o$/;"	t
sylar/ns/name_server_module.s	build/sylar/Makefile	/^sylar\/ns\/name_server_module.s: sylar\/ns\/name_server_module.cc.s$/;"	t
sylar/ns/ns_client.cc.i	build/sylar/Makefile	/^sylar\/ns\/ns_client.cc.i:$/;"	t
sylar/ns/ns_client.cc.o	build/sylar/Makefile	/^sylar\/ns\/ns_client.cc.o:$/;"	t
sylar/ns/ns_client.cc.s	build/sylar/Makefile	/^sylar\/ns\/ns_client.cc.s:$/;"	t
sylar/ns/ns_client.i	build/sylar/Makefile	/^sylar\/ns\/ns_client.i: sylar\/ns\/ns_client.cc.i$/;"	t
sylar/ns/ns_client.o	build/sylar/Makefile	/^sylar\/ns\/ns_client.o: sylar\/ns\/ns_client.cc.o$/;"	t
sylar/ns/ns_client.s	build/sylar/Makefile	/^sylar\/ns\/ns_client.s: sylar\/ns\/ns_client.cc.s$/;"	t
sylar/ns/ns_protobuf.pb.cc.i	build/sylar/Makefile	/^sylar\/ns\/ns_protobuf.pb.cc.i:$/;"	t
sylar/ns/ns_protobuf.pb.cc.o	build/sylar/Makefile	/^sylar\/ns\/ns_protobuf.pb.cc.o:$/;"	t
sylar/ns/ns_protobuf.pb.cc.s	build/sylar/Makefile	/^sylar\/ns\/ns_protobuf.pb.cc.s:$/;"	t
sylar/ns/ns_protobuf.pb.i	build/sylar/Makefile	/^sylar\/ns\/ns_protobuf.pb.i: sylar\/ns\/ns_protobuf.pb.cc.i$/;"	t
sylar/ns/ns_protobuf.pb.o	build/sylar/Makefile	/^sylar\/ns\/ns_protobuf.pb.o: sylar\/ns\/ns_protobuf.pb.cc.o$/;"	t
sylar/ns/ns_protobuf.pb.s	build/sylar/Makefile	/^sylar\/ns\/ns_protobuf.pb.s: sylar\/ns\/ns_protobuf.pb.cc.s$/;"	t
sylar/ns/ns_protocol.cc.i	build/sylar/Makefile	/^sylar\/ns\/ns_protocol.cc.i:$/;"	t
sylar/ns/ns_protocol.cc.o	build/sylar/Makefile	/^sylar\/ns\/ns_protocol.cc.o:$/;"	t
sylar/ns/ns_protocol.cc.s	build/sylar/Makefile	/^sylar\/ns\/ns_protocol.cc.s:$/;"	t
sylar/ns/ns_protocol.i	build/sylar/Makefile	/^sylar\/ns\/ns_protocol.i: sylar\/ns\/ns_protocol.cc.i$/;"	t
sylar/ns/ns_protocol.o	build/sylar/Makefile	/^sylar\/ns\/ns_protocol.o: sylar\/ns\/ns_protocol.cc.o$/;"	t
sylar/ns/ns_protocol.s	build/sylar/Makefile	/^sylar\/ns\/ns_protocol.s: sylar\/ns\/ns_protocol.cc.s$/;"	t
sylar/orm/column.cc.i	build/sylar/Makefile	/^sylar\/orm\/column.cc.i:$/;"	t
sylar/orm/column.cc.o	build/sylar/Makefile	/^sylar\/orm\/column.cc.o:$/;"	t
sylar/orm/column.cc.s	build/sylar/Makefile	/^sylar\/orm\/column.cc.s:$/;"	t
sylar/orm/column.i	build/sylar/Makefile	/^sylar\/orm\/column.i: sylar\/orm\/column.cc.i$/;"	t
sylar/orm/column.o	build/sylar/Makefile	/^sylar\/orm\/column.o: sylar\/orm\/column.cc.o$/;"	t
sylar/orm/column.s	build/sylar/Makefile	/^sylar\/orm\/column.s: sylar\/orm\/column.cc.s$/;"	t
sylar/orm/index.cc.i	build/sylar/Makefile	/^sylar\/orm\/index.cc.i:$/;"	t
sylar/orm/index.cc.o	build/sylar/Makefile	/^sylar\/orm\/index.cc.o:$/;"	t
sylar/orm/index.cc.s	build/sylar/Makefile	/^sylar\/orm\/index.cc.s:$/;"	t
sylar/orm/index.i	build/sylar/Makefile	/^sylar\/orm\/index.i: sylar\/orm\/index.cc.i$/;"	t
sylar/orm/index.o	build/sylar/Makefile	/^sylar\/orm\/index.o: sylar\/orm\/index.cc.o$/;"	t
sylar/orm/index.s	build/sylar/Makefile	/^sylar\/orm\/index.s: sylar\/orm\/index.cc.s$/;"	t
sylar/orm/orm.cc.i	build/sylar/Makefile	/^sylar\/orm\/orm.cc.i:$/;"	t
sylar/orm/orm.cc.o	build/sylar/Makefile	/^sylar\/orm\/orm.cc.o:$/;"	t
sylar/orm/orm.cc.s	build/sylar/Makefile	/^sylar\/orm\/orm.cc.s:$/;"	t
sylar/orm/orm.i	build/sylar/Makefile	/^sylar\/orm\/orm.i: sylar\/orm\/orm.cc.i$/;"	t
sylar/orm/orm.o	build/sylar/Makefile	/^sylar\/orm\/orm.o: sylar\/orm\/orm.cc.o$/;"	t
sylar/orm/orm.s	build/sylar/Makefile	/^sylar\/orm\/orm.s: sylar\/orm\/orm.cc.s$/;"	t
sylar/orm/table.cc.i	build/sylar/Makefile	/^sylar\/orm\/table.cc.i:$/;"	t
sylar/orm/table.cc.o	build/sylar/Makefile	/^sylar\/orm\/table.cc.o:$/;"	t
sylar/orm/table.cc.s	build/sylar/Makefile	/^sylar\/orm\/table.cc.s:$/;"	t
sylar/orm/table.i	build/sylar/Makefile	/^sylar\/orm\/table.i: sylar\/orm\/table.cc.i$/;"	t
sylar/orm/table.o	build/sylar/Makefile	/^sylar\/orm\/table.o: sylar\/orm\/table.cc.o$/;"	t
sylar/orm/table.s	build/sylar/Makefile	/^sylar\/orm\/table.s: sylar\/orm\/table.cc.s$/;"	t
sylar/orm/util.cc.i	build/sylar/Makefile	/^sylar\/orm\/util.cc.i:$/;"	t
sylar/orm/util.cc.o	build/sylar/Makefile	/^sylar\/orm\/util.cc.o:$/;"	t
sylar/orm/util.cc.s	build/sylar/Makefile	/^sylar\/orm\/util.cc.s:$/;"	t
sylar/orm/util.i	build/sylar/Makefile	/^sylar\/orm\/util.i: sylar\/orm\/util.cc.i$/;"	t
sylar/orm/util.o	build/sylar/Makefile	/^sylar\/orm\/util.o: sylar\/orm\/util.cc.o$/;"	t
sylar/orm/util.s	build/sylar/Makefile	/^sylar\/orm\/util.s: sylar\/orm\/util.cc.s$/;"	t
sylar/protocol.cc.i	build/sylar/Makefile	/^sylar\/protocol.cc.i:$/;"	t
sylar/protocol.cc.o	build/sylar/Makefile	/^sylar\/protocol.cc.o:$/;"	t
sylar/protocol.cc.s	build/sylar/Makefile	/^sylar\/protocol.cc.s:$/;"	t
sylar/protocol.i	build/sylar/Makefile	/^sylar\/protocol.i: sylar\/protocol.cc.i$/;"	t
sylar/protocol.o	build/sylar/Makefile	/^sylar\/protocol.o: sylar\/protocol.cc.o$/;"	t
sylar/protocol.s	build/sylar/Makefile	/^sylar\/protocol.s: sylar\/protocol.cc.s$/;"	t
sylar/rock/rock_protocol.cc.i	build/sylar/Makefile	/^sylar\/rock\/rock_protocol.cc.i:$/;"	t
sylar/rock/rock_protocol.cc.o	build/sylar/Makefile	/^sylar\/rock\/rock_protocol.cc.o:$/;"	t
sylar/rock/rock_protocol.cc.s	build/sylar/Makefile	/^sylar\/rock\/rock_protocol.cc.s:$/;"	t
sylar/rock/rock_protocol.i	build/sylar/Makefile	/^sylar\/rock\/rock_protocol.i: sylar\/rock\/rock_protocol.cc.i$/;"	t
sylar/rock/rock_protocol.o	build/sylar/Makefile	/^sylar\/rock\/rock_protocol.o: sylar\/rock\/rock_protocol.cc.o$/;"	t
sylar/rock/rock_protocol.s	build/sylar/Makefile	/^sylar\/rock\/rock_protocol.s: sylar\/rock\/rock_protocol.cc.s$/;"	t
sylar/rock/rock_server.cc.i	build/sylar/Makefile	/^sylar\/rock\/rock_server.cc.i:$/;"	t
sylar/rock/rock_server.cc.o	build/sylar/Makefile	/^sylar\/rock\/rock_server.cc.o:$/;"	t
sylar/rock/rock_server.cc.s	build/sylar/Makefile	/^sylar\/rock\/rock_server.cc.s:$/;"	t
sylar/rock/rock_server.i	build/sylar/Makefile	/^sylar\/rock\/rock_server.i: sylar\/rock\/rock_server.cc.i$/;"	t
sylar/rock/rock_server.o	build/sylar/Makefile	/^sylar\/rock\/rock_server.o: sylar\/rock\/rock_server.cc.o$/;"	t
sylar/rock/rock_server.s	build/sylar/Makefile	/^sylar\/rock\/rock_server.s: sylar\/rock\/rock_server.cc.s$/;"	t
sylar/rock/rock_stream.cc.i	build/sylar/Makefile	/^sylar\/rock\/rock_stream.cc.i:$/;"	t
sylar/rock/rock_stream.cc.o	build/sylar/Makefile	/^sylar\/rock\/rock_stream.cc.o:$/;"	t
sylar/rock/rock_stream.cc.s	build/sylar/Makefile	/^sylar\/rock\/rock_stream.cc.s:$/;"	t
sylar/rock/rock_stream.i	build/sylar/Makefile	/^sylar\/rock\/rock_stream.i: sylar\/rock\/rock_stream.cc.i$/;"	t
sylar/rock/rock_stream.o	build/sylar/Makefile	/^sylar\/rock\/rock_stream.o: sylar\/rock\/rock_stream.cc.o$/;"	t
sylar/rock/rock_stream.s	build/sylar/Makefile	/^sylar\/rock\/rock_stream.s: sylar\/rock\/rock_stream.cc.s$/;"	t
sylar/scheduler.cc.i	build/sylar/Makefile	/^sylar\/scheduler.cc.i:$/;"	t
sylar/scheduler.cc.o	build/sylar/Makefile	/^sylar\/scheduler.cc.o:$/;"	t
sylar/scheduler.cc.s	build/sylar/Makefile	/^sylar\/scheduler.cc.s:$/;"	t
sylar/scheduler.i	build/sylar/Makefile	/^sylar\/scheduler.i: sylar\/scheduler.cc.i$/;"	t
sylar/scheduler.o	build/sylar/Makefile	/^sylar\/scheduler.o: sylar\/scheduler.cc.o$/;"	t
sylar/scheduler.s	build/sylar/Makefile	/^sylar\/scheduler.s: sylar\/scheduler.cc.s$/;"	t
sylar/socket.cc.i	build/sylar/Makefile	/^sylar\/socket.cc.i:$/;"	t
sylar/socket.cc.o	build/sylar/Makefile	/^sylar\/socket.cc.o:$/;"	t
sylar/socket.cc.s	build/sylar/Makefile	/^sylar\/socket.cc.s:$/;"	t
sylar/socket.i	build/sylar/Makefile	/^sylar\/socket.i: sylar\/socket.cc.i$/;"	t
sylar/socket.o	build/sylar/Makefile	/^sylar\/socket.o: sylar\/socket.cc.o$/;"	t
sylar/socket.s	build/sylar/Makefile	/^sylar\/socket.s: sylar\/socket.cc.s$/;"	t
sylar/stream.cc.i	build/sylar/Makefile	/^sylar\/stream.cc.i:$/;"	t
sylar/stream.cc.o	build/sylar/Makefile	/^sylar\/stream.cc.o:$/;"	t
sylar/stream.cc.s	build/sylar/Makefile	/^sylar\/stream.cc.s:$/;"	t
sylar/stream.i	build/sylar/Makefile	/^sylar\/stream.i: sylar\/stream.cc.i$/;"	t
sylar/stream.o	build/sylar/Makefile	/^sylar\/stream.o: sylar\/stream.cc.o$/;"	t
sylar/stream.s	build/sylar/Makefile	/^sylar\/stream.s: sylar\/stream.cc.s$/;"	t
sylar/streams/async_socket_stream.cc.i	build/sylar/Makefile	/^sylar\/streams\/async_socket_stream.cc.i:$/;"	t
sylar/streams/async_socket_stream.cc.o	build/sylar/Makefile	/^sylar\/streams\/async_socket_stream.cc.o:$/;"	t
sylar/streams/async_socket_stream.cc.s	build/sylar/Makefile	/^sylar\/streams\/async_socket_stream.cc.s:$/;"	t
sylar/streams/async_socket_stream.i	build/sylar/Makefile	/^sylar\/streams\/async_socket_stream.i: sylar\/streams\/async_socket_stream.cc.i$/;"	t
sylar/streams/async_socket_stream.o	build/sylar/Makefile	/^sylar\/streams\/async_socket_stream.o: sylar\/streams\/async_socket_stream.cc.o$/;"	t
sylar/streams/async_socket_stream.s	build/sylar/Makefile	/^sylar\/streams\/async_socket_stream.s: sylar\/streams\/async_socket_stream.cc.s$/;"	t
sylar/streams/load_balance.cc.i	build/sylar/Makefile	/^sylar\/streams\/load_balance.cc.i:$/;"	t
sylar/streams/load_balance.cc.o	build/sylar/Makefile	/^sylar\/streams\/load_balance.cc.o:$/;"	t
sylar/streams/load_balance.cc.s	build/sylar/Makefile	/^sylar\/streams\/load_balance.cc.s:$/;"	t
sylar/streams/load_balance.i	build/sylar/Makefile	/^sylar\/streams\/load_balance.i: sylar\/streams\/load_balance.cc.i$/;"	t
sylar/streams/load_balance.o	build/sylar/Makefile	/^sylar\/streams\/load_balance.o: sylar\/streams\/load_balance.cc.o$/;"	t
sylar/streams/load_balance.s	build/sylar/Makefile	/^sylar\/streams\/load_balance.s: sylar\/streams\/load_balance.cc.s$/;"	t
sylar/streams/service_discovery.cc.i	build/sylar/Makefile	/^sylar\/streams\/service_discovery.cc.i:$/;"	t
sylar/streams/service_discovery.cc.o	build/sylar/Makefile	/^sylar\/streams\/service_discovery.cc.o:$/;"	t
sylar/streams/service_discovery.cc.s	build/sylar/Makefile	/^sylar\/streams\/service_discovery.cc.s:$/;"	t
sylar/streams/service_discovery.i	build/sylar/Makefile	/^sylar\/streams\/service_discovery.i: sylar\/streams\/service_discovery.cc.i$/;"	t
sylar/streams/service_discovery.o	build/sylar/Makefile	/^sylar\/streams\/service_discovery.o: sylar\/streams\/service_discovery.cc.o$/;"	t
sylar/streams/service_discovery.s	build/sylar/Makefile	/^sylar\/streams\/service_discovery.s: sylar\/streams\/service_discovery.cc.s$/;"	t
sylar/streams/socket_stream.cc.i	build/sylar/Makefile	/^sylar\/streams\/socket_stream.cc.i:$/;"	t
sylar/streams/socket_stream.cc.o	build/sylar/Makefile	/^sylar\/streams\/socket_stream.cc.o:$/;"	t
sylar/streams/socket_stream.cc.s	build/sylar/Makefile	/^sylar\/streams\/socket_stream.cc.s:$/;"	t
sylar/streams/socket_stream.i	build/sylar/Makefile	/^sylar\/streams\/socket_stream.i: sylar\/streams\/socket_stream.cc.i$/;"	t
sylar/streams/socket_stream.o	build/sylar/Makefile	/^sylar\/streams\/socket_stream.o: sylar\/streams\/socket_stream.cc.o$/;"	t
sylar/streams/socket_stream.s	build/sylar/Makefile	/^sylar\/streams\/socket_stream.s: sylar\/streams\/socket_stream.cc.s$/;"	t
sylar/streams/zlib_stream.cc.i	build/sylar/Makefile	/^sylar\/streams\/zlib_stream.cc.i:$/;"	t
sylar/streams/zlib_stream.cc.o	build/sylar/Makefile	/^sylar\/streams\/zlib_stream.cc.o:$/;"	t
sylar/streams/zlib_stream.cc.s	build/sylar/Makefile	/^sylar\/streams\/zlib_stream.cc.s:$/;"	t
sylar/streams/zlib_stream.i	build/sylar/Makefile	/^sylar\/streams\/zlib_stream.i: sylar\/streams\/zlib_stream.cc.i$/;"	t
sylar/streams/zlib_stream.o	build/sylar/Makefile	/^sylar\/streams\/zlib_stream.o: sylar\/streams\/zlib_stream.cc.o$/;"	t
sylar/streams/zlib_stream.s	build/sylar/Makefile	/^sylar\/streams\/zlib_stream.s: sylar\/streams\/zlib_stream.cc.s$/;"	t
sylar/tcp_server.cc.i	build/sylar/Makefile	/^sylar\/tcp_server.cc.i:$/;"	t
sylar/tcp_server.cc.o	build/sylar/Makefile	/^sylar\/tcp_server.cc.o:$/;"	t
sylar/tcp_server.cc.s	build/sylar/Makefile	/^sylar\/tcp_server.cc.s:$/;"	t
sylar/tcp_server.i	build/sylar/Makefile	/^sylar\/tcp_server.i: sylar\/tcp_server.cc.i$/;"	t
sylar/tcp_server.o	build/sylar/Makefile	/^sylar\/tcp_server.o: sylar\/tcp_server.cc.o$/;"	t
sylar/tcp_server.s	build/sylar/Makefile	/^sylar\/tcp_server.s: sylar\/tcp_server.cc.s$/;"	t
sylar/thread.cc.i	build/sylar/Makefile	/^sylar\/thread.cc.i:$/;"	t
sylar/thread.cc.o	build/sylar/Makefile	/^sylar\/thread.cc.o:$/;"	t
sylar/thread.cc.s	build/sylar/Makefile	/^sylar\/thread.cc.s:$/;"	t
sylar/thread.i	build/sylar/Makefile	/^sylar\/thread.i: sylar\/thread.cc.i$/;"	t
sylar/thread.o	build/sylar/Makefile	/^sylar\/thread.o: sylar\/thread.cc.o$/;"	t
sylar/thread.s	build/sylar/Makefile	/^sylar\/thread.s: sylar\/thread.cc.s$/;"	t
sylar/timer.cc.i	build/sylar/Makefile	/^sylar\/timer.cc.i:$/;"	t
sylar/timer.cc.o	build/sylar/Makefile	/^sylar\/timer.cc.o:$/;"	t
sylar/timer.cc.s	build/sylar/Makefile	/^sylar\/timer.cc.s:$/;"	t
sylar/timer.i	build/sylar/Makefile	/^sylar\/timer.i: sylar\/timer.cc.i$/;"	t
sylar/timer.o	build/sylar/Makefile	/^sylar\/timer.o: sylar\/timer.cc.o$/;"	t
sylar/timer.s	build/sylar/Makefile	/^sylar\/timer.s: sylar\/timer.cc.s$/;"	t
sylar/uri.rl.cc.i	build/sylar/Makefile	/^sylar\/uri.rl.cc.i:$/;"	t
sylar/uri.rl.cc.o	build/sylar/Makefile	/^sylar\/uri.rl.cc.o:$/;"	t
sylar/uri.rl.cc.s	build/sylar/Makefile	/^sylar\/uri.rl.cc.s:$/;"	t
sylar/uri.rl.i	build/sylar/Makefile	/^sylar\/uri.rl.i: sylar\/uri.rl.cc.i$/;"	t
sylar/uri.rl.o	build/sylar/Makefile	/^sylar\/uri.rl.o: sylar\/uri.rl.cc.o$/;"	t
sylar/uri.rl.s	build/sylar/Makefile	/^sylar\/uri.rl.s: sylar\/uri.rl.cc.s$/;"	t
sylar/util.cc.i	build/sylar/Makefile	/^sylar\/util.cc.i:$/;"	t
sylar/util.cc.o	build/sylar/Makefile	/^sylar\/util.cc.o:$/;"	t
sylar/util.cc.s	build/sylar/Makefile	/^sylar\/util.cc.s:$/;"	t
sylar/util.i	build/sylar/Makefile	/^sylar\/util.i: sylar\/util.cc.i$/;"	t
sylar/util.o	build/sylar/Makefile	/^sylar\/util.o: sylar\/util.cc.o$/;"	t
sylar/util.s	build/sylar/Makefile	/^sylar\/util.s: sylar\/util.cc.s$/;"	t
sylar/util/crypto_util.cc.i	build/sylar/Makefile	/^sylar\/util\/crypto_util.cc.i:$/;"	t
sylar/util/crypto_util.cc.o	build/sylar/Makefile	/^sylar\/util\/crypto_util.cc.o:$/;"	t
sylar/util/crypto_util.cc.s	build/sylar/Makefile	/^sylar\/util\/crypto_util.cc.s:$/;"	t
sylar/util/crypto_util.i	build/sylar/Makefile	/^sylar\/util\/crypto_util.i: sylar\/util\/crypto_util.cc.i$/;"	t
sylar/util/crypto_util.o	build/sylar/Makefile	/^sylar\/util\/crypto_util.o: sylar\/util\/crypto_util.cc.o$/;"	t
sylar/util/crypto_util.s	build/sylar/Makefile	/^sylar\/util\/crypto_util.s: sylar\/util\/crypto_util.cc.s$/;"	t
sylar/util/hash_util.cc.i	build/sylar/Makefile	/^sylar\/util\/hash_util.cc.i:$/;"	t
sylar/util/hash_util.cc.o	build/sylar/Makefile	/^sylar\/util\/hash_util.cc.o:$/;"	t
sylar/util/hash_util.cc.s	build/sylar/Makefile	/^sylar\/util\/hash_util.cc.s:$/;"	t
sylar/util/hash_util.i	build/sylar/Makefile	/^sylar\/util\/hash_util.i: sylar\/util\/hash_util.cc.i$/;"	t
sylar/util/hash_util.o	build/sylar/Makefile	/^sylar\/util\/hash_util.o: sylar\/util\/hash_util.cc.o$/;"	t
sylar/util/hash_util.s	build/sylar/Makefile	/^sylar\/util\/hash_util.s: sylar\/util\/hash_util.cc.s$/;"	t
sylar/util/json_util.cc.i	build/sylar/Makefile	/^sylar\/util\/json_util.cc.i:$/;"	t
sylar/util/json_util.cc.o	build/sylar/Makefile	/^sylar\/util\/json_util.cc.o:$/;"	t
sylar/util/json_util.cc.s	build/sylar/Makefile	/^sylar\/util\/json_util.cc.s:$/;"	t
sylar/util/json_util.i	build/sylar/Makefile	/^sylar\/util\/json_util.i: sylar\/util\/json_util.cc.i$/;"	t
sylar/util/json_util.o	build/sylar/Makefile	/^sylar\/util\/json_util.o: sylar\/util\/json_util.cc.o$/;"	t
sylar/util/json_util.s	build/sylar/Makefile	/^sylar\/util\/json_util.s: sylar\/util\/json_util.cc.s$/;"	t
sylar/worker.cc.i	build/sylar/Makefile	/^sylar\/worker.cc.i:$/;"	t
sylar/worker.cc.o	build/sylar/Makefile	/^sylar\/worker.cc.o:$/;"	t
sylar/worker.cc.s	build/sylar/Makefile	/^sylar\/worker.cc.s:$/;"	t
sylar/worker.i	build/sylar/Makefile	/^sylar\/worker.i: sylar\/worker.cc.i$/;"	t
sylar/worker.o	build/sylar/Makefile	/^sylar\/worker.o: sylar\/worker.cc.o$/;"	t
sylar/worker.s	build/sylar/Makefile	/^sylar\/worker.s: sylar\/worker.cc.s$/;"	t
sylar/zk_client.cc.i	build/sylar/Makefile	/^sylar\/zk_client.cc.i:$/;"	t
sylar/zk_client.cc.o	build/sylar/Makefile	/^sylar\/zk_client.cc.o:$/;"	t
sylar/zk_client.cc.s	build/sylar/Makefile	/^sylar\/zk_client.cc.s:$/;"	t
sylar/zk_client.i	build/sylar/Makefile	/^sylar\/zk_client.i: sylar\/zk_client.cc.i$/;"	t
sylar/zk_client.o	build/sylar/Makefile	/^sylar\/zk_client.o: sylar\/zk_client.cc.o$/;"	t
sylar/zk_client.s	build/sylar/Makefile	/^sylar\/zk_client.s: sylar\/zk_client.cc.s$/;"	t
sylar::Address	sylar/sylar/address.h	/^class Address {$/;"	c	namespace:sylar
sylar::Address::Create	sylar/sylar/address.cc	/^Address::ptr Address::Create(const sockaddr* addr, socklen_t addrlen) {$/;"	f	class:sylar::Address	typeref:typename:Address::ptr	signature:(const sockaddr * addr,socklen_t addrlen)
sylar::Address::Create	sylar/sylar/address.h	/^    static Address::ptr Create(const sockaddr* addr, socklen_t addrlen);$/;"	p	class:sylar::Address	typeref:typename:Address::ptr	access:public	signature:(const sockaddr * addr,socklen_t addrlen)
sylar::Address::GetInterfaceAddresses	sylar/sylar/address.cc	/^bool Address::GetInterfaceAddresses(std::multimap<std::string$/;"	f	class:sylar::Address	typeref:typename:bool	signature:(std::multimap<std::string,std::pair<Address::ptr,uint32_t>> & result,int family)
sylar::Address::GetInterfaceAddresses	sylar/sylar/address.cc	/^bool Address::GetInterfaceAddresses(std::vector<std::pair<Address::ptr, uint32_t> >&result$/;"	f	class:sylar::Address	typeref:typename:bool	signature:(std::vector<std::pair<Address::ptr,uint32_t>> & result,const std::string & iface,int family)
sylar::Address::GetInterfaceAddresses	sylar/sylar/address.h	/^    static bool GetInterfaceAddresses(std::multimap<std::string$/;"	p	class:sylar::Address	typeref:typename:bool	access:public	signature:(std::multimap<std::string,std::pair<Address::ptr,uint32_t>> & result,int family=AF_INET)
sylar::Address::GetInterfaceAddresses	sylar/sylar/address.h	/^    static bool GetInterfaceAddresses(std::vector<std::pair<Address::ptr, uint32_t> >&result$/;"	p	class:sylar::Address	typeref:typename:bool	access:public	signature:(std::vector<std::pair<Address::ptr,uint32_t>> & result,const std::string & iface,int family=AF_INET)
sylar::Address::Lookup	sylar/sylar/address.cc	/^bool Address::Lookup(std::vector<Address::ptr>& result, const std::string& host,$/;"	f	class:sylar::Address	typeref:typename:bool	signature:(std::vector<Address::ptr> & result,const std::string & host,int family,int type,int protocol)
sylar::Address::Lookup	sylar/sylar/address.h	/^    static bool Lookup(std::vector<Address::ptr>& result, const std::string& host,$/;"	p	class:sylar::Address	typeref:typename:bool	access:public	signature:(std::vector<Address::ptr> & result,const std::string & host,int family=AF_INET,int type=0,int protocol=0)
sylar::Address::LookupAny	sylar/sylar/address.cc	/^Address::ptr Address::LookupAny(const std::string& host,$/;"	f	class:sylar::Address	typeref:typename:Address::ptr	signature:(const std::string & host,int family,int type,int protocol)
sylar::Address::LookupAny	sylar/sylar/address.h	/^    static Address::ptr LookupAny(const std::string& host,$/;"	p	class:sylar::Address	typeref:typename:Address::ptr	access:public	signature:(const std::string & host,int family=AF_INET,int type=0,int protocol=0)
sylar::Address::LookupAnyIPAddress	sylar/sylar/address.cc	/^IPAddress::ptr Address::LookupAnyIPAddress(const std::string& host,$/;"	f	class:sylar::Address	typeref:typename:IPAddress::ptr	signature:(const std::string & host,int family,int type,int protocol)
sylar::Address::LookupAnyIPAddress	sylar/sylar/address.h	/^    static std::shared_ptr<IPAddress> LookupAnyIPAddress(const std::string& host,$/;"	p	class:sylar::Address	typeref:typename:std::shared_ptr<IPAddress>	access:public	signature:(const std::string & host,int family=AF_INET,int type=0,int protocol=0)
sylar::Address::getAddr	sylar/sylar/address.h	/^    virtual const sockaddr* getAddr() const = 0;$/;"	p	class:sylar::Address	typeref:typename:const sockaddr *	access:public	signature:() const
sylar::Address::getAddr	sylar/sylar/address.h	/^    virtual sockaddr* getAddr() = 0;$/;"	p	class:sylar::Address	typeref:typename:sockaddr *	access:public	signature:()
sylar::Address::getAddrLen	sylar/sylar/address.h	/^    virtual socklen_t getAddrLen() const = 0;$/;"	p	class:sylar::Address	typeref:typename:socklen_t	access:public	signature:() const
sylar::Address::getFamily	sylar/sylar/address.cc	/^int Address::getFamily() const {$/;"	f	class:sylar::Address	typeref:typename:int	signature:() const
sylar::Address::getFamily	sylar/sylar/address.h	/^    int getFamily() const;$/;"	p	class:sylar::Address	typeref:typename:int	access:public	signature:() const
sylar::Address::insert	sylar/sylar/address.h	/^    virtual std::ostream& insert(std::ostream& os) const = 0;$/;"	p	class:sylar::Address	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
sylar::Address::operator !=	sylar/sylar/address.cc	/^bool Address::operator!=(const Address& rhs) const {$/;"	f	class:sylar::Address	typeref:typename:bool	signature:(const Address & rhs) const
sylar::Address::operator !=	sylar/sylar/address.h	/^    bool operator!=(const Address& rhs) const;$/;"	p	class:sylar::Address	typeref:typename:bool	access:public	signature:(const Address & rhs) const
sylar::Address::operator <	sylar/sylar/address.cc	/^bool Address::operator<(const Address& rhs) const {$/;"	f	class:sylar::Address	typeref:typename:bool	signature:(const Address & rhs) const
sylar::Address::operator <	sylar/sylar/address.h	/^    bool operator<(const Address& rhs) const;$/;"	p	class:sylar::Address	typeref:typename:bool	access:public	signature:(const Address & rhs) const
sylar::Address::operator ==	sylar/sylar/address.cc	/^bool Address::operator==(const Address& rhs) const {$/;"	f	class:sylar::Address	typeref:typename:bool	signature:(const Address & rhs) const
sylar::Address::operator ==	sylar/sylar/address.h	/^    bool operator==(const Address& rhs) const;$/;"	p	class:sylar::Address	typeref:typename:bool	access:public	signature:(const Address & rhs) const
sylar::Address::ptr	sylar/sylar/address.h	/^    typedef std::shared_ptr<Address> ptr;$/;"	t	class:sylar::Address	typeref:typename:std::shared_ptr<Address>	access:public
sylar::Address::toString	sylar/sylar/address.cc	/^std::string Address::toString() const {$/;"	f	class:sylar::Address	typeref:typename:std::string	signature:() const
sylar::Address::toString	sylar/sylar/address.h	/^    std::string toString() const;$/;"	p	class:sylar::Address	typeref:typename:std::string	access:public	signature:() const
sylar::Address::~Address	sylar/sylar/address.h	/^    virtual ~Address() {}$/;"	f	class:sylar::Address	access:public	signature:()
sylar::Application	sylar/sylar/application.h	/^class Application {$/;"	c	namespace:sylar
sylar::Application::Application	sylar/sylar/application.cc	/^Application::Application() {$/;"	f	class:sylar::Application	signature:()
sylar::Application::Application	sylar/sylar/application.h	/^    Application();$/;"	p	class:sylar::Application	access:public	signature:()
sylar::Application::GetInstance	sylar/sylar/application.h	/^    static Application* GetInstance() { return s_instance;}$/;"	f	class:sylar::Application	typeref:typename:Application *	access:public	signature:()
sylar::Application::getRockSDLoadBalance	sylar/sylar/application.h	/^    RockSDLoadBalance::ptr getRockSDLoadBalance() const { return m_rockSDLoadBalance;}$/;"	f	class:sylar::Application	typeref:typename:RockSDLoadBalance::ptr	access:public	signature:() const
sylar::Application::getServer	sylar/sylar/application.cc	/^bool Application::getServer(const std::string& type, std::vector<TcpServer::ptr>& svrs) {$/;"	f	class:sylar::Application	typeref:typename:bool	signature:(const std::string & type,std::vector<TcpServer::ptr> & svrs)
sylar::Application::getServer	sylar/sylar/application.h	/^    bool getServer(const std::string& type, std::vector<TcpServer::ptr>& svrs);$/;"	p	class:sylar::Application	typeref:typename:bool	access:public	signature:(const std::string & type,std::vector<TcpServer::ptr> & svrs)
sylar::Application::getServiceDiscovery	sylar/sylar/application.h	/^    ZKServiceDiscovery::ptr getServiceDiscovery() const { return m_serviceDiscovery;}$/;"	f	class:sylar::Application	typeref:typename:ZKServiceDiscovery::ptr	access:public	signature:() const
sylar::Application::init	sylar/sylar/application.cc	/^bool Application::init(int argc, char** argv) {$/;"	f	class:sylar::Application	typeref:typename:bool	signature:(int argc,char ** argv)
sylar::Application::init	sylar/sylar/application.h	/^    bool init(int argc, char** argv);$/;"	p	class:sylar::Application	typeref:typename:bool	access:public	signature:(int argc,char ** argv)
sylar::Application::listAllServer	sylar/sylar/application.cc	/^void Application::listAllServer(std::map<std::string, std::vector<TcpServer::ptr> >& servers) {$/;"	f	class:sylar::Application	typeref:typename:void	signature:(std::map<std::string,std::vector<TcpServer::ptr>> & servers)
sylar::Application::listAllServer	sylar/sylar/application.h	/^    void listAllServer(std::map<std::string, std::vector<TcpServer::ptr> >& servers);$/;"	p	class:sylar::Application	typeref:typename:void	access:public	signature:(std::map<std::string,std::vector<TcpServer::ptr>> & servers)
sylar::Application::m_argc	sylar/sylar/application.h	/^    int m_argc = 0;$/;"	m	class:sylar::Application	typeref:typename:int	access:private
sylar::Application::m_argv	sylar/sylar/application.h	/^    char** m_argv = nullptr;$/;"	m	class:sylar::Application	typeref:typename:char **	access:private
sylar::Application::m_mainIOManager	sylar/sylar/application.h	/^    IOManager::ptr m_mainIOManager;$/;"	m	class:sylar::Application	typeref:typename:IOManager::ptr	access:private
sylar::Application::m_rockSDLoadBalance	sylar/sylar/application.h	/^    RockSDLoadBalance::ptr m_rockSDLoadBalance;$/;"	m	class:sylar::Application	typeref:typename:RockSDLoadBalance::ptr	access:private
sylar::Application::m_servers	sylar/sylar/application.h	/^    std::map<std::string, std::vector<TcpServer::ptr> > m_servers;$/;"	m	class:sylar::Application	typeref:typename:std::map<std::string,std::vector<TcpServer::ptr>>	access:private
sylar::Application::m_serviceDiscovery	sylar/sylar/application.h	/^    ZKServiceDiscovery::ptr m_serviceDiscovery;$/;"	m	class:sylar::Application	typeref:typename:ZKServiceDiscovery::ptr	access:private
sylar::Application::main	sylar/sylar/application.cc	/^int Application::main(int argc, char** argv) {$/;"	f	class:sylar::Application	typeref:typename:int	signature:(int argc,char ** argv)
sylar::Application::main	sylar/sylar/application.h	/^    int main(int argc, char** argv);$/;"	p	class:sylar::Application	typeref:typename:int	access:private	signature:(int argc,char ** argv)
sylar::Application::run	sylar/sylar/application.cc	/^bool Application::run() {$/;"	f	class:sylar::Application	typeref:typename:bool	signature:()
sylar::Application::run	sylar/sylar/application.h	/^    bool run();$/;"	p	class:sylar::Application	typeref:typename:bool	access:public	signature:()
sylar::Application::run_fiber	sylar/sylar/application.cc	/^int Application::run_fiber() {$/;"	f	class:sylar::Application	typeref:typename:int	signature:()
sylar::Application::run_fiber	sylar/sylar/application.h	/^    int run_fiber();$/;"	p	class:sylar::Application	typeref:typename:int	access:private	signature:()
sylar::Application::s_instance	sylar/sylar/application.cc	/^Application* Application::s_instance = nullptr;$/;"	m	class:sylar::Application	typeref:typename:Application *
sylar::Application::s_instance	sylar/sylar/application.h	/^    static Application* s_instance;$/;"	m	class:sylar::Application	typeref:typename:Application *	access:private
sylar::AsyncSocketStream	sylar/sylar/streams/async_socket_stream.h	/^class AsyncSocketStream : public SocketStream$/;"	c	namespace:sylar	inherits:SocketStream,std::enable_shared_from_this<AsyncSocketStream>
sylar::AsyncSocketStream::AsyncSocketStream	sylar/sylar/streams/async_socket_stream.cc	/^AsyncSocketStream::AsyncSocketStream(Socket::ptr sock, bool owner)$/;"	f	class:sylar::AsyncSocketStream	signature:(Socket::ptr sock,bool owner)
sylar::AsyncSocketStream::AsyncSocketStream	sylar/sylar/streams/async_socket_stream.h	/^    AsyncSocketStream(Socket::ptr sock, bool owner = true);$/;"	p	class:sylar::AsyncSocketStream	access:public	signature:(Socket::ptr sock,bool owner=true)
sylar::AsyncSocketStream::Ctx	sylar/sylar/streams/async_socket_stream.h	/^    struct Ctx : public SendCtx {$/;"	s	class:sylar::AsyncSocketStream	inherits:SendCtx	access:protected
sylar::AsyncSocketStream::Ctx::Ctx	sylar/sylar/streams/async_socket_stream.cc	/^AsyncSocketStream::Ctx::Ctx()$/;"	f	class:sylar::AsyncSocketStream::Ctx	signature:()
sylar::AsyncSocketStream::Ctx::Ctx	sylar/sylar/streams/async_socket_stream.h	/^        Ctx();$/;"	p	struct:sylar::AsyncSocketStream::Ctx	access:public	signature:()
sylar::AsyncSocketStream::Ctx::doRsp	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::Ctx::doRsp() {$/;"	f	class:sylar::AsyncSocketStream::Ctx	typeref:typename:void	signature:()
sylar::AsyncSocketStream::Ctx::doRsp	sylar/sylar/streams/async_socket_stream.h	/^        virtual void doRsp();$/;"	p	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:void	access:public	signature:()
sylar::AsyncSocketStream::Ctx::fiber	sylar/sylar/streams/async_socket_stream.h	/^        Fiber::ptr fiber;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:Fiber::ptr	access:public
sylar::AsyncSocketStream::Ctx::ptr	sylar/sylar/streams/async_socket_stream.h	/^        typedef std::shared_ptr<Ctx> ptr;$/;"	t	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:std::shared_ptr<Ctx>	access:public
sylar::AsyncSocketStream::Ctx::result	sylar/sylar/streams/async_socket_stream.h	/^        uint32_t result;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:uint32_t	access:public
sylar::AsyncSocketStream::Ctx::scheduler	sylar/sylar/streams/async_socket_stream.h	/^        Scheduler* scheduler;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:Scheduler *	access:public
sylar::AsyncSocketStream::Ctx::sn	sylar/sylar/streams/async_socket_stream.h	/^        uint32_t sn;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:uint32_t	access:public
sylar::AsyncSocketStream::Ctx::timed	sylar/sylar/streams/async_socket_stream.h	/^        bool timed;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:bool	access:public
sylar::AsyncSocketStream::Ctx::timeout	sylar/sylar/streams/async_socket_stream.h	/^        uint32_t timeout;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:uint32_t	access:public
sylar::AsyncSocketStream::Ctx::timer	sylar/sylar/streams/async_socket_stream.h	/^        Timer::ptr timer;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:Timer::ptr	access:public
sylar::AsyncSocketStream::Ctx::~Ctx	sylar/sylar/streams/async_socket_stream.h	/^        virtual ~Ctx() {}$/;"	f	struct:sylar::AsyncSocketStream::Ctx	access:public	signature:()
sylar::AsyncSocketStream::Error	sylar/sylar/streams/async_socket_stream.h	/^    enum Error {$/;"	g	class:sylar::AsyncSocketStream	access:public
sylar::AsyncSocketStream::IO_ERROR	sylar/sylar/streams/async_socket_stream.h	/^        IO_ERROR = -2,$/;"	e	enum:sylar::AsyncSocketStream::Error	access:public
sylar::AsyncSocketStream::NOT_CONNECT	sylar/sylar/streams/async_socket_stream.h	/^        NOT_CONNECT = -3,$/;"	e	enum:sylar::AsyncSocketStream::Error	access:public
sylar::AsyncSocketStream::OK	sylar/sylar/streams/async_socket_stream.h	/^        OK = 0,$/;"	e	enum:sylar::AsyncSocketStream::Error	access:public
sylar::AsyncSocketStream::RWMutexType	sylar/sylar/streams/async_socket_stream.h	/^    typedef sylar::RWMutex RWMutexType;$/;"	t	class:sylar::AsyncSocketStream	typeref:typename:sylar::RWMutex	access:public
sylar::AsyncSocketStream::SendCtx	sylar/sylar/streams/async_socket_stream.h	/^    struct SendCtx {$/;"	s	class:sylar::AsyncSocketStream	access:protected
sylar::AsyncSocketStream::SendCtx::doSend	sylar/sylar/streams/async_socket_stream.h	/^        virtual bool doSend(AsyncSocketStream::ptr stream) = 0;$/;"	p	struct:sylar::AsyncSocketStream::SendCtx	typeref:typename:bool	access:public	signature:(AsyncSocketStream::ptr stream)
sylar::AsyncSocketStream::SendCtx::ptr	sylar/sylar/streams/async_socket_stream.h	/^        typedef std::shared_ptr<SendCtx> ptr;$/;"	t	struct:sylar::AsyncSocketStream::SendCtx	typeref:typename:std::shared_ptr<SendCtx>	access:public
sylar::AsyncSocketStream::SendCtx::~SendCtx	sylar/sylar/streams/async_socket_stream.h	/^        virtual ~SendCtx() {}$/;"	f	struct:sylar::AsyncSocketStream::SendCtx	access:public	signature:()
sylar::AsyncSocketStream::TIMEOUT	sylar/sylar/streams/async_socket_stream.h	/^        TIMEOUT = -1,$/;"	e	enum:sylar::AsyncSocketStream::Error	access:public
sylar::AsyncSocketStream::addCtx	sylar/sylar/streams/async_socket_stream.cc	/^bool AsyncSocketStream::addCtx(Ctx::ptr ctx) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:bool	signature:(Ctx::ptr ctx)
sylar::AsyncSocketStream::addCtx	sylar/sylar/streams/async_socket_stream.h	/^    bool addCtx(Ctx::ptr ctx);$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:bool	access:protected	signature:(Ctx::ptr ctx)
sylar::AsyncSocketStream::close	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::close() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	signature:()
sylar::AsyncSocketStream::close	sylar/sylar/streams/async_socket_stream.h	/^    virtual void close() override;$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:()
sylar::AsyncSocketStream::connect_callback	sylar/sylar/streams/async_socket_stream.h	/^    typedef std::function<bool(AsyncSocketStream::ptr)> connect_callback;$/;"	t	class:sylar::AsyncSocketStream	access:public
sylar::AsyncSocketStream::disconnect_callback	sylar/sylar/streams/async_socket_stream.h	/^    typedef std::function<void(AsyncSocketStream::ptr)> disconnect_callback;$/;"	t	class:sylar::AsyncSocketStream	access:public
sylar::AsyncSocketStream::doRead	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::doRead() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	signature:()
sylar::AsyncSocketStream::doRead	sylar/sylar/streams/async_socket_stream.h	/^    virtual void doRead();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:void	access:protected	signature:()
sylar::AsyncSocketStream::doRecv	sylar/sylar/streams/async_socket_stream.h	/^    virtual Ctx::ptr doRecv() = 0;$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:Ctx::ptr	access:protected	signature:()
sylar::AsyncSocketStream::doWrite	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::doWrite() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	signature:()
sylar::AsyncSocketStream::doWrite	sylar/sylar/streams/async_socket_stream.h	/^    virtual void doWrite();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:void	access:protected	signature:()
sylar::AsyncSocketStream::enqueue	sylar/sylar/streams/async_socket_stream.cc	/^bool AsyncSocketStream::enqueue(SendCtx::ptr ctx) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:bool	signature:(SendCtx::ptr ctx)
sylar::AsyncSocketStream::enqueue	sylar/sylar/streams/async_socket_stream.h	/^    bool enqueue(SendCtx::ptr ctx);$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:bool	access:protected	signature:(SendCtx::ptr ctx)
sylar::AsyncSocketStream::getAndDelCtx	sylar/sylar/streams/async_socket_stream.cc	/^AsyncSocketStream::Ctx::ptr AsyncSocketStream::getAndDelCtx(uint32_t sn) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:AsyncSocketStream::Ctx::ptr	signature:(uint32_t sn)
sylar::AsyncSocketStream::getAndDelCtx	sylar/sylar/streams/async_socket_stream.h	/^    Ctx::ptr getAndDelCtx(uint32_t sn);$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:Ctx::ptr	access:protected	signature:(uint32_t sn)
sylar::AsyncSocketStream::getAndDelCtxAs	sylar/sylar/streams/async_socket_stream.h	/^    std::shared_ptr<T> getAndDelCtxAs(uint32_t sn) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:std::shared_ptr<T>	access:protected	signature:(uint32_t sn)
sylar::AsyncSocketStream::getConnectCb	sylar/sylar/streams/async_socket_stream.h	/^    connect_callback getConnectCb() const { return m_connectCb;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:connect_callback	access:public	signature:() const
sylar::AsyncSocketStream::getCtx	sylar/sylar/streams/async_socket_stream.cc	/^AsyncSocketStream::Ctx::ptr AsyncSocketStream::getCtx(uint32_t sn) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:AsyncSocketStream::Ctx::ptr	signature:(uint32_t sn)
sylar::AsyncSocketStream::getCtx	sylar/sylar/streams/async_socket_stream.h	/^    Ctx::ptr getCtx(uint32_t sn);$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:Ctx::ptr	access:protected	signature:(uint32_t sn)
sylar::AsyncSocketStream::getCtxAs	sylar/sylar/streams/async_socket_stream.h	/^    std::shared_ptr<T> getCtxAs(uint32_t sn) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:std::shared_ptr<T>	access:protected	signature:(uint32_t sn)
sylar::AsyncSocketStream::getData	sylar/sylar/streams/async_socket_stream.h	/^    T getData() const {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:T	access:public	signature:() const
sylar::AsyncSocketStream::getDisconnectCb	sylar/sylar/streams/async_socket_stream.h	/^    disconnect_callback getDisconnectCb() const { return m_disconnectCb;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:disconnect_callback	access:public	signature:() const
sylar::AsyncSocketStream::getIOManager	sylar/sylar/streams/async_socket_stream.h	/^    sylar::IOManager* getIOManager() const { return m_iomanager;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:sylar::IOManager *	access:public	signature:() const
sylar::AsyncSocketStream::getWorker	sylar/sylar/streams/async_socket_stream.h	/^    sylar::IOManager* getWorker() const { return m_worker;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:sylar::IOManager *	access:public	signature:() const
sylar::AsyncSocketStream::innerClose	sylar/sylar/streams/async_socket_stream.cc	/^bool AsyncSocketStream::innerClose() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:bool	signature:()
sylar::AsyncSocketStream::innerClose	sylar/sylar/streams/async_socket_stream.h	/^    bool innerClose();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:bool	access:protected	signature:()
sylar::AsyncSocketStream::isAutoConnect	sylar/sylar/streams/async_socket_stream.h	/^    bool isAutoConnect() const { return m_autoConnect;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:bool	access:public	signature:() const
sylar::AsyncSocketStream::m_autoConnect	sylar/sylar/streams/async_socket_stream.h	/^    bool m_autoConnect;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:bool	access:protected
sylar::AsyncSocketStream::m_connectCb	sylar/sylar/streams/async_socket_stream.h	/^    connect_callback m_connectCb;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:connect_callback	access:protected
sylar::AsyncSocketStream::m_ctxs	sylar/sylar/streams/async_socket_stream.h	/^    std::unordered_map<uint32_t, Ctx::ptr> m_ctxs;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:std::unordered_map<uint32_t,Ctx::ptr>	access:protected
sylar::AsyncSocketStream::m_data	sylar/sylar/streams/async_socket_stream.h	/^    boost::any m_data;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:boost::any	access:protected
sylar::AsyncSocketStream::m_disconnectCb	sylar/sylar/streams/async_socket_stream.h	/^    disconnect_callback m_disconnectCb;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:disconnect_callback	access:protected
sylar::AsyncSocketStream::m_iomanager	sylar/sylar/streams/async_socket_stream.h	/^    sylar::IOManager* m_iomanager;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:sylar::IOManager *	access:protected
sylar::AsyncSocketStream::m_mutex	sylar/sylar/streams/async_socket_stream.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:RWMutexType	access:protected
sylar::AsyncSocketStream::m_queue	sylar/sylar/streams/async_socket_stream.h	/^    std::list<SendCtx::ptr> m_queue;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:std::list<SendCtx::ptr>	access:protected
sylar::AsyncSocketStream::m_queueMutex	sylar/sylar/streams/async_socket_stream.h	/^    RWMutexType m_queueMutex;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:RWMutexType	access:protected
sylar::AsyncSocketStream::m_sem	sylar/sylar/streams/async_socket_stream.h	/^    sylar::FiberSemaphore m_sem;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:sylar::FiberSemaphore	access:protected
sylar::AsyncSocketStream::m_sn	sylar/sylar/streams/async_socket_stream.h	/^    uint32_t m_sn;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:uint32_t	access:protected
sylar::AsyncSocketStream::m_timer	sylar/sylar/streams/async_socket_stream.h	/^    sylar::Timer::ptr m_timer;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:sylar::Timer::ptr	access:protected
sylar::AsyncSocketStream::m_waitSem	sylar/sylar/streams/async_socket_stream.h	/^    sylar::FiberSemaphore m_waitSem;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:sylar::FiberSemaphore	access:protected
sylar::AsyncSocketStream::m_worker	sylar/sylar/streams/async_socket_stream.h	/^    sylar::IOManager* m_worker;$/;"	m	class:sylar::AsyncSocketStream	typeref:typename:sylar::IOManager *	access:protected
sylar::AsyncSocketStream::onTimeOut	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::onTimeOut(Ctx::ptr ctx) {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	signature:(Ctx::ptr ctx)
sylar::AsyncSocketStream::onTimeOut	sylar/sylar/streams/async_socket_stream.h	/^    virtual void onTimeOut(Ctx::ptr ctx);$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:void	access:protected	signature:(Ctx::ptr ctx)
sylar::AsyncSocketStream::ptr	sylar/sylar/streams/async_socket_stream.h	/^    typedef std::shared_ptr<AsyncSocketStream> ptr;$/;"	t	class:sylar::AsyncSocketStream	typeref:typename:std::shared_ptr<AsyncSocketStream>	access:public
sylar::AsyncSocketStream::setAutoConnect	sylar/sylar/streams/async_socket_stream.h	/^    void setAutoConnect(bool v) { m_autoConnect = v;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:(bool v)
sylar::AsyncSocketStream::setConnectCb	sylar/sylar/streams/async_socket_stream.h	/^    void setConnectCb(connect_callback v) { m_connectCb = v;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:(connect_callback v)
sylar::AsyncSocketStream::setData	sylar/sylar/streams/async_socket_stream.h	/^    void setData(const T& v) { m_data = v;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:(const T & v)
sylar::AsyncSocketStream::setDisconnectCb	sylar/sylar/streams/async_socket_stream.h	/^    void setDisconnectCb(disconnect_callback v) { m_disconnectCb = v;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:(disconnect_callback v)
sylar::AsyncSocketStream::setIOManager	sylar/sylar/streams/async_socket_stream.h	/^    void setIOManager(sylar::IOManager* v) { m_iomanager = v;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:(sylar::IOManager * v)
sylar::AsyncSocketStream::setWorker	sylar/sylar/streams/async_socket_stream.h	/^    void setWorker(sylar::IOManager* v) { m_worker = v;}$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	access:public	signature:(sylar::IOManager * v)
sylar::AsyncSocketStream::start	sylar/sylar/streams/async_socket_stream.cc	/^bool AsyncSocketStream::start() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:bool	signature:()
sylar::AsyncSocketStream::start	sylar/sylar/streams/async_socket_stream.h	/^    virtual bool start();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:bool	access:public	signature:()
sylar::AsyncSocketStream::startRead	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::startRead() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	signature:()
sylar::AsyncSocketStream::startRead	sylar/sylar/streams/async_socket_stream.h	/^    virtual void startRead();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:void	access:protected	signature:()
sylar::AsyncSocketStream::startWrite	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStream::startWrite() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:void	signature:()
sylar::AsyncSocketStream::startWrite	sylar/sylar/streams/async_socket_stream.h	/^    virtual void startWrite();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:void	access:protected	signature:()
sylar::AsyncSocketStream::waitFiber	sylar/sylar/streams/async_socket_stream.cc	/^bool AsyncSocketStream::waitFiber() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:bool	signature:()
sylar::AsyncSocketStream::waitFiber	sylar/sylar/streams/async_socket_stream.h	/^    bool waitFiber();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:bool	access:protected	signature:()
sylar::AsyncSocketStreamManager	sylar/sylar/streams/async_socket_stream.h	/^class AsyncSocketStreamManager {$/;"	c	namespace:sylar
sylar::AsyncSocketStreamManager::AsyncSocketStreamManager	sylar/sylar/streams/async_socket_stream.cc	/^AsyncSocketStreamManager::AsyncSocketStreamManager()$/;"	f	class:sylar::AsyncSocketStreamManager	signature:()
sylar::AsyncSocketStreamManager::AsyncSocketStreamManager	sylar/sylar/streams/async_socket_stream.h	/^    AsyncSocketStreamManager();$/;"	p	class:sylar::AsyncSocketStreamManager	access:public	signature:()
sylar::AsyncSocketStreamManager::RWMutexType	sylar/sylar/streams/async_socket_stream.h	/^    typedef sylar::RWMutex RWMutexType;$/;"	t	class:sylar::AsyncSocketStreamManager	typeref:typename:sylar::RWMutex	access:public
sylar::AsyncSocketStreamManager::add	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStreamManager::add(AsyncSocketStream::ptr stream) {$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:void	signature:(AsyncSocketStream::ptr stream)
sylar::AsyncSocketStreamManager::add	sylar/sylar/streams/async_socket_stream.h	/^    void add(AsyncSocketStream::ptr stream);$/;"	p	class:sylar::AsyncSocketStreamManager	typeref:typename:void	access:public	signature:(AsyncSocketStream::ptr stream)
sylar::AsyncSocketStreamManager::clear	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStreamManager::clear() {$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:void	signature:()
sylar::AsyncSocketStreamManager::clear	sylar/sylar/streams/async_socket_stream.h	/^    void clear();$/;"	p	class:sylar::AsyncSocketStreamManager	typeref:typename:void	access:public	signature:()
sylar::AsyncSocketStreamManager::connect_callback	sylar/sylar/streams/async_socket_stream.h	/^    typedef AsyncSocketStream::connect_callback connect_callback;$/;"	t	class:sylar::AsyncSocketStreamManager	typeref:typename:AsyncSocketStream::connect_callback	access:public
sylar::AsyncSocketStreamManager::disconnect_callback	sylar/sylar/streams/async_socket_stream.h	/^    typedef AsyncSocketStream::disconnect_callback disconnect_callback;$/;"	t	class:sylar::AsyncSocketStreamManager	typeref:typename:AsyncSocketStream::disconnect_callback	access:public
sylar::AsyncSocketStreamManager::get	sylar/sylar/streams/async_socket_stream.cc	/^AsyncSocketStream::ptr AsyncSocketStreamManager::get() {$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:AsyncSocketStream::ptr	signature:()
sylar::AsyncSocketStreamManager::get	sylar/sylar/streams/async_socket_stream.h	/^    AsyncSocketStream::ptr get();$/;"	p	class:sylar::AsyncSocketStreamManager	typeref:typename:AsyncSocketStream::ptr	access:public	signature:()
sylar::AsyncSocketStreamManager::getAs	sylar/sylar/streams/async_socket_stream.h	/^    std::shared_ptr<T> getAs() {$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:std::shared_ptr<T>	access:public	signature:()
sylar::AsyncSocketStreamManager::getConnectCb	sylar/sylar/streams/async_socket_stream.h	/^    connect_callback getConnectCb() const { return m_connectCb;}$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:connect_callback	access:public	signature:() const
sylar::AsyncSocketStreamManager::getDisconnectCb	sylar/sylar/streams/async_socket_stream.h	/^    disconnect_callback getDisconnectCb() const { return m_disconnectCb;}$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:disconnect_callback	access:public	signature:() const
sylar::AsyncSocketStreamManager::m_connectCb	sylar/sylar/streams/async_socket_stream.h	/^    connect_callback m_connectCb;$/;"	m	class:sylar::AsyncSocketStreamManager	typeref:typename:connect_callback	access:private
sylar::AsyncSocketStreamManager::m_datas	sylar/sylar/streams/async_socket_stream.h	/^    std::vector<AsyncSocketStream::ptr> m_datas;$/;"	m	class:sylar::AsyncSocketStreamManager	typeref:typename:std::vector<AsyncSocketStream::ptr>	access:private
sylar::AsyncSocketStreamManager::m_disconnectCb	sylar/sylar/streams/async_socket_stream.h	/^    disconnect_callback m_disconnectCb;$/;"	m	class:sylar::AsyncSocketStreamManager	typeref:typename:disconnect_callback	access:private
sylar::AsyncSocketStreamManager::m_idx	sylar/sylar/streams/async_socket_stream.h	/^    uint32_t m_idx;$/;"	m	class:sylar::AsyncSocketStreamManager	typeref:typename:uint32_t	access:private
sylar::AsyncSocketStreamManager::m_mutex	sylar/sylar/streams/async_socket_stream.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::AsyncSocketStreamManager	typeref:typename:RWMutexType	access:private
sylar::AsyncSocketStreamManager::m_size	sylar/sylar/streams/async_socket_stream.h	/^    uint32_t m_size;$/;"	m	class:sylar::AsyncSocketStreamManager	typeref:typename:uint32_t	access:private
sylar::AsyncSocketStreamManager::setConnectCb	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStreamManager::setConnectCb(connect_callback v) {$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:void	signature:(connect_callback v)
sylar::AsyncSocketStreamManager::setConnectCb	sylar/sylar/streams/async_socket_stream.h	/^    void setConnectCb(connect_callback v);$/;"	p	class:sylar::AsyncSocketStreamManager	typeref:typename:void	access:public	signature:(connect_callback v)
sylar::AsyncSocketStreamManager::setConnection	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStreamManager::setConnection(const std::vector<AsyncSocketStream::ptr>& streams)/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:void	signature:(const std::vector<AsyncSocketStream::ptr> & streams)
sylar::AsyncSocketStreamManager::setConnection	sylar/sylar/streams/async_socket_stream.h	/^    void setConnection(const std::vector<AsyncSocketStream::ptr>& streams);$/;"	p	class:sylar::AsyncSocketStreamManager	typeref:typename:void	access:public	signature:(const std::vector<AsyncSocketStream::ptr> & streams)
sylar::AsyncSocketStreamManager::setDisconnectCb	sylar/sylar/streams/async_socket_stream.cc	/^void AsyncSocketStreamManager::setDisconnectCb(disconnect_callback v) {$/;"	f	class:sylar::AsyncSocketStreamManager	typeref:typename:void	signature:(disconnect_callback v)
sylar::AsyncSocketStreamManager::setDisconnectCb	sylar/sylar/streams/async_socket_stream.h	/^    void setDisconnectCb(disconnect_callback v);$/;"	p	class:sylar::AsyncSocketStreamManager	typeref:typename:void	access:public	signature:(disconnect_callback v)
sylar::AsyncSocketStreamManager::~AsyncSocketStreamManager	sylar/sylar/streams/async_socket_stream.h	/^    virtual ~AsyncSocketStreamManager() {}$/;"	f	class:sylar::AsyncSocketStreamManager	access:public	signature:()
sylar::Atomic	sylar/sylar/util.h	/^class Atomic {$/;"	c	namespace:sylar
sylar::Atomic::addFetch	sylar/sylar/util.h	/^    static T addFetch(volatile T& t, S v = 1) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v=1)
sylar::Atomic::andFetch	sylar/sylar/util.h	/^    static T andFetch(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
sylar::Atomic::compareAndSwap	sylar/sylar/util.h	/^    static T compareAndSwap(volatile T& t, S old_val, S new_val) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S old_val,S new_val)
sylar::Atomic::compareAndSwapBool	sylar/sylar/util.h	/^    static bool compareAndSwapBool(volatile T& t, S old_val, S new_val) {$/;"	f	class:sylar::Atomic	typeref:typename:bool	access:public	signature:(volatile T & t,S old_val,S new_val)
sylar::Atomic::fetchAdd	sylar/sylar/util.h	/^    static T fetchAdd(volatile T& t, S v = 1) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v=1)
sylar::Atomic::fetchAnd	sylar/sylar/util.h	/^    static T fetchAnd(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
sylar::Atomic::fetchNand	sylar/sylar/util.h	/^    static T fetchNand(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
sylar::Atomic::fetchOr	sylar/sylar/util.h	/^    static T fetchOr(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
sylar::Atomic::fetchSub	sylar/sylar/util.h	/^    static T fetchSub(volatile T& t, S v = 1) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v=1)
sylar::Atomic::fetchXor	sylar/sylar/util.h	/^    static T fetchXor(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
sylar::Atomic::nandFetch	sylar/sylar/util.h	/^    static T nandFetch(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
sylar::Atomic::orFetch	sylar/sylar/util.h	/^    static T orFetch(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
sylar::Atomic::subFetch	sylar/sylar/util.h	/^    static T subFetch(volatile T& t, S v = 1) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v=1)
sylar::Atomic::xorFetch	sylar/sylar/util.h	/^    static T xorFetch(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
sylar::Backtrace	sylar/sylar/util.cc	/^void Backtrace(std::vector<std::string>& bt, int size, int skip) {$/;"	f	namespace:sylar	typeref:typename:void	signature:(std::vector<std::string> & bt,int size,int skip)
sylar::Backtrace	sylar/sylar/util.h	/^void Backtrace(std::vector<std::string>& bt, int size = 64, int skip = 1);$/;"	p	namespace:sylar	typeref:typename:void	signature:(std::vector<std::string> & bt,int size=64,int skip=1)
sylar::BacktraceToString	sylar/sylar/util.cc	/^std::string BacktraceToString(int size, int skip, const std::string& prefix) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(int size,int skip,const std::string & prefix)
sylar::BacktraceToString	sylar/sylar/util.h	/^std::string BacktraceToString(int size = 64, int skip = 2, const std::string& prefix = "");$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(int size=64,int skip=2,const std::string & prefix="")
sylar::BinarySearch	sylar/sylar/util.h	/^int BinarySearch(const T* arr, int length, const T& v) {$/;"	f	namespace:sylar	typeref:typename:int	signature:(const T * arr,int length,const T & v)
sylar::ByteArray	sylar/sylar/bytearray.h	/^class ByteArray {$/;"	c	namespace:sylar
sylar::ByteArray::ByteArray	sylar/sylar/bytearray.cc	/^ByteArray::ByteArray(size_t base_size)$/;"	f	class:sylar::ByteArray	signature:(size_t base_size)
sylar::ByteArray::ByteArray	sylar/sylar/bytearray.h	/^    ByteArray(size_t base_size = 4096);$/;"	p	class:sylar::ByteArray	access:public	signature:(size_t base_size=4096)
sylar::ByteArray::Node	sylar/sylar/bytearray.h	/^    struct Node {$/;"	s	class:sylar::ByteArray	access:public
sylar::ByteArray::Node::Node	sylar/sylar/bytearray.cc	/^ByteArray::Node::Node()$/;"	f	class:sylar::ByteArray::Node	signature:()
sylar::ByteArray::Node::Node	sylar/sylar/bytearray.cc	/^ByteArray::Node::Node(size_t s)$/;"	f	class:sylar::ByteArray::Node	signature:(size_t s)
sylar::ByteArray::Node::Node	sylar/sylar/bytearray.h	/^        Node();$/;"	p	struct:sylar::ByteArray::Node	access:public	signature:()
sylar::ByteArray::Node::Node	sylar/sylar/bytearray.h	/^        Node(size_t s);$/;"	p	struct:sylar::ByteArray::Node	access:public	signature:(size_t s)
sylar::ByteArray::Node::next	sylar/sylar/bytearray.h	/^        Node* next;$/;"	m	struct:sylar::ByteArray::Node	typeref:typename:Node *	access:public
sylar::ByteArray::Node::ptr	sylar/sylar/bytearray.h	/^        char* ptr;$/;"	m	struct:sylar::ByteArray::Node	typeref:typename:char *	access:public
sylar::ByteArray::Node::size	sylar/sylar/bytearray.h	/^        size_t size;$/;"	m	struct:sylar::ByteArray::Node	typeref:typename:size_t	access:public
sylar::ByteArray::Node::~Node	sylar/sylar/bytearray.cc	/^ByteArray::Node::~Node() {$/;"	f	class:sylar::ByteArray::Node	signature:()
sylar::ByteArray::Node::~Node	sylar/sylar/bytearray.h	/^        ~Node();$/;"	p	struct:sylar::ByteArray::Node	access:public	signature:()
sylar::ByteArray::addCapacity	sylar/sylar/bytearray.cc	/^void ByteArray::addCapacity(size_t size) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(size_t size)
sylar::ByteArray::addCapacity	sylar/sylar/bytearray.h	/^    void addCapacity(size_t size);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:private	signature:(size_t size)
sylar::ByteArray::clear	sylar/sylar/bytearray.cc	/^void ByteArray::clear() {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:()
sylar::ByteArray::clear	sylar/sylar/bytearray.h	/^    void clear();$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:()
sylar::ByteArray::getBaseSize	sylar/sylar/bytearray.h	/^    size_t getBaseSize() const { return m_baseSize;}$/;"	f	class:sylar::ByteArray	typeref:typename:size_t	access:public	signature:() const
sylar::ByteArray::getCapacity	sylar/sylar/bytearray.h	/^    size_t getCapacity() const { return m_capacity - m_position;}$/;"	f	class:sylar::ByteArray	typeref:typename:size_t	access:private	signature:() const
sylar::ByteArray::getPosition	sylar/sylar/bytearray.h	/^    size_t getPosition() const { return m_position;}$/;"	f	class:sylar::ByteArray	typeref:typename:size_t	access:public	signature:() const
sylar::ByteArray::getReadBuffers	sylar/sylar/bytearray.cc	/^uint64_t ByteArray::getReadBuffers(std::vector<iovec>& buffers$/;"	f	class:sylar::ByteArray	typeref:typename:uint64_t	signature:(std::vector<iovec> & buffers,uint64_t len,uint64_t position) const
sylar::ByteArray::getReadBuffers	sylar/sylar/bytearray.cc	/^uint64_t ByteArray::getReadBuffers(std::vector<iovec>& buffers, uint64_t len) const {$/;"	f	class:sylar::ByteArray	typeref:typename:uint64_t	signature:(std::vector<iovec> & buffers,uint64_t len) const
sylar::ByteArray::getReadBuffers	sylar/sylar/bytearray.h	/^    uint64_t getReadBuffers(std::vector<iovec>& buffers, uint64_t len = ~0ull) const;$/;"	p	class:sylar::ByteArray	typeref:typename:uint64_t	access:public	signature:(std::vector<iovec> & buffers,uint64_t len=~0ull) const
sylar::ByteArray::getReadBuffers	sylar/sylar/bytearray.h	/^    uint64_t getReadBuffers(std::vector<iovec>& buffers, uint64_t len, uint64_t position) const;$/;"	p	class:sylar::ByteArray	typeref:typename:uint64_t	access:public	signature:(std::vector<iovec> & buffers,uint64_t len,uint64_t position) const
sylar::ByteArray::getReadSize	sylar/sylar/bytearray.h	/^    size_t getReadSize() const { return m_size - m_position;}$/;"	f	class:sylar::ByteArray	typeref:typename:size_t	access:public	signature:() const
sylar::ByteArray::getSize	sylar/sylar/bytearray.h	/^    size_t getSize() const { return m_size;}$/;"	f	class:sylar::ByteArray	typeref:typename:size_t	access:public	signature:() const
sylar::ByteArray::getWriteBuffers	sylar/sylar/bytearray.cc	/^uint64_t ByteArray::getWriteBuffers(std::vector<iovec>& buffers, uint64_t len) {$/;"	f	class:sylar::ByteArray	typeref:typename:uint64_t	signature:(std::vector<iovec> & buffers,uint64_t len)
sylar::ByteArray::getWriteBuffers	sylar/sylar/bytearray.h	/^    uint64_t getWriteBuffers(std::vector<iovec>& buffers, uint64_t len);$/;"	p	class:sylar::ByteArray	typeref:typename:uint64_t	access:public	signature:(std::vector<iovec> & buffers,uint64_t len)
sylar::ByteArray::isLittleEndian	sylar/sylar/bytearray.cc	/^bool ByteArray::isLittleEndian() const {$/;"	f	class:sylar::ByteArray	typeref:typename:bool	signature:() const
sylar::ByteArray::isLittleEndian	sylar/sylar/bytearray.h	/^    bool isLittleEndian() const;$/;"	p	class:sylar::ByteArray	typeref:typename:bool	access:public	signature:() const
sylar::ByteArray::m_baseSize	sylar/sylar/bytearray.h	/^    size_t m_baseSize;$/;"	m	class:sylar::ByteArray	typeref:typename:size_t	access:private
sylar::ByteArray::m_capacity	sylar/sylar/bytearray.h	/^    size_t m_capacity;$/;"	m	class:sylar::ByteArray	typeref:typename:size_t	access:private
sylar::ByteArray::m_cur	sylar/sylar/bytearray.h	/^    Node* m_cur;$/;"	m	class:sylar::ByteArray	typeref:typename:Node *	access:private
sylar::ByteArray::m_endian	sylar/sylar/bytearray.h	/^    int8_t m_endian;$/;"	m	class:sylar::ByteArray	typeref:typename:int8_t	access:private
sylar::ByteArray::m_position	sylar/sylar/bytearray.h	/^    size_t m_position;$/;"	m	class:sylar::ByteArray	typeref:typename:size_t	access:private
sylar::ByteArray::m_root	sylar/sylar/bytearray.h	/^    Node* m_root;$/;"	m	class:sylar::ByteArray	typeref:typename:Node *	access:private
sylar::ByteArray::m_size	sylar/sylar/bytearray.h	/^    size_t m_size;$/;"	m	class:sylar::ByteArray	typeref:typename:size_t	access:private
sylar::ByteArray::ptr	sylar/sylar/bytearray.h	/^    typedef std::shared_ptr<ByteArray> ptr;$/;"	t	class:sylar::ByteArray	typeref:typename:std::shared_ptr<ByteArray>	access:public
sylar::ByteArray::read	sylar/sylar/bytearray.cc	/^void ByteArray::read(void* buf, size_t size) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(void * buf,size_t size)
sylar::ByteArray::read	sylar/sylar/bytearray.cc	/^void ByteArray::read(void* buf, size_t size, size_t position) const {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(void * buf,size_t size,size_t position) const
sylar::ByteArray::read	sylar/sylar/bytearray.h	/^    void read(void* buf, size_t size);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(void * buf,size_t size)
sylar::ByteArray::read	sylar/sylar/bytearray.h	/^    void read(void* buf, size_t size, size_t position) const;$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(void * buf,size_t size,size_t position) const
sylar::ByteArray::readDouble	sylar/sylar/bytearray.cc	/^double   ByteArray::readDouble() {$/;"	f	class:sylar::ByteArray	typeref:typename:double	signature:()
sylar::ByteArray::readDouble	sylar/sylar/bytearray.h	/^    double   readDouble();$/;"	p	class:sylar::ByteArray	typeref:typename:double	access:public	signature:()
sylar::ByteArray::readFint16	sylar/sylar/bytearray.cc	/^int16_t  ByteArray::readFint16() {$/;"	f	class:sylar::ByteArray	typeref:typename:int16_t	signature:()
sylar::ByteArray::readFint16	sylar/sylar/bytearray.h	/^    int16_t  readFint16();$/;"	p	class:sylar::ByteArray	typeref:typename:int16_t	access:public	signature:()
sylar::ByteArray::readFint32	sylar/sylar/bytearray.cc	/^int32_t  ByteArray::readFint32() {$/;"	f	class:sylar::ByteArray	typeref:typename:int32_t	signature:()
sylar::ByteArray::readFint32	sylar/sylar/bytearray.h	/^    int32_t  readFint32();$/;"	p	class:sylar::ByteArray	typeref:typename:int32_t	access:public	signature:()
sylar::ByteArray::readFint64	sylar/sylar/bytearray.cc	/^int64_t  ByteArray::readFint64() {$/;"	f	class:sylar::ByteArray	typeref:typename:int64_t	signature:()
sylar::ByteArray::readFint64	sylar/sylar/bytearray.h	/^    int64_t  readFint64();$/;"	p	class:sylar::ByteArray	typeref:typename:int64_t	access:public	signature:()
sylar::ByteArray::readFint8	sylar/sylar/bytearray.cc	/^int8_t   ByteArray::readFint8() {$/;"	f	class:sylar::ByteArray	typeref:typename:int8_t	signature:()
sylar::ByteArray::readFint8	sylar/sylar/bytearray.h	/^    int8_t   readFint8();$/;"	p	class:sylar::ByteArray	typeref:typename:int8_t	access:public	signature:()
sylar::ByteArray::readFloat	sylar/sylar/bytearray.cc	/^float    ByteArray::readFloat() {$/;"	f	class:sylar::ByteArray	typeref:typename:float	signature:()
sylar::ByteArray::readFloat	sylar/sylar/bytearray.h	/^    float    readFloat();$/;"	p	class:sylar::ByteArray	typeref:typename:float	access:public	signature:()
sylar::ByteArray::readFromFile	sylar/sylar/bytearray.cc	/^bool ByteArray::readFromFile(const std::string& name) {$/;"	f	class:sylar::ByteArray	typeref:typename:bool	signature:(const std::string & name)
sylar::ByteArray::readFromFile	sylar/sylar/bytearray.h	/^    bool readFromFile(const std::string& name);$/;"	p	class:sylar::ByteArray	typeref:typename:bool	access:public	signature:(const std::string & name)
sylar::ByteArray::readFuint16	sylar/sylar/bytearray.cc	/^uint16_t ByteArray::readFuint16() {$/;"	f	class:sylar::ByteArray	typeref:typename:uint16_t	signature:()
sylar::ByteArray::readFuint16	sylar/sylar/bytearray.h	/^    uint16_t readFuint16();$/;"	p	class:sylar::ByteArray	typeref:typename:uint16_t	access:public	signature:()
sylar::ByteArray::readFuint32	sylar/sylar/bytearray.cc	/^uint32_t ByteArray::readFuint32() {$/;"	f	class:sylar::ByteArray	typeref:typename:uint32_t	signature:()
sylar::ByteArray::readFuint32	sylar/sylar/bytearray.h	/^    uint32_t readFuint32();$/;"	p	class:sylar::ByteArray	typeref:typename:uint32_t	access:public	signature:()
sylar::ByteArray::readFuint64	sylar/sylar/bytearray.cc	/^uint64_t ByteArray::readFuint64() {$/;"	f	class:sylar::ByteArray	typeref:typename:uint64_t	signature:()
sylar::ByteArray::readFuint64	sylar/sylar/bytearray.h	/^    uint64_t readFuint64();$/;"	p	class:sylar::ByteArray	typeref:typename:uint64_t	access:public	signature:()
sylar::ByteArray::readFuint8	sylar/sylar/bytearray.cc	/^uint8_t  ByteArray::readFuint8() {$/;"	f	class:sylar::ByteArray	typeref:typename:uint8_t	signature:()
sylar::ByteArray::readFuint8	sylar/sylar/bytearray.h	/^    uint8_t  readFuint8();$/;"	p	class:sylar::ByteArray	typeref:typename:uint8_t	access:public	signature:()
sylar::ByteArray::readInt32	sylar/sylar/bytearray.cc	/^int32_t  ByteArray::readInt32() {$/;"	f	class:sylar::ByteArray	typeref:typename:int32_t	signature:()
sylar::ByteArray::readInt32	sylar/sylar/bytearray.h	/^    int32_t  readInt32();$/;"	p	class:sylar::ByteArray	typeref:typename:int32_t	access:public	signature:()
sylar::ByteArray::readInt64	sylar/sylar/bytearray.cc	/^int64_t  ByteArray::readInt64() {$/;"	f	class:sylar::ByteArray	typeref:typename:int64_t	signature:()
sylar::ByteArray::readInt64	sylar/sylar/bytearray.h	/^    int64_t  readInt64();$/;"	p	class:sylar::ByteArray	typeref:typename:int64_t	access:public	signature:()
sylar::ByteArray::readStringF16	sylar/sylar/bytearray.cc	/^std::string ByteArray::readStringF16() {$/;"	f	class:sylar::ByteArray	typeref:typename:std::string	signature:()
sylar::ByteArray::readStringF16	sylar/sylar/bytearray.h	/^    std::string readStringF16();$/;"	p	class:sylar::ByteArray	typeref:typename:std::string	access:public	signature:()
sylar::ByteArray::readStringF32	sylar/sylar/bytearray.cc	/^std::string ByteArray::readStringF32() {$/;"	f	class:sylar::ByteArray	typeref:typename:std::string	signature:()
sylar::ByteArray::readStringF32	sylar/sylar/bytearray.h	/^    std::string readStringF32();$/;"	p	class:sylar::ByteArray	typeref:typename:std::string	access:public	signature:()
sylar::ByteArray::readStringF64	sylar/sylar/bytearray.cc	/^std::string ByteArray::readStringF64() {$/;"	f	class:sylar::ByteArray	typeref:typename:std::string	signature:()
sylar::ByteArray::readStringF64	sylar/sylar/bytearray.h	/^    std::string readStringF64();$/;"	p	class:sylar::ByteArray	typeref:typename:std::string	access:public	signature:()
sylar::ByteArray::readStringVint	sylar/sylar/bytearray.cc	/^std::string ByteArray::readStringVint() {$/;"	f	class:sylar::ByteArray	typeref:typename:std::string	signature:()
sylar::ByteArray::readStringVint	sylar/sylar/bytearray.h	/^    std::string readStringVint();$/;"	p	class:sylar::ByteArray	typeref:typename:std::string	access:public	signature:()
sylar::ByteArray::readUint32	sylar/sylar/bytearray.cc	/^uint32_t ByteArray::readUint32() {$/;"	f	class:sylar::ByteArray	typeref:typename:uint32_t	signature:()
sylar::ByteArray::readUint32	sylar/sylar/bytearray.h	/^    uint32_t readUint32();$/;"	p	class:sylar::ByteArray	typeref:typename:uint32_t	access:public	signature:()
sylar::ByteArray::readUint64	sylar/sylar/bytearray.cc	/^uint64_t ByteArray::readUint64() {$/;"	f	class:sylar::ByteArray	typeref:typename:uint64_t	signature:()
sylar::ByteArray::readUint64	sylar/sylar/bytearray.h	/^    uint64_t readUint64();$/;"	p	class:sylar::ByteArray	typeref:typename:uint64_t	access:public	signature:()
sylar::ByteArray::setIsLittleEndian	sylar/sylar/bytearray.cc	/^void ByteArray::setIsLittleEndian(bool val) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(bool val)
sylar::ByteArray::setIsLittleEndian	sylar/sylar/bytearray.h	/^    void setIsLittleEndian(bool val);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(bool val)
sylar::ByteArray::setPosition	sylar/sylar/bytearray.cc	/^void ByteArray::setPosition(size_t v) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(size_t v)
sylar::ByteArray::setPosition	sylar/sylar/bytearray.h	/^    void setPosition(size_t v);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(size_t v)
sylar::ByteArray::toHexString	sylar/sylar/bytearray.cc	/^std::string ByteArray::toHexString() const {$/;"	f	class:sylar::ByteArray	typeref:typename:std::string	signature:() const
sylar::ByteArray::toHexString	sylar/sylar/bytearray.h	/^    std::string toHexString() const;$/;"	p	class:sylar::ByteArray	typeref:typename:std::string	access:public	signature:() const
sylar::ByteArray::toString	sylar/sylar/bytearray.cc	/^std::string ByteArray::toString() const {$/;"	f	class:sylar::ByteArray	typeref:typename:std::string	signature:() const
sylar::ByteArray::toString	sylar/sylar/bytearray.h	/^    std::string toString() const;$/;"	p	class:sylar::ByteArray	typeref:typename:std::string	access:public	signature:() const
sylar::ByteArray::write	sylar/sylar/bytearray.cc	/^void ByteArray::write(const void* buf, size_t size) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(const void * buf,size_t size)
sylar::ByteArray::write	sylar/sylar/bytearray.h	/^    void write(const void* buf, size_t size);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(const void * buf,size_t size)
sylar::ByteArray::writeDouble	sylar/sylar/bytearray.cc	/^void ByteArray::writeDouble (double value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(double value)
sylar::ByteArray::writeDouble	sylar/sylar/bytearray.h	/^    void writeDouble (double value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(double value)
sylar::ByteArray::writeFint16	sylar/sylar/bytearray.cc	/^void ByteArray::writeFint16 (int16_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(int16_t value)
sylar::ByteArray::writeFint16	sylar/sylar/bytearray.h	/^    void writeFint16 (int16_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(int16_t value)
sylar::ByteArray::writeFint32	sylar/sylar/bytearray.cc	/^void ByteArray::writeFint32 (int32_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(int32_t value)
sylar::ByteArray::writeFint32	sylar/sylar/bytearray.h	/^    void writeFint32 (int32_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(int32_t value)
sylar::ByteArray::writeFint64	sylar/sylar/bytearray.cc	/^void ByteArray::writeFint64 (int64_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(int64_t value)
sylar::ByteArray::writeFint64	sylar/sylar/bytearray.h	/^    void writeFint64 (int64_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(int64_t value)
sylar::ByteArray::writeFint8	sylar/sylar/bytearray.cc	/^void ByteArray::writeFint8  (int8_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(int8_t value)
sylar::ByteArray::writeFint8	sylar/sylar/bytearray.h	/^    void writeFint8  (int8_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(int8_t value)
sylar::ByteArray::writeFloat	sylar/sylar/bytearray.cc	/^void ByteArray::writeFloat  (float value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(float value)
sylar::ByteArray::writeFloat	sylar/sylar/bytearray.h	/^    void writeFloat  (float value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(float value)
sylar::ByteArray::writeFuint16	sylar/sylar/bytearray.cc	/^void ByteArray::writeFuint16(uint16_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(uint16_t value)
sylar::ByteArray::writeFuint16	sylar/sylar/bytearray.h	/^    void writeFuint16(uint16_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(uint16_t value)
sylar::ByteArray::writeFuint32	sylar/sylar/bytearray.cc	/^void ByteArray::writeFuint32(uint32_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(uint32_t value)
sylar::ByteArray::writeFuint32	sylar/sylar/bytearray.h	/^    void writeFuint32(uint32_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(uint32_t value)
sylar::ByteArray::writeFuint64	sylar/sylar/bytearray.cc	/^void ByteArray::writeFuint64(uint64_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(uint64_t value)
sylar::ByteArray::writeFuint64	sylar/sylar/bytearray.h	/^    void writeFuint64(uint64_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(uint64_t value)
sylar::ByteArray::writeFuint8	sylar/sylar/bytearray.cc	/^void ByteArray::writeFuint8 (uint8_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(uint8_t value)
sylar::ByteArray::writeFuint8	sylar/sylar/bytearray.h	/^    void writeFuint8 (uint8_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(uint8_t value)
sylar::ByteArray::writeInt32	sylar/sylar/bytearray.cc	/^void ByteArray::writeInt32  (int32_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(int32_t value)
sylar::ByteArray::writeInt32	sylar/sylar/bytearray.h	/^    void writeInt32  (int32_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(int32_t value)
sylar::ByteArray::writeInt64	sylar/sylar/bytearray.cc	/^void ByteArray::writeInt64  (int64_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(int64_t value)
sylar::ByteArray::writeInt64	sylar/sylar/bytearray.h	/^    void writeInt64  (int64_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(int64_t value)
sylar::ByteArray::writeStringF16	sylar/sylar/bytearray.cc	/^void ByteArray::writeStringF16(const std::string& value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(const std::string & value)
sylar::ByteArray::writeStringF16	sylar/sylar/bytearray.h	/^    void writeStringF16(const std::string& value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(const std::string & value)
sylar::ByteArray::writeStringF32	sylar/sylar/bytearray.cc	/^void ByteArray::writeStringF32(const std::string& value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(const std::string & value)
sylar::ByteArray::writeStringF32	sylar/sylar/bytearray.h	/^    void writeStringF32(const std::string& value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(const std::string & value)
sylar::ByteArray::writeStringF64	sylar/sylar/bytearray.cc	/^void ByteArray::writeStringF64(const std::string& value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(const std::string & value)
sylar::ByteArray::writeStringF64	sylar/sylar/bytearray.h	/^    void writeStringF64(const std::string& value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(const std::string & value)
sylar::ByteArray::writeStringVint	sylar/sylar/bytearray.cc	/^void ByteArray::writeStringVint(const std::string& value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(const std::string & value)
sylar::ByteArray::writeStringVint	sylar/sylar/bytearray.h	/^    void writeStringVint(const std::string& value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(const std::string & value)
sylar::ByteArray::writeStringWithoutLength	sylar/sylar/bytearray.cc	/^void ByteArray::writeStringWithoutLength(const std::string& value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(const std::string & value)
sylar::ByteArray::writeStringWithoutLength	sylar/sylar/bytearray.h	/^    void writeStringWithoutLength(const std::string& value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(const std::string & value)
sylar::ByteArray::writeToFile	sylar/sylar/bytearray.cc	/^bool ByteArray::writeToFile(const std::string& name) const {$/;"	f	class:sylar::ByteArray	typeref:typename:bool	signature:(const std::string & name) const
sylar::ByteArray::writeToFile	sylar/sylar/bytearray.h	/^    bool writeToFile(const std::string& name) const;$/;"	p	class:sylar::ByteArray	typeref:typename:bool	access:public	signature:(const std::string & name) const
sylar::ByteArray::writeUint32	sylar/sylar/bytearray.cc	/^void ByteArray::writeUint32 (uint32_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(uint32_t value)
sylar::ByteArray::writeUint32	sylar/sylar/bytearray.h	/^    void writeUint32 (uint32_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(uint32_t value)
sylar::ByteArray::writeUint64	sylar/sylar/bytearray.cc	/^void ByteArray::writeUint64 (uint64_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(uint64_t value)
sylar::ByteArray::writeUint64	sylar/sylar/bytearray.h	/^    void writeUint64 (uint64_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(uint64_t value)
sylar::ByteArray::~ByteArray	sylar/sylar/bytearray.cc	/^ByteArray::~ByteArray() {$/;"	f	class:sylar::ByteArray	signature:()
sylar::ByteArray::~ByteArray	sylar/sylar/bytearray.h	/^    ~ByteArray();$/;"	p	class:sylar::ByteArray	access:public	signature:()
sylar::CASLock	sylar/sylar/mutex.h	/^class CASLock : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
sylar::CASLock::CASLock	sylar/sylar/mutex.h	/^    CASLock() {$/;"	f	class:sylar::CASLock	access:public	signature:()
sylar::CASLock::Lock	sylar/sylar/mutex.h	/^    typedef ScopedLockImpl<CASLock> Lock;$/;"	t	class:sylar::CASLock	typeref:typename:ScopedLockImpl<CASLock>	access:public
sylar::CASLock::lock	sylar/sylar/mutex.h	/^    void lock() {$/;"	f	class:sylar::CASLock	typeref:typename:void	access:public	signature:()
sylar::CASLock::m_mutex	sylar/sylar/mutex.h	/^    volatile std::atomic_flag m_mutex;$/;"	m	class:sylar::CASLock	typeref:typename:volatile std::atomic_flag	access:private
sylar::CASLock::unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	class:sylar::CASLock	typeref:typename:void	access:public	signature:()
sylar::CASLock::~CASLock	sylar/sylar/mutex.h	/^    ~CASLock() {$/;"	f	class:sylar::CASLock	access:public	signature:()
sylar::CheckGetParamValue	sylar/sylar/util.h	/^bool CheckGetParamValue(const Map& m, const K& k, V& v) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(const Map & m,const K & k,V & v)
sylar::Config	sylar/sylar/config.h	/^class Config {$/;"	c	namespace:sylar
sylar::Config::ConfigVarMap	sylar/sylar/config.h	/^    typedef std::unordered_map<std::string, ConfigVarBase::ptr> ConfigVarMap;$/;"	t	class:sylar::Config	typeref:typename:std::unordered_map<std::string,ConfigVarBase::ptr>	access:public
sylar::Config::GetDatas	sylar/sylar/config.h	/^    static ConfigVarMap& GetDatas() {$/;"	f	class:sylar::Config	typeref:typename:ConfigVarMap &	access:private	signature:()
sylar::Config::GetMutex	sylar/sylar/config.h	/^    static RWMutexType& GetMutex() {$/;"	f	class:sylar::Config	typeref:typename:RWMutexType &	access:private	signature:()
sylar::Config::LoadFromConfDir	sylar/sylar/config.cc	/^void Config::LoadFromConfDir(const std::string& path, bool force) {$/;"	f	class:sylar::Config	typeref:typename:void	signature:(const std::string & path,bool force)
sylar::Config::LoadFromConfDir	sylar/sylar/config.h	/^    static void LoadFromConfDir(const std::string& path, bool force = false);$/;"	p	class:sylar::Config	typeref:typename:void	access:public	signature:(const std::string & path,bool force=false)
sylar::Config::LoadFromYaml	sylar/sylar/config.cc	/^void Config::LoadFromYaml(const YAML::Node& root) {$/;"	f	class:sylar::Config	typeref:typename:void	signature:(const YAML::Node & root)
sylar::Config::LoadFromYaml	sylar/sylar/config.h	/^    static void LoadFromYaml(const YAML::Node& root);$/;"	p	class:sylar::Config	typeref:typename:void	access:public	signature:(const YAML::Node & root)
sylar::Config::Lookup	sylar/sylar/config.h	/^    static typename ConfigVar<T>::ptr Lookup(const std::string& name) {$/;"	f	class:sylar::Config	typeref:typename:ConfigVar<T>::ptr	access:public	signature:(const std::string & name)
sylar::Config::Lookup	sylar/sylar/config.h	/^    static typename ConfigVar<T>::ptr Lookup(const std::string& name,$/;"	f	class:sylar::Config	typeref:typename:ConfigVar<T>::ptr	access:public	signature:(const std::string & name,const T & default_value,const std::string & description="")
sylar::Config::LookupBase	sylar/sylar/config.cc	/^ConfigVarBase::ptr Config::LookupBase(const std::string& name) {$/;"	f	class:sylar::Config	typeref:typename:ConfigVarBase::ptr	signature:(const std::string & name)
sylar::Config::LookupBase	sylar/sylar/config.h	/^    static ConfigVarBase::ptr LookupBase(const std::string& name);$/;"	p	class:sylar::Config	typeref:typename:ConfigVarBase::ptr	access:public	signature:(const std::string & name)
sylar::Config::RWMutexType	sylar/sylar/config.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::Config	typeref:typename:RWMutex	access:public
sylar::Config::Visit	sylar/sylar/config.cc	/^void Config::Visit(std::function<void(ConfigVarBase::ptr)> cb) {$/;"	f	class:sylar::Config	typeref:typename:void	signature:(std::function<void (ConfigVarBase::ptr)> cb)
sylar::Config::Visit	sylar/sylar/config.h	/^    static void Visit(std::function<void(ConfigVarBase::ptr)> cb);$/;"	p	class:sylar::Config	typeref:typename:void	access:public	signature:(std::function<void (ConfigVarBase::ptr)> cb)
sylar::ConfigVar	sylar/sylar/config.h	/^class ConfigVar : public ConfigVarBase {$/;"	c	namespace:sylar	inherits:ConfigVarBase
sylar::ConfigVar::ConfigVar	sylar/sylar/config.h	/^    ConfigVar(const std::string& name$/;"	f	class:sylar::ConfigVar	access:public	signature:(const std::string & name,const T & default_value,const std::string & description="")
sylar::ConfigVar::RWMutexType	sylar/sylar/config.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::ConfigVar	typeref:typename:RWMutex	access:public
sylar::ConfigVar::addListener	sylar/sylar/config.h	/^    uint64_t addListener(on_change_cb cb) {$/;"	f	class:sylar::ConfigVar	typeref:typename:uint64_t	access:public	signature:(on_change_cb cb)
sylar::ConfigVar::clearListener	sylar/sylar/config.h	/^    void clearListener() {$/;"	f	class:sylar::ConfigVar	typeref:typename:void	access:public	signature:()
sylar::ConfigVar::delListener	sylar/sylar/config.h	/^    void delListener(uint64_t key) {$/;"	f	class:sylar::ConfigVar	typeref:typename:void	access:public	signature:(uint64_t key)
sylar::ConfigVar::fromString	sylar/sylar/config.h	/^    bool fromString(const std::string& val) override {$/;"	f	class:sylar::ConfigVar	typeref:typename:bool	access:public	signature:(const std::string & val)
sylar::ConfigVar::getListener	sylar/sylar/config.h	/^    on_change_cb getListener(uint64_t key) {$/;"	f	class:sylar::ConfigVar	typeref:typename:on_change_cb	access:public	signature:(uint64_t key)
sylar::ConfigVar::getTypeName	sylar/sylar/config.h	/^    std::string getTypeName() const override { return TypeToName<T>();}$/;"	f	class:sylar::ConfigVar	typeref:typename:std::string	access:public	signature:() const
sylar::ConfigVar::getValue	sylar/sylar/config.h	/^    const T getValue() {$/;"	f	class:sylar::ConfigVar	typeref:typename:const T	access:public	signature:()
sylar::ConfigVar::m_cbs	sylar/sylar/config.h	/^    std::map<uint64_t, on_change_cb> m_cbs;$/;"	m	class:sylar::ConfigVar	typeref:typename:std::map<uint64_t,on_change_cb>	access:private
sylar::ConfigVar::m_mutex	sylar/sylar/config.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::ConfigVar	typeref:typename:RWMutexType	access:private
sylar::ConfigVar::m_val	sylar/sylar/config.h	/^    T m_val;$/;"	m	class:sylar::ConfigVar	typeref:typename:T	access:private
sylar::ConfigVar::on_change_cb	sylar/sylar/config.h	/^    typedef std::function<void (const T& old_value, const T& new_value)> on_change_cb;$/;"	t	class:sylar::ConfigVar	access:public
sylar::ConfigVar::ptr	sylar/sylar/config.h	/^    typedef std::shared_ptr<ConfigVar> ptr;$/;"	t	class:sylar::ConfigVar	typeref:typename:std::shared_ptr<ConfigVar>	access:public
sylar::ConfigVar::setValue	sylar/sylar/config.h	/^    void setValue(const T& v) {$/;"	f	class:sylar::ConfigVar	typeref:typename:void	access:public	signature:(const T & v)
sylar::ConfigVar::toString	sylar/sylar/config.h	/^    std::string toString() override {$/;"	f	class:sylar::ConfigVar	typeref:typename:std::string	access:public	signature:()
sylar::ConfigVarBase	sylar/sylar/config.h	/^class ConfigVarBase {$/;"	c	namespace:sylar
sylar::ConfigVarBase::ConfigVarBase	sylar/sylar/config.h	/^    ConfigVarBase(const std::string& name, const std::string& description = "")$/;"	f	class:sylar::ConfigVarBase	access:public	signature:(const std::string & name,const std::string & description="")
sylar::ConfigVarBase::fromString	sylar/sylar/config.h	/^    virtual bool fromString(const std::string& val) = 0;$/;"	p	class:sylar::ConfigVarBase	typeref:typename:bool	access:public	signature:(const std::string & val)
sylar::ConfigVarBase::getDescription	sylar/sylar/config.h	/^    const std::string& getDescription() const { return m_description;}$/;"	f	class:sylar::ConfigVarBase	typeref:typename:const std::string &	access:public	signature:() const
sylar::ConfigVarBase::getName	sylar/sylar/config.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::ConfigVarBase	typeref:typename:const std::string &	access:public	signature:() const
sylar::ConfigVarBase::getTypeName	sylar/sylar/config.h	/^    virtual std::string getTypeName() const = 0;$/;"	p	class:sylar::ConfigVarBase	typeref:typename:std::string	access:public	signature:() const
sylar::ConfigVarBase::m_description	sylar/sylar/config.h	/^    std::string m_description;$/;"	m	class:sylar::ConfigVarBase	typeref:typename:std::string	access:protected
sylar::ConfigVarBase::m_name	sylar/sylar/config.h	/^    std::string m_name;$/;"	m	class:sylar::ConfigVarBase	typeref:typename:std::string	access:protected
sylar::ConfigVarBase::ptr	sylar/sylar/config.h	/^    typedef std::shared_ptr<ConfigVarBase> ptr;$/;"	t	class:sylar::ConfigVarBase	typeref:typename:std::shared_ptr<ConfigVarBase>	access:public
sylar::ConfigVarBase::toString	sylar/sylar/config.h	/^    virtual std::string toString() = 0;$/;"	p	class:sylar::ConfigVarBase	typeref:typename:std::string	access:public	signature:()
sylar::ConfigVarBase::~ConfigVarBase	sylar/sylar/config.h	/^    virtual ~ConfigVarBase() {}$/;"	f	class:sylar::ConfigVarBase	access:public	signature:()
sylar::CountBytes	sylar/sylar/address.cc	/^static uint32_t CountBytes(T value) {$/;"	f	namespace:sylar	typeref:typename:uint32_t	file:	signature:(T value)
sylar::CreateMask	sylar/sylar/address.cc	/^static T CreateMask(uint32_t bits) {$/;"	f	namespace:sylar	typeref:typename:T	file:	signature:(uint32_t bits)
sylar::CryptoUtil	sylar/sylar/util/crypto_util.h	/^class CryptoUtil {$/;"	c	namespace:sylar
sylar::CryptoUtil::AES128Cbc	sylar/sylar/util/crypto_util.cc	/^int32_t CryptoUtil::AES128Cbc(const void* key, const void* iv$/;"	f	class:sylar::CryptoUtil	typeref:typename:int32_t	signature:(const void * key,const void * iv,const void * in,int32_t in_len,void * out,bool encode)
sylar::CryptoUtil::AES128Cbc	sylar/sylar/util/crypto_util.h	/^    static int32_t AES128Cbc(const void* key, const void* iv$/;"	p	class:sylar::CryptoUtil	typeref:typename:int32_t	access:public	signature:(const void * key,const void * iv,const void * in,int32_t in_len,void * out,bool encode)
sylar::CryptoUtil::AES128Ecb	sylar/sylar/util/crypto_util.cc	/^int32_t CryptoUtil::AES128Ecb(const void* key$/;"	f	class:sylar::CryptoUtil	typeref:typename:int32_t	signature:(const void * key,const void * in,int32_t in_len,void * out,bool encode)
sylar::CryptoUtil::AES128Ecb	sylar/sylar/util/crypto_util.h	/^    static int32_t AES128Ecb(const void* key$/;"	p	class:sylar::CryptoUtil	typeref:typename:int32_t	access:public	signature:(const void * key,const void * in,int32_t in_len,void * out,bool encode)
sylar::CryptoUtil::AES256Cbc	sylar/sylar/util/crypto_util.cc	/^int32_t CryptoUtil::AES256Cbc(const void* key, const void* iv$/;"	f	class:sylar::CryptoUtil	typeref:typename:int32_t	signature:(const void * key,const void * iv,const void * in,int32_t in_len,void * out,bool encode)
sylar::CryptoUtil::AES256Cbc	sylar/sylar/util/crypto_util.h	/^    static int32_t AES256Cbc(const void* key, const void* iv$/;"	p	class:sylar::CryptoUtil	typeref:typename:int32_t	access:public	signature:(const void * key,const void * iv,const void * in,int32_t in_len,void * out,bool encode)
sylar::CryptoUtil::AES256Ecb	sylar/sylar/util/crypto_util.cc	/^int32_t CryptoUtil::AES256Ecb(const void* key$/;"	f	class:sylar::CryptoUtil	typeref:typename:int32_t	signature:(const void * key,const void * in,int32_t in_len,void * out,bool encode)
sylar::CryptoUtil::AES256Ecb	sylar/sylar/util/crypto_util.h	/^    static int32_t AES256Ecb(const void* key$/;"	p	class:sylar::CryptoUtil	typeref:typename:int32_t	access:public	signature:(const void * key,const void * in,int32_t in_len,void * out,bool encode)
sylar::CryptoUtil::Crypto	sylar/sylar/util/crypto_util.cc	/^int32_t CryptoUtil::Crypto(const EVP_CIPHER* cipher, bool enc$/;"	f	class:sylar::CryptoUtil	typeref:typename:int32_t	signature:(const EVP_CIPHER * cipher,bool enc,const void * key,const void * iv,const void * in,int32_t in_len,void * out,int32_t * out_len)
sylar::CryptoUtil::Crypto	sylar/sylar/util/crypto_util.h	/^    static int32_t Crypto(const EVP_CIPHER* cipher, bool enc$/;"	p	class:sylar::CryptoUtil	typeref:typename:int32_t	access:public	signature:(const EVP_CIPHER * cipher,bool enc,const void * key,const void * iv,const void * in,int32_t in_len,void * out,int32_t * out_len)
sylar::DateTimeFormatItem	sylar/sylar/log.cc	/^class DateTimeFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::DateTimeFormatItem::DateTimeFormatItem	sylar/sylar/log.cc	/^    DateTimeFormatItem(const std::string& format = "%Y-%m-%d %H:%M:%S")$/;"	f	class:sylar::DateTimeFormatItem	file:	access:public	signature:(const std::string & format="")
sylar::DateTimeFormatItem::format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::DateTimeFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::DateTimeFormatItem::m_format	sylar/sylar/log.cc	/^    std::string m_format;$/;"	m	class:sylar::DateTimeFormatItem	typeref:typename:std::string	file:	access:private
sylar::DecodeZigzag32	sylar/sylar/bytearray.cc	/^static int32_t DecodeZigzag32(const uint32_t& v) {$/;"	f	namespace:sylar	typeref:typename:int32_t	file:	signature:(const uint32_t & v)
sylar::DecodeZigzag64	sylar/sylar/bytearray.cc	/^static int64_t DecodeZigzag64(const uint64_t& v) {$/;"	f	namespace:sylar	typeref:typename:int64_t	file:	signature:(const uint64_t & v)
sylar::EMail	sylar/sylar/email/email.h	/^class EMail {$/;"	c	namespace:sylar
sylar::EMail::Create	sylar/sylar/email/email.cc	/^EMail::ptr EMail::Create(const std::string& from_address, const std::string& from_passwd$/;"	f	class:sylar::EMail	typeref:typename:EMail::ptr	signature:(const std::string & from_address,const std::string & from_passwd,const std::string & title,const std::string & body,const std::vector<std::string> & to_address,const std::vector<std::string> & cc_address,const std::vector<std::string> & bcc_address)
sylar::EMail::Create	sylar/sylar/email/email.h	/^    static EMail::ptr Create(const std::string& from_address, const std::string& from_passwd$/;"	p	class:sylar::EMail	typeref:typename:EMail::ptr	access:public	signature:(const std::string & from_address,const std::string & from_passwd,const std::string & title,const std::string & body,const std::vector<std::string> & to_address,const std::vector<std::string> & cc_address={} ,const std::vector<std::string> & bcc_address={})
sylar::EMail::addEntity	sylar/sylar/email/email.cc	/^void EMail::addEntity(EMailEntity::ptr entity) {$/;"	f	class:sylar::EMail	typeref:typename:void	signature:(EMailEntity::ptr entity)
sylar::EMail::addEntity	sylar/sylar/email/email.h	/^    void addEntity(EMailEntity::ptr entity);$/;"	p	class:sylar::EMail	typeref:typename:void	access:public	signature:(EMailEntity::ptr entity)
sylar::EMail::getBccEMailAddress	sylar/sylar/email/email.h	/^    const std::vector<std::string>& getBccEMailAddress() const { return m_bccEMailAddress;}$/;"	f	class:sylar::EMail	typeref:typename:const std::vector<std::string> &	access:public	signature:() const
sylar::EMail::getBody	sylar/sylar/email/email.h	/^    const std::string& getBody() const { return m_body;}$/;"	f	class:sylar::EMail	typeref:typename:const std::string &	access:public	signature:() const
sylar::EMail::getCcEMailAddress	sylar/sylar/email/email.h	/^    const std::vector<std::string>& getCcEMailAddress() const { return m_ccEMailAddress;}$/;"	f	class:sylar::EMail	typeref:typename:const std::vector<std::string> &	access:public	signature:() const
sylar::EMail::getEntitys	sylar/sylar/email/email.h	/^    const std::vector<EMailEntity::ptr>& getEntitys() const { return m_entitys;}$/;"	f	class:sylar::EMail	typeref:typename:const std::vector<EMailEntity::ptr> &	access:public	signature:() const
sylar::EMail::getFromEMailAddress	sylar/sylar/email/email.h	/^    const std::string& getFromEMailAddress() const { return m_fromEMailAddress;}$/;"	f	class:sylar::EMail	typeref:typename:const std::string &	access:public	signature:() const
sylar::EMail::getFromEMailPasswd	sylar/sylar/email/email.h	/^    const std::string& getFromEMailPasswd() const { return m_fromEMailPasswd;}$/;"	f	class:sylar::EMail	typeref:typename:const std::string &	access:public	signature:() const
sylar::EMail::getTitle	sylar/sylar/email/email.h	/^    const std::string& getTitle() const { return m_title;}$/;"	f	class:sylar::EMail	typeref:typename:const std::string &	access:public	signature:() const
sylar::EMail::getToEMailAddress	sylar/sylar/email/email.h	/^    const std::vector<std::string>& getToEMailAddress() const { return m_toEMailAddress;}$/;"	f	class:sylar::EMail	typeref:typename:const std::vector<std::string> &	access:public	signature:() const
sylar::EMail::m_bccEMailAddress	sylar/sylar/email/email.h	/^    std::vector<std::string> m_bccEMailAddress;$/;"	m	class:sylar::EMail	typeref:typename:std::vector<std::string>	access:private
sylar::EMail::m_body	sylar/sylar/email/email.h	/^    std::string m_body;$/;"	m	class:sylar::EMail	typeref:typename:std::string	access:private
sylar::EMail::m_ccEMailAddress	sylar/sylar/email/email.h	/^    std::vector<std::string> m_ccEMailAddress;$/;"	m	class:sylar::EMail	typeref:typename:std::vector<std::string>	access:private
sylar::EMail::m_entitys	sylar/sylar/email/email.h	/^    std::vector<EMailEntity::ptr> m_entitys;$/;"	m	class:sylar::EMail	typeref:typename:std::vector<EMailEntity::ptr>	access:private
sylar::EMail::m_fromEMailAddress	sylar/sylar/email/email.h	/^    std::string m_fromEMailAddress;$/;"	m	class:sylar::EMail	typeref:typename:std::string	access:private
sylar::EMail::m_fromEMailPasswd	sylar/sylar/email/email.h	/^    std::string m_fromEMailPasswd;$/;"	m	class:sylar::EMail	typeref:typename:std::string	access:private
sylar::EMail::m_title	sylar/sylar/email/email.h	/^    std::string m_title;$/;"	m	class:sylar::EMail	typeref:typename:std::string	access:private
sylar::EMail::m_toEMailAddress	sylar/sylar/email/email.h	/^    std::vector<std::string> m_toEMailAddress;$/;"	m	class:sylar::EMail	typeref:typename:std::vector<std::string>	access:private
sylar::EMail::ptr	sylar/sylar/email/email.h	/^    typedef std::shared_ptr<EMail> ptr;$/;"	t	class:sylar::EMail	typeref:typename:std::shared_ptr<EMail>	access:public
sylar::EMail::setBccEMailAddress	sylar/sylar/email/email.h	/^    void setBccEMailAddress(const std::vector<std::string>& v) { m_bccEMailAddress = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::vector<std::string> & v)
sylar::EMail::setBody	sylar/sylar/email/email.h	/^    void setBody(const std::string& v) { m_body = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::EMail::setCcEMailAddress	sylar/sylar/email/email.h	/^    void setCcEMailAddress(const std::vector<std::string>& v) { m_ccEMailAddress = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::vector<std::string> & v)
sylar::EMail::setFromEMailAddress	sylar/sylar/email/email.h	/^    void setFromEMailAddress(const std::string& v) { m_fromEMailAddress = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::EMail::setFromEMailPasswd	sylar/sylar/email/email.h	/^    void setFromEMailPasswd(const std::string& v) { m_fromEMailPasswd = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::EMail::setTitle	sylar/sylar/email/email.h	/^    void setTitle(const std::string& v) { m_title = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::EMail::setToEMailAddress	sylar/sylar/email/email.h	/^    void setToEMailAddress(const std::vector<std::string>& v) { m_toEMailAddress = v;}$/;"	f	class:sylar::EMail	typeref:typename:void	access:public	signature:(const std::vector<std::string> & v)
sylar::EMailEntity	sylar/sylar/email/email.h	/^class EMailEntity {$/;"	c	namespace:sylar
sylar::EMailEntity::CreateAttach	sylar/sylar/email/email.cc	/^EMailEntity::ptr EMailEntity::CreateAttach(const std::string& filename) {$/;"	f	class:sylar::EMailEntity	typeref:typename:EMailEntity::ptr	signature:(const std::string & filename)
sylar::EMailEntity::CreateAttach	sylar/sylar/email/email.h	/^    static EMailEntity::ptr CreateAttach(const std::string& filename);$/;"	p	class:sylar::EMailEntity	typeref:typename:EMailEntity::ptr	access:public	signature:(const std::string & filename)
sylar::EMailEntity::addHeader	sylar/sylar/email/email.cc	/^void EMailEntity::addHeader(const std::string& key, const std::string& val) {$/;"	f	class:sylar::EMailEntity	typeref:typename:void	signature:(const std::string & key,const std::string & val)
sylar::EMailEntity::addHeader	sylar/sylar/email/email.h	/^    void addHeader(const std::string& key, const std::string& val);$/;"	p	class:sylar::EMailEntity	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val)
sylar::EMailEntity::getContent	sylar/sylar/email/email.h	/^    const std::string& getContent() const { return m_content;}$/;"	f	class:sylar::EMailEntity	typeref:typename:const std::string &	access:public	signature:() const
sylar::EMailEntity::getHeader	sylar/sylar/email/email.cc	/^std::string EMailEntity::getHeader(const std::string& key, const std::string& def) {$/;"	f	class:sylar::EMailEntity	typeref:typename:std::string	signature:(const std::string & key,const std::string & def)
sylar::EMailEntity::getHeader	sylar/sylar/email/email.h	/^    std::string getHeader(const std::string& key, const std::string& def = "");$/;"	p	class:sylar::EMailEntity	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & def="")
sylar::EMailEntity::m_content	sylar/sylar/email/email.h	/^    std::string m_content;$/;"	m	class:sylar::EMailEntity	typeref:typename:std::string	access:private
sylar::EMailEntity::m_headers	sylar/sylar/email/email.h	/^    std::map<std::string, std::string> m_headers;$/;"	m	class:sylar::EMailEntity	typeref:typename:std::map<std::string,std::string>	access:private
sylar::EMailEntity::ptr	sylar/sylar/email/email.h	/^    typedef std::shared_ptr<EMailEntity> ptr;$/;"	t	class:sylar::EMailEntity	typeref:typename:std::shared_ptr<EMailEntity>	access:public
sylar::EMailEntity::setContent	sylar/sylar/email/email.h	/^    void setContent(const std::string& v) { m_content = v;}$/;"	f	class:sylar::EMailEntity	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::EMailEntity::toString	sylar/sylar/email/email.cc	/^std::string EMailEntity::toString() const {$/;"	f	class:sylar::EMailEntity	typeref:typename:std::string	signature:() const
sylar::EMailEntity::toString	sylar/sylar/email/email.h	/^    std::string toString() const;$/;"	p	class:sylar::EMailEntity	typeref:typename:std::string	access:public	signature:() const
sylar::ElapseFormatItem	sylar/sylar/log.cc	/^class ElapseFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::ElapseFormatItem::ElapseFormatItem	sylar/sylar/log.cc	/^    ElapseFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::ElapseFormatItem	file:	access:public	signature:(const std::string & str="")
sylar::ElapseFormatItem::format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::ElapseFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::EncodeZigzag32	sylar/sylar/bytearray.cc	/^static uint32_t EncodeZigzag32(const int32_t& v) {$/;"	f	namespace:sylar	typeref:typename:uint32_t	file:	signature:(const int32_t & v)
sylar::EncodeZigzag64	sylar/sylar/bytearray.cc	/^static uint64_t EncodeZigzag64(const int64_t& v) {$/;"	f	namespace:sylar	typeref:typename:uint64_t	file:	signature:(const int64_t & v)
sylar::Env	sylar/sylar/env.h	/^class Env {$/;"	c	namespace:sylar
sylar::Env::RWMutexType	sylar/sylar/env.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::Env	typeref:typename:RWMutex	access:public
sylar::Env::add	sylar/sylar/env.cc	/^void Env::add(const std::string& key, const std::string& val) {$/;"	f	class:sylar::Env	typeref:typename:void	signature:(const std::string & key,const std::string & val)
sylar::Env::add	sylar/sylar/env.h	/^    void add(const std::string& key, const std::string& val);$/;"	p	class:sylar::Env	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val)
sylar::Env::addHelp	sylar/sylar/env.cc	/^void Env::addHelp(const std::string& key, const std::string& desc) {$/;"	f	class:sylar::Env	typeref:typename:void	signature:(const std::string & key,const std::string & desc)
sylar::Env::addHelp	sylar/sylar/env.h	/^    void addHelp(const std::string& key, const std::string& desc);$/;"	p	class:sylar::Env	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & desc)
sylar::Env::del	sylar/sylar/env.cc	/^void Env::del(const std::string& key) {$/;"	f	class:sylar::Env	typeref:typename:void	signature:(const std::string & key)
sylar::Env::del	sylar/sylar/env.h	/^    void del(const std::string& key);$/;"	p	class:sylar::Env	typeref:typename:void	access:public	signature:(const std::string & key)
sylar::Env::get	sylar/sylar/env.cc	/^std::string Env::get(const std::string& key, const std::string& default_value) {$/;"	f	class:sylar::Env	typeref:typename:std::string	signature:(const std::string & key,const std::string & default_value)
sylar::Env::get	sylar/sylar/env.h	/^    std::string get(const std::string& key, const std::string& default_value = "");$/;"	p	class:sylar::Env	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & default_value="")
sylar::Env::getAbsolutePath	sylar/sylar/env.cc	/^std::string Env::getAbsolutePath(const std::string& path) const {$/;"	f	class:sylar::Env	typeref:typename:std::string	signature:(const std::string & path) const
sylar::Env::getAbsolutePath	sylar/sylar/env.h	/^    std::string getAbsolutePath(const std::string& path) const;$/;"	p	class:sylar::Env	typeref:typename:std::string	access:public	signature:(const std::string & path) const
sylar::Env::getAbsoluteWorkPath	sylar/sylar/env.cc	/^std::string Env::getAbsoluteWorkPath(const std::string& path) const {$/;"	f	class:sylar::Env	typeref:typename:std::string	signature:(const std::string & path) const
sylar::Env::getAbsoluteWorkPath	sylar/sylar/env.h	/^    std::string getAbsoluteWorkPath(const std::string& path) const;$/;"	p	class:sylar::Env	typeref:typename:std::string	access:public	signature:(const std::string & path) const
sylar::Env::getConfigPath	sylar/sylar/env.cc	/^std::string Env::getConfigPath() {$/;"	f	class:sylar::Env	typeref:typename:std::string	signature:()
sylar::Env::getConfigPath	sylar/sylar/env.h	/^    std::string getConfigPath();$/;"	p	class:sylar::Env	typeref:typename:std::string	access:public	signature:()
sylar::Env::getCwd	sylar/sylar/env.h	/^    const std::string& getCwd() const { return m_cwd;}$/;"	f	class:sylar::Env	typeref:typename:const std::string &	access:public	signature:() const
sylar::Env::getEnv	sylar/sylar/env.cc	/^std::string Env::getEnv(const std::string& key, const std::string& default_value) {$/;"	f	class:sylar::Env	typeref:typename:std::string	signature:(const std::string & key,const std::string & default_value)
sylar::Env::getEnv	sylar/sylar/env.h	/^    std::string getEnv(const std::string& key, const std::string& default_value = "");$/;"	p	class:sylar::Env	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & default_value="")
sylar::Env::getExe	sylar/sylar/env.h	/^    const std::string& getExe() const { return m_exe;}$/;"	f	class:sylar::Env	typeref:typename:const std::string &	access:public	signature:() const
sylar::Env::has	sylar/sylar/env.cc	/^bool Env::has(const std::string& key) {$/;"	f	class:sylar::Env	typeref:typename:bool	signature:(const std::string & key)
sylar::Env::has	sylar/sylar/env.h	/^    bool has(const std::string& key);$/;"	p	class:sylar::Env	typeref:typename:bool	access:public	signature:(const std::string & key)
sylar::Env::init	sylar/sylar/env.cc	/^bool Env::init(int argc, char** argv) {$/;"	f	class:sylar::Env	typeref:typename:bool	signature:(int argc,char ** argv)
sylar::Env::init	sylar/sylar/env.h	/^    bool init(int argc, char** argv);$/;"	p	class:sylar::Env	typeref:typename:bool	access:public	signature:(int argc,char ** argv)
sylar::Env::m_args	sylar/sylar/env.h	/^    std::map<std::string, std::string> m_args;$/;"	m	class:sylar::Env	typeref:typename:std::map<std::string,std::string>	access:private
sylar::Env::m_cwd	sylar/sylar/env.h	/^    std::string m_cwd;$/;"	m	class:sylar::Env	typeref:typename:std::string	access:private
sylar::Env::m_exe	sylar/sylar/env.h	/^    std::string m_exe;$/;"	m	class:sylar::Env	typeref:typename:std::string	access:private
sylar::Env::m_helps	sylar/sylar/env.h	/^    std::vector<std::pair<std::string, std::string> > m_helps;$/;"	m	class:sylar::Env	typeref:typename:std::vector<std::pair<std::string,std::string>>	access:private
sylar::Env::m_mutex	sylar/sylar/env.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::Env	typeref:typename:RWMutexType	access:private
sylar::Env::m_program	sylar/sylar/env.h	/^    std::string m_program;$/;"	m	class:sylar::Env	typeref:typename:std::string	access:private
sylar::Env::printHelp	sylar/sylar/env.cc	/^void Env::printHelp() {$/;"	f	class:sylar::Env	typeref:typename:void	signature:()
sylar::Env::printHelp	sylar/sylar/env.h	/^    void printHelp();$/;"	p	class:sylar::Env	typeref:typename:void	access:public	signature:()
sylar::Env::removeHelp	sylar/sylar/env.cc	/^void Env::removeHelp(const std::string& key) {$/;"	f	class:sylar::Env	typeref:typename:void	signature:(const std::string & key)
sylar::Env::removeHelp	sylar/sylar/env.h	/^    void removeHelp(const std::string& key);$/;"	p	class:sylar::Env	typeref:typename:void	access:public	signature:(const std::string & key)
sylar::Env::setEnv	sylar/sylar/env.cc	/^bool Env::setEnv(const std::string& key, const std::string& val) {$/;"	f	class:sylar::Env	typeref:typename:bool	signature:(const std::string & key,const std::string & val)
sylar::Env::setEnv	sylar/sylar/env.h	/^    bool setEnv(const std::string& key, const std::string& val);$/;"	p	class:sylar::Env	typeref:typename:bool	access:public	signature:(const std::string & key,const std::string & val)
sylar::EnvMgr	sylar/sylar/env.h	/^typedef sylar::Singleton<Env> EnvMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<Env>
sylar::EpollCtlOp	sylar/sylar/iomanager.cc	/^enum EpollCtlOp {$/;"	g	namespace:sylar	file:
sylar::FSUtil	sylar/sylar/util.h	/^class FSUtil {$/;"	c	namespace:sylar
sylar::FSUtil::Basename	sylar/sylar/util.cc	/^std::string FSUtil::Basename(const std::string& filename) {$/;"	f	class:sylar::FSUtil	typeref:typename:std::string	signature:(const std::string & filename)
sylar::FSUtil::Basename	sylar/sylar/util.h	/^    static std::string Basename(const std::string& filename);$/;"	p	class:sylar::FSUtil	typeref:typename:std::string	access:public	signature:(const std::string & filename)
sylar::FSUtil::Dirname	sylar/sylar/util.cc	/^std::string FSUtil::Dirname(const std::string& filename) {$/;"	f	class:sylar::FSUtil	typeref:typename:std::string	signature:(const std::string & filename)
sylar::FSUtil::Dirname	sylar/sylar/util.h	/^    static std::string Dirname(const std::string& filename);$/;"	p	class:sylar::FSUtil	typeref:typename:std::string	access:public	signature:(const std::string & filename)
sylar::FSUtil::IsRunningPidfile	sylar/sylar/util.cc	/^bool FSUtil::IsRunningPidfile(const std::string& pidfile) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & pidfile)
sylar::FSUtil::IsRunningPidfile	sylar/sylar/util.h	/^    static bool IsRunningPidfile(const std::string& pidfile);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & pidfile)
sylar::FSUtil::ListAllFile	sylar/sylar/util.cc	/^void FSUtil::ListAllFile(std::vector<std::string>& files$/;"	f	class:sylar::FSUtil	typeref:typename:void	signature:(std::vector<std::string> & files,const std::string & path,const std::string & subfix)
sylar::FSUtil::ListAllFile	sylar/sylar/util.h	/^    static void ListAllFile(std::vector<std::string>& files$/;"	p	class:sylar::FSUtil	typeref:typename:void	access:public	signature:(std::vector<std::string> & files,const std::string & path,const std::string & subfix)
sylar::FSUtil::Mkdir	sylar/sylar/util.cc	/^bool FSUtil::Mkdir(const std::string& dirname) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & dirname)
sylar::FSUtil::Mkdir	sylar/sylar/util.h	/^    static bool Mkdir(const std::string& dirname);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & dirname)
sylar::FSUtil::Mv	sylar/sylar/util.cc	/^bool FSUtil::Mv(const std::string& from, const std::string& to) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & from,const std::string & to)
sylar::FSUtil::Mv	sylar/sylar/util.h	/^    static bool Mv(const std::string& from, const std::string& to);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & from,const std::string & to)
sylar::FSUtil::OpenForRead	sylar/sylar/util.cc	/^bool FSUtil::OpenForRead(std::ifstream& ifs, const std::string& filename$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(std::ifstream & ifs,const std::string & filename,std::ios_base::openmode mode)
sylar::FSUtil::OpenForRead	sylar/sylar/util.h	/^    static bool OpenForRead(std::ifstream& ifs, const std::string& filename$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(std::ifstream & ifs,const std::string & filename,std::ios_base::openmode mode)
sylar::FSUtil::OpenForWrite	sylar/sylar/util.cc	/^bool FSUtil::OpenForWrite(std::ofstream& ofs, const std::string& filename$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(std::ofstream & ofs,const std::string & filename,std::ios_base::openmode mode)
sylar::FSUtil::OpenForWrite	sylar/sylar/util.h	/^    static bool OpenForWrite(std::ofstream& ofs, const std::string& filename$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(std::ofstream & ofs,const std::string & filename,std::ios_base::openmode mode)
sylar::FSUtil::Realpath	sylar/sylar/util.cc	/^bool FSUtil::Realpath(const std::string& path, std::string& rpath) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & path,std::string & rpath)
sylar::FSUtil::Realpath	sylar/sylar/util.h	/^    static bool Realpath(const std::string& path, std::string& rpath);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & path,std::string & rpath)
sylar::FSUtil::Rm	sylar/sylar/util.cc	/^bool FSUtil::Rm(const std::string& path) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & path)
sylar::FSUtil::Rm	sylar/sylar/util.h	/^    static bool Rm(const std::string& path);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & path)
sylar::FSUtil::Symlink	sylar/sylar/util.cc	/^bool FSUtil::Symlink(const std::string& from, const std::string& to) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & from,const std::string & to)
sylar::FSUtil::Symlink	sylar/sylar/util.h	/^    static bool Symlink(const std::string& frm, const std::string& to);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & frm,const std::string & to)
sylar::FSUtil::Unlink	sylar/sylar/util.cc	/^bool FSUtil::Unlink(const std::string& filename, bool exist) {$/;"	f	class:sylar::FSUtil	typeref:typename:bool	signature:(const std::string & filename,bool exist)
sylar::FSUtil::Unlink	sylar/sylar/util.h	/^    static bool Unlink(const std::string& filename, bool exist = false);$/;"	p	class:sylar::FSUtil	typeref:typename:bool	access:public	signature:(const std::string & filename,bool exist=false)
sylar::FairLoadBalanceItem	sylar/sylar/streams/load_balance.h	/^class FairLoadBalanceItem : public LoadBalanceItem {$/;"	c	namespace:sylar	inherits:LoadBalanceItem
sylar::FairLoadBalanceItem::clear	sylar/sylar/streams/load_balance.h	/^    void clear();$/;"	p	class:sylar::FairLoadBalanceItem	typeref:typename:void	access:public	signature:()
sylar::FairLoadBalanceItem::getWeight	sylar/sylar/streams/load_balance.cc	/^int32_t FairLoadBalanceItem::getWeight() {$/;"	f	class:sylar::FairLoadBalanceItem	typeref:typename:int32_t	signature:()
sylar::FairLoadBalanceItem::getWeight	sylar/sylar/streams/load_balance.h	/^    virtual int32_t getWeight();$/;"	p	class:sylar::FairLoadBalanceItem	typeref:typename:int32_t	access:public	signature:()
sylar::FairLoadBalanceItem::ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<FairLoadBalanceItem> ptr;$/;"	t	class:sylar::FairLoadBalanceItem	typeref:typename:std::shared_ptr<FairLoadBalanceItem>	access:public
sylar::FdCtx	sylar/sylar/fd_manager.h	/^class FdCtx : public std::enable_shared_from_this<FdCtx> {$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<FdCtx>
sylar::FdCtx::FdCtx	sylar/sylar/fd_manager.cc	/^FdCtx::FdCtx(int fd)$/;"	f	class:sylar::FdCtx	signature:(int fd)
sylar::FdCtx::FdCtx	sylar/sylar/fd_manager.h	/^    FdCtx(int fd);$/;"	p	class:sylar::FdCtx	access:public	signature:(int fd)
sylar::FdCtx::getSysNonblock	sylar/sylar/fd_manager.h	/^    bool getSysNonblock() const { return m_sysNonblock;}$/;"	f	class:sylar::FdCtx	typeref:typename:bool	access:public	signature:() const
sylar::FdCtx::getTimeout	sylar/sylar/fd_manager.cc	/^uint64_t FdCtx::getTimeout(int type) {$/;"	f	class:sylar::FdCtx	typeref:typename:uint64_t	signature:(int type)
sylar::FdCtx::getTimeout	sylar/sylar/fd_manager.h	/^    uint64_t getTimeout(int type);$/;"	p	class:sylar::FdCtx	typeref:typename:uint64_t	access:public	signature:(int type)
sylar::FdCtx::getUserNonblock	sylar/sylar/fd_manager.h	/^    bool getUserNonblock() const { return m_userNonblock;}$/;"	f	class:sylar::FdCtx	typeref:typename:bool	access:public	signature:() const
sylar::FdCtx::init	sylar/sylar/fd_manager.cc	/^bool FdCtx::init() {$/;"	f	class:sylar::FdCtx	typeref:typename:bool	signature:()
sylar::FdCtx::init	sylar/sylar/fd_manager.h	/^    bool init();$/;"	p	class:sylar::FdCtx	typeref:typename:bool	access:private	signature:()
sylar::FdCtx::isClose	sylar/sylar/fd_manager.h	/^    bool isClose() const { return m_isClosed;}$/;"	f	class:sylar::FdCtx	typeref:typename:bool	access:public	signature:() const
sylar::FdCtx::isInit	sylar/sylar/fd_manager.h	/^    bool isInit() const { return m_isInit;}$/;"	f	class:sylar::FdCtx	typeref:typename:bool	access:public	signature:() const
sylar::FdCtx::isSocket	sylar/sylar/fd_manager.h	/^    bool isSocket() const { return m_isSocket;}$/;"	f	class:sylar::FdCtx	typeref:typename:bool	access:public	signature:() const
sylar::FdCtx::m_fd	sylar/sylar/fd_manager.h	/^    int m_fd;$/;"	m	class:sylar::FdCtx	typeref:typename:int	access:private
sylar::FdCtx::m_isClosed	sylar/sylar/fd_manager.h	/^    bool m_isClosed: 1;$/;"	m	class:sylar::FdCtx	typeref:typename:bool:1	access:private
sylar::FdCtx::m_isInit	sylar/sylar/fd_manager.h	/^    bool m_isInit: 1;$/;"	m	class:sylar::FdCtx	typeref:typename:bool:1	access:private
sylar::FdCtx::m_isSocket	sylar/sylar/fd_manager.h	/^    bool m_isSocket: 1;$/;"	m	class:sylar::FdCtx	typeref:typename:bool:1	access:private
sylar::FdCtx::m_recvTimeout	sylar/sylar/fd_manager.h	/^    uint64_t m_recvTimeout;$/;"	m	class:sylar::FdCtx	typeref:typename:uint64_t	access:private
sylar::FdCtx::m_sendTimeout	sylar/sylar/fd_manager.h	/^    uint64_t m_sendTimeout;$/;"	m	class:sylar::FdCtx	typeref:typename:uint64_t	access:private
sylar::FdCtx::m_sysNonblock	sylar/sylar/fd_manager.h	/^    bool m_sysNonblock: 1;$/;"	m	class:sylar::FdCtx	typeref:typename:bool:1	access:private
sylar::FdCtx::m_userNonblock	sylar/sylar/fd_manager.h	/^    bool m_userNonblock: 1;$/;"	m	class:sylar::FdCtx	typeref:typename:bool:1	access:private
sylar::FdCtx::ptr	sylar/sylar/fd_manager.h	/^    typedef std::shared_ptr<FdCtx> ptr;$/;"	t	class:sylar::FdCtx	typeref:typename:std::shared_ptr<FdCtx>	access:public
sylar::FdCtx::setSysNonblock	sylar/sylar/fd_manager.h	/^    void setSysNonblock(bool v) { m_sysNonblock = v;}$/;"	f	class:sylar::FdCtx	typeref:typename:void	access:public	signature:(bool v)
sylar::FdCtx::setTimeout	sylar/sylar/fd_manager.cc	/^void FdCtx::setTimeout(int type, uint64_t v) {$/;"	f	class:sylar::FdCtx	typeref:typename:void	signature:(int type,uint64_t v)
sylar::FdCtx::setTimeout	sylar/sylar/fd_manager.h	/^    void setTimeout(int type, uint64_t v);$/;"	p	class:sylar::FdCtx	typeref:typename:void	access:public	signature:(int type,uint64_t v)
sylar::FdCtx::setUserNonblock	sylar/sylar/fd_manager.h	/^    void setUserNonblock(bool v) { m_userNonblock = v;}$/;"	f	class:sylar::FdCtx	typeref:typename:void	access:public	signature:(bool v)
sylar::FdCtx::~FdCtx	sylar/sylar/fd_manager.cc	/^FdCtx::~FdCtx() {$/;"	f	class:sylar::FdCtx	signature:()
sylar::FdCtx::~FdCtx	sylar/sylar/fd_manager.h	/^    ~FdCtx();$/;"	p	class:sylar::FdCtx	access:public	signature:()
sylar::FdManager	sylar/sylar/fd_manager.h	/^class FdManager {$/;"	c	namespace:sylar
sylar::FdManager::FdManager	sylar/sylar/fd_manager.cc	/^FdManager::FdManager() {$/;"	f	class:sylar::FdManager	signature:()
sylar::FdManager::FdManager	sylar/sylar/fd_manager.h	/^    FdManager();$/;"	p	class:sylar::FdManager	access:public	signature:()
sylar::FdManager::RWMutexType	sylar/sylar/fd_manager.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::FdManager	typeref:typename:RWMutex	access:public
sylar::FdManager::del	sylar/sylar/fd_manager.cc	/^void FdManager::del(int fd) {$/;"	f	class:sylar::FdManager	typeref:typename:void	signature:(int fd)
sylar::FdManager::del	sylar/sylar/fd_manager.h	/^    void del(int fd);$/;"	p	class:sylar::FdManager	typeref:typename:void	access:public	signature:(int fd)
sylar::FdManager::get	sylar/sylar/fd_manager.cc	/^FdCtx::ptr FdManager::get(int fd, bool auto_create) {$/;"	f	class:sylar::FdManager	typeref:typename:FdCtx::ptr	signature:(int fd,bool auto_create)
sylar::FdManager::get	sylar/sylar/fd_manager.h	/^    FdCtx::ptr get(int fd, bool auto_create = false);$/;"	p	class:sylar::FdManager	typeref:typename:FdCtx::ptr	access:public	signature:(int fd,bool auto_create=false)
sylar::FdManager::m_datas	sylar/sylar/fd_manager.h	/^    std::vector<FdCtx::ptr> m_datas;$/;"	m	class:sylar::FdManager	typeref:typename:std::vector<FdCtx::ptr>	access:private
sylar::FdManager::m_mutex	sylar/sylar/fd_manager.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::FdManager	typeref:typename:RWMutexType	access:private
sylar::FdMgr	sylar/sylar/fd_manager.h	/^typedef Singleton<FdManager> FdMgr;$/;"	t	namespace:sylar	typeref:typename:Singleton<FdManager>
sylar::Fiber	sylar/sylar/fiber.h	/^class Fiber : public std::enable_shared_from_this<Fiber> {$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<Fiber>
sylar::Fiber::CallerMainFunc	sylar/sylar/fiber.cc	/^void Fiber::CallerMainFunc() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
sylar::Fiber::CallerMainFunc	sylar/sylar/fiber.h	/^    static void CallerMainFunc();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
sylar::Fiber::EXCEPT	sylar/sylar/fiber.h	/^        EXCEPT$/;"	e	enum:sylar::Fiber::State	access:public
sylar::Fiber::EXEC	sylar/sylar/fiber.h	/^        EXEC,$/;"	e	enum:sylar::Fiber::State	access:public
sylar::Fiber::Fiber	sylar/sylar/fiber.cc	/^Fiber::Fiber() {$/;"	f	class:sylar::Fiber	signature:()
sylar::Fiber::Fiber	sylar/sylar/fiber.cc	/^Fiber::Fiber(std::function<void()> cb, size_t stacksize, bool use_caller)$/;"	f	class:sylar::Fiber	signature:(std::function<void ()> cb,size_t stacksize,bool use_caller)
sylar::Fiber::Fiber	sylar/sylar/fiber.h	/^    Fiber();$/;"	p	class:sylar::Fiber	access:private	signature:()
sylar::Fiber::Fiber	sylar/sylar/fiber.h	/^    Fiber(std::function<void()> cb, size_t stacksize = 0, bool use_caller = false);$/;"	p	class:sylar::Fiber	access:public	signature:(std::function<void ()> cb,size_t stacksize=0,bool use_caller=false)
sylar::Fiber::GetFiberId	sylar/sylar/fiber.cc	/^uint64_t Fiber::GetFiberId() {$/;"	f	class:sylar::Fiber	typeref:typename:uint64_t	signature:()
sylar::Fiber::GetFiberId	sylar/sylar/fiber.h	/^    static uint64_t GetFiberId();$/;"	p	class:sylar::Fiber	typeref:typename:uint64_t	access:public	signature:()
sylar::Fiber::GetThis	sylar/sylar/fiber.cc	/^Fiber::ptr Fiber::GetThis() {$/;"	f	class:sylar::Fiber	typeref:typename:Fiber::ptr	signature:()
sylar::Fiber::GetThis	sylar/sylar/fiber.h	/^    static Fiber::ptr GetThis();$/;"	p	class:sylar::Fiber	typeref:typename:Fiber::ptr	access:public	signature:()
sylar::Fiber::HOLD	sylar/sylar/fiber.h	/^        HOLD,$/;"	e	enum:sylar::Fiber::State	access:public
sylar::Fiber::INIT	sylar/sylar/fiber.h	/^        INIT,$/;"	e	enum:sylar::Fiber::State	access:public
sylar::Fiber::MainFunc	sylar/sylar/fiber.cc	/^void Fiber::MainFunc() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
sylar::Fiber::MainFunc	sylar/sylar/fiber.h	/^    static void MainFunc();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
sylar::Fiber::READY	sylar/sylar/fiber.h	/^        READY,$/;"	e	enum:sylar::Fiber::State	access:public
sylar::Fiber::SetThis	sylar/sylar/fiber.cc	/^void Fiber::SetThis(Fiber* f) {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:(Fiber * f)
sylar::Fiber::SetThis	sylar/sylar/fiber.h	/^    static void SetThis(Fiber* f);$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:(Fiber * f)
sylar::Fiber::State	sylar/sylar/fiber.h	/^    enum State {$/;"	g	class:sylar::Fiber	access:public
sylar::Fiber::TERM	sylar/sylar/fiber.h	/^        TERM,$/;"	e	enum:sylar::Fiber::State	access:public
sylar::Fiber::TotalFibers	sylar/sylar/fiber.cc	/^uint64_t Fiber::TotalFibers() {$/;"	f	class:sylar::Fiber	typeref:typename:uint64_t	signature:()
sylar::Fiber::TotalFibers	sylar/sylar/fiber.h	/^    static uint64_t TotalFibers();$/;"	p	class:sylar::Fiber	typeref:typename:uint64_t	access:public	signature:()
sylar::Fiber::YieldToHold	sylar/sylar/fiber.cc	/^void Fiber::YieldToHold() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
sylar::Fiber::YieldToHold	sylar/sylar/fiber.h	/^    static void YieldToHold();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
sylar::Fiber::YieldToReady	sylar/sylar/fiber.cc	/^void Fiber::YieldToReady() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
sylar::Fiber::YieldToReady	sylar/sylar/fiber.h	/^    static void YieldToReady();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
sylar::Fiber::back	sylar/sylar/fiber.cc	/^void Fiber::back() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
sylar::Fiber::back	sylar/sylar/fiber.h	/^    void back();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
sylar::Fiber::call	sylar/sylar/fiber.cc	/^void Fiber::call() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
sylar::Fiber::call	sylar/sylar/fiber.h	/^    void call();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
sylar::Fiber::getId	sylar/sylar/fiber.h	/^    uint64_t getId() const { return m_id;}$/;"	f	class:sylar::Fiber	typeref:typename:uint64_t	access:public	signature:() const
sylar::Fiber::getState	sylar/sylar/fiber.h	/^    State getState() const { return m_state;}$/;"	f	class:sylar::Fiber	typeref:typename:State	access:public	signature:() const
sylar::Fiber::m_cb	sylar/sylar/fiber.h	/^    std::function<void()> m_cb;$/;"	m	class:sylar::Fiber	typeref:typename:std::function<void ()>	access:private
sylar::Fiber::m_ctx	sylar/sylar/fiber.h	/^    ucontext_t m_ctx;$/;"	m	class:sylar::Fiber	typeref:typename:ucontext_t	access:private
sylar::Fiber::m_id	sylar/sylar/fiber.h	/^    uint64_t m_id = 0;$/;"	m	class:sylar::Fiber	typeref:typename:uint64_t	access:private
sylar::Fiber::m_stack	sylar/sylar/fiber.h	/^    void* m_stack = nullptr;$/;"	m	class:sylar::Fiber	typeref:typename:void *	access:private
sylar::Fiber::m_stacksize	sylar/sylar/fiber.h	/^    uint32_t m_stacksize = 0;$/;"	m	class:sylar::Fiber	typeref:typename:uint32_t	access:private
sylar::Fiber::m_state	sylar/sylar/fiber.h	/^    State m_state = INIT;$/;"	m	class:sylar::Fiber	typeref:typename:State	access:private
sylar::Fiber::ptr	sylar/sylar/fiber.h	/^    typedef std::shared_ptr<Fiber> ptr;$/;"	t	class:sylar::Fiber	typeref:typename:std::shared_ptr<Fiber>	access:public
sylar::Fiber::reset	sylar/sylar/fiber.cc	/^void Fiber::reset(std::function<void()> cb) {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:(std::function<void ()> cb)
sylar::Fiber::reset	sylar/sylar/fiber.h	/^    void reset(std::function<void()> cb);$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:(std::function<void ()> cb)
sylar::Fiber::swapIn	sylar/sylar/fiber.cc	/^void Fiber::swapIn() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
sylar::Fiber::swapIn	sylar/sylar/fiber.h	/^    void swapIn();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
sylar::Fiber::swapOut	sylar/sylar/fiber.cc	/^void Fiber::swapOut() {$/;"	f	class:sylar::Fiber	typeref:typename:void	signature:()
sylar::Fiber::swapOut	sylar/sylar/fiber.h	/^    void swapOut();$/;"	p	class:sylar::Fiber	typeref:typename:void	access:public	signature:()
sylar::Fiber::~Fiber	sylar/sylar/fiber.cc	/^Fiber::~Fiber() {$/;"	f	class:sylar::Fiber	signature:()
sylar::Fiber::~Fiber	sylar/sylar/fiber.h	/^    ~Fiber();$/;"	p	class:sylar::Fiber	access:public	signature:()
sylar::FiberIdFormatItem	sylar/sylar/log.cc	/^class FiberIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::FiberIdFormatItem::FiberIdFormatItem	sylar/sylar/log.cc	/^    FiberIdFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::FiberIdFormatItem	file:	access:public	signature:(const std::string & str="")
sylar::FiberIdFormatItem::format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::FiberIdFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::FiberSemaphore	sylar/sylar/mutex.h	/^class FiberSemaphore : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
sylar::FiberSemaphore::FiberSemaphore	sylar/sylar/mutex.cc	/^FiberSemaphore::FiberSemaphore(size_t initial_concurrency)$/;"	f	class:sylar::FiberSemaphore	signature:(size_t initial_concurrency)
sylar::FiberSemaphore::FiberSemaphore	sylar/sylar/mutex.h	/^    FiberSemaphore(size_t initial_concurrency = 0);$/;"	p	class:sylar::FiberSemaphore	access:public	signature:(size_t initial_concurrency=0)
sylar::FiberSemaphore::MutexType	sylar/sylar/mutex.h	/^    typedef Spinlock MutexType;$/;"	t	class:sylar::FiberSemaphore	typeref:typename:Spinlock	access:public
sylar::FiberSemaphore::getConcurrency	sylar/sylar/mutex.h	/^    size_t getConcurrency() const { return m_concurrency;}$/;"	f	class:sylar::FiberSemaphore	typeref:typename:size_t	access:public	signature:() const
sylar::FiberSemaphore::m_concurrency	sylar/sylar/mutex.h	/^    size_t m_concurrency;$/;"	m	class:sylar::FiberSemaphore	typeref:typename:size_t	access:private
sylar::FiberSemaphore::m_mutex	sylar/sylar/mutex.h	/^    MutexType m_mutex;$/;"	m	class:sylar::FiberSemaphore	typeref:typename:MutexType	access:private
sylar::FiberSemaphore::m_waiters	sylar/sylar/mutex.h	/^    std::list<std::pair<Scheduler*, Fiber::ptr> > m_waiters;$/;"	m	class:sylar::FiberSemaphore	typeref:typename:std::list<std::pair<Scheduler *,Fiber::ptr>>	access:private
sylar::FiberSemaphore::notify	sylar/sylar/mutex.cc	/^void FiberSemaphore::notify() {$/;"	f	class:sylar::FiberSemaphore	typeref:typename:void	signature:()
sylar::FiberSemaphore::notify	sylar/sylar/mutex.h	/^    void notify();$/;"	p	class:sylar::FiberSemaphore	typeref:typename:void	access:public	signature:()
sylar::FiberSemaphore::reset	sylar/sylar/mutex.h	/^    void reset() { m_concurrency = 0;}$/;"	f	class:sylar::FiberSemaphore	typeref:typename:void	access:public	signature:()
sylar::FiberSemaphore::tryWait	sylar/sylar/mutex.cc	/^bool FiberSemaphore::tryWait() {$/;"	f	class:sylar::FiberSemaphore	typeref:typename:bool	signature:()
sylar::FiberSemaphore::tryWait	sylar/sylar/mutex.h	/^    bool tryWait();$/;"	p	class:sylar::FiberSemaphore	typeref:typename:bool	access:public	signature:()
sylar::FiberSemaphore::wait	sylar/sylar/mutex.cc	/^void FiberSemaphore::wait() {$/;"	f	class:sylar::FiberSemaphore	typeref:typename:void	signature:()
sylar::FiberSemaphore::wait	sylar/sylar/mutex.h	/^    void wait();$/;"	p	class:sylar::FiberSemaphore	typeref:typename:void	access:public	signature:()
sylar::FiberSemaphore::~FiberSemaphore	sylar/sylar/mutex.cc	/^FiberSemaphore::~FiberSemaphore() {$/;"	f	class:sylar::FiberSemaphore	signature:()
sylar::FiberSemaphore::~FiberSemaphore	sylar/sylar/mutex.h	/^    ~FiberSemaphore();$/;"	p	class:sylar::FiberSemaphore	access:public	signature:()
sylar::FileLogAppender	sylar/sylar/log.h	/^class FileLogAppender : public LogAppender {$/;"	c	namespace:sylar	inherits:LogAppender
sylar::FileLogAppender::FileLogAppender	sylar/sylar/log.cc	/^FileLogAppender::FileLogAppender(const std::string& filename)$/;"	f	class:sylar::FileLogAppender	signature:(const std::string & filename)
sylar::FileLogAppender::FileLogAppender	sylar/sylar/log.h	/^    FileLogAppender(const std::string& filename);$/;"	p	class:sylar::FileLogAppender	access:public	signature:(const std::string & filename)
sylar::FileLogAppender::log	sylar/sylar/log.cc	/^void FileLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr e/;"	f	class:sylar::FileLogAppender	typeref:typename:void	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
sylar::FileLogAppender::log	sylar/sylar/log.h	/^    void log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event) override;$/;"	p	class:sylar::FileLogAppender	typeref:typename:void	access:public	signature:(Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::FileLogAppender::m_filename	sylar/sylar/log.h	/^    std::string m_filename;$/;"	m	class:sylar::FileLogAppender	typeref:typename:std::string	access:private
sylar::FileLogAppender::m_filestream	sylar/sylar/log.h	/^    std::ofstream m_filestream;$/;"	m	class:sylar::FileLogAppender	typeref:typename:std::ofstream	access:private
sylar::FileLogAppender::m_lastTime	sylar/sylar/log.h	/^    uint64_t m_lastTime = 0;$/;"	m	class:sylar::FileLogAppender	typeref:typename:uint64_t	access:private
sylar::FileLogAppender::ptr	sylar/sylar/log.h	/^    typedef std::shared_ptr<FileLogAppender> ptr;$/;"	t	class:sylar::FileLogAppender	typeref:typename:std::shared_ptr<FileLogAppender>	access:public
sylar::FileLogAppender::reopen	sylar/sylar/log.cc	/^bool FileLogAppender::reopen() {$/;"	f	class:sylar::FileLogAppender	typeref:typename:bool	signature:()
sylar::FileLogAppender::reopen	sylar/sylar/log.h	/^    bool reopen();$/;"	p	class:sylar::FileLogAppender	typeref:typename:bool	access:public	signature:()
sylar::FileLogAppender::toYamlString	sylar/sylar/log.cc	/^std::string FileLogAppender::toYamlString() {$/;"	f	class:sylar::FileLogAppender	typeref:typename:std::string	signature:()
sylar::FileLogAppender::toYamlString	sylar/sylar/log.h	/^    std::string toYamlString() override;$/;"	p	class:sylar::FileLogAppender	typeref:typename:std::string	access:public	signature:()
sylar::FilenameFormatItem	sylar/sylar/log.cc	/^class FilenameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::FilenameFormatItem::FilenameFormatItem	sylar/sylar/log.cc	/^    FilenameFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::FilenameFormatItem	file:	access:public	signature:(const std::string & str="")
sylar::FilenameFormatItem::format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::FilenameFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::Format	sylar/sylar/util.h	/^std::string Format(const char* fmt, ...);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const char * fmt,...)
sylar::Formatv	sylar/sylar/util.h	/^std::string Formatv(const char* fmt, va_list ap);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const char * fmt,va_list ap)
sylar::FoxRedis	sylar/sylar/db/redis.h	/^class FoxRedis : public IRedis {$/;"	c	namespace:sylar	inherits:IRedis
sylar::FoxRedis::CMD_ERR	sylar/sylar/db/redis.h	/^        CMD_ERR = 3,$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
sylar::FoxRedis::CONNECTED	sylar/sylar/db/redis.h	/^        CONNECTED = 2$/;"	e	enum:sylar::FoxRedis::STATUS	access:public
sylar::FoxRedis::CONNECTING	sylar/sylar/db/redis.h	/^        CONNECTING = 1,$/;"	e	enum:sylar::FoxRedis::STATUS	access:public
sylar::FoxRedis::CONNECT_ERR	sylar/sylar/db/redis.h	/^        CONNECT_ERR = 2,$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
sylar::FoxRedis::CmdCb	sylar/sylar/db/redis.cc	/^void FoxRedis::CmdCb(redisAsyncContext *ac, void *r, void *privdata) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(redisAsyncContext * ac,void * r,void * privdata)
sylar::FoxRedis::CmdCb	sylar/sylar/db/redis.h	/^    static void CmdCb(redisAsyncContext *c, void *r, void *privdata);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(redisAsyncContext * c,void * r,void * privdata)
sylar::FoxRedis::ConnectCb	sylar/sylar/db/redis.cc	/^void FoxRedis::ConnectCb(const redisAsyncContext* c, int status) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(const redisAsyncContext * c,int status)
sylar::FoxRedis::ConnectCb	sylar/sylar/db/redis.h	/^    static void ConnectCb(const redisAsyncContext* c, int status);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(const redisAsyncContext * c,int status)
sylar::FoxRedis::Ctx	sylar/sylar/db/redis.h	/^    struct Ctx {$/;"	s	class:sylar::FoxRedis	access:private
sylar::FoxRedis::Ctx::Ctx	sylar/sylar/db/redis.cc	/^FoxRedis::Ctx::Ctx(FoxRedis* r)$/;"	f	class:sylar::FoxRedis::Ctx	signature:(FoxRedis * r)
sylar::FoxRedis::Ctx::Ctx	sylar/sylar/db/redis.h	/^        Ctx(FoxRedis* rds);$/;"	p	struct:sylar::FoxRedis::Ctx	access:public	signature:(FoxRedis * rds)
sylar::FoxRedis::Ctx::EventCb	sylar/sylar/db/redis.cc	/^void FoxRedis::Ctx::EventCb(int fd, short event, void* d) {$/;"	f	class:sylar::FoxRedis::Ctx	typeref:typename:void	signature:(int fd,short event,void * d)
sylar::FoxRedis::Ctx::EventCb	sylar/sylar/db/redis.h	/^        static void EventCb(int fd, short event, void* d);$/;"	p	struct:sylar::FoxRedis::Ctx	typeref:typename:void	access:public	signature:(int fd,short event,void * d)
sylar::FoxRedis::Ctx::cancelEvent	sylar/sylar/db/redis.cc	/^void FoxRedis::Ctx::cancelEvent() {$/;"	f	class:sylar::FoxRedis::Ctx	typeref:typename:void	signature:()
sylar::FoxRedis::Ctx::cancelEvent	sylar/sylar/db/redis.h	/^        void cancelEvent();$/;"	p	struct:sylar::FoxRedis::Ctx	typeref:typename:void	access:public	signature:()
sylar::FoxRedis::Ctx::cmd	sylar/sylar/db/redis.h	/^        std::string cmd;$/;"	m	struct:sylar::FoxRedis::Ctx	typeref:typename:std::string	access:public
sylar::FoxRedis::Ctx::ev	sylar/sylar/db/redis.h	/^        event* ev;$/;"	m	struct:sylar::FoxRedis::Ctx	typeref:typename:event *	access:public
sylar::FoxRedis::Ctx::fctx	sylar/sylar/db/redis.h	/^        FCtx* fctx;$/;"	m	struct:sylar::FoxRedis::Ctx	typeref:typename:FCtx *	access:public
sylar::FoxRedis::Ctx::init	sylar/sylar/db/redis.cc	/^bool FoxRedis::Ctx::init() {$/;"	f	class:sylar::FoxRedis::Ctx	typeref:typename:bool	signature:()
sylar::FoxRedis::Ctx::init	sylar/sylar/db/redis.h	/^        bool init();$/;"	p	struct:sylar::FoxRedis::Ctx	typeref:typename:bool	access:public	signature:()
sylar::FoxRedis::Ctx::ptr	sylar/sylar/db/redis.h	/^        typedef std::shared_ptr<Ctx> ptr;$/;"	t	struct:sylar::FoxRedis::Ctx	typeref:typename:std::shared_ptr<Ctx>	access:public
sylar::FoxRedis::Ctx::rds	sylar/sylar/db/redis.h	/^        FoxRedis* rds;$/;"	m	struct:sylar::FoxRedis::Ctx	typeref:typename:FoxRedis *	access:public
sylar::FoxRedis::Ctx::thread	sylar/sylar/db/redis.h	/^        FoxThread* thread;$/;"	m	struct:sylar::FoxRedis::Ctx	typeref:typename:FoxThread *	access:public
sylar::FoxRedis::Ctx::timeout	sylar/sylar/db/redis.h	/^        bool timeout;$/;"	m	struct:sylar::FoxRedis::Ctx	typeref:typename:bool	access:public
sylar::FoxRedis::Ctx::~Ctx	sylar/sylar/db/redis.cc	/^FoxRedis::Ctx::~Ctx() {$/;"	f	class:sylar::FoxRedis::Ctx	signature:()
sylar::FoxRedis::Ctx::~Ctx	sylar/sylar/db/redis.h	/^        ~Ctx();$/;"	p	struct:sylar::FoxRedis::Ctx	access:public	signature:()
sylar::FoxRedis::DisconnectCb	sylar/sylar/db/redis.cc	/^void FoxRedis::DisconnectCb(const redisAsyncContext* c, int status) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(const redisAsyncContext * c,int status)
sylar::FoxRedis::DisconnectCb	sylar/sylar/db/redis.h	/^    static void DisconnectCb(const redisAsyncContext* c, int status);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(const redisAsyncContext * c,int status)
sylar::FoxRedis::FCtx	sylar/sylar/db/redis.h	/^    struct FCtx {$/;"	s	class:sylar::FoxRedis	access:private
sylar::FoxRedis::FCtx::cmd	sylar/sylar/db/redis.h	/^        std::string cmd;$/;"	m	struct:sylar::FoxRedis::FCtx	typeref:typename:std::string	access:public
sylar::FoxRedis::FCtx::fiber	sylar/sylar/db/redis.h	/^        sylar::Fiber::ptr fiber;$/;"	m	struct:sylar::FoxRedis::FCtx	typeref:typename:sylar::Fiber::ptr	access:public
sylar::FoxRedis::FCtx::rpy	sylar/sylar/db/redis.h	/^        ReplyPtr rpy;$/;"	m	struct:sylar::FoxRedis::FCtx	typeref:typename:ReplyPtr	access:public
sylar::FoxRedis::FCtx::scheduler	sylar/sylar/db/redis.h	/^        sylar::Scheduler* scheduler;$/;"	m	struct:sylar::FoxRedis::FCtx	typeref:typename:sylar::Scheduler *	access:public
sylar::FoxRedis::FoxRedis	sylar/sylar/db/redis.cc	/^FoxRedis::FoxRedis(sylar::FoxThread* thr, const std::map<std::string, std::string>& conf)$/;"	f	class:sylar::FoxRedis	signature:(sylar::FoxThread * thr,const std::map<std::string,std::string> & conf)
sylar::FoxRedis::FoxRedis	sylar/sylar/db/redis.h	/^    FoxRedis(sylar::FoxThread* thr, const std::map<std::string, std::string>& conf);$/;"	p	class:sylar::FoxRedis	access:public	signature:(sylar::FoxThread * thr,const std::map<std::string,std::string> & conf)
sylar::FoxRedis::INIT_ERR	sylar/sylar/db/redis.h	/^        INIT_ERR = 6$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
sylar::FoxRedis::OK	sylar/sylar/db/redis.h	/^        OK = 0,$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
sylar::FoxRedis::OnAuthCb	sylar/sylar/db/redis.cc	/^void FoxRedis::OnAuthCb(redisAsyncContext* c, void* rp, void* priv) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(redisAsyncContext * c,void * rp,void * priv)
sylar::FoxRedis::OnAuthCb	sylar/sylar/db/redis.h	/^    static void OnAuthCb(redisAsyncContext* c, void* rp, void* priv);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(redisAsyncContext * c,void * rp,void * priv)
sylar::FoxRedis::REPLY_ERR	sylar/sylar/db/redis.h	/^        REPLY_ERR = 5,$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
sylar::FoxRedis::REPLY_NULL	sylar/sylar/db/redis.h	/^        REPLY_NULL = 4,$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
sylar::FoxRedis::RESULT	sylar/sylar/db/redis.h	/^    enum RESULT {$/;"	g	class:sylar::FoxRedis	access:public
sylar::FoxRedis::STATUS	sylar/sylar/db/redis.h	/^    enum STATUS {$/;"	g	class:sylar::FoxRedis	access:public
sylar::FoxRedis::TIME_OUT	sylar/sylar/db/redis.h	/^        TIME_OUT = 1,$/;"	e	enum:sylar::FoxRedis::RESULT	access:public
sylar::FoxRedis::TimeCb	sylar/sylar/db/redis.cc	/^void FoxRedis::TimeCb(int fd, short event, void* d) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(int fd,short event,void * d)
sylar::FoxRedis::TimeCb	sylar/sylar/db/redis.h	/^    static void TimeCb(int fd, short event, void* d);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(int fd,short event,void * d)
sylar::FoxRedis::UNCONNECTED	sylar/sylar/db/redis.h	/^        UNCONNECTED = 0,$/;"	e	enum:sylar::FoxRedis::STATUS	access:public
sylar::FoxRedis::cmd	sylar/sylar/db/redis.cc	/^ReplyPtr FoxRedis::cmd(const char* fmt, ...) {$/;"	f	class:sylar::FoxRedis	typeref:typename:ReplyPtr	signature:(const char * fmt,...)
sylar::FoxRedis::cmd	sylar/sylar/db/redis.cc	/^ReplyPtr FoxRedis::cmd(const char* fmt, va_list ap) {$/;"	f	class:sylar::FoxRedis	typeref:typename:ReplyPtr	signature:(const char * fmt,va_list ap)
sylar::FoxRedis::cmd	sylar/sylar/db/redis.cc	/^ReplyPtr FoxRedis::cmd(const std::vector<std::string>& argv) {$/;"	f	class:sylar::FoxRedis	typeref:typename:ReplyPtr	signature:(const std::vector<std::string> & argv)
sylar::FoxRedis::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, ...);$/;"	p	class:sylar::FoxRedis	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,...)
sylar::FoxRedis::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, va_list ap);$/;"	p	class:sylar::FoxRedis	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,va_list ap)
sylar::FoxRedis::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const std::vector<std::string>& argv);$/;"	p	class:sylar::FoxRedis	typeref:typename:ReplyPtr	access:public	signature:(const std::vector<std::string> & argv)
sylar::FoxRedis::delayDelete	sylar/sylar/db/redis.cc	/^void FoxRedis::delayDelete(redisAsyncContext* c) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(redisAsyncContext * c)
sylar::FoxRedis::delayDelete	sylar/sylar/db/redis.h	/^    void delayDelete(redisAsyncContext* c);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(redisAsyncContext * c)
sylar::FoxRedis::getCtxCount	sylar/sylar/db/redis.h	/^    int getCtxCount() const { return m_ctxCount;}$/;"	f	class:sylar::FoxRedis	typeref:typename:int	access:public	signature:() const
sylar::FoxRedis::init	sylar/sylar/db/redis.cc	/^bool FoxRedis::init() {$/;"	f	class:sylar::FoxRedis	typeref:typename:bool	signature:()
sylar::FoxRedis::init	sylar/sylar/db/redis.h	/^    bool init();$/;"	p	class:sylar::FoxRedis	typeref:typename:bool	access:public	signature:()
sylar::FoxRedis::m_cmdTimeout	sylar/sylar/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:sylar::FoxRedis	typeref:struct:timeval	access:private
sylar::FoxRedis::m_context	sylar/sylar/db/redis.h	/^    std::shared_ptr<redisAsyncContext> m_context;$/;"	m	class:sylar::FoxRedis	typeref:typename:std::shared_ptr<redisAsyncContext>	access:private
sylar::FoxRedis::m_ctxCount	sylar/sylar/db/redis.h	/^    int m_ctxCount;$/;"	m	class:sylar::FoxRedis	typeref:typename:int	access:private
sylar::FoxRedis::m_err	sylar/sylar/db/redis.h	/^    std::string m_err;$/;"	m	class:sylar::FoxRedis	typeref:typename:std::string	access:private
sylar::FoxRedis::m_event	sylar/sylar/db/redis.h	/^    struct event* m_event;$/;"	m	class:sylar::FoxRedis	typeref:struct:event *	access:private
sylar::FoxRedis::m_host	sylar/sylar/db/redis.h	/^    std::string m_host;$/;"	m	class:sylar::FoxRedis	typeref:typename:std::string	access:private
sylar::FoxRedis::m_port	sylar/sylar/db/redis.h	/^    uint16_t m_port;$/;"	m	class:sylar::FoxRedis	typeref:typename:uint16_t	access:private
sylar::FoxRedis::m_status	sylar/sylar/db/redis.h	/^    STATUS m_status;$/;"	m	class:sylar::FoxRedis	typeref:typename:STATUS	access:private
sylar::FoxRedis::m_thread	sylar/sylar/db/redis.h	/^    sylar::FoxThread* m_thread;$/;"	m	class:sylar::FoxRedis	typeref:typename:sylar::FoxThread *	access:private
sylar::FoxRedis::pcmd	sylar/sylar/db/redis.cc	/^void FoxRedis::pcmd(FCtx* fctx) {$/;"	f	class:sylar::FoxRedis	typeref:typename:void	signature:(FCtx * fctx)
sylar::FoxRedis::pcmd	sylar/sylar/db/redis.h	/^    virtual void pcmd(FCtx* ctx);$/;"	p	class:sylar::FoxRedis	typeref:typename:void	access:private	signature:(FCtx * ctx)
sylar::FoxRedis::pinit	sylar/sylar/db/redis.cc	/^bool FoxRedis::pinit() {$/;"	f	class:sylar::FoxRedis	typeref:typename:bool	signature:()
sylar::FoxRedis::pinit	sylar/sylar/db/redis.h	/^    bool pinit();$/;"	p	class:sylar::FoxRedis	typeref:typename:bool	access:private	signature:()
sylar::FoxRedis::ptr	sylar/sylar/db/redis.h	/^    typedef std::shared_ptr<FoxRedis> ptr;$/;"	t	class:sylar::FoxRedis	typeref:typename:std::shared_ptr<FoxRedis>	access:public
sylar::FoxRedis::~FoxRedis	sylar/sylar/db/redis.cc	/^FoxRedis::~FoxRedis() {$/;"	f	class:sylar::FoxRedis	signature:()
sylar::FoxRedis::~FoxRedis	sylar/sylar/db/redis.h	/^    ~FoxRedis();$/;"	p	class:sylar::FoxRedis	access:public	signature:()
sylar::FoxRedisCluster	sylar/sylar/db/redis.h	/^class FoxRedisCluster : public IRedis {$/;"	c	namespace:sylar	inherits:IRedis
sylar::FoxRedisCluster::CMD_ERR	sylar/sylar/db/redis.h	/^        CMD_ERR = 3,$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
sylar::FoxRedisCluster::CONNECTED	sylar/sylar/db/redis.h	/^        CONNECTED = 2$/;"	e	enum:sylar::FoxRedisCluster::STATUS	access:public
sylar::FoxRedisCluster::CONNECTING	sylar/sylar/db/redis.h	/^        CONNECTING = 1,$/;"	e	enum:sylar::FoxRedisCluster::STATUS	access:public
sylar::FoxRedisCluster::CONNECT_ERR	sylar/sylar/db/redis.h	/^        CONNECT_ERR = 2,$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
sylar::FoxRedisCluster::CmdCb	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::CmdCb(redisClusterAsyncContext *ac, void *r, void *privdata) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(redisClusterAsyncContext * ac,void * r,void * privdata)
sylar::FoxRedisCluster::CmdCb	sylar/sylar/db/redis.h	/^    static void CmdCb(redisClusterAsyncContext*c, void *r, void *privdata);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(redisClusterAsyncContext * c,void * r,void * privdata)
sylar::FoxRedisCluster::ConnectCb	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::ConnectCb(const redisAsyncContext* c, int status) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(const redisAsyncContext * c,int status)
sylar::FoxRedisCluster::ConnectCb	sylar/sylar/db/redis.h	/^    static void ConnectCb(const redisAsyncContext* c, int status);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(const redisAsyncContext * c,int status)
sylar::FoxRedisCluster::Ctx	sylar/sylar/db/redis.h	/^    struct Ctx {$/;"	s	class:sylar::FoxRedisCluster	access:private
sylar::FoxRedisCluster::Ctx::Ctx	sylar/sylar/db/redis.cc	/^FoxRedisCluster::Ctx::Ctx(FoxRedisCluster* r)$/;"	f	class:sylar::FoxRedisCluster::Ctx	signature:(FoxRedisCluster * r)
sylar::FoxRedisCluster::Ctx::Ctx	sylar/sylar/db/redis.h	/^        Ctx(FoxRedisCluster* rds);$/;"	p	struct:sylar::FoxRedisCluster::Ctx	access:public	signature:(FoxRedisCluster * rds)
sylar::FoxRedisCluster::Ctx::EventCb	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::Ctx::EventCb(int fd, short event, void* d) {$/;"	f	class:sylar::FoxRedisCluster::Ctx	typeref:typename:void	signature:(int fd,short event,void * d)
sylar::FoxRedisCluster::Ctx::EventCb	sylar/sylar/db/redis.h	/^        static void EventCb(int fd, short event, void* d);$/;"	p	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:void	access:public	signature:(int fd,short event,void * d)
sylar::FoxRedisCluster::Ctx::cancelEvent	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::Ctx::cancelEvent() {$/;"	f	class:sylar::FoxRedisCluster::Ctx	typeref:typename:void	signature:()
sylar::FoxRedisCluster::Ctx::cancelEvent	sylar/sylar/db/redis.h	/^        void cancelEvent();$/;"	p	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:void	access:public	signature:()
sylar::FoxRedisCluster::Ctx::cmd	sylar/sylar/db/redis.h	/^        std::string cmd;$/;"	m	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:std::string	access:public
sylar::FoxRedisCluster::Ctx::ev	sylar/sylar/db/redis.h	/^        event* ev;$/;"	m	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:event *	access:public
sylar::FoxRedisCluster::Ctx::fctx	sylar/sylar/db/redis.h	/^        FCtx* fctx;$/;"	m	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:FCtx *	access:public
sylar::FoxRedisCluster::Ctx::init	sylar/sylar/db/redis.cc	/^bool FoxRedisCluster::Ctx::init() {$/;"	f	class:sylar::FoxRedisCluster::Ctx	typeref:typename:bool	signature:()
sylar::FoxRedisCluster::Ctx::init	sylar/sylar/db/redis.h	/^        bool init();$/;"	p	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:bool	access:public	signature:()
sylar::FoxRedisCluster::Ctx::ptr	sylar/sylar/db/redis.h	/^        typedef std::shared_ptr<Ctx> ptr;$/;"	t	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:std::shared_ptr<Ctx>	access:public
sylar::FoxRedisCluster::Ctx::rds	sylar/sylar/db/redis.h	/^        FoxRedisCluster* rds;$/;"	m	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:FoxRedisCluster *	access:public
sylar::FoxRedisCluster::Ctx::thread	sylar/sylar/db/redis.h	/^        FoxThread* thread;$/;"	m	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:FoxThread *	access:public
sylar::FoxRedisCluster::Ctx::timeout	sylar/sylar/db/redis.h	/^        bool timeout;$/;"	m	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:bool	access:public
sylar::FoxRedisCluster::Ctx::~Ctx	sylar/sylar/db/redis.cc	/^FoxRedisCluster::Ctx::~Ctx() {$/;"	f	class:sylar::FoxRedisCluster::Ctx	signature:()
sylar::FoxRedisCluster::Ctx::~Ctx	sylar/sylar/db/redis.h	/^        ~Ctx();$/;"	p	struct:sylar::FoxRedisCluster::Ctx	access:public	signature:()
sylar::FoxRedisCluster::DisconnectCb	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::DisconnectCb(const redisAsyncContext* c, int status) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(const redisAsyncContext * c,int status)
sylar::FoxRedisCluster::DisconnectCb	sylar/sylar/db/redis.h	/^    static void DisconnectCb(const redisAsyncContext* c, int status);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(const redisAsyncContext * c,int status)
sylar::FoxRedisCluster::FCtx	sylar/sylar/db/redis.h	/^    struct FCtx {$/;"	s	class:sylar::FoxRedisCluster	access:private
sylar::FoxRedisCluster::FCtx::cmd	sylar/sylar/db/redis.h	/^        std::string cmd;$/;"	m	struct:sylar::FoxRedisCluster::FCtx	typeref:typename:std::string	access:public
sylar::FoxRedisCluster::FCtx::fiber	sylar/sylar/db/redis.h	/^        sylar::Fiber::ptr fiber;$/;"	m	struct:sylar::FoxRedisCluster::FCtx	typeref:typename:sylar::Fiber::ptr	access:public
sylar::FoxRedisCluster::FCtx::rpy	sylar/sylar/db/redis.h	/^        ReplyPtr rpy;$/;"	m	struct:sylar::FoxRedisCluster::FCtx	typeref:typename:ReplyPtr	access:public
sylar::FoxRedisCluster::FCtx::scheduler	sylar/sylar/db/redis.h	/^        sylar::Scheduler* scheduler;$/;"	m	struct:sylar::FoxRedisCluster::FCtx	typeref:typename:sylar::Scheduler *	access:public
sylar::FoxRedisCluster::FoxRedisCluster	sylar/sylar/db/redis.cc	/^FoxRedisCluster::FoxRedisCluster(sylar::FoxThread* thr, const std::map<std::string, std::string>/;"	f	class:sylar::FoxRedisCluster	signature:(sylar::FoxThread * thr,const std::map<std::string,std::string> & conf)
sylar::FoxRedisCluster::FoxRedisCluster	sylar/sylar/db/redis.h	/^    FoxRedisCluster(sylar::FoxThread* thr, const std::map<std::string, std::string>& conf);$/;"	p	class:sylar::FoxRedisCluster	access:public	signature:(sylar::FoxThread * thr,const std::map<std::string,std::string> & conf)
sylar::FoxRedisCluster::INIT_ERR	sylar/sylar/db/redis.h	/^        INIT_ERR = 6$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
sylar::FoxRedisCluster::OK	sylar/sylar/db/redis.h	/^        OK = 0,$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
sylar::FoxRedisCluster::OnAuthCb	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::OnAuthCb(redisClusterAsyncContext* c, void* rp, void* priv) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(redisClusterAsyncContext * c,void * rp,void * priv)
sylar::FoxRedisCluster::OnAuthCb	sylar/sylar/db/redis.h	/^    static void OnAuthCb(redisClusterAsyncContext* c, void* rp, void* priv);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(redisClusterAsyncContext * c,void * rp,void * priv)
sylar::FoxRedisCluster::REPLY_ERR	sylar/sylar/db/redis.h	/^        REPLY_ERR = 5,$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
sylar::FoxRedisCluster::REPLY_NULL	sylar/sylar/db/redis.h	/^        REPLY_NULL = 4,$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
sylar::FoxRedisCluster::RESULT	sylar/sylar/db/redis.h	/^    enum RESULT {$/;"	g	class:sylar::FoxRedisCluster	access:public
sylar::FoxRedisCluster::STATUS	sylar/sylar/db/redis.h	/^    enum STATUS {$/;"	g	class:sylar::FoxRedisCluster	access:public
sylar::FoxRedisCluster::TIME_OUT	sylar/sylar/db/redis.h	/^        TIME_OUT = 1,$/;"	e	enum:sylar::FoxRedisCluster::RESULT	access:public
sylar::FoxRedisCluster::TimeCb	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::TimeCb(int fd, short event, void* d) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(int fd,short event,void * d)
sylar::FoxRedisCluster::TimeCb	sylar/sylar/db/redis.h	/^    static void TimeCb(int fd, short event, void* d);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(int fd,short event,void * d)
sylar::FoxRedisCluster::UNCONNECTED	sylar/sylar/db/redis.h	/^        UNCONNECTED = 0,$/;"	e	enum:sylar::FoxRedisCluster::STATUS	access:public
sylar::FoxRedisCluster::cmd	sylar/sylar/db/redis.cc	/^ReplyPtr FoxRedisCluster::cmd(const char* fmt, ...) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:ReplyPtr	signature:(const char * fmt,...)
sylar::FoxRedisCluster::cmd	sylar/sylar/db/redis.cc	/^ReplyPtr FoxRedisCluster::cmd(const char* fmt, va_list ap) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:ReplyPtr	signature:(const char * fmt,va_list ap)
sylar::FoxRedisCluster::cmd	sylar/sylar/db/redis.cc	/^ReplyPtr FoxRedisCluster::cmd(const std::vector<std::string>& argv) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:ReplyPtr	signature:(const std::vector<std::string> & argv)
sylar::FoxRedisCluster::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, ...);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,...)
sylar::FoxRedisCluster::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, va_list ap);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,va_list ap)
sylar::FoxRedisCluster::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const std::vector<std::string>& argv);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:ReplyPtr	access:public	signature:(const std::vector<std::string> & argv)
sylar::FoxRedisCluster::delayDelete	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::delayDelete(redisAsyncContext* c) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(redisAsyncContext * c)
sylar::FoxRedisCluster::delayDelete	sylar/sylar/db/redis.h	/^    void delayDelete(redisAsyncContext* c);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(redisAsyncContext * c)
sylar::FoxRedisCluster::getCtxCount	sylar/sylar/db/redis.h	/^    int getCtxCount() const { return m_ctxCount;}$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:int	access:public	signature:() const
sylar::FoxRedisCluster::init	sylar/sylar/db/redis.cc	/^bool FoxRedisCluster::init() {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:bool	signature:()
sylar::FoxRedisCluster::init	sylar/sylar/db/redis.h	/^    bool init();$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:bool	access:public	signature:()
sylar::FoxRedisCluster::m_cmdTimeout	sylar/sylar/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:sylar::FoxRedisCluster	typeref:struct:timeval	access:private
sylar::FoxRedisCluster::m_context	sylar/sylar/db/redis.h	/^    std::shared_ptr<redisClusterAsyncContext> m_context;$/;"	m	class:sylar::FoxRedisCluster	typeref:typename:std::shared_ptr<redisClusterAsyncContext>	access:private
sylar::FoxRedisCluster::m_ctxCount	sylar/sylar/db/redis.h	/^    int m_ctxCount;$/;"	m	class:sylar::FoxRedisCluster	typeref:typename:int	access:private
sylar::FoxRedisCluster::m_err	sylar/sylar/db/redis.h	/^    std::string m_err;$/;"	m	class:sylar::FoxRedisCluster	typeref:typename:std::string	access:private
sylar::FoxRedisCluster::m_event	sylar/sylar/db/redis.h	/^    struct event* m_event;$/;"	m	class:sylar::FoxRedisCluster	typeref:struct:event *	access:private
sylar::FoxRedisCluster::m_host	sylar/sylar/db/redis.h	/^    std::string m_host;$/;"	m	class:sylar::FoxRedisCluster	typeref:typename:std::string	access:private
sylar::FoxRedisCluster::m_status	sylar/sylar/db/redis.h	/^    STATUS m_status;$/;"	m	class:sylar::FoxRedisCluster	typeref:typename:STATUS	access:private
sylar::FoxRedisCluster::m_thread	sylar/sylar/db/redis.h	/^    sylar::FoxThread* m_thread;$/;"	m	class:sylar::FoxRedisCluster	typeref:typename:sylar::FoxThread *	access:private
sylar::FoxRedisCluster::pcmd	sylar/sylar/db/redis.cc	/^void FoxRedisCluster::pcmd(FCtx* fctx) {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:void	signature:(FCtx * fctx)
sylar::FoxRedisCluster::pcmd	sylar/sylar/db/redis.h	/^    virtual void pcmd(FCtx* ctx);$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:void	access:private	signature:(FCtx * ctx)
sylar::FoxRedisCluster::pinit	sylar/sylar/db/redis.cc	/^bool FoxRedisCluster::pinit() {$/;"	f	class:sylar::FoxRedisCluster	typeref:typename:bool	signature:()
sylar::FoxRedisCluster::pinit	sylar/sylar/db/redis.h	/^    bool pinit();$/;"	p	class:sylar::FoxRedisCluster	typeref:typename:bool	access:private	signature:()
sylar::FoxRedisCluster::ptr	sylar/sylar/db/redis.h	/^    typedef std::shared_ptr<FoxRedisCluster> ptr;$/;"	t	class:sylar::FoxRedisCluster	typeref:typename:std::shared_ptr<FoxRedisCluster>	access:public
sylar::FoxRedisCluster::~FoxRedisCluster	sylar/sylar/db/redis.cc	/^FoxRedisCluster::~FoxRedisCluster() {$/;"	f	class:sylar::FoxRedisCluster	signature:()
sylar::FoxRedisCluster::~FoxRedisCluster	sylar/sylar/db/redis.h	/^    ~FoxRedisCluster();$/;"	p	class:sylar::FoxRedisCluster	access:public	signature:()
sylar::FoxThread	sylar/sylar/db/fox_thread.h	/^class FoxThread : public IFoxThread {$/;"	c	namespace:sylar	inherits:IFoxThread
sylar::FoxThread::FoxThread	sylar/sylar/db/fox_thread.cc	/^FoxThread::FoxThread(const std::string& name, struct event_base* base)$/;"	f	class:sylar::FoxThread	signature:(const std::string & name,struct event_base * base)
sylar::FoxThread::FoxThread	sylar/sylar/db/fox_thread.h	/^    FoxThread(const std::string& name = "", struct event_base* base = NULL);$/;"	p	class:sylar::FoxThread	access:public	signature:(const std::string & name="",struct event_base * base=NULL)
sylar::FoxThread::GetAllFoxThreadName	sylar/sylar/db/fox_thread.cc	/^void FoxThread::GetAllFoxThreadName(std::map<uint64_t, std::string>& names) {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:(std::map<uint64_t,std::string> & names)
sylar::FoxThread::GetAllFoxThreadName	sylar/sylar/db/fox_thread.h	/^    static void GetAllFoxThreadName(std::map<uint64_t, std::string>& names);$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:(std::map<uint64_t,std::string> & names)
sylar::FoxThread::GetFoxThreadName	sylar/sylar/db/fox_thread.cc	/^const std::string& FoxThread::GetFoxThreadName() {$/;"	f	class:sylar::FoxThread	typeref:typename:const std::string &	signature:()
sylar::FoxThread::GetFoxThreadName	sylar/sylar/db/fox_thread.h	/^    static const std::string& GetFoxThreadName();$/;"	p	class:sylar::FoxThread	typeref:typename:const std::string &	access:public	signature:()
sylar::FoxThread::GetThis	sylar/sylar/db/fox_thread.cc	/^FoxThread* FoxThread::GetThis() {$/;"	f	class:sylar::FoxThread	typeref:typename:FoxThread *	signature:()
sylar::FoxThread::GetThis	sylar/sylar/db/fox_thread.h	/^    static FoxThread* GetThis();$/;"	p	class:sylar::FoxThread	typeref:typename:FoxThread *	access:public	signature:()
sylar::FoxThread::batchDispatch	sylar/sylar/db/fox_thread.cc	/^bool FoxThread::batchDispatch(const std::vector<callback>& cbs) {$/;"	f	class:sylar::FoxThread	typeref:typename:bool	signature:(const std::vector<callback> & cbs)
sylar::FoxThread::batchDispatch	sylar/sylar/db/fox_thread.h	/^    virtual bool batchDispatch(const std::vector<callback>& cbs);$/;"	p	class:sylar::FoxThread	typeref:typename:bool	access:public	signature:(const std::vector<callback> & cbs)
sylar::FoxThread::broadcast	sylar/sylar/db/fox_thread.cc	/^void FoxThread::broadcast(callback cb) {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:(callback cb)
sylar::FoxThread::broadcast	sylar/sylar/db/fox_thread.h	/^    virtual void broadcast(callback cb);$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:(callback cb)
sylar::FoxThread::callback	sylar/sylar/db/fox_thread.h	/^    typedef IFoxThread::callback callback;$/;"	t	class:sylar::FoxThread	typeref:typename:IFoxThread::callback	access:public
sylar::FoxThread::dispatch	sylar/sylar/db/fox_thread.cc	/^bool FoxThread::dispatch(callback cb) {$/;"	f	class:sylar::FoxThread	typeref:typename:bool	signature:(callback cb)
sylar::FoxThread::dispatch	sylar/sylar/db/fox_thread.cc	/^bool FoxThread::dispatch(uint32_t id, callback cb) {$/;"	f	class:sylar::FoxThread	typeref:typename:bool	signature:(uint32_t id,callback cb)
sylar::FoxThread::dispatch	sylar/sylar/db/fox_thread.h	/^    virtual bool dispatch(callback cb);$/;"	p	class:sylar::FoxThread	typeref:typename:bool	access:public	signature:(callback cb)
sylar::FoxThread::dispatch	sylar/sylar/db/fox_thread.h	/^    virtual bool dispatch(uint32_t id, callback cb);$/;"	p	class:sylar::FoxThread	typeref:typename:bool	access:public	signature:(uint32_t id,callback cb)
sylar::FoxThread::dump	sylar/sylar/db/fox_thread.cc	/^void FoxThread::dump(std::ostream& os) {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:(std::ostream & os)
sylar::FoxThread::dump	sylar/sylar/db/fox_thread.h	/^    void dump(std::ostream& os);$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:(std::ostream & os)
sylar::FoxThread::getBase	sylar/sylar/db/fox_thread.h	/^    struct event_base* getBase() { return m_base;}$/;"	f	class:sylar::FoxThread	typeref:struct:event_base *	access:public	signature:()
sylar::FoxThread::getData	sylar/sylar/db/fox_thread.cc	/^void* FoxThread::getData(const std::string& name) {$/;"	f	class:sylar::FoxThread	typeref:typename:void *	signature:(const std::string & name)
sylar::FoxThread::getData	sylar/sylar/db/fox_thread.h	/^    T* getData(const std::string& name) {$/;"	f	class:sylar::FoxThread	typeref:typename:T *	access:public	signature:(const std::string & name)
sylar::FoxThread::getData	sylar/sylar/db/fox_thread.h	/^    void* getData(const std::string& name);$/;"	p	class:sylar::FoxThread	typeref:typename:void *	access:public	signature:(const std::string & name)
sylar::FoxThread::getId	sylar/sylar/db/fox_thread.cc	/^std::thread::id FoxThread::getId() const {$/;"	f	class:sylar::FoxThread	typeref:typename:std::thread::id	signature:() const
sylar::FoxThread::getId	sylar/sylar/db/fox_thread.h	/^    std::thread::id getId() const;$/;"	p	class:sylar::FoxThread	typeref:typename:std::thread::id	access:public	signature:() const
sylar::FoxThread::getTotal	sylar/sylar/db/fox_thread.h	/^    virtual uint64_t getTotal() { return m_total;}$/;"	f	class:sylar::FoxThread	typeref:typename:uint64_t	access:public	signature:()
sylar::FoxThread::init_cb	sylar/sylar/db/fox_thread.h	/^    typedef std::function<void (FoxThread*)> init_cb;$/;"	t	class:sylar::FoxThread	access:public
sylar::FoxThread::isStart	sylar/sylar/db/fox_thread.h	/^    bool isStart() const { return m_start;}$/;"	f	class:sylar::FoxThread	typeref:typename:bool	access:public	signature:() const
sylar::FoxThread::join	sylar/sylar/db/fox_thread.cc	/^void FoxThread::join() {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:()
sylar::FoxThread::join	sylar/sylar/db/fox_thread.h	/^    void join();$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:()
sylar::FoxThread::m_base	sylar/sylar/db/fox_thread.h	/^    struct event_base* m_base;$/;"	m	class:sylar::FoxThread	typeref:struct:event_base *	access:private
sylar::FoxThread::m_callbacks	sylar/sylar/db/fox_thread.h	/^    std::list<callback> m_callbacks;$/;"	m	class:sylar::FoxThread	typeref:typename:std::list<callback>	access:private
sylar::FoxThread::m_datas	sylar/sylar/db/fox_thread.h	/^    std::map<std::string, void*> m_datas;$/;"	m	class:sylar::FoxThread	typeref:typename:std::map<std::string,void * >	access:private
sylar::FoxThread::m_event	sylar/sylar/db/fox_thread.h	/^    struct event* m_event;$/;"	m	class:sylar::FoxThread	typeref:struct:event *	access:private
sylar::FoxThread::m_initCb	sylar/sylar/db/fox_thread.h	/^    init_cb m_initCb;$/;"	m	class:sylar::FoxThread	typeref:typename:init_cb	access:private
sylar::FoxThread::m_mutex	sylar/sylar/db/fox_thread.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::FoxThread	typeref:typename:sylar::RWMutex	access:private
sylar::FoxThread::m_name	sylar/sylar/db/fox_thread.h	/^    std::string m_name;$/;"	m	class:sylar::FoxThread	typeref:typename:std::string	access:private
sylar::FoxThread::m_read	sylar/sylar/db/fox_thread.h	/^    evutil_socket_t m_read;$/;"	m	class:sylar::FoxThread	typeref:typename:evutil_socket_t	access:private
sylar::FoxThread::m_start	sylar/sylar/db/fox_thread.h	/^    bool m_start;$/;"	m	class:sylar::FoxThread	typeref:typename:bool	access:private
sylar::FoxThread::m_thread	sylar/sylar/db/fox_thread.h	/^    std::thread* m_thread;$/;"	m	class:sylar::FoxThread	typeref:typename:std::thread *	access:private
sylar::FoxThread::m_total	sylar/sylar/db/fox_thread.h	/^    uint64_t m_total;$/;"	m	class:sylar::FoxThread	typeref:typename:uint64_t	access:private
sylar::FoxThread::m_working	sylar/sylar/db/fox_thread.h	/^    bool m_working;$/;"	m	class:sylar::FoxThread	typeref:typename:bool	access:private
sylar::FoxThread::m_write	sylar/sylar/db/fox_thread.h	/^    evutil_socket_t m_write;$/;"	m	class:sylar::FoxThread	typeref:typename:evutil_socket_t	access:private
sylar::FoxThread::ptr	sylar/sylar/db/fox_thread.h	/^    typedef std::shared_ptr<FoxThread> ptr;$/;"	t	class:sylar::FoxThread	typeref:typename:std::shared_ptr<FoxThread>	access:public
sylar::FoxThread::read_cb	sylar/sylar/db/fox_thread.cc	/^void FoxThread::read_cb(evutil_socket_t sock, short which, void* args) {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:(evutil_socket_t sock,short which,void * args)
sylar::FoxThread::read_cb	sylar/sylar/db/fox_thread.h	/^    static void read_cb(evutil_socket_t sock, short which, void* args);$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:private	signature:(evutil_socket_t sock,short which,void * args)
sylar::FoxThread::setData	sylar/sylar/db/fox_thread.cc	/^void  FoxThread::setData(const std::string& name, void* v) {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:(const std::string & name,void * v)
sylar::FoxThread::setData	sylar/sylar/db/fox_thread.h	/^    void setData(const std::string& name, void* v);$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:(const std::string & name,void * v)
sylar::FoxThread::setInitCb	sylar/sylar/db/fox_thread.h	/^    void setInitCb(init_cb v) { m_initCb = v;}$/;"	f	class:sylar::FoxThread	typeref:typename:void	access:public	signature:(init_cb v)
sylar::FoxThread::setThis	sylar/sylar/db/fox_thread.cc	/^void FoxThread::setThis() {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:()
sylar::FoxThread::setThis	sylar/sylar/db/fox_thread.h	/^    void setThis();$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:()
sylar::FoxThread::start	sylar/sylar/db/fox_thread.cc	/^void FoxThread::start() {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:()
sylar::FoxThread::start	sylar/sylar/db/fox_thread.h	/^    void start();$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:()
sylar::FoxThread::stop	sylar/sylar/db/fox_thread.cc	/^void FoxThread::stop() {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:()
sylar::FoxThread::stop	sylar/sylar/db/fox_thread.h	/^    void stop();$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:()
sylar::FoxThread::thread_cb	sylar/sylar/db/fox_thread.cc	/^void FoxThread::thread_cb() {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:()
sylar::FoxThread::thread_cb	sylar/sylar/db/fox_thread.h	/^    void thread_cb();$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:private	signature:()
sylar::FoxThread::unsetThis	sylar/sylar/db/fox_thread.cc	/^void FoxThread::unsetThis() {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:()
sylar::FoxThread::unsetThis	sylar/sylar/db/fox_thread.h	/^    void unsetThis();$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:()
sylar::FoxThread::~FoxThread	sylar/sylar/db/fox_thread.cc	/^FoxThread::~FoxThread() {$/;"	f	class:sylar::FoxThread	signature:()
sylar::FoxThread::~FoxThread	sylar/sylar/db/fox_thread.h	/^    ~FoxThread();$/;"	p	class:sylar::FoxThread	access:public	signature:()
sylar::FoxThreadManager	sylar/sylar/db/fox_thread.h	/^class FoxThreadManager {$/;"	c	namespace:sylar
sylar::FoxThreadManager::add	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::add(const std::string& name, IFoxThread::ptr thr) {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:(const std::string & name,IFoxThread::ptr thr)
sylar::FoxThreadManager::add	sylar/sylar/db/fox_thread.h	/^    void add(const std::string& name, IFoxThread::ptr thr);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:(const std::string & name,IFoxThread::ptr thr)
sylar::FoxThreadManager::batchDispatch	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::batchDispatch(const std::string& name, const std::vector<callback>& cbs) /;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:(const std::string & name,const std::vector<callback> & cbs)
sylar::FoxThreadManager::batchDispatch	sylar/sylar/db/fox_thread.h	/^    void batchDispatch(const std::string& name, const std::vector<callback>& cbs);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:(const std::string & name,const std::vector<callback> & cbs)
sylar::FoxThreadManager::broadcast	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::broadcast(const std::string& name, callback cb) {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:(const std::string & name,callback cb)
sylar::FoxThreadManager::broadcast	sylar/sylar/db/fox_thread.h	/^    void broadcast(const std::string& name, callback cb);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:(const std::string & name,callback cb)
sylar::FoxThreadManager::callback	sylar/sylar/db/fox_thread.h	/^    typedef IFoxThread::callback callback;$/;"	t	class:sylar::FoxThreadManager	typeref:typename:IFoxThread::callback	access:public
sylar::FoxThreadManager::dispatch	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::dispatch(const std::string& name, callback cb) {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:(const std::string & name,callback cb)
sylar::FoxThreadManager::dispatch	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::dispatch(const std::string& name, uint32_t id, callback cb) {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:(const std::string & name,uint32_t id,callback cb)
sylar::FoxThreadManager::dispatch	sylar/sylar/db/fox_thread.h	/^    void dispatch(const std::string& name, callback cb);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:(const std::string & name,callback cb)
sylar::FoxThreadManager::dispatch	sylar/sylar/db/fox_thread.h	/^    void dispatch(const std::string& name, uint32_t id, callback cb);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:(const std::string & name,uint32_t id,callback cb)
sylar::FoxThreadManager::dumpFoxThreadStatus	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::dumpFoxThreadStatus(std::ostream& os) {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:(std::ostream & os)
sylar::FoxThreadManager::dumpFoxThreadStatus	sylar/sylar/db/fox_thread.h	/^    void dumpFoxThreadStatus(std::ostream& os);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:(std::ostream & os)
sylar::FoxThreadManager::get	sylar/sylar/db/fox_thread.cc	/^IFoxThread::ptr FoxThreadManager::get(const std::string& name) {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:IFoxThread::ptr	signature:(const std::string & name)
sylar::FoxThreadManager::get	sylar/sylar/db/fox_thread.h	/^    IFoxThread::ptr get(const std::string& name);$/;"	p	class:sylar::FoxThreadManager	typeref:typename:IFoxThread::ptr	access:public	signature:(const std::string & name)
sylar::FoxThreadManager::init	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::init() {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:()
sylar::FoxThreadManager::init	sylar/sylar/db/fox_thread.h	/^    void init();$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:()
sylar::FoxThreadManager::m_threads	sylar/sylar/db/fox_thread.h	/^    std::map<std::string, IFoxThread::ptr> m_threads;$/;"	m	class:sylar::FoxThreadManager	typeref:typename:std::map<std::string,IFoxThread::ptr>	access:private
sylar::FoxThreadManager::start	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::start() {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:()
sylar::FoxThreadManager::start	sylar/sylar/db/fox_thread.h	/^    void start();$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:()
sylar::FoxThreadManager::stop	sylar/sylar/db/fox_thread.cc	/^void FoxThreadManager::stop() {$/;"	f	class:sylar::FoxThreadManager	typeref:typename:void	signature:()
sylar::FoxThreadManager::stop	sylar/sylar/db/fox_thread.h	/^    void stop();$/;"	p	class:sylar::FoxThreadManager	typeref:typename:void	access:public	signature:()
sylar::FoxThreadMgr	sylar/sylar/db/fox_thread.h	/^typedef Singleton<FoxThreadManager> FoxThreadMgr;$/;"	t	namespace:sylar	typeref:typename:Singleton<FoxThreadManager>
sylar::FoxThreadPool	sylar/sylar/db/fox_thread.h	/^class FoxThreadPool : public IFoxThread {$/;"	c	namespace:sylar	inherits:IFoxThread
sylar::FoxThreadPool::FoxThreadPool	sylar/sylar/db/fox_thread.cc	/^FoxThreadPool::FoxThreadPool(uint32_t size, const std::string& name, bool advance)$/;"	f	class:sylar::FoxThreadPool	signature:(uint32_t size,const std::string & name,bool advance)
sylar::FoxThreadPool::FoxThreadPool	sylar/sylar/db/fox_thread.h	/^    FoxThreadPool(uint32_t size, const std::string& name = "", bool advance = false);$/;"	p	class:sylar::FoxThreadPool	access:public	signature:(uint32_t size,const std::string & name="",bool advance=false)
sylar::FoxThreadPool::batchDispatch	sylar/sylar/db/fox_thread.cc	/^bool FoxThreadPool::batchDispatch(const std::vector<callback>& cbs) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:bool	signature:(const std::vector<callback> & cbs)
sylar::FoxThreadPool::batchDispatch	sylar/sylar/db/fox_thread.h	/^    bool batchDispatch(const std::vector<callback>& cb);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:bool	access:public	signature:(const std::vector<callback> & cb)
sylar::FoxThreadPool::broadcast	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::broadcast(callback cb) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:(callback cb)
sylar::FoxThreadPool::broadcast	sylar/sylar/db/fox_thread.h	/^    void broadcast(callback cb);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:public	signature:(callback cb)
sylar::FoxThreadPool::callback	sylar/sylar/db/fox_thread.h	/^    typedef IFoxThread::callback callback;$/;"	t	class:sylar::FoxThreadPool	typeref:typename:IFoxThread::callback	access:public
sylar::FoxThreadPool::check	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::check() {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:()
sylar::FoxThreadPool::check	sylar/sylar/db/fox_thread.h	/^    void check();$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:private	signature:()
sylar::FoxThreadPool::dispatch	sylar/sylar/db/fox_thread.cc	/^bool FoxThreadPool::dispatch(callback cb) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:bool	signature:(callback cb)
sylar::FoxThreadPool::dispatch	sylar/sylar/db/fox_thread.cc	/^bool FoxThreadPool::dispatch(uint32_t id, callback cb) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:bool	signature:(uint32_t id,callback cb)
sylar::FoxThreadPool::dispatch	sylar/sylar/db/fox_thread.h	/^    bool dispatch(callback cb);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:bool	access:public	signature:(callback cb)
sylar::FoxThreadPool::dispatch	sylar/sylar/db/fox_thread.h	/^    bool dispatch(uint32_t id, callback cb);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:bool	access:public	signature:(uint32_t id,callback cb)
sylar::FoxThreadPool::dump	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::dump(std::ostream& os) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:(std::ostream & os)
sylar::FoxThreadPool::dump	sylar/sylar/db/fox_thread.h	/^    void dump(std::ostream& os);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:public	signature:(std::ostream & os)
sylar::FoxThreadPool::getRandFoxThread	sylar/sylar/db/fox_thread.cc	/^FoxThread* FoxThreadPool::getRandFoxThread() {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:FoxThread *	signature:()
sylar::FoxThreadPool::getRandFoxThread	sylar/sylar/db/fox_thread.h	/^    FoxThread* getRandFoxThread();$/;"	p	class:sylar::FoxThreadPool	typeref:typename:FoxThread *	access:public	signature:()
sylar::FoxThreadPool::getTotal	sylar/sylar/db/fox_thread.h	/^    virtual uint64_t getTotal() { return m_total;}$/;"	f	class:sylar::FoxThreadPool	typeref:typename:uint64_t	access:public	signature:()
sylar::FoxThreadPool::join	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::join() {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:()
sylar::FoxThreadPool::join	sylar/sylar/db/fox_thread.h	/^    void join();$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:public	signature:()
sylar::FoxThreadPool::m_advance	sylar/sylar/db/fox_thread.h	/^    bool m_advance;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:bool	access:private
sylar::FoxThreadPool::m_callbacks	sylar/sylar/db/fox_thread.h	/^    std::list<callback> m_callbacks;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:std::list<callback>	access:private
sylar::FoxThreadPool::m_cur	sylar/sylar/db/fox_thread.h	/^    uint32_t m_cur;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:uint32_t	access:private
sylar::FoxThreadPool::m_freeFoxThreads	sylar/sylar/db/fox_thread.h	/^    std::list<FoxThread*> m_freeFoxThreads;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:std::list<FoxThread * >	access:private
sylar::FoxThreadPool::m_initCb	sylar/sylar/db/fox_thread.h	/^    FoxThread::init_cb m_initCb;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:FoxThread::init_cb	access:private
sylar::FoxThreadPool::m_mutex	sylar/sylar/db/fox_thread.h	/^    RWMutex m_mutex;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:RWMutex	access:private
sylar::FoxThreadPool::m_name	sylar/sylar/db/fox_thread.h	/^    std::string m_name;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:std::string	access:private
sylar::FoxThreadPool::m_size	sylar/sylar/db/fox_thread.h	/^    uint32_t m_size;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:uint32_t	access:private
sylar::FoxThreadPool::m_start	sylar/sylar/db/fox_thread.h	/^    bool m_start;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:bool	access:private
sylar::FoxThreadPool::m_threads	sylar/sylar/db/fox_thread.h	/^    std::vector<FoxThread*> m_threads;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:std::vector<FoxThread * >	access:private
sylar::FoxThreadPool::m_total	sylar/sylar/db/fox_thread.h	/^    uint64_t m_total;$/;"	m	class:sylar::FoxThreadPool	typeref:typename:uint64_t	access:private
sylar::FoxThreadPool::ptr	sylar/sylar/db/fox_thread.h	/^    typedef std::shared_ptr<FoxThreadPool> ptr;$/;"	t	class:sylar::FoxThreadPool	typeref:typename:std::shared_ptr<FoxThreadPool>	access:public
sylar::FoxThreadPool::releaseFoxThread	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::releaseFoxThread(FoxThread* t) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:(FoxThread * t)
sylar::FoxThreadPool::releaseFoxThread	sylar/sylar/db/fox_thread.h	/^    void releaseFoxThread(FoxThread* t);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:private	signature:(FoxThread * t)
sylar::FoxThreadPool::setInitCb	sylar/sylar/db/fox_thread.h	/^    void setInitCb(FoxThread::init_cb v) { m_initCb = v;}$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	access:public	signature:(FoxThread::init_cb v)
sylar::FoxThreadPool::start	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::start() {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:()
sylar::FoxThreadPool::start	sylar/sylar/db/fox_thread.h	/^    void start();$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:public	signature:()
sylar::FoxThreadPool::stop	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::stop() {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:()
sylar::FoxThreadPool::stop	sylar/sylar/db/fox_thread.h	/^    void stop();$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:public	signature:()
sylar::FoxThreadPool::wrapcb	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::wrapcb(std::shared_ptr<FoxThread> thr, callback cb) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:(std::shared_ptr<FoxThread> thr,callback cb)
sylar::FoxThreadPool::wrapcb	sylar/sylar/db/fox_thread.h	/^    void wrapcb(std::shared_ptr<FoxThread>, callback cb);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:private	signature:(std::shared_ptr<FoxThread>,callback cb)
sylar::FoxThreadPool::~FoxThreadPool	sylar/sylar/db/fox_thread.cc	/^FoxThreadPool::~FoxThreadPool() {$/;"	f	class:sylar::FoxThreadPool	signature:()
sylar::FoxThreadPool::~FoxThreadPool	sylar/sylar/db/fox_thread.h	/^    ~FoxThreadPool();$/;"	p	class:sylar::FoxThreadPool	access:public	signature:()
sylar::GetConsumersPath	sylar/sylar/streams/service_discovery.cc	/^static std::string GetConsumersPath(const std::string& domain, const std::string& service) {$/;"	f	namespace:sylar	typeref:typename:std::string	file:	signature:(const std::string & domain,const std::string & service)
sylar::GetCurrentMS	sylar/sylar/util.cc	/^uint64_t GetCurrentMS() {$/;"	f	namespace:sylar	typeref:typename:uint64_t	signature:()
sylar::GetCurrentMS	sylar/sylar/util.h	/^uint64_t GetCurrentMS();$/;"	p	namespace:sylar	typeref:typename:uint64_t	signature:()
sylar::GetCurrentUS	sylar/sylar/util.cc	/^uint64_t GetCurrentUS() {$/;"	f	namespace:sylar	typeref:typename:uint64_t	signature:()
sylar::GetCurrentUS	sylar/sylar/util.h	/^uint64_t GetCurrentUS();$/;"	p	namespace:sylar	typeref:typename:uint64_t	signature:()
sylar::GetDomainPath	sylar/sylar/streams/service_discovery.cc	/^static std::string GetDomainPath(const std::string& domain) {$/;"	f	namespace:sylar	typeref:typename:std::string	file:	signature:(const std::string & domain)
sylar::GetFiberId	sylar/sylar/util.cc	/^uint32_t GetFiberId() {$/;"	f	namespace:sylar	typeref:typename:uint32_t	signature:()
sylar::GetFiberId	sylar/sylar/util.h	/^uint32_t GetFiberId();$/;"	p	namespace:sylar	typeref:typename:uint32_t	signature:()
sylar::GetHostName	sylar/sylar/util.cc	/^std::string GetHostName() {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:()
sylar::GetHostName	sylar/sylar/util.h	/^std::string GetHostName();$/;"	p	namespace:sylar	typeref:typename:std::string	signature:()
sylar::GetIPv4	sylar/sylar/util.cc	/^std::string GetIPv4() {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:()
sylar::GetIPv4	sylar/sylar/util.h	/^std::string GetIPv4();$/;"	p	namespace:sylar	typeref:typename:std::string	signature:()
sylar::GetIPv4Inet	sylar/sylar/util.cc	/^in_addr_t GetIPv4Inet() {$/;"	f	namespace:sylar	typeref:typename:in_addr_t	signature:()
sylar::GetParamValue	sylar/sylar/util.h	/^V GetParamValue(const Map& m, const K& k, const V& def = V()) {$/;"	f	namespace:sylar	typeref:typename:V	signature:(const Map & m,const K & k,const V & def=V ())
sylar::GetProvidersPath	sylar/sylar/streams/service_discovery.cc	/^static std::string GetProvidersPath(const std::string& domain, const std::string& service) {$/;"	f	namespace:sylar	typeref:typename:std::string	file:	signature:(const std::string & domain,const std::string & service)
sylar::GetThreadId	sylar/sylar/util.cc	/^pid_t GetThreadId() {$/;"	f	namespace:sylar	typeref:typename:pid_t	signature:()
sylar::GetThreadId	sylar/sylar/util.h	/^pid_t GetThreadId();$/;"	p	namespace:sylar	typeref:typename:pid_t	signature:()
sylar::HolderStats	sylar/sylar/streams/load_balance.h	/^class HolderStats {$/;"	c	namespace:sylar
sylar::HolderStats::clear	sylar/sylar/streams/load_balance.cc	/^void HolderStats::clear() {$/;"	f	class:sylar::HolderStats	typeref:typename:void	signature:()
sylar::HolderStats::clear	sylar/sylar/streams/load_balance.h	/^    void clear();$/;"	p	class:sylar::HolderStats	typeref:typename:void	access:public	signature:()
sylar::HolderStats::decDoing	sylar/sylar/streams/load_balance.h	/^    uint32_t decDoing(uint32_t v) { return sylar::Atomic::subFetch(m_doing, v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
sylar::HolderStats::getDoing	sylar/sylar/streams/load_balance.h	/^    uint32_t getDoing() const { return m_doing; }$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:() const
sylar::HolderStats::getErrs	sylar/sylar/streams/load_balance.h	/^    uint32_t getErrs() const { return m_errs; }$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:() const
sylar::HolderStats::getOks	sylar/sylar/streams/load_balance.h	/^    uint32_t getOks() const { return m_oks; }$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:() const
sylar::HolderStats::getTimeouts	sylar/sylar/streams/load_balance.h	/^    uint32_t getTimeouts() const { return m_timeouts; }$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:() const
sylar::HolderStats::getTotal	sylar/sylar/streams/load_balance.h	/^    uint32_t getTotal() const { return m_total; }$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:() const
sylar::HolderStats::getUsedTime	sylar/sylar/streams/load_balance.h	/^    uint32_t getUsedTime() const { return m_usedTime; }$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:() const
sylar::HolderStats::getWeight	sylar/sylar/streams/load_balance.cc	/^float HolderStats::getWeight(float rate) {$/;"	f	class:sylar::HolderStats	typeref:typename:float	signature:(float rate)
sylar::HolderStats::getWeight	sylar/sylar/streams/load_balance.h	/^    float getWeight(float rate = 1.0f);$/;"	p	class:sylar::HolderStats	typeref:typename:float	access:public	signature:(float rate=1.0f)
sylar::HolderStats::incDoing	sylar/sylar/streams/load_balance.h	/^    uint32_t incDoing(uint32_t v) { return sylar::Atomic::addFetch(m_doing, v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
sylar::HolderStats::incErrs	sylar/sylar/streams/load_balance.h	/^    uint32_t incErrs(uint32_t v) { return sylar::Atomic::addFetch(m_errs, v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
sylar::HolderStats::incOks	sylar/sylar/streams/load_balance.h	/^    uint32_t incOks(uint32_t v) { return sylar::Atomic::addFetch(m_oks, v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
sylar::HolderStats::incTimeouts	sylar/sylar/streams/load_balance.h	/^    uint32_t incTimeouts(uint32_t v) { return sylar::Atomic::addFetch(m_timeouts, v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
sylar::HolderStats::incTotal	sylar/sylar/streams/load_balance.h	/^    uint32_t incTotal(uint32_t v) { return sylar::Atomic::addFetch(m_total, v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
sylar::HolderStats::incUsedTime	sylar/sylar/streams/load_balance.h	/^    uint32_t incUsedTime(uint32_t v) { return sylar::Atomic::addFetch(m_usedTime ,v);}$/;"	f	class:sylar::HolderStats	typeref:typename:uint32_t	access:public	signature:(uint32_t v)
sylar::HolderStats::m_doing	sylar/sylar/streams/load_balance.h	/^    uint32_t m_doing = 0;$/;"	m	class:sylar::HolderStats	typeref:typename:uint32_t	access:private
sylar::HolderStats::m_errs	sylar/sylar/streams/load_balance.h	/^    uint32_t m_errs = 0;$/;"	m	class:sylar::HolderStats	typeref:typename:uint32_t	access:private
sylar::HolderStats::m_oks	sylar/sylar/streams/load_balance.h	/^    uint32_t m_oks = 0;$/;"	m	class:sylar::HolderStats	typeref:typename:uint32_t	access:private
sylar::HolderStats::m_timeouts	sylar/sylar/streams/load_balance.h	/^    uint32_t m_timeouts = 0;$/;"	m	class:sylar::HolderStats	typeref:typename:uint32_t	access:private
sylar::HolderStats::m_total	sylar/sylar/streams/load_balance.h	/^    uint32_t m_total = 0;$/;"	m	class:sylar::HolderStats	typeref:typename:uint32_t	access:private
sylar::HolderStats::m_usedTime	sylar/sylar/streams/load_balance.h	/^    uint32_t m_usedTime = 0;$/;"	m	class:sylar::HolderStats	typeref:typename:uint32_t	access:private
sylar::HolderStats::toString	sylar/sylar/streams/load_balance.cc	/^std::string HolderStats::toString() {$/;"	f	class:sylar::HolderStats	typeref:typename:std::string	signature:()
sylar::HolderStats::toString	sylar/sylar/streams/load_balance.h	/^    std::string toString();$/;"	p	class:sylar::HolderStats	typeref:typename:std::string	access:public	signature:()
sylar::HolderStatsSet	sylar/sylar/streams/load_balance.h	/^class HolderStatsSet {$/;"	c	namespace:sylar
sylar::HolderStatsSet::HolderStatsSet	sylar/sylar/streams/load_balance.cc	/^HolderStatsSet::HolderStatsSet(uint32_t size) {$/;"	f	class:sylar::HolderStatsSet	signature:(uint32_t size)
sylar::HolderStatsSet::HolderStatsSet	sylar/sylar/streams/load_balance.h	/^    HolderStatsSet(uint32_t size = 5);$/;"	p	class:sylar::HolderStatsSet	access:public	signature:(uint32_t size=5)
sylar::HolderStatsSet::get	sylar/sylar/streams/load_balance.cc	/^HolderStats& HolderStatsSet::get(const uint32_t& now) {$/;"	f	class:sylar::HolderStatsSet	typeref:typename:HolderStats &	signature:(const uint32_t & now)
sylar::HolderStatsSet::get	sylar/sylar/streams/load_balance.h	/^    HolderStats& get(const uint32_t& now = time(0));$/;"	p	class:sylar::HolderStatsSet	typeref:typename:HolderStats &	access:public	signature:(const uint32_t & now=time (0))
sylar::HolderStatsSet::getTotal	sylar/sylar/streams/load_balance.cc	/^HolderStats HolderStatsSet::getTotal() {$/;"	f	class:sylar::HolderStatsSet	typeref:typename:HolderStats	signature:()
sylar::HolderStatsSet::getTotal	sylar/sylar/streams/load_balance.h	/^    HolderStats getTotal();$/;"	p	class:sylar::HolderStatsSet	typeref:typename:HolderStats	access:public	signature:()
sylar::HolderStatsSet::getWeight	sylar/sylar/streams/load_balance.cc	/^float HolderStatsSet::getWeight(const uint32_t& now) {$/;"	f	class:sylar::HolderStatsSet	typeref:typename:float	signature:(const uint32_t & now)
sylar::HolderStatsSet::getWeight	sylar/sylar/streams/load_balance.h	/^    float getWeight(const uint32_t& now = time(0));$/;"	p	class:sylar::HolderStatsSet	typeref:typename:float	access:public	signature:(const uint32_t & now=time (0))
sylar::HolderStatsSet::init	sylar/sylar/streams/load_balance.cc	/^void HolderStatsSet::init(const uint32_t& now) {$/;"	f	class:sylar::HolderStatsSet	typeref:typename:void	signature:(const uint32_t & now)
sylar::HolderStatsSet::init	sylar/sylar/streams/load_balance.h	/^    void init(const uint32_t& now);$/;"	p	class:sylar::HolderStatsSet	typeref:typename:void	access:private	signature:(const uint32_t & now)
sylar::HolderStatsSet::m_lastUpdateTime	sylar/sylar/streams/load_balance.h	/^    uint32_t m_lastUpdateTime = 0; \/\/seconds$/;"	m	class:sylar::HolderStatsSet	typeref:typename:uint32_t	access:private
sylar::HolderStatsSet::m_stats	sylar/sylar/streams/load_balance.h	/^    std::vector<HolderStats> m_stats;$/;"	m	class:sylar::HolderStatsSet	typeref:typename:std::vector<HolderStats>	access:private
sylar::IDB	sylar/sylar/db/db.h	/^class IDB : public ISQLUpdate$/;"	c	namespace:sylar	inherits:ISQLUpdate,ISQLQuery
sylar::IDB::getErrStr	sylar/sylar/db/db.h	/^    virtual std::string getErrStr() = 0;$/;"	p	class:sylar::IDB	typeref:typename:std::string	access:public	signature:()
sylar::IDB::getErrno	sylar/sylar/db/db.h	/^    virtual int getErrno() = 0;$/;"	p	class:sylar::IDB	typeref:typename:int	access:public	signature:()
sylar::IDB::openTransaction	sylar/sylar/db/db.h	/^    virtual ITransaction::ptr openTransaction(bool auto_commit = false) = 0;$/;"	p	class:sylar::IDB	typeref:typename:ITransaction::ptr	access:public	signature:(bool auto_commit=false)
sylar::IDB::prepare	sylar/sylar/db/db.h	/^    virtual IStmt::ptr prepare(const std::string& stmt) = 0;$/;"	p	class:sylar::IDB	typeref:typename:IStmt::ptr	access:public	signature:(const std::string & stmt)
sylar::IDB::ptr	sylar/sylar/db/db.h	/^    typedef std::shared_ptr<IDB> ptr;$/;"	t	class:sylar::IDB	typeref:typename:std::shared_ptr<IDB>	access:public
sylar::IDB::~IDB	sylar/sylar/db/db.h	/^    virtual ~IDB() {}$/;"	f	class:sylar::IDB	access:public	signature:()
sylar::IFoxThread	sylar/sylar/db/fox_thread.h	/^class IFoxThread {$/;"	c	namespace:sylar
sylar::IFoxThread::batchDispatch	sylar/sylar/db/fox_thread.h	/^    virtual bool batchDispatch(const std::vector<callback>& cbs) = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:bool	access:public	signature:(const std::vector<callback> & cbs)
sylar::IFoxThread::broadcast	sylar/sylar/db/fox_thread.h	/^    virtual void broadcast(callback cb) = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:void	access:public	signature:(callback cb)
sylar::IFoxThread::callback	sylar/sylar/db/fox_thread.h	/^    typedef std::function<void()> callback;$/;"	t	class:sylar::IFoxThread	access:public
sylar::IFoxThread::dispatch	sylar/sylar/db/fox_thread.h	/^    virtual bool dispatch(callback cb) = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:bool	access:public	signature:(callback cb)
sylar::IFoxThread::dispatch	sylar/sylar/db/fox_thread.h	/^    virtual bool dispatch(uint32_t id, callback cb) = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:bool	access:public	signature:(uint32_t id,callback cb)
sylar::IFoxThread::dump	sylar/sylar/db/fox_thread.h	/^    virtual void dump(std::ostream& os) = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:void	access:public	signature:(std::ostream & os)
sylar::IFoxThread::getTotal	sylar/sylar/db/fox_thread.h	/^    virtual uint64_t getTotal() = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:uint64_t	access:public	signature:()
sylar::IFoxThread::join	sylar/sylar/db/fox_thread.h	/^    virtual void join() = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:void	access:public	signature:()
sylar::IFoxThread::ptr	sylar/sylar/db/fox_thread.h	/^    typedef std::shared_ptr<IFoxThread> ptr;$/;"	t	class:sylar::IFoxThread	typeref:typename:std::shared_ptr<IFoxThread>	access:public
sylar::IFoxThread::start	sylar/sylar/db/fox_thread.h	/^    virtual void start() = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:void	access:public	signature:()
sylar::IFoxThread::stop	sylar/sylar/db/fox_thread.h	/^    virtual void stop() = 0;$/;"	p	class:sylar::IFoxThread	typeref:typename:void	access:public	signature:()
sylar::IFoxThread::~IFoxThread	sylar/sylar/db/fox_thread.h	/^    virtual ~IFoxThread(){};$/;"	f	class:sylar::IFoxThread	access:public	signature:()
sylar::ILoadBalance	sylar/sylar/streams/load_balance.h	/^class ILoadBalance {$/;"	c	namespace:sylar
sylar::ILoadBalance::Error	sylar/sylar/streams/load_balance.h	/^    enum Error {$/;"	g	class:sylar::ILoadBalance	access:public
sylar::ILoadBalance::FAIR	sylar/sylar/streams/load_balance.h	/^        FAIR = 3$/;"	e	enum:sylar::ILoadBalance::Type	access:public
sylar::ILoadBalance::NO_CONNECTION	sylar/sylar/streams/load_balance.h	/^        NO_CONNECTION = -102,$/;"	e	enum:sylar::ILoadBalance::Error	access:public
sylar::ILoadBalance::NO_SERVICE	sylar/sylar/streams/load_balance.h	/^        NO_SERVICE = -101,$/;"	e	enum:sylar::ILoadBalance::Error	access:public
sylar::ILoadBalance::ROUNDROBIN	sylar/sylar/streams/load_balance.h	/^        ROUNDROBIN = 1,$/;"	e	enum:sylar::ILoadBalance::Type	access:public
sylar::ILoadBalance::Type	sylar/sylar/streams/load_balance.h	/^    enum Type {$/;"	g	class:sylar::ILoadBalance	access:public
sylar::ILoadBalance::WEIGHT	sylar/sylar/streams/load_balance.h	/^        WEIGHT = 2,$/;"	e	enum:sylar::ILoadBalance::Type	access:public
sylar::ILoadBalance::get	sylar/sylar/streams/load_balance.h	/^    virtual LoadBalanceItem::ptr get(uint64_t v = -1) = 0;$/;"	p	class:sylar::ILoadBalance	typeref:typename:LoadBalanceItem::ptr	access:public	signature:(uint64_t v=-1)
sylar::ILoadBalance::ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<ILoadBalance> ptr;$/;"	t	class:sylar::ILoadBalance	typeref:typename:std::shared_ptr<ILoadBalance>	access:public
sylar::ILoadBalance::~ILoadBalance	sylar/sylar/streams/load_balance.h	/^    virtual ~ILoadBalance() {}$/;"	f	class:sylar::ILoadBalance	access:public	signature:()
sylar::IOManager	sylar/sylar/iomanager.h	/^class IOManager : public Scheduler, public TimerManager {$/;"	c	namespace:sylar	inherits:Scheduler,TimerManager
sylar::IOManager::Event	sylar/sylar/iomanager.h	/^    enum Event {$/;"	g	class:sylar::IOManager	access:public
sylar::IOManager::FdContext	sylar/sylar/iomanager.h	/^    struct FdContext {$/;"	s	class:sylar::IOManager	access:private
sylar::IOManager::FdContext::EventContext	sylar/sylar/iomanager.h	/^        struct EventContext {$/;"	s	struct:sylar::IOManager::FdContext	access:public
sylar::IOManager::FdContext::EventContext::cb	sylar/sylar/iomanager.h	/^            std::function<void()> cb;$/;"	m	struct:sylar::IOManager::FdContext::EventContext	typeref:typename:std::function<void ()>	access:public
sylar::IOManager::FdContext::EventContext::fiber	sylar/sylar/iomanager.h	/^            Fiber::ptr fiber;$/;"	m	struct:sylar::IOManager::FdContext::EventContext	typeref:typename:Fiber::ptr	access:public
sylar::IOManager::FdContext::EventContext::scheduler	sylar/sylar/iomanager.h	/^            Scheduler* scheduler = nullptr;$/;"	m	struct:sylar::IOManager::FdContext::EventContext	typeref:typename:Scheduler *	access:public
sylar::IOManager::FdContext::MutexType	sylar/sylar/iomanager.h	/^        typedef Mutex MutexType;$/;"	t	struct:sylar::IOManager::FdContext	typeref:typename:Mutex	access:public
sylar::IOManager::FdContext::events	sylar/sylar/iomanager.h	/^        Event events = NONE;$/;"	m	struct:sylar::IOManager::FdContext	typeref:typename:Event	access:public
sylar::IOManager::FdContext::fd	sylar/sylar/iomanager.h	/^        int fd = 0;$/;"	m	struct:sylar::IOManager::FdContext	typeref:typename:int	access:public
sylar::IOManager::FdContext::getContext	sylar/sylar/iomanager.cc	/^IOManager::FdContext::EventContext& IOManager::FdContext::getContext(IOManager::Event event) {$/;"	f	class:sylar::IOManager::FdContext	typeref:typename:IOManager::FdContext::EventContext &	signature:(IOManager::Event event)
sylar::IOManager::FdContext::getContext	sylar/sylar/iomanager.h	/^        EventContext& getContext(Event event);$/;"	p	struct:sylar::IOManager::FdContext	typeref:typename:EventContext &	access:public	signature:(Event event)
sylar::IOManager::FdContext::mutex	sylar/sylar/iomanager.h	/^        MutexType mutex;$/;"	m	struct:sylar::IOManager::FdContext	typeref:typename:MutexType	access:public
sylar::IOManager::FdContext::read	sylar/sylar/iomanager.h	/^        EventContext read;$/;"	m	struct:sylar::IOManager::FdContext	typeref:typename:EventContext	access:public
sylar::IOManager::FdContext::resetContext	sylar/sylar/iomanager.cc	/^void IOManager::FdContext::resetContext(EventContext& ctx) {$/;"	f	class:sylar::IOManager::FdContext	typeref:typename:void	signature:(EventContext & ctx)
sylar::IOManager::FdContext::resetContext	sylar/sylar/iomanager.h	/^        void resetContext(EventContext& ctx);$/;"	p	struct:sylar::IOManager::FdContext	typeref:typename:void	access:public	signature:(EventContext & ctx)
sylar::IOManager::FdContext::triggerEvent	sylar/sylar/iomanager.cc	/^void IOManager::FdContext::triggerEvent(IOManager::Event event) {$/;"	f	class:sylar::IOManager::FdContext	typeref:typename:void	signature:(IOManager::Event event)
sylar::IOManager::FdContext::triggerEvent	sylar/sylar/iomanager.h	/^        void triggerEvent(Event event);$/;"	p	struct:sylar::IOManager::FdContext	typeref:typename:void	access:public	signature:(Event event)
sylar::IOManager::FdContext::write	sylar/sylar/iomanager.h	/^        EventContext write;$/;"	m	struct:sylar::IOManager::FdContext	typeref:typename:EventContext	access:public
sylar::IOManager::GetThis	sylar/sylar/iomanager.cc	/^IOManager* IOManager::GetThis() {$/;"	f	class:sylar::IOManager	typeref:typename:IOManager *	signature:()
sylar::IOManager::GetThis	sylar/sylar/iomanager.h	/^    static IOManager* GetThis();$/;"	p	class:sylar::IOManager	typeref:typename:IOManager *	access:public	signature:()
sylar::IOManager::IOManager	sylar/sylar/iomanager.cc	/^IOManager::IOManager(size_t threads, bool use_caller, const std::string& name)$/;"	f	class:sylar::IOManager	signature:(size_t threads,bool use_caller,const std::string & name)
sylar::IOManager::IOManager	sylar/sylar/iomanager.h	/^    IOManager(size_t threads = 1, bool use_caller = true, const std::string& name = "");$/;"	p	class:sylar::IOManager	access:public	signature:(size_t threads=1,bool use_caller=true,const std::string & name="")
sylar::IOManager::NONE	sylar/sylar/iomanager.h	/^        NONE    = 0x0,$/;"	e	enum:sylar::IOManager::Event	access:public
sylar::IOManager::READ	sylar/sylar/iomanager.h	/^        READ    = 0x1,$/;"	e	enum:sylar::IOManager::Event	access:public
sylar::IOManager::RWMutexType	sylar/sylar/iomanager.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::IOManager	typeref:typename:RWMutex	access:public
sylar::IOManager::WRITE	sylar/sylar/iomanager.h	/^        WRITE   = 0x4,$/;"	e	enum:sylar::IOManager::Event	access:public
sylar::IOManager::addEvent	sylar/sylar/iomanager.cc	/^int IOManager::addEvent(int fd, Event event, std::function<void()> cb) {$/;"	f	class:sylar::IOManager	typeref:typename:int	signature:(int fd,Event event,std::function<void ()> cb)
sylar::IOManager::addEvent	sylar/sylar/iomanager.h	/^    int addEvent(int fd, Event event, std::function<void()> cb = nullptr);$/;"	p	class:sylar::IOManager	typeref:typename:int	access:public	signature:(int fd,Event event,std::function<void ()> cb=nullptr)
sylar::IOManager::cancelAll	sylar/sylar/iomanager.cc	/^bool IOManager::cancelAll(int fd) {$/;"	f	class:sylar::IOManager	typeref:typename:bool	signature:(int fd)
sylar::IOManager::cancelAll	sylar/sylar/iomanager.h	/^    bool cancelAll(int fd);$/;"	p	class:sylar::IOManager	typeref:typename:bool	access:public	signature:(int fd)
sylar::IOManager::cancelEvent	sylar/sylar/iomanager.cc	/^bool IOManager::cancelEvent(int fd, Event event) {$/;"	f	class:sylar::IOManager	typeref:typename:bool	signature:(int fd,Event event)
sylar::IOManager::cancelEvent	sylar/sylar/iomanager.h	/^    bool cancelEvent(int fd, Event event);$/;"	p	class:sylar::IOManager	typeref:typename:bool	access:public	signature:(int fd,Event event)
sylar::IOManager::contextResize	sylar/sylar/iomanager.cc	/^void IOManager::contextResize(size_t size) {$/;"	f	class:sylar::IOManager	typeref:typename:void	signature:(size_t size)
sylar::IOManager::contextResize	sylar/sylar/iomanager.h	/^    void contextResize(size_t size);$/;"	p	class:sylar::IOManager	typeref:typename:void	access:protected	signature:(size_t size)
sylar::IOManager::delEvent	sylar/sylar/iomanager.cc	/^bool IOManager::delEvent(int fd, Event event) {$/;"	f	class:sylar::IOManager	typeref:typename:bool	signature:(int fd,Event event)
sylar::IOManager::delEvent	sylar/sylar/iomanager.h	/^    bool delEvent(int fd, Event event);$/;"	p	class:sylar::IOManager	typeref:typename:bool	access:public	signature:(int fd,Event event)
sylar::IOManager::idle	sylar/sylar/iomanager.cc	/^void IOManager::idle() {$/;"	f	class:sylar::IOManager	typeref:typename:void	signature:()
sylar::IOManager::idle	sylar/sylar/iomanager.h	/^    void idle() override;$/;"	p	class:sylar::IOManager	typeref:typename:void	access:protected	signature:()
sylar::IOManager::m_epfd	sylar/sylar/iomanager.h	/^    int m_epfd = 0;$/;"	m	class:sylar::IOManager	typeref:typename:int	access:private
sylar::IOManager::m_fdContexts	sylar/sylar/iomanager.h	/^    std::vector<FdContext*> m_fdContexts;$/;"	m	class:sylar::IOManager	typeref:typename:std::vector<FdContext * >	access:private
sylar::IOManager::m_mutex	sylar/sylar/iomanager.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::IOManager	typeref:typename:RWMutexType	access:private
sylar::IOManager::m_tickleFds	sylar/sylar/iomanager.h	/^    int m_tickleFds[2];$/;"	m	class:sylar::IOManager	typeref:typename:int[2]	access:private
sylar::IOManager::onTimerInsertedAtFront	sylar/sylar/iomanager.cc	/^void IOManager::onTimerInsertedAtFront() {$/;"	f	class:sylar::IOManager	typeref:typename:void	signature:()
sylar::IOManager::onTimerInsertedAtFront	sylar/sylar/iomanager.h	/^    void onTimerInsertedAtFront() override;$/;"	p	class:sylar::IOManager	typeref:typename:void	access:protected	signature:()
sylar::IOManager::ptr	sylar/sylar/iomanager.h	/^    typedef std::shared_ptr<IOManager> ptr;$/;"	t	class:sylar::IOManager	typeref:typename:std::shared_ptr<IOManager>	access:public
sylar::IOManager::stopping	sylar/sylar/iomanager.cc	/^bool IOManager::stopping() {$/;"	f	class:sylar::IOManager	typeref:typename:bool	signature:()
sylar::IOManager::stopping	sylar/sylar/iomanager.cc	/^bool IOManager::stopping(uint64_t& timeout) {$/;"	f	class:sylar::IOManager	typeref:typename:bool	signature:(uint64_t & timeout)
sylar::IOManager::stopping	sylar/sylar/iomanager.h	/^    bool stopping() override;$/;"	p	class:sylar::IOManager	typeref:typename:bool	access:protected	signature:()
sylar::IOManager::stopping	sylar/sylar/iomanager.h	/^    bool stopping(uint64_t& timeout);$/;"	p	class:sylar::IOManager	typeref:typename:bool	access:protected	signature:(uint64_t & timeout)
sylar::IOManager::tickle	sylar/sylar/iomanager.cc	/^void IOManager::tickle() {$/;"	f	class:sylar::IOManager	typeref:typename:void	signature:()
sylar::IOManager::tickle	sylar/sylar/iomanager.h	/^    void tickle() override;$/;"	p	class:sylar::IOManager	typeref:typename:void	access:protected	signature:()
sylar::IOManager::~IOManager	sylar/sylar/iomanager.cc	/^IOManager::~IOManager() {$/;"	f	class:sylar::IOManager	signature:()
sylar::IOManager::~IOManager	sylar/sylar/iomanager.h	/^    ~IOManager();$/;"	p	class:sylar::IOManager	access:public	signature:()
sylar::IPAddress	sylar/sylar/address.h	/^class IPAddress : public Address {$/;"	c	namespace:sylar	inherits:Address
sylar::IPAddress::Create	sylar/sylar/address.cc	/^IPAddress::ptr IPAddress::Create(const char* address, uint16_t port) {$/;"	f	class:sylar::IPAddress	typeref:typename:IPAddress::ptr	signature:(const char * address,uint16_t port)
sylar::IPAddress::Create	sylar/sylar/address.h	/^    static IPAddress::ptr Create(const char* address, uint16_t port = 0);$/;"	p	class:sylar::IPAddress	typeref:typename:IPAddress::ptr	access:public	signature:(const char * address,uint16_t port=0)
sylar::IPAddress::broadcastAddress	sylar/sylar/address.h	/^    virtual IPAddress::ptr broadcastAddress(uint32_t prefix_len) = 0;$/;"	p	class:sylar::IPAddress	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
sylar::IPAddress::getPort	sylar/sylar/address.h	/^    virtual uint32_t getPort() const = 0;$/;"	p	class:sylar::IPAddress	typeref:typename:uint32_t	access:public	signature:() const
sylar::IPAddress::networdAddress	sylar/sylar/address.h	/^    virtual IPAddress::ptr networdAddress(uint32_t prefix_len) = 0;$/;"	p	class:sylar::IPAddress	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
sylar::IPAddress::ptr	sylar/sylar/address.h	/^    typedef std::shared_ptr<IPAddress> ptr;$/;"	t	class:sylar::IPAddress	typeref:typename:std::shared_ptr<IPAddress>	access:public
sylar::IPAddress::setPort	sylar/sylar/address.h	/^    virtual void setPort(uint16_t v) = 0;$/;"	p	class:sylar::IPAddress	typeref:typename:void	access:public	signature:(uint16_t v)
sylar::IPAddress::subnetMask	sylar/sylar/address.h	/^    virtual IPAddress::ptr subnetMask(uint32_t prefix_len) = 0;$/;"	p	class:sylar::IPAddress	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
sylar::IPv4Address	sylar/sylar/address.h	/^class IPv4Address : public IPAddress {$/;"	c	namespace:sylar	inherits:IPAddress
sylar::IPv4Address::Create	sylar/sylar/address.cc	/^IPv4Address::ptr IPv4Address::Create(const char* address, uint16_t port) {$/;"	f	class:sylar::IPv4Address	typeref:typename:IPv4Address::ptr	signature:(const char * address,uint16_t port)
sylar::IPv4Address::Create	sylar/sylar/address.h	/^    static IPv4Address::ptr Create(const char* address, uint16_t port = 0);$/;"	p	class:sylar::IPv4Address	typeref:typename:IPv4Address::ptr	access:public	signature:(const char * address,uint16_t port=0)
sylar::IPv4Address::IPv4Address	sylar/sylar/address.cc	/^IPv4Address::IPv4Address(const sockaddr_in& address) {$/;"	f	class:sylar::IPv4Address	signature:(const sockaddr_in & address)
sylar::IPv4Address::IPv4Address	sylar/sylar/address.cc	/^IPv4Address::IPv4Address(uint32_t address, uint16_t port) {$/;"	f	class:sylar::IPv4Address	signature:(uint32_t address,uint16_t port)
sylar::IPv4Address::IPv4Address	sylar/sylar/address.h	/^    IPv4Address(const sockaddr_in& address);$/;"	p	class:sylar::IPv4Address	access:public	signature:(const sockaddr_in & address)
sylar::IPv4Address::IPv4Address	sylar/sylar/address.h	/^    IPv4Address(uint32_t address = INADDR_ANY, uint16_t port = 0);$/;"	p	class:sylar::IPv4Address	access:public	signature:(uint32_t address=INADDR_ANY,uint16_t port=0)
sylar::IPv4Address::broadcastAddress	sylar/sylar/address.cc	/^IPAddress::ptr IPv4Address::broadcastAddress(uint32_t prefix_len) {$/;"	f	class:sylar::IPv4Address	typeref:typename:IPAddress::ptr	signature:(uint32_t prefix_len)
sylar::IPv4Address::broadcastAddress	sylar/sylar/address.h	/^    IPAddress::ptr broadcastAddress(uint32_t prefix_len) override;$/;"	p	class:sylar::IPv4Address	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
sylar::IPv4Address::getAddr	sylar/sylar/address.cc	/^const sockaddr* IPv4Address::getAddr() const {$/;"	f	class:sylar::IPv4Address	typeref:typename:const sockaddr *	signature:() const
sylar::IPv4Address::getAddr	sylar/sylar/address.cc	/^sockaddr* IPv4Address::getAddr() {$/;"	f	class:sylar::IPv4Address	typeref:typename:sockaddr *	signature:()
sylar::IPv4Address::getAddr	sylar/sylar/address.h	/^    const sockaddr* getAddr() const override;$/;"	p	class:sylar::IPv4Address	typeref:typename:const sockaddr *	access:public	signature:() const
sylar::IPv4Address::getAddr	sylar/sylar/address.h	/^    sockaddr* getAddr() override;$/;"	p	class:sylar::IPv4Address	typeref:typename:sockaddr *	access:public	signature:()
sylar::IPv4Address::getAddrLen	sylar/sylar/address.cc	/^socklen_t IPv4Address::getAddrLen() const {$/;"	f	class:sylar::IPv4Address	typeref:typename:socklen_t	signature:() const
sylar::IPv4Address::getAddrLen	sylar/sylar/address.h	/^    socklen_t getAddrLen() const override;$/;"	p	class:sylar::IPv4Address	typeref:typename:socklen_t	access:public	signature:() const
sylar::IPv4Address::getPort	sylar/sylar/address.cc	/^uint32_t IPv4Address::getPort() const {$/;"	f	class:sylar::IPv4Address	typeref:typename:uint32_t	signature:() const
sylar::IPv4Address::getPort	sylar/sylar/address.h	/^    uint32_t getPort() const override;$/;"	p	class:sylar::IPv4Address	typeref:typename:uint32_t	access:public	signature:() const
sylar::IPv4Address::insert	sylar/sylar/address.cc	/^std::ostream& IPv4Address::insert(std::ostream& os) const {$/;"	f	class:sylar::IPv4Address	typeref:typename:std::ostream &	signature:(std::ostream & os) const
sylar::IPv4Address::insert	sylar/sylar/address.h	/^    std::ostream& insert(std::ostream& os) const override;$/;"	p	class:sylar::IPv4Address	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
sylar::IPv4Address::m_addr	sylar/sylar/address.h	/^    sockaddr_in m_addr;$/;"	m	class:sylar::IPv4Address	typeref:typename:sockaddr_in	access:private
sylar::IPv4Address::networdAddress	sylar/sylar/address.cc	/^IPAddress::ptr IPv4Address::networdAddress(uint32_t prefix_len) {$/;"	f	class:sylar::IPv4Address	typeref:typename:IPAddress::ptr	signature:(uint32_t prefix_len)
sylar::IPv4Address::networdAddress	sylar/sylar/address.h	/^    IPAddress::ptr networdAddress(uint32_t prefix_len) override;$/;"	p	class:sylar::IPv4Address	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
sylar::IPv4Address::ptr	sylar/sylar/address.h	/^    typedef std::shared_ptr<IPv4Address> ptr;$/;"	t	class:sylar::IPv4Address	typeref:typename:std::shared_ptr<IPv4Address>	access:public
sylar::IPv4Address::setPort	sylar/sylar/address.cc	/^void IPv4Address::setPort(uint16_t v) {$/;"	f	class:sylar::IPv4Address	typeref:typename:void	signature:(uint16_t v)
sylar::IPv4Address::setPort	sylar/sylar/address.h	/^    void setPort(uint16_t v) override;$/;"	p	class:sylar::IPv4Address	typeref:typename:void	access:public	signature:(uint16_t v)
sylar::IPv4Address::subnetMask	sylar/sylar/address.cc	/^IPAddress::ptr IPv4Address::subnetMask(uint32_t prefix_len) {$/;"	f	class:sylar::IPv4Address	typeref:typename:IPAddress::ptr	signature:(uint32_t prefix_len)
sylar::IPv4Address::subnetMask	sylar/sylar/address.h	/^    IPAddress::ptr subnetMask(uint32_t prefix_len) override;$/;"	p	class:sylar::IPv4Address	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
sylar::IPv6Address	sylar/sylar/address.h	/^class IPv6Address : public IPAddress {$/;"	c	namespace:sylar	inherits:IPAddress
sylar::IPv6Address::Create	sylar/sylar/address.cc	/^IPv6Address::ptr IPv6Address::Create(const char* address, uint16_t port) {$/;"	f	class:sylar::IPv6Address	typeref:typename:IPv6Address::ptr	signature:(const char * address,uint16_t port)
sylar::IPv6Address::Create	sylar/sylar/address.h	/^    static IPv6Address::ptr Create(const char* address, uint16_t port = 0);$/;"	p	class:sylar::IPv6Address	typeref:typename:IPv6Address::ptr	access:public	signature:(const char * address,uint16_t port=0)
sylar::IPv6Address::IPv6Address	sylar/sylar/address.cc	/^IPv6Address::IPv6Address() {$/;"	f	class:sylar::IPv6Address	signature:()
sylar::IPv6Address::IPv6Address	sylar/sylar/address.cc	/^IPv6Address::IPv6Address(const sockaddr_in6& address) {$/;"	f	class:sylar::IPv6Address	signature:(const sockaddr_in6 & address)
sylar::IPv6Address::IPv6Address	sylar/sylar/address.cc	/^IPv6Address::IPv6Address(const uint8_t address[16], uint16_t port) {$/;"	f	class:sylar::IPv6Address	signature:(const uint8_t address[16],uint16_t port)
sylar::IPv6Address::IPv6Address	sylar/sylar/address.h	/^    IPv6Address();$/;"	p	class:sylar::IPv6Address	access:public	signature:()
sylar::IPv6Address::IPv6Address	sylar/sylar/address.h	/^    IPv6Address(const sockaddr_in6& address);$/;"	p	class:sylar::IPv6Address	access:public	signature:(const sockaddr_in6 & address)
sylar::IPv6Address::IPv6Address	sylar/sylar/address.h	/^    IPv6Address(const uint8_t address[16], uint16_t port = 0);$/;"	p	class:sylar::IPv6Address	access:public	signature:(const uint8_t address[16],uint16_t port=0)
sylar::IPv6Address::broadcastAddress	sylar/sylar/address.cc	/^IPAddress::ptr IPv6Address::broadcastAddress(uint32_t prefix_len) {$/;"	f	class:sylar::IPv6Address	typeref:typename:IPAddress::ptr	signature:(uint32_t prefix_len)
sylar::IPv6Address::broadcastAddress	sylar/sylar/address.h	/^    IPAddress::ptr broadcastAddress(uint32_t prefix_len) override;$/;"	p	class:sylar::IPv6Address	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
sylar::IPv6Address::getAddr	sylar/sylar/address.cc	/^const sockaddr* IPv6Address::getAddr() const {$/;"	f	class:sylar::IPv6Address	typeref:typename:const sockaddr *	signature:() const
sylar::IPv6Address::getAddr	sylar/sylar/address.cc	/^sockaddr* IPv6Address::getAddr() {$/;"	f	class:sylar::IPv6Address	typeref:typename:sockaddr *	signature:()
sylar::IPv6Address::getAddr	sylar/sylar/address.h	/^    const sockaddr* getAddr() const override;$/;"	p	class:sylar::IPv6Address	typeref:typename:const sockaddr *	access:public	signature:() const
sylar::IPv6Address::getAddr	sylar/sylar/address.h	/^    sockaddr* getAddr() override;$/;"	p	class:sylar::IPv6Address	typeref:typename:sockaddr *	access:public	signature:()
sylar::IPv6Address::getAddrLen	sylar/sylar/address.cc	/^socklen_t IPv6Address::getAddrLen() const {$/;"	f	class:sylar::IPv6Address	typeref:typename:socklen_t	signature:() const
sylar::IPv6Address::getAddrLen	sylar/sylar/address.h	/^    socklen_t getAddrLen() const override;$/;"	p	class:sylar::IPv6Address	typeref:typename:socklen_t	access:public	signature:() const
sylar::IPv6Address::getPort	sylar/sylar/address.cc	/^uint32_t IPv6Address::getPort() const {$/;"	f	class:sylar::IPv6Address	typeref:typename:uint32_t	signature:() const
sylar::IPv6Address::getPort	sylar/sylar/address.h	/^    uint32_t getPort() const override;$/;"	p	class:sylar::IPv6Address	typeref:typename:uint32_t	access:public	signature:() const
sylar::IPv6Address::insert	sylar/sylar/address.cc	/^std::ostream& IPv6Address::insert(std::ostream& os) const {$/;"	f	class:sylar::IPv6Address	typeref:typename:std::ostream &	signature:(std::ostream & os) const
sylar::IPv6Address::insert	sylar/sylar/address.h	/^    std::ostream& insert(std::ostream& os) const override;$/;"	p	class:sylar::IPv6Address	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
sylar::IPv6Address::m_addr	sylar/sylar/address.h	/^    sockaddr_in6 m_addr;$/;"	m	class:sylar::IPv6Address	typeref:typename:sockaddr_in6	access:private
sylar::IPv6Address::networdAddress	sylar/sylar/address.cc	/^IPAddress::ptr IPv6Address::networdAddress(uint32_t prefix_len) {$/;"	f	class:sylar::IPv6Address	typeref:typename:IPAddress::ptr	signature:(uint32_t prefix_len)
sylar::IPv6Address::networdAddress	sylar/sylar/address.h	/^    IPAddress::ptr networdAddress(uint32_t prefix_len) override;$/;"	p	class:sylar::IPv6Address	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
sylar::IPv6Address::ptr	sylar/sylar/address.h	/^    typedef std::shared_ptr<IPv6Address> ptr;$/;"	t	class:sylar::IPv6Address	typeref:typename:std::shared_ptr<IPv6Address>	access:public
sylar::IPv6Address::setPort	sylar/sylar/address.cc	/^void IPv6Address::setPort(uint16_t v) {$/;"	f	class:sylar::IPv6Address	typeref:typename:void	signature:(uint16_t v)
sylar::IPv6Address::setPort	sylar/sylar/address.h	/^    void setPort(uint16_t v) override;$/;"	p	class:sylar::IPv6Address	typeref:typename:void	access:public	signature:(uint16_t v)
sylar::IPv6Address::subnetMask	sylar/sylar/address.cc	/^IPAddress::ptr IPv6Address::subnetMask(uint32_t prefix_len) {$/;"	f	class:sylar::IPv6Address	typeref:typename:IPAddress::ptr	signature:(uint32_t prefix_len)
sylar::IPv6Address::subnetMask	sylar/sylar/address.h	/^    IPAddress::ptr subnetMask(uint32_t prefix_len) override;$/;"	p	class:sylar::IPv6Address	typeref:typename:IPAddress::ptr	access:public	signature:(uint32_t prefix_len)
sylar::IRedis	sylar/sylar/db/redis.h	/^class IRedis {$/;"	c	namespace:sylar
sylar::IRedis::FOX_REDIS	sylar/sylar/db/redis.h	/^        FOX_REDIS = 3,$/;"	e	enum:sylar::IRedis::Type	access:public
sylar::IRedis::FOX_REDIS_CLUSTER	sylar/sylar/db/redis.h	/^        FOX_REDIS_CLUSTER = 4$/;"	e	enum:sylar::IRedis::Type	access:public
sylar::IRedis::IRedis	sylar/sylar/db/redis.h	/^    IRedis() : m_logEnable(true) { }$/;"	f	class:sylar::IRedis	access:public	signature:()
sylar::IRedis::REDIS	sylar/sylar/db/redis.h	/^        REDIS = 1,$/;"	e	enum:sylar::IRedis::Type	access:public
sylar::IRedis::REDIS_CLUSTER	sylar/sylar/db/redis.h	/^        REDIS_CLUSTER = 2,$/;"	e	enum:sylar::IRedis::Type	access:public
sylar::IRedis::Type	sylar/sylar/db/redis.h	/^    enum Type {$/;"	g	class:sylar::IRedis	access:public
sylar::IRedis::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, ...) = 0;$/;"	p	class:sylar::IRedis	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,...)
sylar::IRedis::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, va_list ap) = 0;$/;"	p	class:sylar::IRedis	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,va_list ap)
sylar::IRedis::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const std::vector<std::string>& argv) = 0;$/;"	p	class:sylar::IRedis	typeref:typename:ReplyPtr	access:public	signature:(const std::vector<std::string> & argv)
sylar::IRedis::getName	sylar/sylar/db/redis.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::IRedis	typeref:typename:const std::string &	access:public	signature:() const
sylar::IRedis::getPasswd	sylar/sylar/db/redis.h	/^    const std::string& getPasswd() const { return m_passwd;}$/;"	f	class:sylar::IRedis	typeref:typename:const std::string &	access:public	signature:() const
sylar::IRedis::getType	sylar/sylar/db/redis.h	/^    Type getType() const { return m_type;}$/;"	f	class:sylar::IRedis	typeref:typename:Type	access:public	signature:() const
sylar::IRedis::m_logEnable	sylar/sylar/db/redis.h	/^    bool m_logEnable;$/;"	m	class:sylar::IRedis	typeref:typename:bool	access:protected
sylar::IRedis::m_name	sylar/sylar/db/redis.h	/^    std::string m_name;$/;"	m	class:sylar::IRedis	typeref:typename:std::string	access:protected
sylar::IRedis::m_passwd	sylar/sylar/db/redis.h	/^    std::string m_passwd;$/;"	m	class:sylar::IRedis	typeref:typename:std::string	access:protected
sylar::IRedis::m_type	sylar/sylar/db/redis.h	/^    Type m_type;$/;"	m	class:sylar::IRedis	typeref:typename:Type	access:protected
sylar::IRedis::ptr	sylar/sylar/db/redis.h	/^    typedef std::shared_ptr<IRedis> ptr;$/;"	t	class:sylar::IRedis	typeref:typename:std::shared_ptr<IRedis>	access:public
sylar::IRedis::setName	sylar/sylar/db/redis.h	/^    void setName(const std::string& v) { m_name = v;}$/;"	f	class:sylar::IRedis	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::IRedis::setPasswd	sylar/sylar/db/redis.h	/^    void setPasswd(const std::string& v) { m_passwd = v;}$/;"	f	class:sylar::IRedis	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::IRedis::~IRedis	sylar/sylar/db/redis.h	/^    virtual ~IRedis() {}$/;"	f	class:sylar::IRedis	access:public	signature:()
sylar::ISQLData	sylar/sylar/db/db.h	/^class ISQLData {$/;"	c	namespace:sylar
sylar::ISQLData::getBlob	sylar/sylar/db/db.h	/^    virtual std::string getBlob(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:std::string	access:public	signature:(int idx)
sylar::ISQLData::getColumnBytes	sylar/sylar/db/db.h	/^    virtual int getColumnBytes(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int	access:public	signature:(int idx)
sylar::ISQLData::getColumnCount	sylar/sylar/db/db.h	/^    virtual int getColumnCount() = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int	access:public	signature:()
sylar::ISQLData::getColumnName	sylar/sylar/db/db.h	/^    virtual std::string getColumnName(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:std::string	access:public	signature:(int idx)
sylar::ISQLData::getColumnType	sylar/sylar/db/db.h	/^    virtual int getColumnType(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int	access:public	signature:(int idx)
sylar::ISQLData::getDataCount	sylar/sylar/db/db.h	/^    virtual int getDataCount() = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int	access:public	signature:()
sylar::ISQLData::getDouble	sylar/sylar/db/db.h	/^    virtual double getDouble(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:double	access:public	signature:(int idx)
sylar::ISQLData::getErrStr	sylar/sylar/db/db.h	/^    virtual const std::string& getErrStr() const = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:const std::string &	access:public	signature:() const
sylar::ISQLData::getErrno	sylar/sylar/db/db.h	/^    virtual int getErrno() const = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int	access:public	signature:() const
sylar::ISQLData::getFloat	sylar/sylar/db/db.h	/^    virtual float getFloat(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:float	access:public	signature:(int idx)
sylar::ISQLData::getInt16	sylar/sylar/db/db.h	/^    virtual int16_t getInt16(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int16_t	access:public	signature:(int idx)
sylar::ISQLData::getInt32	sylar/sylar/db/db.h	/^    virtual int32_t getInt32(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int32_t	access:public	signature:(int idx)
sylar::ISQLData::getInt64	sylar/sylar/db/db.h	/^    virtual int64_t getInt64(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int64_t	access:public	signature:(int idx)
sylar::ISQLData::getInt8	sylar/sylar/db/db.h	/^    virtual int8_t getInt8(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:int8_t	access:public	signature:(int idx)
sylar::ISQLData::getString	sylar/sylar/db/db.h	/^    virtual std::string getString(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:std::string	access:public	signature:(int idx)
sylar::ISQLData::getTime	sylar/sylar/db/db.h	/^    virtual time_t getTime(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:time_t	access:public	signature:(int idx)
sylar::ISQLData::getUint16	sylar/sylar/db/db.h	/^    virtual uint16_t getUint16(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:uint16_t	access:public	signature:(int idx)
sylar::ISQLData::getUint32	sylar/sylar/db/db.h	/^    virtual uint32_t getUint32(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:uint32_t	access:public	signature:(int idx)
sylar::ISQLData::getUint64	sylar/sylar/db/db.h	/^    virtual uint64_t getUint64(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:uint64_t	access:public	signature:(int idx)
sylar::ISQLData::getUint8	sylar/sylar/db/db.h	/^    virtual uint8_t getUint8(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:uint8_t	access:public	signature:(int idx)
sylar::ISQLData::isNull	sylar/sylar/db/db.h	/^    virtual bool isNull(int idx) = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:bool	access:public	signature:(int idx)
sylar::ISQLData::next	sylar/sylar/db/db.h	/^    virtual bool next() = 0;$/;"	p	class:sylar::ISQLData	typeref:typename:bool	access:public	signature:()
sylar::ISQLData::ptr	sylar/sylar/db/db.h	/^    typedef std::shared_ptr<ISQLData> ptr;$/;"	t	class:sylar::ISQLData	typeref:typename:std::shared_ptr<ISQLData>	access:public
sylar::ISQLData::~ISQLData	sylar/sylar/db/db.h	/^    virtual ~ISQLData() {}$/;"	f	class:sylar::ISQLData	access:public	signature:()
sylar::ISQLQuery	sylar/sylar/db/db.h	/^class ISQLQuery {$/;"	c	namespace:sylar
sylar::ISQLQuery::query	sylar/sylar/db/db.h	/^    virtual ISQLData::ptr query(const char* format, ...) = 0;$/;"	p	class:sylar::ISQLQuery	typeref:typename:ISQLData::ptr	access:public	signature:(const char * format,...)
sylar::ISQLQuery::query	sylar/sylar/db/db.h	/^    virtual ISQLData::ptr query(const std::string& sql) = 0;$/;"	p	class:sylar::ISQLQuery	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & sql)
sylar::ISQLQuery::~ISQLQuery	sylar/sylar/db/db.h	/^    virtual ~ISQLQuery() {}$/;"	f	class:sylar::ISQLQuery	access:public	signature:()
sylar::ISQLUpdate	sylar/sylar/db/db.h	/^class ISQLUpdate {$/;"	c	namespace:sylar
sylar::ISQLUpdate::execute	sylar/sylar/db/db.h	/^    virtual int execute(const char* format, ...) = 0;$/;"	p	class:sylar::ISQLUpdate	typeref:typename:int	access:public	signature:(const char * format,...)
sylar::ISQLUpdate::execute	sylar/sylar/db/db.h	/^    virtual int execute(const std::string& sql) = 0;$/;"	p	class:sylar::ISQLUpdate	typeref:typename:int	access:public	signature:(const std::string & sql)
sylar::ISQLUpdate::getLastInsertId	sylar/sylar/db/db.h	/^    virtual int64_t getLastInsertId() = 0;$/;"	p	class:sylar::ISQLUpdate	typeref:typename:int64_t	access:public	signature:()
sylar::ISQLUpdate::~ISQLUpdate	sylar/sylar/db/db.h	/^    virtual ~ISQLUpdate() {}$/;"	f	class:sylar::ISQLUpdate	access:public	signature:()
sylar::IServiceDiscovery	sylar/sylar/streams/service_discovery.h	/^class IServiceDiscovery {$/;"	c	namespace:sylar
sylar::IServiceDiscovery::getServiceCallback	sylar/sylar/streams/service_discovery.h	/^    service_callback getServiceCallback() const { return m_cb;}$/;"	f	class:sylar::IServiceDiscovery	typeref:typename:service_callback	access:public	signature:() const
sylar::IServiceDiscovery::listQueryServer	sylar/sylar/streams/service_discovery.cc	/^void IServiceDiscovery::listQueryServer(std::unordered_map<std::string$/;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	signature:(std::unordered_map<std::string,std::unordered_set<std::string>> & infos)
sylar::IServiceDiscovery::listQueryServer	sylar/sylar/streams/service_discovery.h	/^    void listQueryServer(std::unordered_map<std::string, std::unordered_set<std::string> >& info/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(std::unordered_map<std::string,std::unordered_set<std::string>> & infos)
sylar::IServiceDiscovery::listRegisterServer	sylar/sylar/streams/service_discovery.cc	/^void IServiceDiscovery::listRegisterServer(std::unordered_map<std::string, std::unordered_map<st/;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	signature:(std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>> & infos)
sylar::IServiceDiscovery::listRegisterServer	sylar/sylar/streams/service_discovery.h	/^    void listRegisterServer(std::unordered_map<std::string, std::unordered_map<std::string$/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>> & infos)
sylar::IServiceDiscovery::listServer	sylar/sylar/streams/service_discovery.cc	/^void IServiceDiscovery::listServer(std::unordered_map<std::string, std::unordered_map<std::strin/;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	signature:(std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<uint64_t,ServiceItemInfo::ptr>>> & infos)
sylar::IServiceDiscovery::listServer	sylar/sylar/streams/service_discovery.h	/^    void listServer(std::unordered_map<std::string, std::unordered_map<std::string$/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<uint64_t,ServiceItemInfo::ptr>>> & infos)
sylar::IServiceDiscovery::m_cb	sylar/sylar/streams/service_discovery.h	/^    service_callback m_cb;$/;"	m	class:sylar::IServiceDiscovery	typeref:typename:service_callback	access:protected
sylar::IServiceDiscovery::m_datas	sylar/sylar/streams/service_discovery.h	/^        ,std::unordered_map<uint64_t, ServiceItemInfo::ptr> > > m_datas;$/;"	m	class:sylar::IServiceDiscovery	typeref:typename:std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<uint64_t,ServiceItemInfo::ptr>>>	access:protected
sylar::IServiceDiscovery::m_mutex	sylar/sylar/streams/service_discovery.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::IServiceDiscovery	typeref:typename:sylar::RWMutex	access:protected
sylar::IServiceDiscovery::m_queryInfos	sylar/sylar/streams/service_discovery.h	/^    std::unordered_map<std::string, std::unordered_set<std::string> > m_queryInfos;$/;"	m	class:sylar::IServiceDiscovery	typeref:typename:std::unordered_map<std::string,std::unordered_set<std::string>>	access:protected
sylar::IServiceDiscovery::m_registerInfos	sylar/sylar/streams/service_discovery.h	/^        ,std::unordered_map<std::string, std::string> > > m_registerInfos;$/;"	m	class:sylar::IServiceDiscovery	typeref:typename:std::unordered_map<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>	access:protected
sylar::IServiceDiscovery::ptr	sylar/sylar/streams/service_discovery.h	/^    typedef std::shared_ptr<IServiceDiscovery> ptr;$/;"	t	class:sylar::IServiceDiscovery	typeref:typename:std::shared_ptr<IServiceDiscovery>	access:public
sylar::IServiceDiscovery::queryServer	sylar/sylar/streams/service_discovery.cc	/^void IServiceDiscovery::queryServer(const std::string& domain, const std::string& service) {$/;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	signature:(const std::string & domain,const std::string & service)
sylar::IServiceDiscovery::queryServer	sylar/sylar/streams/service_discovery.h	/^    void queryServer(const std::string& domain, const std::string& service);$/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(const std::string & domain,const std::string & service)
sylar::IServiceDiscovery::registerServer	sylar/sylar/streams/service_discovery.cc	/^void IServiceDiscovery::registerServer(const std::string& domain, const std::string& service,$/;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	signature:(const std::string & domain,const std::string & service,const std::string & ip_and_port,const std::string & data)
sylar::IServiceDiscovery::registerServer	sylar/sylar/streams/service_discovery.h	/^    void registerServer(const std::string& domain, const std::string& service,$/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(const std::string & domain,const std::string & service,const std::string & ip_and_port,const std::string & data)
sylar::IServiceDiscovery::service_callback	sylar/sylar/streams/service_discovery.h	/^                ,const std::unordered_map<uint64_t, ServiceItemInfo::ptr>& new_value)> service_c/;"	t	class:sylar::IServiceDiscovery	access:public
sylar::IServiceDiscovery::setQueryServer	sylar/sylar/streams/service_discovery.cc	/^void IServiceDiscovery::setQueryServer(const std::unordered_map<std::string, std::unordered_set</;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	signature:(const std::unordered_map<std::string,std::unordered_set<std::string>> & v)
sylar::IServiceDiscovery::setQueryServer	sylar/sylar/streams/service_discovery.h	/^    void setQueryServer(const std::unordered_map<std::string, std::unordered_set<std::string> >&/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(const std::unordered_map<std::string,std::unordered_set<std::string>> & v)
sylar::IServiceDiscovery::setServiceCallback	sylar/sylar/streams/service_discovery.h	/^    void setServiceCallback(service_callback v) { m_cb = v;}$/;"	f	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:(service_callback v)
sylar::IServiceDiscovery::start	sylar/sylar/streams/service_discovery.h	/^    virtual void start() = 0;$/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:()
sylar::IServiceDiscovery::stop	sylar/sylar/streams/service_discovery.h	/^    virtual void stop() = 0;$/;"	p	class:sylar::IServiceDiscovery	typeref:typename:void	access:public	signature:()
sylar::IServiceDiscovery::~IServiceDiscovery	sylar/sylar/streams/service_discovery.h	/^    virtual ~IServiceDiscovery() { }$/;"	f	class:sylar::IServiceDiscovery	access:public	signature:()
sylar::IStmt	sylar/sylar/db/db.h	/^class IStmt {$/;"	c	namespace:sylar
sylar::IStmt::bindBlob	sylar/sylar/db/db.h	/^    virtual int bindBlob(int idx, const std::string& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
sylar::IStmt::bindBlob	sylar/sylar/db/db.h	/^    virtual int bindBlob(int idx, const void* value, int64_t size) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const void * value,int64_t size)
sylar::IStmt::bindDouble	sylar/sylar/db/db.h	/^    virtual int bindDouble(int idx, const double& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const double & value)
sylar::IStmt::bindFloat	sylar/sylar/db/db.h	/^    virtual int bindFloat(int idx, const float& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const float & value)
sylar::IStmt::bindInt16	sylar/sylar/db/db.h	/^    virtual int bindInt16(int idx, const int16_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const int16_t & value)
sylar::IStmt::bindInt32	sylar/sylar/db/db.h	/^    virtual int bindInt32(int idx, const int32_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const int32_t & value)
sylar::IStmt::bindInt64	sylar/sylar/db/db.h	/^    virtual int bindInt64(int idx, const int64_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const int64_t & value)
sylar::IStmt::bindInt8	sylar/sylar/db/db.h	/^    virtual int bindInt8(int idx, const int8_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const int8_t & value)
sylar::IStmt::bindNull	sylar/sylar/db/db.h	/^    virtual int bindNull(int idx) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx)
sylar::IStmt::bindString	sylar/sylar/db/db.h	/^    virtual int bindString(int idx, const char* value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const char * value)
sylar::IStmt::bindString	sylar/sylar/db/db.h	/^    virtual int bindString(int idx, const std::string& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
sylar::IStmt::bindTime	sylar/sylar/db/db.h	/^    virtual int bindTime(int idx, const time_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const time_t & value)
sylar::IStmt::bindUint16	sylar/sylar/db/db.h	/^    virtual int bindUint16(int idx, const uint16_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const uint16_t & value)
sylar::IStmt::bindUint32	sylar/sylar/db/db.h	/^    virtual int bindUint32(int idx, const uint32_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const uint32_t & value)
sylar::IStmt::bindUint64	sylar/sylar/db/db.h	/^    virtual int bindUint64(int idx, const uint64_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const uint64_t & value)
sylar::IStmt::bindUint8	sylar/sylar/db/db.h	/^    virtual int bindUint8(int idx, const uint8_t& value) = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:(int idx,const uint8_t & value)
sylar::IStmt::execute	sylar/sylar/db/db.h	/^    virtual int execute() = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:()
sylar::IStmt::getErrStr	sylar/sylar/db/db.h	/^    virtual std::string getErrStr() = 0;$/;"	p	class:sylar::IStmt	typeref:typename:std::string	access:public	signature:()
sylar::IStmt::getErrno	sylar/sylar/db/db.h	/^    virtual int getErrno() = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int	access:public	signature:()
sylar::IStmt::getLastInsertId	sylar/sylar/db/db.h	/^    virtual int64_t getLastInsertId() = 0;$/;"	p	class:sylar::IStmt	typeref:typename:int64_t	access:public	signature:()
sylar::IStmt::ptr	sylar/sylar/db/db.h	/^    typedef std::shared_ptr<IStmt> ptr;$/;"	t	class:sylar::IStmt	typeref:typename:std::shared_ptr<IStmt>	access:public
sylar::IStmt::query	sylar/sylar/db/db.h	/^    virtual ISQLData::ptr query() = 0;$/;"	p	class:sylar::IStmt	typeref:typename:ISQLData::ptr	access:public	signature:()
sylar::IStmt::~IStmt	sylar/sylar/db/db.h	/^    virtual ~IStmt(){}$/;"	f	class:sylar::IStmt	access:public	signature:()
sylar::ISyncRedis	sylar/sylar/db/redis.h	/^class ISyncRedis : public IRedis {$/;"	c	namespace:sylar	inherits:IRedis
sylar::ISyncRedis::appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const char* fmt, ...) = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:int	access:public	signature:(const char * fmt,...)
sylar::ISyncRedis::appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const char* fmt, va_list ap) = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:int	access:public	signature:(const char * fmt,va_list ap)
sylar::ISyncRedis::appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const std::vector<std::string>& argv) = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:int	access:public	signature:(const std::vector<std::string> & argv)
sylar::ISyncRedis::connect	sylar/sylar/db/redis.h	/^    virtual bool connect() = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:bool	access:public	signature:()
sylar::ISyncRedis::connect	sylar/sylar/db/redis.h	/^    virtual bool connect(const std::string& ip, int port, uint64_t ms = 0) = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:bool	access:public	signature:(const std::string & ip,int port,uint64_t ms=0)
sylar::ISyncRedis::getLastActiveTime	sylar/sylar/db/redis.h	/^    uint64_t getLastActiveTime() const { return m_lastActiveTime;}$/;"	f	class:sylar::ISyncRedis	typeref:typename:uint64_t	access:public	signature:() const
sylar::ISyncRedis::getReply	sylar/sylar/db/redis.h	/^    virtual ReplyPtr getReply() = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:ReplyPtr	access:public	signature:()
sylar::ISyncRedis::m_lastActiveTime	sylar/sylar/db/redis.h	/^    uint64_t m_lastActiveTime;$/;"	m	class:sylar::ISyncRedis	typeref:typename:uint64_t	access:protected
sylar::ISyncRedis::ptr	sylar/sylar/db/redis.h	/^    typedef std::shared_ptr<ISyncRedis> ptr;$/;"	t	class:sylar::ISyncRedis	typeref:typename:std::shared_ptr<ISyncRedis>	access:public
sylar::ISyncRedis::reconnect	sylar/sylar/db/redis.h	/^    virtual bool reconnect() = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:bool	access:public	signature:()
sylar::ISyncRedis::setLastActiveTime	sylar/sylar/db/redis.h	/^    void setLastActiveTime(uint64_t v) { m_lastActiveTime = v;}$/;"	f	class:sylar::ISyncRedis	typeref:typename:void	access:public	signature:(uint64_t v)
sylar::ISyncRedis::setTimeout	sylar/sylar/db/redis.h	/^    virtual bool setTimeout(uint64_t ms) = 0;$/;"	p	class:sylar::ISyncRedis	typeref:typename:bool	access:public	signature:(uint64_t ms)
sylar::ISyncRedis::~ISyncRedis	sylar/sylar/db/redis.h	/^    virtual ~ISyncRedis() {}$/;"	f	class:sylar::ISyncRedis	access:public	signature:()
sylar::ITransaction	sylar/sylar/db/db.h	/^class ITransaction : public ISQLUpdate {$/;"	c	namespace:sylar	inherits:ISQLUpdate
sylar::ITransaction::begin	sylar/sylar/db/db.h	/^    virtual bool begin() = 0;$/;"	p	class:sylar::ITransaction	typeref:typename:bool	access:public	signature:()
sylar::ITransaction::commit	sylar/sylar/db/db.h	/^    virtual bool commit() = 0;$/;"	p	class:sylar::ITransaction	typeref:typename:bool	access:public	signature:()
sylar::ITransaction::ptr	sylar/sylar/db/db.h	/^    typedef std::shared_ptr<ITransaction> ptr;$/;"	t	class:sylar::ITransaction	typeref:typename:std::shared_ptr<ITransaction>	access:public
sylar::ITransaction::rollback	sylar/sylar/db/db.h	/^    virtual bool rollback() = 0;$/;"	p	class:sylar::ITransaction	typeref:typename:bool	access:public	signature:()
sylar::ITransaction::~ITransaction	sylar/sylar/db/db.h	/^    virtual ~ITransaction() {};$/;"	f	class:sylar::ITransaction	access:public	signature:()
sylar::Join	sylar/sylar/util.h	/^std::string Join(Iter begin, Iter end, const std::string& tag) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(Iter begin,Iter end,const std::string & tag)
sylar::JsonToYaml	sylar/sylar/util.cc	/^bool JsonToYaml(const Json::Value& jnode, YAML::Node& ynode) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(const Json::Value & jnode,YAML::Node & ynode)
sylar::JsonToYaml	sylar/sylar/util.h	/^bool JsonToYaml(const Json::Value& jnode, YAML::Node& ynode);$/;"	p	namespace:sylar	typeref:typename:bool	signature:(const Json::Value & jnode,YAML::Node & ynode)
sylar::JsonUtil	sylar/sylar/util/json_util.h	/^class JsonUtil {$/;"	c	namespace:sylar
sylar::JsonUtil::Escape	sylar/sylar/util/json_util.cc	/^std::string JsonUtil::Escape(const std::string& v) {$/;"	f	class:sylar::JsonUtil	typeref:typename:std::string	signature:(const std::string & v)
sylar::JsonUtil::Escape	sylar/sylar/util/json_util.h	/^    static std::string Escape(const std::string& v);$/;"	p	class:sylar::JsonUtil	typeref:typename:std::string	access:public	signature:(const std::string & v)
sylar::JsonUtil::FromString	sylar/sylar/util/json_util.cc	/^bool JsonUtil::FromString(Json::Value& json, const std::string& v) {$/;"	f	class:sylar::JsonUtil	typeref:typename:bool	signature:(Json::Value & json,const std::string & v)
sylar::JsonUtil::FromString	sylar/sylar/util/json_util.h	/^    static bool FromString(Json::Value& json, const std::string& v);$/;"	p	class:sylar::JsonUtil	typeref:typename:bool	access:public	signature:(Json::Value & json,const std::string & v)
sylar::JsonUtil::GetDouble	sylar/sylar/util/json_util.cc	/^double JsonUtil::GetDouble(const Json::Value& json$/;"	f	class:sylar::JsonUtil	typeref:typename:double	signature:(const Json::Value & json,const std::string & name,double default_value)
sylar::JsonUtil::GetDouble	sylar/sylar/util/json_util.h	/^    static double GetDouble(const Json::Value& json$/;"	p	class:sylar::JsonUtil	typeref:typename:double	access:public	signature:(const Json::Value & json,const std::string & name,double default_value=0)
sylar::JsonUtil::GetInt32	sylar/sylar/util/json_util.cc	/^int32_t JsonUtil::GetInt32(const Json::Value& json$/;"	f	class:sylar::JsonUtil	typeref:typename:int32_t	signature:(const Json::Value & json,const std::string & name,int32_t default_value)
sylar::JsonUtil::GetInt32	sylar/sylar/util/json_util.h	/^    static int32_t GetInt32(const Json::Value& json$/;"	p	class:sylar::JsonUtil	typeref:typename:int32_t	access:public	signature:(const Json::Value & json,const std::string & name,int32_t default_value=0)
sylar::JsonUtil::GetInt64	sylar/sylar/util/json_util.cc	/^int64_t JsonUtil::GetInt64(const Json::Value& json$/;"	f	class:sylar::JsonUtil	typeref:typename:int64_t	signature:(const Json::Value & json,const std::string & name,int64_t default_value)
sylar::JsonUtil::GetInt64	sylar/sylar/util/json_util.h	/^    static int64_t GetInt64(const Json::Value& json$/;"	p	class:sylar::JsonUtil	typeref:typename:int64_t	access:public	signature:(const Json::Value & json,const std::string & name,int64_t default_value=0)
sylar::JsonUtil::GetString	sylar/sylar/util/json_util.cc	/^std::string JsonUtil::GetString(const Json::Value& json$/;"	f	class:sylar::JsonUtil	typeref:typename:std::string	signature:(const Json::Value & json,const std::string & name,const std::string & default_value)
sylar::JsonUtil::GetString	sylar/sylar/util/json_util.h	/^    static std::string GetString(const Json::Value& json$/;"	p	class:sylar::JsonUtil	typeref:typename:std::string	access:public	signature:(const Json::Value & json,const std::string & name,const std::string & default_value="")
sylar::JsonUtil::GetUint32	sylar/sylar/util/json_util.cc	/^uint32_t JsonUtil::GetUint32(const Json::Value& json$/;"	f	class:sylar::JsonUtil	typeref:typename:uint32_t	signature:(const Json::Value & json,const std::string & name,uint32_t default_value)
sylar::JsonUtil::GetUint32	sylar/sylar/util/json_util.h	/^    static uint32_t GetUint32(const Json::Value& json$/;"	p	class:sylar::JsonUtil	typeref:typename:uint32_t	access:public	signature:(const Json::Value & json,const std::string & name,uint32_t default_value=0)
sylar::JsonUtil::GetUint64	sylar/sylar/util/json_util.cc	/^uint64_t JsonUtil::GetUint64(const Json::Value& json$/;"	f	class:sylar::JsonUtil	typeref:typename:uint64_t	signature:(const Json::Value & json,const std::string & name,uint64_t default_value)
sylar::JsonUtil::GetUint64	sylar/sylar/util/json_util.h	/^    static uint64_t GetUint64(const Json::Value& json$/;"	p	class:sylar::JsonUtil	typeref:typename:uint64_t	access:public	signature:(const Json::Value & json,const std::string & name,uint64_t default_value=0)
sylar::JsonUtil::NeedEscape	sylar/sylar/util/json_util.cc	/^bool JsonUtil::NeedEscape(const std::string& v) {$/;"	f	class:sylar::JsonUtil	typeref:typename:bool	signature:(const std::string & v)
sylar::JsonUtil::NeedEscape	sylar/sylar/util/json_util.h	/^    static bool NeedEscape(const std::string& v);$/;"	p	class:sylar::JsonUtil	typeref:typename:bool	access:public	signature:(const std::string & v)
sylar::JsonUtil::ToString	sylar/sylar/util/json_util.cc	/^std::string JsonUtil::ToString(const Json::Value& json) {$/;"	f	class:sylar::JsonUtil	typeref:typename:std::string	signature:(const Json::Value & json)
sylar::JsonUtil::ToString	sylar/sylar/util/json_util.h	/^    static std::string ToString(const Json::Value& json);$/;"	p	class:sylar::JsonUtil	typeref:typename:std::string	access:public	signature:(const Json::Value & json)
sylar::LevelFormatItem	sylar/sylar/log.cc	/^class LevelFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::LevelFormatItem::LevelFormatItem	sylar/sylar/log.cc	/^    LevelFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::LevelFormatItem	file:	access:public	signature:(const std::string & str="")
sylar::LevelFormatItem::format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::LevelFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::LexicalCast	sylar/sylar/config.h	/^class LexicalCast {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::list<T>, std::string> {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::map<std::string, T>, std::string> {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::set<T>, std::string> {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::string, std::list<T> > {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::string, std::map<std::string, T> > {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::string, std::set<T> > {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::string, std::unordered_map<std::string, T> > {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::string, std::unordered_set<T> > {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::string, std::vector<T> > {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::unordered_map<std::string, T>, std::string> {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::unordered_set<T>, std::string> {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/config.h	/^class LexicalCast<std::vector<T>, std::string> {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/log.cc	/^class LexicalCast<LogDefine, std::string> {$/;"	c	namespace:sylar	file:
sylar::LexicalCast	sylar/sylar/log.cc	/^class LexicalCast<std::string, LogDefine> {$/;"	c	namespace:sylar	file:
sylar::LexicalCast	sylar/sylar/tcp_server.h	/^class LexicalCast<TcpServerConf, std::string> {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/sylar/tcp_server.h	/^class LexicalCast<std::string, TcpServerConf> {$/;"	c	namespace:sylar
sylar::LexicalCast	sylar/tests/test_config.cc	/^class LexicalCast<Person, std::string> {$/;"	c	namespace:sylar	file:
sylar::LexicalCast	sylar/tests/test_config.cc	/^class LexicalCast<std::string, Person> {$/;"	c	namespace:sylar	file:
sylar::LexicalCast::operator ()	sylar/sylar/config.h	/^    T operator()(const F& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:T	access:public	signature:(const F & v)
sylar::LexicalCast::operator ()	sylar/sylar/config.h	/^    std::list<T> operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::list<T>	access:public	signature:(const std::string & v)
sylar::LexicalCast::operator ()	sylar/sylar/config.h	/^    std::map<std::string, T> operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::map<std::string,T>	access:public	signature:(const std::string & v)
sylar::LexicalCast::operator ()	sylar/sylar/config.h	/^    std::set<T> operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::set<T>	access:public	signature:(const std::string & v)
sylar::LexicalCast::operator ()	sylar/sylar/config.h	/^    std::string operator()(const std::list<T>& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const std::list<T> & v)
sylar::LexicalCast::operator ()	sylar/sylar/config.h	/^    std::string operator()(const std::map<std::string, T>& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const std::map<std::string,T> & v)
sylar::LexicalCast::operator ()	sylar/sylar/config.h	/^    std::string operator()(const std::set<T>& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const std::set<T> & v)
sylar::LexicalCast::operator ()	sylar/sylar/config.h	/^    std::string operator()(const std::unordered_map<std::string, T>& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const std::unordered_map<std::string,T> & v)
sylar::LexicalCast::operator ()	sylar/sylar/config.h	/^    std::string operator()(const std::unordered_set<T>& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const std::unordered_set<T> & v)
sylar::LexicalCast::operator ()	sylar/sylar/config.h	/^    std::string operator()(const std::vector<T>& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const std::vector<T> & v)
sylar::LexicalCast::operator ()	sylar/sylar/config.h	/^    std::unordered_map<std::string, T> operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::unordered_map<std::string,T>	access:public	signature:(const std::string & v)
sylar::LexicalCast::operator ()	sylar/sylar/config.h	/^    std::unordered_set<T> operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::unordered_set<T>	access:public	signature:(const std::string & v)
sylar::LexicalCast::operator ()	sylar/sylar/config.h	/^    std::vector<T> operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::vector<T>	access:public	signature:(const std::string & v)
sylar::LexicalCast::operator ()	sylar/sylar/log.cc	/^    LogDefine operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:LogDefine	file:	access:public	signature:(const std::string & v)
sylar::LexicalCast::operator ()	sylar/sylar/log.cc	/^    std::string operator()(const LogDefine& i) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	file:	access:public	signature:(const LogDefine & i)
sylar::LexicalCast::operator ()	sylar/sylar/tcp_server.h	/^    TcpServerConf operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:TcpServerConf	access:public	signature:(const std::string & v)
sylar::LexicalCast::operator ()	sylar/sylar/tcp_server.h	/^    std::string operator()(const TcpServerConf& conf) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	access:public	signature:(const TcpServerConf & conf)
sylar::LexicalCast::operator ()	sylar/tests/test_config.cc	/^    Person operator()(const std::string& v) {$/;"	f	class:sylar::LexicalCast	typeref:typename:Person	file:	access:public	signature:(const std::string & v)
sylar::LexicalCast::operator ()	sylar/tests/test_config.cc	/^    std::string operator()(const Person& p) {$/;"	f	class:sylar::LexicalCast	typeref:typename:std::string	file:	access:public	signature:(const Person & p)
sylar::Library	sylar/sylar/library.h	/^class Library {$/;"	c	namespace:sylar
sylar::Library::GetModule	sylar/sylar/library.cc	/^Module::ptr Library::GetModule(const std::string& path) {$/;"	f	class:sylar::Library	typeref:typename:Module::ptr	signature:(const std::string & path)
sylar::Library::GetModule	sylar/sylar/library.h	/^    static Module::ptr GetModule(const std::string& path);$/;"	p	class:sylar::Library	typeref:typename:Module::ptr	access:public	signature:(const std::string & path)
sylar::LineFormatItem	sylar/sylar/log.cc	/^class LineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::LineFormatItem::LineFormatItem	sylar/sylar/log.cc	/^    LineFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::LineFormatItem	file:	access:public	signature:(const std::string & str="")
sylar::LineFormatItem::format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::LineFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::ListAllMember	sylar/sylar/config.cc	/^static void ListAllMember(const std::string& prefix,$/;"	f	namespace:sylar	typeref:typename:void	file:	signature:(const std::string & prefix,const YAML::Node & node,std::list<std::pair<std::string,const YAML::Node>> & output)
sylar::LoadBalance	sylar/sylar/streams/load_balance.h	/^class LoadBalance : public ILoadBalance {$/;"	c	namespace:sylar	inherits:ILoadBalance
sylar::LoadBalance::RWMutexType	sylar/sylar/streams/load_balance.h	/^    typedef sylar::RWMutex RWMutexType;$/;"	t	class:sylar::LoadBalance	typeref:typename:sylar::RWMutex	access:public
sylar::LoadBalance::add	sylar/sylar/streams/load_balance.cc	/^void LoadBalance::add(LoadBalanceItem::ptr v) {$/;"	f	class:sylar::LoadBalance	typeref:typename:void	signature:(LoadBalanceItem::ptr v)
sylar::LoadBalance::add	sylar/sylar/streams/load_balance.h	/^    void add(LoadBalanceItem::ptr v);$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:public	signature:(LoadBalanceItem::ptr v)
sylar::LoadBalance::checkInit	sylar/sylar/streams/load_balance.cc	/^void LoadBalance::checkInit() {$/;"	f	class:sylar::LoadBalance	typeref:typename:void	signature:()
sylar::LoadBalance::checkInit	sylar/sylar/streams/load_balance.h	/^    void checkInit();$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:protected	signature:()
sylar::LoadBalance::del	sylar/sylar/streams/load_balance.cc	/^void LoadBalance::del(LoadBalanceItem::ptr v) {$/;"	f	class:sylar::LoadBalance	typeref:typename:void	signature:(LoadBalanceItem::ptr v)
sylar::LoadBalance::del	sylar/sylar/streams/load_balance.h	/^    void del(LoadBalanceItem::ptr v);$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:public	signature:(LoadBalanceItem::ptr v)
sylar::LoadBalance::getById	sylar/sylar/streams/load_balance.cc	/^LoadBalanceItem::ptr LoadBalance::getById(uint64_t id) {$/;"	f	class:sylar::LoadBalance	typeref:typename:LoadBalanceItem::ptr	signature:(uint64_t id)
sylar::LoadBalance::getById	sylar/sylar/streams/load_balance.h	/^    LoadBalanceItem::ptr getById(uint64_t id);$/;"	p	class:sylar::LoadBalance	typeref:typename:LoadBalanceItem::ptr	access:public	signature:(uint64_t id)
sylar::LoadBalance::init	sylar/sylar/streams/load_balance.cc	/^void LoadBalance::init() {$/;"	f	class:sylar::LoadBalance	typeref:typename:void	signature:()
sylar::LoadBalance::init	sylar/sylar/streams/load_balance.h	/^    void init();$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:public	signature:()
sylar::LoadBalance::initNolock	sylar/sylar/streams/load_balance.h	/^    virtual void initNolock() = 0;$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:protected	signature:()
sylar::LoadBalance::m_datas	sylar/sylar/streams/load_balance.h	/^    std::unordered_map<uint64_t, LoadBalanceItem::ptr> m_datas;$/;"	m	class:sylar::LoadBalance	typeref:typename:std::unordered_map<uint64_t,LoadBalanceItem::ptr>	access:protected
sylar::LoadBalance::m_lastInitTime	sylar/sylar/streams/load_balance.h	/^    uint64_t m_lastInitTime = 0;$/;"	m	class:sylar::LoadBalance	typeref:typename:uint64_t	access:protected
sylar::LoadBalance::m_mutex	sylar/sylar/streams/load_balance.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::LoadBalance	typeref:typename:RWMutexType	access:protected
sylar::LoadBalance::ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<LoadBalance> ptr;$/;"	t	class:sylar::LoadBalance	typeref:typename:std::shared_ptr<LoadBalance>	access:public
sylar::LoadBalance::set	sylar/sylar/streams/load_balance.cc	/^void LoadBalance::set(const std::vector<LoadBalanceItem::ptr>& vs) {$/;"	f	class:sylar::LoadBalance	typeref:typename:void	signature:(const std::vector<LoadBalanceItem::ptr> & vs)
sylar::LoadBalance::set	sylar/sylar/streams/load_balance.h	/^    void set(const std::vector<LoadBalanceItem::ptr>& vs);$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:public	signature:(const std::vector<LoadBalanceItem::ptr> & vs)
sylar::LoadBalance::statusString	sylar/sylar/streams/load_balance.cc	/^std::string LoadBalance::statusString(const std::string& prefix) {$/;"	f	class:sylar::LoadBalance	typeref:typename:std::string	signature:(const std::string & prefix)
sylar::LoadBalance::statusString	sylar/sylar/streams/load_balance.h	/^    std::string statusString(const std::string& prefix);$/;"	p	class:sylar::LoadBalance	typeref:typename:std::string	access:public	signature:(const std::string & prefix)
sylar::LoadBalance::update	sylar/sylar/streams/load_balance.cc	/^void LoadBalance::update(const std::unordered_map<uint64_t, LoadBalanceItem::ptr>& adds$/;"	f	class:sylar::LoadBalance	typeref:typename:void	signature:(const std::unordered_map<uint64_t,LoadBalanceItem::ptr> & adds,std::unordered_map<uint64_t,LoadBalanceItem::ptr> & dels)
sylar::LoadBalance::update	sylar/sylar/streams/load_balance.h	/^    void update(const std::unordered_map<uint64_t, LoadBalanceItem::ptr>& adds$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:public	signature:(const std::unordered_map<uint64_t,LoadBalanceItem::ptr> & adds,std::unordered_map<uint64_t,LoadBalanceItem::ptr> & dels)
sylar::LoadBalanceItem	sylar/sylar/streams/load_balance.h	/^class LoadBalanceItem {$/;"	c	namespace:sylar
sylar::LoadBalanceItem::close	sylar/sylar/streams/load_balance.cc	/^void LoadBalanceItem::close() {$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:void	signature:()
sylar::LoadBalanceItem::close	sylar/sylar/streams/load_balance.h	/^    void close();$/;"	p	class:sylar::LoadBalanceItem	typeref:typename:void	access:public	signature:()
sylar::LoadBalanceItem::get	sylar/sylar/streams/load_balance.cc	/^HolderStats& LoadBalanceItem::get(const uint32_t& now) {$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:HolderStats &	signature:(const uint32_t & now)
sylar::LoadBalanceItem::get	sylar/sylar/streams/load_balance.h	/^    HolderStats& get(const uint32_t& now = time(0));$/;"	p	class:sylar::LoadBalanceItem	typeref:typename:HolderStats &	access:public	signature:(const uint32_t & now=time (0))
sylar::LoadBalanceItem::getId	sylar/sylar/streams/load_balance.h	/^    uint64_t getId() const { return m_id;}$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:uint64_t	access:public	signature:() const
sylar::LoadBalanceItem::getStream	sylar/sylar/streams/load_balance.h	/^    SocketStream::ptr getStream() const { return m_stream;}$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:SocketStream::ptr	access:public	signature:() const
sylar::LoadBalanceItem::getStreamAs	sylar/sylar/streams/load_balance.h	/^    std::shared_ptr<T> getStreamAs() {$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:std::shared_ptr<T>	access:public	signature:()
sylar::LoadBalanceItem::getWeight	sylar/sylar/streams/load_balance.h	/^    virtual int32_t getWeight() { return m_weight;}$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:int32_t	access:public	signature:()
sylar::LoadBalanceItem::isValid	sylar/sylar/streams/load_balance.cc	/^bool LoadBalanceItem::isValid() {$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:bool	signature:()
sylar::LoadBalanceItem::isValid	sylar/sylar/streams/load_balance.h	/^    virtual bool isValid();$/;"	p	class:sylar::LoadBalanceItem	typeref:typename:bool	access:public	signature:()
sylar::LoadBalanceItem::m_id	sylar/sylar/streams/load_balance.h	/^    uint64_t m_id = 0;$/;"	m	class:sylar::LoadBalanceItem	typeref:typename:uint64_t	access:protected
sylar::LoadBalanceItem::m_stats	sylar/sylar/streams/load_balance.h	/^    HolderStatsSet m_stats;$/;"	m	class:sylar::LoadBalanceItem	typeref:typename:HolderStatsSet	access:protected
sylar::LoadBalanceItem::m_stream	sylar/sylar/streams/load_balance.h	/^    SocketStream::ptr m_stream;$/;"	m	class:sylar::LoadBalanceItem	typeref:typename:SocketStream::ptr	access:protected
sylar::LoadBalanceItem::m_weight	sylar/sylar/streams/load_balance.h	/^    int32_t m_weight = 0;$/;"	m	class:sylar::LoadBalanceItem	typeref:typename:int32_t	access:protected
sylar::LoadBalanceItem::ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<LoadBalanceItem> ptr;$/;"	t	class:sylar::LoadBalanceItem	typeref:typename:std::shared_ptr<LoadBalanceItem>	access:public
sylar::LoadBalanceItem::setId	sylar/sylar/streams/load_balance.h	/^    void setId(uint64_t v) { m_id = v;}$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:void	access:public	signature:(uint64_t v)
sylar::LoadBalanceItem::setStream	sylar/sylar/streams/load_balance.h	/^    void setStream(SocketStream::ptr v) { m_stream = v;}$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:void	access:public	signature:(SocketStream::ptr v)
sylar::LoadBalanceItem::setWeight	sylar/sylar/streams/load_balance.h	/^    void setWeight(int32_t v) { m_weight = v;}$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:void	access:public	signature:(int32_t v)
sylar::LoadBalanceItem::toString	sylar/sylar/streams/load_balance.cc	/^std::string LoadBalanceItem::toString() {$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:std::string	signature:()
sylar::LoadBalanceItem::toString	sylar/sylar/streams/load_balance.h	/^    std::string toString();$/;"	p	class:sylar::LoadBalanceItem	typeref:typename:std::string	access:public	signature:()
sylar::LoadBalanceItem::~LoadBalanceItem	sylar/sylar/streams/load_balance.h	/^    virtual ~LoadBalanceItem() {}$/;"	f	class:sylar::LoadBalanceItem	access:public	signature:()
sylar::LogAppender	sylar/sylar/log.h	/^class LogAppender {$/;"	c	namespace:sylar
sylar::LogAppender::MutexType	sylar/sylar/log.h	/^    typedef Spinlock MutexType;$/;"	t	class:sylar::LogAppender	typeref:typename:Spinlock	access:public
sylar::LogAppender::getFormatter	sylar/sylar/log.cc	/^LogFormatter::ptr LogAppender::getFormatter() {$/;"	f	class:sylar::LogAppender	typeref:typename:LogFormatter::ptr	signature:()
sylar::LogAppender::getFormatter	sylar/sylar/log.h	/^    LogFormatter::ptr getFormatter();$/;"	p	class:sylar::LogAppender	typeref:typename:LogFormatter::ptr	access:public	signature:()
sylar::LogAppender::getLevel	sylar/sylar/log.h	/^    LogLevel::Level getLevel() const { return m_level;}$/;"	f	class:sylar::LogAppender	typeref:typename:LogLevel::Level	access:public	signature:() const
sylar::LogAppender::log	sylar/sylar/log.h	/^    virtual void log(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr event)/;"	p	class:sylar::LogAppender	typeref:typename:void	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
sylar::LogAppender::m_formatter	sylar/sylar/log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:sylar::LogAppender	typeref:typename:LogFormatter::ptr	access:protected
sylar::LogAppender::m_hasFormatter	sylar/sylar/log.h	/^    bool m_hasFormatter = false;$/;"	m	class:sylar::LogAppender	typeref:typename:bool	access:protected
sylar::LogAppender::m_level	sylar/sylar/log.h	/^    LogLevel::Level m_level = LogLevel::DEBUG;$/;"	m	class:sylar::LogAppender	typeref:typename:LogLevel::Level	access:protected
sylar::LogAppender::m_mutex	sylar/sylar/log.h	/^    MutexType m_mutex;$/;"	m	class:sylar::LogAppender	typeref:typename:MutexType	access:protected
sylar::LogAppender::ptr	sylar/sylar/log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:sylar::LogAppender	typeref:typename:std::shared_ptr<LogAppender>	access:public
sylar::LogAppender::setFormatter	sylar/sylar/log.cc	/^void LogAppender::setFormatter(LogFormatter::ptr val) {$/;"	f	class:sylar::LogAppender	typeref:typename:void	signature:(LogFormatter::ptr val)
sylar::LogAppender::setFormatter	sylar/sylar/log.h	/^    void setFormatter(LogFormatter::ptr val);$/;"	p	class:sylar::LogAppender	typeref:typename:void	access:public	signature:(LogFormatter::ptr val)
sylar::LogAppender::setLevel	sylar/sylar/log.h	/^    void setLevel(LogLevel::Level val) { m_level = val;}$/;"	f	class:sylar::LogAppender	typeref:typename:void	access:public	signature:(LogLevel::Level val)
sylar::LogAppender::toYamlString	sylar/sylar/log.h	/^    virtual std::string toYamlString() = 0;$/;"	p	class:sylar::LogAppender	typeref:typename:std::string	access:public	signature:()
sylar::LogAppender::~LogAppender	sylar/sylar/log.h	/^    virtual ~LogAppender() {}$/;"	f	class:sylar::LogAppender	access:public	signature:()
sylar::LogAppenderDefine	sylar/sylar/log.cc	/^struct LogAppenderDefine {$/;"	s	namespace:sylar	file:
sylar::LogAppenderDefine::file	sylar/sylar/log.cc	/^    std::string file;$/;"	m	struct:sylar::LogAppenderDefine	typeref:typename:std::string	file:	access:public
sylar::LogAppenderDefine::formatter	sylar/sylar/log.cc	/^    std::string formatter;$/;"	m	struct:sylar::LogAppenderDefine	typeref:typename:std::string	file:	access:public
sylar::LogAppenderDefine::level	sylar/sylar/log.cc	/^    LogLevel::Level level = LogLevel::UNKNOW;$/;"	m	struct:sylar::LogAppenderDefine	typeref:typename:LogLevel::Level	file:	access:public
sylar::LogAppenderDefine::operator ==	sylar/sylar/log.cc	/^    bool operator==(const LogAppenderDefine& oth) const {$/;"	f	struct:sylar::LogAppenderDefine	typeref:typename:bool	file:	access:public	signature:(const LogAppenderDefine & oth) const
sylar::LogAppenderDefine::type	sylar/sylar/log.cc	/^    int type = 0; \/\/1 File, 2 Stdout$/;"	m	struct:sylar::LogAppenderDefine	typeref:typename:int	file:	access:public
sylar::LogDefine	sylar/sylar/log.cc	/^struct LogDefine {$/;"	s	namespace:sylar	file:
sylar::LogDefine::appenders	sylar/sylar/log.cc	/^    std::vector<LogAppenderDefine> appenders;$/;"	m	struct:sylar::LogDefine	typeref:typename:std::vector<LogAppenderDefine>	file:	access:public
sylar::LogDefine::formatter	sylar/sylar/log.cc	/^    std::string formatter;$/;"	m	struct:sylar::LogDefine	typeref:typename:std::string	file:	access:public
sylar::LogDefine::isValid	sylar/sylar/log.cc	/^    bool isValid() const {$/;"	f	struct:sylar::LogDefine	typeref:typename:bool	file:	access:public	signature:() const
sylar::LogDefine::level	sylar/sylar/log.cc	/^    LogLevel::Level level = LogLevel::UNKNOW;$/;"	m	struct:sylar::LogDefine	typeref:typename:LogLevel::Level	file:	access:public
sylar::LogDefine::name	sylar/sylar/log.cc	/^    std::string name;$/;"	m	struct:sylar::LogDefine	typeref:typename:std::string	file:	access:public
sylar::LogDefine::operator <	sylar/sylar/log.cc	/^    bool operator<(const LogDefine& oth) const {$/;"	f	struct:sylar::LogDefine	typeref:typename:bool	file:	access:public	signature:(const LogDefine & oth) const
sylar::LogDefine::operator ==	sylar/sylar/log.cc	/^    bool operator==(const LogDefine& oth) const {$/;"	f	struct:sylar::LogDefine	typeref:typename:bool	file:	access:public	signature:(const LogDefine & oth) const
sylar::LogEvent	sylar/sylar/log.h	/^class LogEvent {$/;"	c	namespace:sylar
sylar::LogEvent::LogEvent	sylar/sylar/log.cc	/^LogEvent::LogEvent(std::shared_ptr<Logger> logger, LogLevel::Level level$/;"	f	class:sylar::LogEvent	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const char * file,int32_t line,uint32_t elapse,uint32_t thread_id,uint32_t fiber_id,uint64_t time,const std::string & thread_name)
sylar::LogEvent::LogEvent	sylar/sylar/log.h	/^    LogEvent(std::shared_ptr<Logger> logger, LogLevel::Level level$/;"	p	class:sylar::LogEvent	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,const char * file,int32_t line,uint32_t elapse,uint32_t thread_id,uint32_t fiber_id,uint64_t time,const std::string & thread_name)
sylar::LogEvent::format	sylar/sylar/log.cc	/^void LogEvent::format(const char* fmt, ...) {$/;"	f	class:sylar::LogEvent	typeref:typename:void	signature:(const char * fmt,...)
sylar::LogEvent::format	sylar/sylar/log.cc	/^void LogEvent::format(const char* fmt, va_list al) {$/;"	f	class:sylar::LogEvent	typeref:typename:void	signature:(const char * fmt,va_list al)
sylar::LogEvent::format	sylar/sylar/log.h	/^    void format(const char* fmt, ...);$/;"	p	class:sylar::LogEvent	typeref:typename:void	access:public	signature:(const char * fmt,...)
sylar::LogEvent::format	sylar/sylar/log.h	/^    void format(const char* fmt, va_list al);$/;"	p	class:sylar::LogEvent	typeref:typename:void	access:public	signature:(const char * fmt,va_list al)
sylar::LogEvent::getContent	sylar/sylar/log.h	/^    std::string getContent() const { return m_ss.str();}$/;"	f	class:sylar::LogEvent	typeref:typename:std::string	access:public	signature:() const
sylar::LogEvent::getElapse	sylar/sylar/log.h	/^    uint32_t getElapse() const { return m_elapse;}$/;"	f	class:sylar::LogEvent	typeref:typename:uint32_t	access:public	signature:() const
sylar::LogEvent::getFiberId	sylar/sylar/log.h	/^    uint32_t getFiberId() const { return m_fiberId;}$/;"	f	class:sylar::LogEvent	typeref:typename:uint32_t	access:public	signature:() const
sylar::LogEvent::getFile	sylar/sylar/log.h	/^    const char* getFile() const { return m_file;}$/;"	f	class:sylar::LogEvent	typeref:typename:const char *	access:public	signature:() const
sylar::LogEvent::getLevel	sylar/sylar/log.h	/^    LogLevel::Level getLevel() const { return m_level;}$/;"	f	class:sylar::LogEvent	typeref:typename:LogLevel::Level	access:public	signature:() const
sylar::LogEvent::getLine	sylar/sylar/log.h	/^    int32_t getLine() const { return m_line;}$/;"	f	class:sylar::LogEvent	typeref:typename:int32_t	access:public	signature:() const
sylar::LogEvent::getLogger	sylar/sylar/log.h	/^    std::shared_ptr<Logger> getLogger() const { return m_logger;}$/;"	f	class:sylar::LogEvent	typeref:typename:std::shared_ptr<Logger>	access:public	signature:() const
sylar::LogEvent::getSS	sylar/sylar/log.h	/^    std::stringstream& getSS() { return m_ss;}$/;"	f	class:sylar::LogEvent	typeref:typename:std::stringstream &	access:public	signature:()
sylar::LogEvent::getThreadId	sylar/sylar/log.h	/^    uint32_t getThreadId() const { return m_threadId;}$/;"	f	class:sylar::LogEvent	typeref:typename:uint32_t	access:public	signature:() const
sylar::LogEvent::getThreadName	sylar/sylar/log.h	/^    const std::string& getThreadName() const { return m_threadName;}$/;"	f	class:sylar::LogEvent	typeref:typename:const std::string &	access:public	signature:() const
sylar::LogEvent::getTime	sylar/sylar/log.h	/^    uint64_t getTime() const { return m_time;}$/;"	f	class:sylar::LogEvent	typeref:typename:uint64_t	access:public	signature:() const
sylar::LogEvent::m_elapse	sylar/sylar/log.h	/^    uint32_t m_elapse = 0;$/;"	m	class:sylar::LogEvent	typeref:typename:uint32_t	access:private
sylar::LogEvent::m_fiberId	sylar/sylar/log.h	/^    uint32_t m_fiberId = 0;$/;"	m	class:sylar::LogEvent	typeref:typename:uint32_t	access:private
sylar::LogEvent::m_file	sylar/sylar/log.h	/^    const char* m_file = nullptr;$/;"	m	class:sylar::LogEvent	typeref:typename:const char *	access:private
sylar::LogEvent::m_level	sylar/sylar/log.h	/^    LogLevel::Level m_level;$/;"	m	class:sylar::LogEvent	typeref:typename:LogLevel::Level	access:private
sylar::LogEvent::m_line	sylar/sylar/log.h	/^    int32_t m_line = 0;$/;"	m	class:sylar::LogEvent	typeref:typename:int32_t	access:private
sylar::LogEvent::m_logger	sylar/sylar/log.h	/^    std::shared_ptr<Logger> m_logger;$/;"	m	class:sylar::LogEvent	typeref:typename:std::shared_ptr<Logger>	access:private
sylar::LogEvent::m_ss	sylar/sylar/log.h	/^    std::stringstream m_ss;$/;"	m	class:sylar::LogEvent	typeref:typename:std::stringstream	access:private
sylar::LogEvent::m_threadId	sylar/sylar/log.h	/^    uint32_t m_threadId = 0;$/;"	m	class:sylar::LogEvent	typeref:typename:uint32_t	access:private
sylar::LogEvent::m_threadName	sylar/sylar/log.h	/^    std::string m_threadName;$/;"	m	class:sylar::LogEvent	typeref:typename:std::string	access:private
sylar::LogEvent::m_time	sylar/sylar/log.h	/^    uint64_t m_time = 0;$/;"	m	class:sylar::LogEvent	typeref:typename:uint64_t	access:private
sylar::LogEvent::ptr	sylar/sylar/log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:sylar::LogEvent	typeref:typename:std::shared_ptr<LogEvent>	access:public
sylar::LogEventWrap	sylar/sylar/log.h	/^class LogEventWrap {$/;"	c	namespace:sylar
sylar::LogEventWrap::LogEventWrap	sylar/sylar/log.cc	/^LogEventWrap::LogEventWrap(LogEvent::ptr e)$/;"	f	class:sylar::LogEventWrap	signature:(LogEvent::ptr e)
sylar::LogEventWrap::LogEventWrap	sylar/sylar/log.h	/^    LogEventWrap(LogEvent::ptr e);$/;"	p	class:sylar::LogEventWrap	access:public	signature:(LogEvent::ptr e)
sylar::LogEventWrap::getEvent	sylar/sylar/log.h	/^    LogEvent::ptr getEvent() const { return m_event;}$/;"	f	class:sylar::LogEventWrap	typeref:typename:LogEvent::ptr	access:public	signature:() const
sylar::LogEventWrap::getSS	sylar/sylar/log.cc	/^std::stringstream& LogEventWrap::getSS() {$/;"	f	class:sylar::LogEventWrap	typeref:typename:std::stringstream &	signature:()
sylar::LogEventWrap::getSS	sylar/sylar/log.h	/^    std::stringstream& getSS();$/;"	p	class:sylar::LogEventWrap	typeref:typename:std::stringstream &	access:public	signature:()
sylar::LogEventWrap::m_event	sylar/sylar/log.h	/^    LogEvent::ptr m_event;$/;"	m	class:sylar::LogEventWrap	typeref:typename:LogEvent::ptr	access:private
sylar::LogEventWrap::~LogEventWrap	sylar/sylar/log.cc	/^LogEventWrap::~LogEventWrap() {$/;"	f	class:sylar::LogEventWrap	signature:()
sylar::LogEventWrap::~LogEventWrap	sylar/sylar/log.h	/^    ~LogEventWrap();$/;"	p	class:sylar::LogEventWrap	access:public	signature:()
sylar::LogFormatter	sylar/sylar/log.h	/^class LogFormatter {$/;"	c	namespace:sylar
sylar::LogFormatter::FormatItem	sylar/sylar/log.h	/^    class FormatItem {$/;"	c	class:sylar::LogFormatter	access:public
sylar::LogFormatter::FormatItem::format	sylar/sylar/log.h	/^        virtual void format(std::ostream& os, std::shared_ptr<Logger> logger, LogLevel::Level le/;"	p	class:sylar::LogFormatter::FormatItem	typeref:typename:void	access:public	signature:(std::ostream & os,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
sylar::LogFormatter::FormatItem::ptr	sylar/sylar/log.h	/^        typedef std::shared_ptr<FormatItem> ptr;$/;"	t	class:sylar::LogFormatter::FormatItem	typeref:typename:std::shared_ptr<FormatItem>	access:public
sylar::LogFormatter::FormatItem::~FormatItem	sylar/sylar/log.h	/^        virtual ~FormatItem() {}$/;"	f	class:sylar::LogFormatter::FormatItem	access:public	signature:()
sylar::LogFormatter::LogFormatter	sylar/sylar/log.cc	/^LogFormatter::LogFormatter(const std::string& pattern)$/;"	f	class:sylar::LogFormatter	signature:(const std::string & pattern)
sylar::LogFormatter::LogFormatter	sylar/sylar/log.h	/^    LogFormatter(const std::string& pattern);$/;"	p	class:sylar::LogFormatter	access:public	signature:(const std::string & pattern)
sylar::LogFormatter::format	sylar/sylar/log.cc	/^std::ostream& LogFormatter::format(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::/;"	f	class:sylar::LogFormatter	typeref:typename:std::ostream &	signature:(std::ostream & ofs,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
sylar::LogFormatter::format	sylar/sylar/log.cc	/^std::string LogFormatter::format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent/;"	f	class:sylar::LogFormatter	typeref:typename:std::string	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
sylar::LogFormatter::format	sylar/sylar/log.h	/^    std::ostream& format(std::ostream& ofs, std::shared_ptr<Logger> logger, LogLevel::Level leve/;"	p	class:sylar::LogFormatter	typeref:typename:std::ostream &	access:public	signature:(std::ostream & ofs,std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
sylar::LogFormatter::format	sylar/sylar/log.h	/^    std::string format(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr even/;"	p	class:sylar::LogFormatter	typeref:typename:std::string	access:public	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
sylar::LogFormatter::getPattern	sylar/sylar/log.h	/^    const std::string getPattern() const { return m_pattern;}$/;"	f	class:sylar::LogFormatter	typeref:typename:const std::string	access:public	signature:() const
sylar::LogFormatter::init	sylar/sylar/log.cc	/^void LogFormatter::init() {$/;"	f	class:sylar::LogFormatter	typeref:typename:void	signature:()
sylar::LogFormatter::init	sylar/sylar/log.h	/^    void init();$/;"	p	class:sylar::LogFormatter	typeref:typename:void	access:public	signature:()
sylar::LogFormatter::isError	sylar/sylar/log.h	/^    bool isError() const { return m_error;}$/;"	f	class:sylar::LogFormatter	typeref:typename:bool	access:public	signature:() const
sylar::LogFormatter::m_error	sylar/sylar/log.h	/^    bool m_error = false;$/;"	m	class:sylar::LogFormatter	typeref:typename:bool	access:private
sylar::LogFormatter::m_items	sylar/sylar/log.h	/^    std::vector<FormatItem::ptr> m_items;$/;"	m	class:sylar::LogFormatter	typeref:typename:std::vector<FormatItem::ptr>	access:private
sylar::LogFormatter::m_pattern	sylar/sylar/log.h	/^    std::string m_pattern;$/;"	m	class:sylar::LogFormatter	typeref:typename:std::string	access:private
sylar::LogFormatter::ptr	sylar/sylar/log.h	/^    typedef std::shared_ptr<LogFormatter> ptr;$/;"	t	class:sylar::LogFormatter	typeref:typename:std::shared_ptr<LogFormatter>	access:public
sylar::LogIniter	sylar/sylar/log.cc	/^struct LogIniter {$/;"	s	namespace:sylar	file:
sylar::LogIniter::LogIniter	sylar/sylar/log.cc	/^    LogIniter() {$/;"	f	struct:sylar::LogIniter	file:	access:public	signature:()
sylar::LogLevel	sylar/sylar/log.h	/^class LogLevel {$/;"	c	namespace:sylar
sylar::LogLevel::DEBUG	sylar/sylar/log.h	/^        DEBUG = 1,$/;"	e	enum:sylar::LogLevel::Level	access:public
sylar::LogLevel::ERROR	sylar/sylar/log.h	/^        ERROR = 4,$/;"	e	enum:sylar::LogLevel::Level	access:public
sylar::LogLevel::FATAL	sylar/sylar/log.h	/^        FATAL = 5$/;"	e	enum:sylar::LogLevel::Level	access:public
sylar::LogLevel::FromString	sylar/sylar/log.cc	/^LogLevel::Level LogLevel::FromString(const std::string& str) {$/;"	f	class:sylar::LogLevel	typeref:typename:LogLevel::Level	signature:(const std::string & str)
sylar::LogLevel::FromString	sylar/sylar/log.h	/^    static LogLevel::Level FromString(const std::string& str);$/;"	p	class:sylar::LogLevel	typeref:typename:LogLevel::Level	access:public	signature:(const std::string & str)
sylar::LogLevel::INFO	sylar/sylar/log.h	/^        INFO = 2,$/;"	e	enum:sylar::LogLevel::Level	access:public
sylar::LogLevel::Level	sylar/sylar/log.h	/^    enum Level {$/;"	g	class:sylar::LogLevel	access:public
sylar::LogLevel::ToString	sylar/sylar/log.cc	/^const char* LogLevel::ToString(LogLevel::Level level) {$/;"	f	class:sylar::LogLevel	typeref:typename:const char *	signature:(LogLevel::Level level)
sylar::LogLevel::ToString	sylar/sylar/log.h	/^    static const char* ToString(LogLevel::Level level);$/;"	p	class:sylar::LogLevel	typeref:typename:const char *	access:public	signature:(LogLevel::Level level)
sylar::LogLevel::UNKNOW	sylar/sylar/log.h	/^        UNKNOW = 0,$/;"	e	enum:sylar::LogLevel::Level	access:public
sylar::LogLevel::WARN	sylar/sylar/log.h	/^        WARN = 3,$/;"	e	enum:sylar::LogLevel::Level	access:public
sylar::Logger	sylar/sylar/log.h	/^class Logger : public std::enable_shared_from_this<Logger> {$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<Logger>
sylar::Logger::Logger	sylar/sylar/log.cc	/^Logger::Logger(const std::string& name)$/;"	f	class:sylar::Logger	signature:(const std::string & name)
sylar::Logger::Logger	sylar/sylar/log.h	/^    Logger(const std::string& name = "root");$/;"	p	class:sylar::Logger	access:public	signature:(const std::string & name="")
sylar::Logger::MutexType	sylar/sylar/log.h	/^    typedef Spinlock MutexType;$/;"	t	class:sylar::Logger	typeref:typename:Spinlock	access:public
sylar::Logger::addAppender	sylar/sylar/log.cc	/^void Logger::addAppender(LogAppender::ptr appender) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogAppender::ptr appender)
sylar::Logger::addAppender	sylar/sylar/log.h	/^    void addAppender(LogAppender::ptr appender);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogAppender::ptr appender)
sylar::Logger::clearAppenders	sylar/sylar/log.cc	/^void Logger::clearAppenders() {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:()
sylar::Logger::clearAppenders	sylar/sylar/log.h	/^    void clearAppenders();$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:()
sylar::Logger::debug	sylar/sylar/log.cc	/^void Logger::debug(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
sylar::Logger::debug	sylar/sylar/log.h	/^    void debug(LogEvent::ptr event);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
sylar::Logger::delAppender	sylar/sylar/log.cc	/^void Logger::delAppender(LogAppender::ptr appender) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogAppender::ptr appender)
sylar::Logger::delAppender	sylar/sylar/log.h	/^    void delAppender(LogAppender::ptr appender);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogAppender::ptr appender)
sylar::Logger::error	sylar/sylar/log.cc	/^void Logger::error(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
sylar::Logger::error	sylar/sylar/log.h	/^    void error(LogEvent::ptr event);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
sylar::Logger::fatal	sylar/sylar/log.cc	/^void Logger::fatal(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
sylar::Logger::fatal	sylar/sylar/log.h	/^    void fatal(LogEvent::ptr event);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
sylar::Logger::getFormatter	sylar/sylar/log.cc	/^LogFormatter::ptr Logger::getFormatter() {$/;"	f	class:sylar::Logger	typeref:typename:LogFormatter::ptr	signature:()
sylar::Logger::getFormatter	sylar/sylar/log.h	/^    LogFormatter::ptr getFormatter();$/;"	p	class:sylar::Logger	typeref:typename:LogFormatter::ptr	access:public	signature:()
sylar::Logger::getLevel	sylar/sylar/log.h	/^    LogLevel::Level getLevel() const { return m_level;}$/;"	f	class:sylar::Logger	typeref:typename:LogLevel::Level	access:public	signature:() const
sylar::Logger::getName	sylar/sylar/log.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::Logger	typeref:typename:const std::string &	access:public	signature:() const
sylar::Logger::info	sylar/sylar/log.cc	/^void Logger::info(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
sylar::Logger::info	sylar/sylar/log.h	/^    void info(LogEvent::ptr event);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
sylar::Logger::log	sylar/sylar/log.cc	/^void Logger::log(LogLevel::Level level, LogEvent::ptr event) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogLevel::Level level,LogEvent::ptr event)
sylar::Logger::log	sylar/sylar/log.h	/^    void log(LogLevel::Level level, LogEvent::ptr event);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogLevel::Level level,LogEvent::ptr event)
sylar::Logger::m_appenders	sylar/sylar/log.h	/^    std::list<LogAppender::ptr> m_appenders;$/;"	m	class:sylar::Logger	typeref:typename:std::list<LogAppender::ptr>	access:private
sylar::Logger::m_formatter	sylar/sylar/log.h	/^    LogFormatter::ptr m_formatter;$/;"	m	class:sylar::Logger	typeref:typename:LogFormatter::ptr	access:private
sylar::Logger::m_level	sylar/sylar/log.h	/^    LogLevel::Level m_level;$/;"	m	class:sylar::Logger	typeref:typename:LogLevel::Level	access:private
sylar::Logger::m_mutex	sylar/sylar/log.h	/^    MutexType m_mutex;$/;"	m	class:sylar::Logger	typeref:typename:MutexType	access:private
sylar::Logger::m_name	sylar/sylar/log.h	/^    std::string m_name;$/;"	m	class:sylar::Logger	typeref:typename:std::string	access:private
sylar::Logger::m_root	sylar/sylar/log.h	/^    Logger::ptr m_root;$/;"	m	class:sylar::Logger	typeref:typename:Logger::ptr	access:private
sylar::Logger::ptr	sylar/sylar/log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:sylar::Logger	typeref:typename:std::shared_ptr<Logger>	access:public
sylar::Logger::setFormatter	sylar/sylar/log.cc	/^void Logger::setFormatter(LogFormatter::ptr val) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogFormatter::ptr val)
sylar::Logger::setFormatter	sylar/sylar/log.cc	/^void Logger::setFormatter(const std::string& val) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(const std::string & val)
sylar::Logger::setFormatter	sylar/sylar/log.h	/^    void setFormatter(LogFormatter::ptr val);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogFormatter::ptr val)
sylar::Logger::setFormatter	sylar/sylar/log.h	/^    void setFormatter(const std::string& val);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(const std::string & val)
sylar::Logger::setLevel	sylar/sylar/log.h	/^    void setLevel(LogLevel::Level val) { m_level = val;}$/;"	f	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogLevel::Level val)
sylar::Logger::toYamlString	sylar/sylar/log.cc	/^std::string Logger::toYamlString() {$/;"	f	class:sylar::Logger	typeref:typename:std::string	signature:()
sylar::Logger::toYamlString	sylar/sylar/log.h	/^    std::string toYamlString();$/;"	p	class:sylar::Logger	typeref:typename:std::string	access:public	signature:()
sylar::Logger::warn	sylar/sylar/log.cc	/^void Logger::warn(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
sylar::Logger::warn	sylar/sylar/log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
sylar::LoggerManager	sylar/sylar/log.h	/^class LoggerManager {$/;"	c	namespace:sylar
sylar::LoggerManager::LoggerManager	sylar/sylar/log.cc	/^LoggerManager::LoggerManager() {$/;"	f	class:sylar::LoggerManager	signature:()
sylar::LoggerManager::LoggerManager	sylar/sylar/log.h	/^    LoggerManager();$/;"	p	class:sylar::LoggerManager	access:public	signature:()
sylar::LoggerManager::MutexType	sylar/sylar/log.h	/^    typedef Spinlock MutexType;$/;"	t	class:sylar::LoggerManager	typeref:typename:Spinlock	access:public
sylar::LoggerManager::getLogger	sylar/sylar/log.cc	/^Logger::ptr LoggerManager::getLogger(const std::string& name) {$/;"	f	class:sylar::LoggerManager	typeref:typename:Logger::ptr	signature:(const std::string & name)
sylar::LoggerManager::getLogger	sylar/sylar/log.h	/^    Logger::ptr getLogger(const std::string& name);$/;"	p	class:sylar::LoggerManager	typeref:typename:Logger::ptr	access:public	signature:(const std::string & name)
sylar::LoggerManager::getRoot	sylar/sylar/log.h	/^    Logger::ptr getRoot() const { return m_root;}$/;"	f	class:sylar::LoggerManager	typeref:typename:Logger::ptr	access:public	signature:() const
sylar::LoggerManager::init	sylar/sylar/log.cc	/^void LoggerManager::init() {$/;"	f	class:sylar::LoggerManager	typeref:typename:void	signature:()
sylar::LoggerManager::init	sylar/sylar/log.h	/^    void init();$/;"	p	class:sylar::LoggerManager	typeref:typename:void	access:public	signature:()
sylar::LoggerManager::m_loggers	sylar/sylar/log.h	/^    std::map<std::string, Logger::ptr> m_loggers;$/;"	m	class:sylar::LoggerManager	typeref:typename:std::map<std::string,Logger::ptr>	access:private
sylar::LoggerManager::m_mutex	sylar/sylar/log.h	/^    MutexType m_mutex;$/;"	m	class:sylar::LoggerManager	typeref:typename:MutexType	access:private
sylar::LoggerManager::m_root	sylar/sylar/log.h	/^    Logger::ptr m_root;$/;"	m	class:sylar::LoggerManager	typeref:typename:Logger::ptr	access:private
sylar::LoggerManager::toYamlString	sylar/sylar/log.cc	/^std::string LoggerManager::toYamlString() {$/;"	f	class:sylar::LoggerManager	typeref:typename:std::string	signature:()
sylar::LoggerManager::toYamlString	sylar/sylar/log.h	/^    std::string toYamlString();$/;"	p	class:sylar::LoggerManager	typeref:typename:std::string	access:public	signature:()
sylar::LoggerMgr	sylar/sylar/log.h	/^typedef sylar::Singleton<LoggerManager> LoggerMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<LoggerManager>
sylar::MAX_PATH_LEN	sylar/sylar/address.cc	/^static const size_t MAX_PATH_LEN = sizeof(((sockaddr_un*)0)->sun_path) - 1;$/;"	v	namespace:sylar	typeref:typename:const size_t	file:
sylar::MallocStackAllocator	sylar/sylar/fiber.cc	/^class MallocStackAllocator {$/;"	c	namespace:sylar	file:
sylar::MallocStackAllocator::Alloc	sylar/sylar/fiber.cc	/^    static void* Alloc(size_t size) {$/;"	f	class:sylar::MallocStackAllocator	typeref:typename:void *	file:	access:public	signature:(size_t size)
sylar::MallocStackAllocator::Dealloc	sylar/sylar/fiber.cc	/^    static void Dealloc(void* vp, size_t size) {$/;"	f	class:sylar::MallocStackAllocator	typeref:typename:void	file:	access:public	signature:(void * vp,size_t size)
sylar::Message	sylar/sylar/protocol.h	/^class Message {$/;"	c	namespace:sylar
sylar::Message::MessageType	sylar/sylar/protocol.h	/^    enum MessageType {$/;"	g	class:sylar::Message	access:public
sylar::Message::NOTIFY	sylar/sylar/protocol.h	/^        NOTIFY = 3$/;"	e	enum:sylar::Message::MessageType	access:public
sylar::Message::REQUEST	sylar/sylar/protocol.h	/^        REQUEST = 1,$/;"	e	enum:sylar::Message::MessageType	access:public
sylar::Message::RESPONSE	sylar/sylar/protocol.h	/^        RESPONSE = 2,$/;"	e	enum:sylar::Message::MessageType	access:public
sylar::Message::getName	sylar/sylar/protocol.h	/^    virtual const std::string& getName() const = 0;$/;"	p	class:sylar::Message	typeref:typename:const std::string &	access:public	signature:() const
sylar::Message::getType	sylar/sylar/protocol.h	/^    virtual int32_t getType() const = 0;$/;"	p	class:sylar::Message	typeref:typename:int32_t	access:public	signature:() const
sylar::Message::parseFromByteArray	sylar/sylar/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) = 0;$/;"	p	class:sylar::Message	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::Message::ptr	sylar/sylar/protocol.h	/^    typedef std::shared_ptr<Message> ptr;$/;"	t	class:sylar::Message	typeref:typename:std::shared_ptr<Message>	access:public
sylar::Message::serializeToByteArray	sylar/sylar/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) = 0;$/;"	p	class:sylar::Message	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::Message::toByteArray	sylar/sylar/protocol.cc	/^ByteArray::ptr Message::toByteArray() {$/;"	f	class:sylar::Message	typeref:typename:ByteArray::ptr	signature:()
sylar::Message::toByteArray	sylar/sylar/protocol.h	/^    virtual ByteArray::ptr toByteArray();$/;"	p	class:sylar::Message	typeref:typename:ByteArray::ptr	access:public	signature:()
sylar::Message::toString	sylar/sylar/protocol.h	/^    virtual std::string toString() const = 0;$/;"	p	class:sylar::Message	typeref:typename:std::string	access:public	signature:() const
sylar::Message::~Message	sylar/sylar/protocol.h	/^    virtual ~Message() {}$/;"	f	class:sylar::Message	access:public	signature:()
sylar::MessageDecoder	sylar/sylar/protocol.h	/^class MessageDecoder {$/;"	c	namespace:sylar
sylar::MessageDecoder::parseFrom	sylar/sylar/protocol.h	/^    virtual Message::ptr parseFrom(Stream::ptr stream) = 0;$/;"	p	class:sylar::MessageDecoder	typeref:typename:Message::ptr	access:public	signature:(Stream::ptr stream)
sylar::MessageDecoder::ptr	sylar/sylar/protocol.h	/^    typedef std::shared_ptr<MessageDecoder> ptr;$/;"	t	class:sylar::MessageDecoder	typeref:typename:std::shared_ptr<MessageDecoder>	access:public
sylar::MessageDecoder::serializeTo	sylar/sylar/protocol.h	/^    virtual int32_t serializeTo(Stream::ptr stream, Message::ptr msg) = 0;$/;"	p	class:sylar::MessageDecoder	typeref:typename:int32_t	access:public	signature:(Stream::ptr stream,Message::ptr msg)
sylar::MessageDecoder::~MessageDecoder	sylar/sylar/protocol.h	/^    virtual ~MessageDecoder() {}$/;"	f	class:sylar::MessageDecoder	access:public	signature:()
sylar::MessageFormatItem	sylar/sylar/log.cc	/^class MessageFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::MessageFormatItem::MessageFormatItem	sylar/sylar/log.cc	/^    MessageFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::MessageFormatItem	file:	access:public	signature:(const std::string & str="")
sylar::MessageFormatItem::format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::MessageFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::Module	sylar/sylar/module.h	/^class Module {$/;"	c	namespace:sylar
sylar::Module::MODULE	sylar/sylar/module.h	/^        MODULE = 0,$/;"	e	enum:sylar::Module::Type	access:public
sylar::Module::Module	sylar/sylar/module.cc	/^Module::Module(const std::string& name$/;"	f	class:sylar::Module	signature:(const std::string & name,const std::string & version,const std::string & filename,uint32_t type)
sylar::Module::Module	sylar/sylar/module.h	/^    Module(const std::string& name$/;"	p	class:sylar::Module	access:public	signature:(const std::string & name,const std::string & version,const std::string & filename,uint32_t type=MODULE)
sylar::Module::ROCK	sylar/sylar/module.h	/^        ROCK = 1,$/;"	e	enum:sylar::Module::Type	access:public
sylar::Module::Type	sylar/sylar/module.h	/^    enum Type {$/;"	g	class:sylar::Module	access:public
sylar::Module::getFilename	sylar/sylar/module.h	/^    const std::string& getFilename() const { return m_filename;}$/;"	f	class:sylar::Module	typeref:typename:const std::string &	access:public	signature:() const
sylar::Module::getId	sylar/sylar/module.h	/^    const std::string& getId() const { return m_id;}$/;"	f	class:sylar::Module	typeref:typename:const std::string &	access:public	signature:() const
sylar::Module::getName	sylar/sylar/module.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::Module	typeref:typename:const std::string &	access:public	signature:() const
sylar::Module::getType	sylar/sylar/module.h	/^    uint32_t getType() const { return m_type;}$/;"	f	class:sylar::Module	typeref:typename:uint32_t	access:public	signature:() const
sylar::Module::getVersion	sylar/sylar/module.h	/^    const std::string& getVersion() const { return m_version;}$/;"	f	class:sylar::Module	typeref:typename:const std::string &	access:public	signature:() const
sylar::Module::handleNotify	sylar/sylar/module.cc	/^bool Module::handleNotify(sylar::Message::ptr notify$/;"	f	class:sylar::Module	typeref:typename:bool	signature:(sylar::Message::ptr notify,sylar::Stream::ptr stream)
sylar::Module::handleNotify	sylar/sylar/module.h	/^    virtual bool handleNotify(sylar::Message::ptr notify$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:(sylar::Message::ptr notify,sylar::Stream::ptr stream)
sylar::Module::handleRequest	sylar/sylar/module.cc	/^bool Module::handleRequest(sylar::Message::ptr req$/;"	f	class:sylar::Module	typeref:typename:bool	signature:(sylar::Message::ptr req,sylar::Message::ptr rsp,sylar::Stream::ptr stream)
sylar::Module::handleRequest	sylar/sylar/module.h	/^    virtual bool handleRequest(sylar::Message::ptr req$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:(sylar::Message::ptr req,sylar::Message::ptr rsp,sylar::Stream::ptr stream)
sylar::Module::m_filename	sylar/sylar/module.h	/^    std::string m_filename;$/;"	m	class:sylar::Module	typeref:typename:std::string	access:protected
sylar::Module::m_id	sylar/sylar/module.h	/^    std::string m_id;$/;"	m	class:sylar::Module	typeref:typename:std::string	access:protected
sylar::Module::m_name	sylar/sylar/module.h	/^    std::string m_name;$/;"	m	class:sylar::Module	typeref:typename:std::string	access:protected
sylar::Module::m_type	sylar/sylar/module.h	/^    uint32_t m_type;$/;"	m	class:sylar::Module	typeref:typename:uint32_t	access:protected
sylar::Module::m_version	sylar/sylar/module.h	/^    std::string m_version;$/;"	m	class:sylar::Module	typeref:typename:std::string	access:protected
sylar::Module::onAfterArgsParse	sylar/sylar/module.cc	/^void Module::onAfterArgsParse(int argc, char** argv) {$/;"	f	class:sylar::Module	typeref:typename:void	signature:(int argc,char ** argv)
sylar::Module::onAfterArgsParse	sylar/sylar/module.h	/^    virtual void onAfterArgsParse(int argc, char** argv);$/;"	p	class:sylar::Module	typeref:typename:void	access:public	signature:(int argc,char ** argv)
sylar::Module::onBeforeArgsParse	sylar/sylar/module.cc	/^void Module::onBeforeArgsParse(int argc, char** argv) {$/;"	f	class:sylar::Module	typeref:typename:void	signature:(int argc,char ** argv)
sylar::Module::onBeforeArgsParse	sylar/sylar/module.h	/^    virtual void onBeforeArgsParse(int argc, char** argv);$/;"	p	class:sylar::Module	typeref:typename:void	access:public	signature:(int argc,char ** argv)
sylar::Module::onConnect	sylar/sylar/module.cc	/^bool Module::onConnect(sylar::Stream::ptr stream) {$/;"	f	class:sylar::Module	typeref:typename:bool	signature:(sylar::Stream::ptr stream)
sylar::Module::onConnect	sylar/sylar/module.h	/^    virtual bool onConnect(sylar::Stream::ptr stream);$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:(sylar::Stream::ptr stream)
sylar::Module::onDisconnect	sylar/sylar/module.cc	/^bool Module::onDisconnect(sylar::Stream::ptr stream) {$/;"	f	class:sylar::Module	typeref:typename:bool	signature:(sylar::Stream::ptr stream)
sylar::Module::onDisconnect	sylar/sylar/module.h	/^    virtual bool onDisconnect(sylar::Stream::ptr stream);$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:(sylar::Stream::ptr stream)
sylar::Module::onLoad	sylar/sylar/module.cc	/^bool Module::onLoad() {$/;"	f	class:sylar::Module	typeref:typename:bool	signature:()
sylar::Module::onLoad	sylar/sylar/module.h	/^    virtual bool onLoad();$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:()
sylar::Module::onServerReady	sylar/sylar/module.cc	/^bool Module::onServerReady() {$/;"	f	class:sylar::Module	typeref:typename:bool	signature:()
sylar::Module::onServerReady	sylar/sylar/module.h	/^    virtual bool onServerReady();$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:()
sylar::Module::onServerUp	sylar/sylar/module.cc	/^bool Module::onServerUp() {$/;"	f	class:sylar::Module	typeref:typename:bool	signature:()
sylar::Module::onServerUp	sylar/sylar/module.h	/^    virtual bool onServerUp();$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:()
sylar::Module::onUnload	sylar/sylar/module.cc	/^bool Module::onUnload() {$/;"	f	class:sylar::Module	typeref:typename:bool	signature:()
sylar::Module::onUnload	sylar/sylar/module.h	/^    virtual bool onUnload();$/;"	p	class:sylar::Module	typeref:typename:bool	access:public	signature:()
sylar::Module::ptr	sylar/sylar/module.h	/^    typedef std::shared_ptr<Module> ptr;$/;"	t	class:sylar::Module	typeref:typename:std::shared_ptr<Module>	access:public
sylar::Module::registerService	sylar/sylar/module.cc	/^void Module::registerService(const std::string& server_type,$/;"	f	class:sylar::Module	typeref:typename:void	signature:(const std::string & server_type,const std::string & domain,const std::string & service)
sylar::Module::registerService	sylar/sylar/module.h	/^    void registerService(const std::string& server_type,$/;"	p	class:sylar::Module	typeref:typename:void	access:public	signature:(const std::string & server_type,const std::string & domain,const std::string & service)
sylar::Module::setFilename	sylar/sylar/module.h	/^    void setFilename(const std::string& v) { m_filename = v;}$/;"	f	class:sylar::Module	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::Module::statusString	sylar/sylar/module.cc	/^std::string Module::statusString() {$/;"	f	class:sylar::Module	typeref:typename:std::string	signature:()
sylar::Module::statusString	sylar/sylar/module.h	/^    virtual std::string statusString();$/;"	p	class:sylar::Module	typeref:typename:std::string	access:public	signature:()
sylar::Module::~Module	sylar/sylar/module.h	/^    virtual ~Module() {}$/;"	f	class:sylar::Module	access:public	signature:()
sylar::ModuleCloser	sylar/sylar/library.cc	/^class ModuleCloser {$/;"	c	namespace:sylar	file:
sylar::ModuleCloser::ModuleCloser	sylar/sylar/library.cc	/^    ModuleCloser(void* handle, destory_module d)$/;"	f	class:sylar::ModuleCloser	file:	access:public	signature:(void * handle,destory_module d)
sylar::ModuleCloser::m_destory	sylar/sylar/library.cc	/^    destory_module m_destory;$/;"	m	class:sylar::ModuleCloser	typeref:typename:destory_module	file:	access:private
sylar::ModuleCloser::m_handle	sylar/sylar/library.cc	/^    void* m_handle;$/;"	m	class:sylar::ModuleCloser	typeref:typename:void *	file:	access:private
sylar::ModuleCloser::operator ()	sylar/sylar/library.cc	/^    void operator()(Module* module) {$/;"	f	class:sylar::ModuleCloser	typeref:typename:void	file:	access:public	signature:(Module * module)
sylar::ModuleManager	sylar/sylar/module.h	/^class ModuleManager {$/;"	c	namespace:sylar
sylar::ModuleManager::ModuleManager	sylar/sylar/module.cc	/^ModuleManager::ModuleManager() {$/;"	f	class:sylar::ModuleManager	signature:()
sylar::ModuleManager::ModuleManager	sylar/sylar/module.h	/^    ModuleManager();$/;"	p	class:sylar::ModuleManager	access:public	signature:()
sylar::ModuleManager::RWMutexType	sylar/sylar/module.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::ModuleManager	typeref:typename:RWMutex	access:public
sylar::ModuleManager::add	sylar/sylar/module.cc	/^void ModuleManager::add(Module::ptr m) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(Module::ptr m)
sylar::ModuleManager::add	sylar/sylar/module.h	/^    void add(Module::ptr m);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(Module::ptr m)
sylar::ModuleManager::del	sylar/sylar/module.cc	/^void ModuleManager::del(const std::string& name) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(const std::string & name)
sylar::ModuleManager::del	sylar/sylar/module.h	/^    void del(const std::string& name);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(const std::string & name)
sylar::ModuleManager::delAll	sylar/sylar/module.cc	/^void ModuleManager::delAll() {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:()
sylar::ModuleManager::delAll	sylar/sylar/module.h	/^    void delAll();$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:()
sylar::ModuleManager::foreach	sylar/sylar/module.cc	/^void ModuleManager::foreach(uint32_t type, std::function<void(Module::ptr)> cb) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(uint32_t type,std::function<void (Module::ptr)> cb)
sylar::ModuleManager::foreach	sylar/sylar/module.h	/^    void foreach(uint32_t type, std::function<void(Module::ptr)> cb);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(uint32_t type,std::function<void (Module::ptr)> cb)
sylar::ModuleManager::get	sylar/sylar/module.cc	/^Module::ptr ModuleManager::get(const std::string& name) {$/;"	f	class:sylar::ModuleManager	typeref:typename:Module::ptr	signature:(const std::string & name)
sylar::ModuleManager::get	sylar/sylar/module.h	/^    Module::ptr get(const std::string& name);$/;"	p	class:sylar::ModuleManager	typeref:typename:Module::ptr	access:public	signature:(const std::string & name)
sylar::ModuleManager::init	sylar/sylar/module.cc	/^void ModuleManager::init() {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:()
sylar::ModuleManager::init	sylar/sylar/module.h	/^    void init();$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:()
sylar::ModuleManager::initModule	sylar/sylar/module.cc	/^void ModuleManager::initModule(const std::string& path) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(const std::string & path)
sylar::ModuleManager::initModule	sylar/sylar/module.h	/^    void initModule(const std::string& path);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:private	signature:(const std::string & path)
sylar::ModuleManager::listAll	sylar/sylar/module.cc	/^void ModuleManager::listAll(std::vector<Module::ptr>& ms) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(std::vector<Module::ptr> & ms)
sylar::ModuleManager::listAll	sylar/sylar/module.h	/^    void listAll(std::vector<Module::ptr>& ms);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(std::vector<Module::ptr> & ms)
sylar::ModuleManager::listByType	sylar/sylar/module.cc	/^void ModuleManager::listByType(uint32_t type, std::vector<Module::ptr>& ms) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(uint32_t type,std::vector<Module::ptr> & ms)
sylar::ModuleManager::listByType	sylar/sylar/module.h	/^    void listByType(uint32_t type, std::vector<Module::ptr>& ms);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(uint32_t type,std::vector<Module::ptr> & ms)
sylar::ModuleManager::m_modules	sylar/sylar/module.h	/^    std::unordered_map<std::string, Module::ptr> m_modules;$/;"	m	class:sylar::ModuleManager	typeref:typename:std::unordered_map<std::string,Module::ptr>	access:private
sylar::ModuleManager::m_mutex	sylar/sylar/module.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::ModuleManager	typeref:typename:RWMutexType	access:private
sylar::ModuleManager::m_type2Modules	sylar/sylar/module.h	/^        ,std::unordered_map<std::string, Module::ptr> > m_type2Modules;$/;"	m	class:sylar::ModuleManager	typeref:typename:std::unordered_map<uint32_t,std::unordered_map<std::string,Module::ptr>>	access:private
sylar::ModuleManager::onConnect	sylar/sylar/module.cc	/^void ModuleManager::onConnect(Stream::ptr stream) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(Stream::ptr stream)
sylar::ModuleManager::onConnect	sylar/sylar/module.h	/^    void onConnect(Stream::ptr stream);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(Stream::ptr stream)
sylar::ModuleManager::onDisconnect	sylar/sylar/module.cc	/^void ModuleManager::onDisconnect(Stream::ptr stream) {$/;"	f	class:sylar::ModuleManager	typeref:typename:void	signature:(Stream::ptr stream)
sylar::ModuleManager::onDisconnect	sylar/sylar/module.h	/^    void onDisconnect(Stream::ptr stream);$/;"	p	class:sylar::ModuleManager	typeref:typename:void	access:public	signature:(Stream::ptr stream)
sylar::ModuleMgr	sylar/sylar/module.h	/^typedef sylar::Singleton<ModuleManager> ModuleMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<ModuleManager>
sylar::Mutex	sylar/sylar/mutex.h	/^class Mutex : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
sylar::Mutex::Lock	sylar/sylar/mutex.h	/^    typedef ScopedLockImpl<Mutex> Lock;$/;"	t	class:sylar::Mutex	typeref:typename:ScopedLockImpl<Mutex>	access:public
sylar::Mutex::Mutex	sylar/sylar/mutex.h	/^    Mutex() {$/;"	f	class:sylar::Mutex	access:public	signature:()
sylar::Mutex::lock	sylar/sylar/mutex.h	/^    void lock() {$/;"	f	class:sylar::Mutex	typeref:typename:void	access:public	signature:()
sylar::Mutex::m_mutex	sylar/sylar/mutex.h	/^    pthread_mutex_t m_mutex;$/;"	m	class:sylar::Mutex	typeref:typename:pthread_mutex_t	access:private
sylar::Mutex::unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	class:sylar::Mutex	typeref:typename:void	access:public	signature:()
sylar::Mutex::~Mutex	sylar/sylar/mutex.h	/^    ~Mutex() {$/;"	f	class:sylar::Mutex	access:public	signature:()
sylar::MySQL	sylar/sylar/db/mysql.h	/^class MySQL : public IDB$/;"	c	namespace:sylar	inherits:IDB,std::enable_shared_from_this<MySQL>
sylar::MySQL::MySQL	sylar/sylar/db/mysql.cc	/^MySQL::MySQL(const std::map<std::string, std::string>& args)$/;"	f	class:sylar::MySQL	signature:(const std::map<std::string,std::string> & args)
sylar::MySQL::MySQL	sylar/sylar/db/mysql.h	/^    MySQL(const std::map<std::string, std::string>& args);$/;"	p	class:sylar::MySQL	access:public	signature:(const std::map<std::string,std::string> & args)
sylar::MySQL::cmd	sylar/sylar/db/mysql.cc	/^const char* MySQL::cmd() {$/;"	f	class:sylar::MySQL	typeref:typename:const char *	signature:()
sylar::MySQL::cmd	sylar/sylar/db/mysql.h	/^    const char* cmd();$/;"	p	class:sylar::MySQL	typeref:typename:const char *	access:public	signature:()
sylar::MySQL::connect	sylar/sylar/db/mysql.cc	/^bool MySQL::connect() {$/;"	f	class:sylar::MySQL	typeref:typename:bool	signature:()
sylar::MySQL::connect	sylar/sylar/db/mysql.h	/^    bool connect();$/;"	p	class:sylar::MySQL	typeref:typename:bool	access:public	signature:()
sylar::MySQL::execStmt	sylar/sylar/db/mysql.h	/^    int execStmt(const char* stmt, Args&&... args);$/;"	p	class:sylar::MySQL	typeref:typename:int	access:public	signature:(const char * stmt,Args &&...args)
sylar::MySQL::execStmt	sylar/sylar/db/mysql.h	/^int MySQL::execStmt(const char* stmt, Args&&... args) {$/;"	f	class:sylar::MySQL	typeref:typename:int	signature:(const char * stmt,Args &&...args)
sylar::MySQL::execute	sylar/sylar/db/mysql.cc	/^int MySQL::execute(const char* format, ...) {$/;"	f	class:sylar::MySQL	typeref:typename:int	signature:(const char * format,...)
sylar::MySQL::execute	sylar/sylar/db/mysql.cc	/^int MySQL::execute(const char* format, va_list ap) {$/;"	f	class:sylar::MySQL	typeref:typename:int	signature:(const char * format,va_list ap)
sylar::MySQL::execute	sylar/sylar/db/mysql.cc	/^int MySQL::execute(const std::string& sql) {$/;"	f	class:sylar::MySQL	typeref:typename:int	signature:(const std::string & sql)
sylar::MySQL::execute	sylar/sylar/db/mysql.h	/^    int execute(const char* format, va_list ap);$/;"	p	class:sylar::MySQL	typeref:typename:int	access:public	signature:(const char * format,va_list ap)
sylar::MySQL::execute	sylar/sylar/db/mysql.h	/^    virtual int execute(const char* format, ...) override;$/;"	p	class:sylar::MySQL	typeref:typename:int	access:public	signature:(const char * format,...)
sylar::MySQL::execute	sylar/sylar/db/mysql.h	/^    virtual int execute(const std::string& sql) override;$/;"	p	class:sylar::MySQL	typeref:typename:int	access:public	signature:(const std::string & sql)
sylar::MySQL::getAffectedRows	sylar/sylar/db/mysql.cc	/^uint64_t MySQL::getAffectedRows() {$/;"	f	class:sylar::MySQL	typeref:typename:uint64_t	signature:()
sylar::MySQL::getAffectedRows	sylar/sylar/db/mysql.h	/^    uint64_t getAffectedRows();$/;"	p	class:sylar::MySQL	typeref:typename:uint64_t	access:public	signature:()
sylar::MySQL::getErrStr	sylar/sylar/db/mysql.cc	/^std::string MySQL::getErrStr() {$/;"	f	class:sylar::MySQL	typeref:typename:std::string	signature:()
sylar::MySQL::getErrStr	sylar/sylar/db/mysql.h	/^    std::string getErrStr() override;$/;"	p	class:sylar::MySQL	typeref:typename:std::string	access:public	signature:()
sylar::MySQL::getErrno	sylar/sylar/db/mysql.cc	/^int MySQL::getErrno() {$/;"	f	class:sylar::MySQL	typeref:typename:int	signature:()
sylar::MySQL::getErrno	sylar/sylar/db/mysql.h	/^    int getErrno() override;$/;"	p	class:sylar::MySQL	typeref:typename:int	access:public	signature:()
sylar::MySQL::getInsertId	sylar/sylar/db/mysql.cc	/^uint64_t MySQL::getInsertId() {$/;"	f	class:sylar::MySQL	typeref:typename:uint64_t	signature:()
sylar::MySQL::getInsertId	sylar/sylar/db/mysql.h	/^    uint64_t getInsertId();$/;"	p	class:sylar::MySQL	typeref:typename:uint64_t	access:public	signature:()
sylar::MySQL::getLastInsertId	sylar/sylar/db/mysql.cc	/^int64_t MySQL::getLastInsertId() {$/;"	f	class:sylar::MySQL	typeref:typename:int64_t	signature:()
sylar::MySQL::getLastInsertId	sylar/sylar/db/mysql.h	/^    int64_t getLastInsertId() override;$/;"	p	class:sylar::MySQL	typeref:typename:int64_t	access:public	signature:()
sylar::MySQL::getMySQL	sylar/sylar/db/mysql.cc	/^std::shared_ptr<MySQL> MySQL::getMySQL() {$/;"	f	class:sylar::MySQL	typeref:typename:std::shared_ptr<MySQL>	signature:()
sylar::MySQL::getMySQL	sylar/sylar/db/mysql.h	/^    std::shared_ptr<MySQL> getMySQL();$/;"	p	class:sylar::MySQL	typeref:typename:std::shared_ptr<MySQL>	access:public	signature:()
sylar::MySQL::getRaw	sylar/sylar/db/mysql.cc	/^std::shared_ptr<MYSQL> MySQL::getRaw() {$/;"	f	class:sylar::MySQL	typeref:typename:std::shared_ptr<MYSQL>	signature:()
sylar::MySQL::getRaw	sylar/sylar/db/mysql.h	/^    std::shared_ptr<MYSQL> getRaw();$/;"	p	class:sylar::MySQL	typeref:typename:std::shared_ptr<MYSQL>	access:public	signature:()
sylar::MySQL::isNeedCheck	sylar/sylar/db/mysql.cc	/^bool MySQL::isNeedCheck() {$/;"	f	class:sylar::MySQL	typeref:typename:bool	signature:()
sylar::MySQL::isNeedCheck	sylar/sylar/db/mysql.h	/^    bool isNeedCheck();$/;"	p	class:sylar::MySQL	typeref:typename:bool	access:private	signature:()
sylar::MySQL::m_cmd	sylar/sylar/db/mysql.h	/^    std::string m_cmd;$/;"	m	class:sylar::MySQL	typeref:typename:std::string	access:private
sylar::MySQL::m_dbname	sylar/sylar/db/mysql.h	/^    std::string m_dbname;$/;"	m	class:sylar::MySQL	typeref:typename:std::string	access:private
sylar::MySQL::m_hasError	sylar/sylar/db/mysql.h	/^    bool m_hasError;$/;"	m	class:sylar::MySQL	typeref:typename:bool	access:private
sylar::MySQL::m_lastUsedTime	sylar/sylar/db/mysql.h	/^    uint64_t m_lastUsedTime;$/;"	m	class:sylar::MySQL	typeref:typename:uint64_t	access:private
sylar::MySQL::m_mysql	sylar/sylar/db/mysql.h	/^    std::shared_ptr<MYSQL> m_mysql;$/;"	m	class:sylar::MySQL	typeref:typename:std::shared_ptr<MYSQL>	access:private
sylar::MySQL::m_params	sylar/sylar/db/mysql.h	/^    std::map<std::string, std::string> m_params;$/;"	m	class:sylar::MySQL	typeref:typename:std::map<std::string,std::string>	access:private
sylar::MySQL::m_poolSize	sylar/sylar/db/mysql.h	/^    int32_t m_poolSize;$/;"	m	class:sylar::MySQL	typeref:typename:int32_t	access:private
sylar::MySQL::openTransaction	sylar/sylar/db/mysql.cc	/^ITransaction::ptr MySQL::openTransaction(bool auto_commit) {$/;"	f	class:sylar::MySQL	typeref:typename:ITransaction::ptr	signature:(bool auto_commit)
sylar::MySQL::openTransaction	sylar/sylar/db/mysql.h	/^    ITransaction::ptr openTransaction(bool auto_commit) override;$/;"	p	class:sylar::MySQL	typeref:typename:ITransaction::ptr	access:public	signature:(bool auto_commit)
sylar::MySQL::ping	sylar/sylar/db/mysql.cc	/^bool MySQL::ping() {$/;"	f	class:sylar::MySQL	typeref:typename:bool	signature:()
sylar::MySQL::ping	sylar/sylar/db/mysql.h	/^    bool ping();$/;"	p	class:sylar::MySQL	typeref:typename:bool	access:public	signature:()
sylar::MySQL::prepare	sylar/sylar/db/mysql.cc	/^sylar::IStmt::ptr MySQL::prepare(const std::string& sql) {$/;"	f	class:sylar::MySQL	typeref:typename:sylar::IStmt::ptr	signature:(const std::string & sql)
sylar::MySQL::prepare	sylar/sylar/db/mysql.h	/^    sylar::IStmt::ptr prepare(const std::string& sql) override;$/;"	p	class:sylar::MySQL	typeref:typename:sylar::IStmt::ptr	access:public	signature:(const std::string & sql)
sylar::MySQL::ptr	sylar/sylar/db/mysql.h	/^    typedef std::shared_ptr<MySQL> ptr;$/;"	t	class:sylar::MySQL	typeref:typename:std::shared_ptr<MySQL>	access:public
sylar::MySQL::query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQL::query(const char* format, ...) {$/;"	f	class:sylar::MySQL	typeref:typename:ISQLData::ptr	signature:(const char * format,...)
sylar::MySQL::query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQL::query(const char* format, va_list ap) {$/;"	f	class:sylar::MySQL	typeref:typename:ISQLData::ptr	signature:(const char * format,va_list ap)
sylar::MySQL::query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQL::query(const std::string& sql) {$/;"	f	class:sylar::MySQL	typeref:typename:ISQLData::ptr	signature:(const std::string & sql)
sylar::MySQL::query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query(const char* format, ...) override;$/;"	p	class:sylar::MySQL	typeref:typename:ISQLData::ptr	access:public	signature:(const char * format,...)
sylar::MySQL::query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query(const char* format, va_list ap); $/;"	p	class:sylar::MySQL	typeref:typename:ISQLData::ptr	access:public	signature:(const char * format,va_list ap)
sylar::MySQL::query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query(const std::string& sql) override;$/;"	p	class:sylar::MySQL	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & sql)
sylar::MySQL::queryStmt	sylar/sylar/db/mysql.h	/^    ISQLData::ptr queryStmt(const char* stmt, Args&&... args);$/;"	p	class:sylar::MySQL	typeref:typename:ISQLData::ptr	access:public	signature:(const char * stmt,Args &&...args)
sylar::MySQL::queryStmt	sylar/sylar/db/mysql.h	/^ISQLData::ptr MySQL::queryStmt(const char* stmt, Args&&... args) {$/;"	f	class:sylar::MySQL	typeref:typename:ISQLData::ptr	signature:(const char * stmt,Args &&...args)
sylar::MySQL::use	sylar/sylar/db/mysql.cc	/^bool MySQL::use(const std::string& dbname) {$/;"	f	class:sylar::MySQL	typeref:typename:bool	signature:(const std::string & dbname)
sylar::MySQL::use	sylar/sylar/db/mysql.h	/^    bool use(const std::string& dbname);$/;"	p	class:sylar::MySQL	typeref:typename:bool	access:public	signature:(const std::string & dbname)
sylar::MySQLManager	sylar/sylar/db/mysql.h	/^class MySQLManager {$/;"	c	namespace:sylar
sylar::MySQLManager::MutexType	sylar/sylar/db/mysql.h	/^    typedef sylar::Mutex MutexType;$/;"	t	class:sylar::MySQLManager	typeref:typename:sylar::Mutex	access:public
sylar::MySQLManager::MySQLManager	sylar/sylar/db/mysql.cc	/^MySQLManager::MySQLManager()$/;"	f	class:sylar::MySQLManager	signature:()
sylar::MySQLManager::MySQLManager	sylar/sylar/db/mysql.h	/^    MySQLManager();$/;"	p	class:sylar::MySQLManager	access:public	signature:()
sylar::MySQLManager::checkConnection	sylar/sylar/db/mysql.cc	/^void MySQLManager::checkConnection(int sec) {$/;"	f	class:sylar::MySQLManager	typeref:typename:void	signature:(int sec)
sylar::MySQLManager::checkConnection	sylar/sylar/db/mysql.h	/^    void checkConnection(int sec = 30);$/;"	p	class:sylar::MySQLManager	typeref:typename:void	access:public	signature:(int sec=30)
sylar::MySQLManager::execute	sylar/sylar/db/mysql.cc	/^int MySQLManager::execute(const std::string& name, const char* format, ...) {$/;"	f	class:sylar::MySQLManager	typeref:typename:int	signature:(const std::string & name,const char * format,...)
sylar::MySQLManager::execute	sylar/sylar/db/mysql.cc	/^int MySQLManager::execute(const std::string& name, const char* format, va_list ap) {$/;"	f	class:sylar::MySQLManager	typeref:typename:int	signature:(const std::string & name,const char * format,va_list ap)
sylar::MySQLManager::execute	sylar/sylar/db/mysql.cc	/^int MySQLManager::execute(const std::string& name, const std::string& sql) {$/;"	f	class:sylar::MySQLManager	typeref:typename:int	signature:(const std::string & name,const std::string & sql)
sylar::MySQLManager::execute	sylar/sylar/db/mysql.h	/^    int execute(const std::string& name, const char* format, ...);$/;"	p	class:sylar::MySQLManager	typeref:typename:int	access:public	signature:(const std::string & name,const char * format,...)
sylar::MySQLManager::execute	sylar/sylar/db/mysql.h	/^    int execute(const std::string& name, const char* format, va_list ap);$/;"	p	class:sylar::MySQLManager	typeref:typename:int	access:public	signature:(const std::string & name,const char * format,va_list ap)
sylar::MySQLManager::execute	sylar/sylar/db/mysql.h	/^    int execute(const std::string& name, const std::string& sql);$/;"	p	class:sylar::MySQLManager	typeref:typename:int	access:public	signature:(const std::string & name,const std::string & sql)
sylar::MySQLManager::freeMySQL	sylar/sylar/db/mysql.cc	/^void MySQLManager::freeMySQL(const std::string& name, MySQL* m) {$/;"	f	class:sylar::MySQLManager	typeref:typename:void	signature:(const std::string & name,MySQL * m)
sylar::MySQLManager::freeMySQL	sylar/sylar/db/mysql.h	/^    void freeMySQL(const std::string& name, MySQL* m);$/;"	p	class:sylar::MySQLManager	typeref:typename:void	access:private	signature:(const std::string & name,MySQL * m)
sylar::MySQLManager::get	sylar/sylar/db/mysql.cc	/^MySQL::ptr MySQLManager::get(const std::string& name) {$/;"	f	class:sylar::MySQLManager	typeref:typename:MySQL::ptr	signature:(const std::string & name)
sylar::MySQLManager::get	sylar/sylar/db/mysql.h	/^    MySQL::ptr get(const std::string& name);$/;"	p	class:sylar::MySQLManager	typeref:typename:MySQL::ptr	access:public	signature:(const std::string & name)
sylar::MySQLManager::getMaxConn	sylar/sylar/db/mysql.h	/^    uint32_t getMaxConn() const { return m_maxConn;}$/;"	f	class:sylar::MySQLManager	typeref:typename:uint32_t	access:public	signature:() const
sylar::MySQLManager::m_conns	sylar/sylar/db/mysql.h	/^    std::map<std::string, std::list<MySQL*> > m_conns;$/;"	m	class:sylar::MySQLManager	typeref:typename:std::map<std::string,std::list<MySQL * >>	access:private
sylar::MySQLManager::m_dbDefines	sylar/sylar/db/mysql.h	/^    std::map<std::string, std::map<std::string, std::string> > m_dbDefines;$/;"	m	class:sylar::MySQLManager	typeref:typename:std::map<std::string,std::map<std::string,std::string>>	access:private
sylar::MySQLManager::m_maxConn	sylar/sylar/db/mysql.h	/^    uint32_t m_maxConn;$/;"	m	class:sylar::MySQLManager	typeref:typename:uint32_t	access:private
sylar::MySQLManager::m_mutex	sylar/sylar/db/mysql.h	/^    MutexType m_mutex;$/;"	m	class:sylar::MySQLManager	typeref:typename:MutexType	access:private
sylar::MySQLManager::openTransaction	sylar/sylar/db/mysql.cc	/^MySQLTransaction::ptr MySQLManager::openTransaction(const std::string& name, bool auto_commit) {$/;"	f	class:sylar::MySQLManager	typeref:typename:MySQLTransaction::ptr	signature:(const std::string & name,bool auto_commit)
sylar::MySQLManager::openTransaction	sylar/sylar/db/mysql.h	/^    MySQLTransaction::ptr openTransaction(const std::string& name, bool auto_commit);$/;"	p	class:sylar::MySQLManager	typeref:typename:MySQLTransaction::ptr	access:public	signature:(const std::string & name,bool auto_commit)
sylar::MySQLManager::query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLManager::query(const std::string& name, const char* format, ...) {$/;"	f	class:sylar::MySQLManager	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const char * format,...)
sylar::MySQLManager::query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLManager::query(const std::string& name, const char* format, va_list ap) {$/;"	f	class:sylar::MySQLManager	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const char * format,va_list ap)
sylar::MySQLManager::query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLManager::query(const std::string& name, const std::string& sql) {$/;"	f	class:sylar::MySQLManager	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const std::string & sql)
sylar::MySQLManager::query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query(const std::string& name, const char* format, ...);$/;"	p	class:sylar::MySQLManager	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const char * format,...)
sylar::MySQLManager::query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query(const std::string& name, const char* format, va_list ap); $/;"	p	class:sylar::MySQLManager	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const char * format,va_list ap)
sylar::MySQLManager::query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query(const std::string& name, const std::string& sql);$/;"	p	class:sylar::MySQLManager	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const std::string & sql)
sylar::MySQLManager::registerMySQL	sylar/sylar/db/mysql.cc	/^void MySQLManager::registerMySQL(const std::string& name, const std::map<std::string, std::strin/;"	f	class:sylar::MySQLManager	typeref:typename:void	signature:(const std::string & name,const std::map<std::string,std::string> & params)
sylar::MySQLManager::registerMySQL	sylar/sylar/db/mysql.h	/^    void registerMySQL(const std::string& name, const std::map<std::string, std::string>& params/;"	p	class:sylar::MySQLManager	typeref:typename:void	access:public	signature:(const std::string & name,const std::map<std::string,std::string> & params)
sylar::MySQLManager::setMaxConn	sylar/sylar/db/mysql.h	/^    void setMaxConn(uint32_t v) { m_maxConn = v;}$/;"	f	class:sylar::MySQLManager	typeref:typename:void	access:public	signature:(uint32_t v)
sylar::MySQLManager::~MySQLManager	sylar/sylar/db/mysql.cc	/^MySQLManager::~MySQLManager() {$/;"	f	class:sylar::MySQLManager	signature:()
sylar::MySQLManager::~MySQLManager	sylar/sylar/db/mysql.h	/^    ~MySQLManager();$/;"	p	class:sylar::MySQLManager	access:public	signature:()
sylar::MySQLMgr	sylar/sylar/db/mysql.h	/^typedef sylar::Singleton<MySQLManager> MySQLMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<MySQLManager>
sylar::MySQLRes	sylar/sylar/db/mysql.h	/^class MySQLRes : public ISQLData {$/;"	c	namespace:sylar	inherits:ISQLData
sylar::MySQLRes::MySQLRes	sylar/sylar/db/mysql.cc	/^MySQLRes::MySQLRes(MYSQL_RES* res, int eno, const char* estr)$/;"	f	class:sylar::MySQLRes	signature:(MYSQL_RES * res,int eno,const char * estr)
sylar::MySQLRes::MySQLRes	sylar/sylar/db/mysql.h	/^    MySQLRes(MYSQL_RES* res, int eno, const char* estr);$/;"	p	class:sylar::MySQLRes	access:public	signature:(MYSQL_RES * res,int eno,const char * estr)
sylar::MySQLRes::data_cb	sylar/sylar/db/mysql.h	/^                ,int field_count, int row_no)> data_cb;$/;"	t	class:sylar::MySQLRes	access:public
sylar::MySQLRes::foreach	sylar/sylar/db/mysql.cc	/^bool MySQLRes::foreach(data_cb cb) {$/;"	f	class:sylar::MySQLRes	typeref:typename:bool	signature:(data_cb cb)
sylar::MySQLRes::foreach	sylar/sylar/db/mysql.h	/^    bool foreach(data_cb cb);$/;"	p	class:sylar::MySQLRes	typeref:typename:bool	access:public	signature:(data_cb cb)
sylar::MySQLRes::get	sylar/sylar/db/mysql.h	/^    MYSQL_RES* get() const { return m_data.get();}$/;"	f	class:sylar::MySQLRes	typeref:typename:MYSQL_RES *	access:public	signature:() const
sylar::MySQLRes::getBlob	sylar/sylar/db/mysql.cc	/^std::string MySQLRes::getBlob(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:std::string	signature:(int idx)
sylar::MySQLRes::getBlob	sylar/sylar/db/mysql.h	/^    std::string getBlob(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:std::string	access:public	signature:(int idx)
sylar::MySQLRes::getColumnBytes	sylar/sylar/db/mysql.cc	/^int MySQLRes::getColumnBytes(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:int	signature:(int idx)
sylar::MySQLRes::getColumnBytes	sylar/sylar/db/mysql.h	/^    int getColumnBytes(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int	access:public	signature:(int idx)
sylar::MySQLRes::getColumnCount	sylar/sylar/db/mysql.cc	/^int MySQLRes::getColumnCount() {$/;"	f	class:sylar::MySQLRes	typeref:typename:int	signature:()
sylar::MySQLRes::getColumnCount	sylar/sylar/db/mysql.h	/^    int getColumnCount() override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int	access:public	signature:()
sylar::MySQLRes::getColumnName	sylar/sylar/db/mysql.cc	/^std::string MySQLRes::getColumnName(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:std::string	signature:(int idx)
sylar::MySQLRes::getColumnName	sylar/sylar/db/mysql.h	/^    std::string getColumnName(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:std::string	access:public	signature:(int idx)
sylar::MySQLRes::getColumnType	sylar/sylar/db/mysql.cc	/^int MySQLRes::getColumnType(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:int	signature:(int idx)
sylar::MySQLRes::getColumnType	sylar/sylar/db/mysql.h	/^    int getColumnType(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int	access:public	signature:(int idx)
sylar::MySQLRes::getDataCount	sylar/sylar/db/mysql.cc	/^int MySQLRes::getDataCount() {$/;"	f	class:sylar::MySQLRes	typeref:typename:int	signature:()
sylar::MySQLRes::getDataCount	sylar/sylar/db/mysql.h	/^    int getDataCount() override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int	access:public	signature:()
sylar::MySQLRes::getDouble	sylar/sylar/db/mysql.cc	/^double MySQLRes::getDouble(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:double	signature:(int idx)
sylar::MySQLRes::getDouble	sylar/sylar/db/mysql.h	/^    double getDouble(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:double	access:public	signature:(int idx)
sylar::MySQLRes::getErrStr	sylar/sylar/db/mysql.h	/^    const std::string& getErrStr() const { return m_errstr;}$/;"	f	class:sylar::MySQLRes	typeref:typename:const std::string &	access:public	signature:() const
sylar::MySQLRes::getErrno	sylar/sylar/db/mysql.h	/^    int getErrno() const { return m_errno;}$/;"	f	class:sylar::MySQLRes	typeref:typename:int	access:public	signature:() const
sylar::MySQLRes::getFloat	sylar/sylar/db/mysql.cc	/^float MySQLRes::getFloat(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:float	signature:(int idx)
sylar::MySQLRes::getFloat	sylar/sylar/db/mysql.h	/^    float getFloat(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:float	access:public	signature:(int idx)
sylar::MySQLRes::getInt16	sylar/sylar/db/mysql.cc	/^int16_t MySQLRes::getInt16(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:int16_t	signature:(int idx)
sylar::MySQLRes::getInt16	sylar/sylar/db/mysql.h	/^    int16_t getInt16(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int16_t	access:public	signature:(int idx)
sylar::MySQLRes::getInt32	sylar/sylar/db/mysql.cc	/^int32_t MySQLRes::getInt32(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:int32_t	signature:(int idx)
sylar::MySQLRes::getInt32	sylar/sylar/db/mysql.h	/^    int32_t getInt32(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int32_t	access:public	signature:(int idx)
sylar::MySQLRes::getInt64	sylar/sylar/db/mysql.cc	/^int64_t MySQLRes::getInt64(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:int64_t	signature:(int idx)
sylar::MySQLRes::getInt64	sylar/sylar/db/mysql.h	/^    int64_t getInt64(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int64_t	access:public	signature:(int idx)
sylar::MySQLRes::getInt8	sylar/sylar/db/mysql.cc	/^int8_t MySQLRes::getInt8(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:int8_t	signature:(int idx)
sylar::MySQLRes::getInt8	sylar/sylar/db/mysql.h	/^    int8_t getInt8(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:int8_t	access:public	signature:(int idx)
sylar::MySQLRes::getString	sylar/sylar/db/mysql.cc	/^std::string MySQLRes::getString(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:std::string	signature:(int idx)
sylar::MySQLRes::getString	sylar/sylar/db/mysql.h	/^    std::string getString(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:std::string	access:public	signature:(int idx)
sylar::MySQLRes::getTime	sylar/sylar/db/mysql.cc	/^time_t MySQLRes::getTime(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:time_t	signature:(int idx)
sylar::MySQLRes::getTime	sylar/sylar/db/mysql.h	/^    time_t getTime(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:time_t	access:public	signature:(int idx)
sylar::MySQLRes::getUint16	sylar/sylar/db/mysql.cc	/^uint16_t MySQLRes::getUint16(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:uint16_t	signature:(int idx)
sylar::MySQLRes::getUint16	sylar/sylar/db/mysql.h	/^    uint16_t getUint16(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:uint16_t	access:public	signature:(int idx)
sylar::MySQLRes::getUint32	sylar/sylar/db/mysql.cc	/^uint32_t MySQLRes::getUint32(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:uint32_t	signature:(int idx)
sylar::MySQLRes::getUint32	sylar/sylar/db/mysql.h	/^    uint32_t getUint32(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:uint32_t	access:public	signature:(int idx)
sylar::MySQLRes::getUint64	sylar/sylar/db/mysql.cc	/^uint64_t MySQLRes::getUint64(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:uint64_t	signature:(int idx)
sylar::MySQLRes::getUint64	sylar/sylar/db/mysql.h	/^    uint64_t getUint64(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:uint64_t	access:public	signature:(int idx)
sylar::MySQLRes::getUint8	sylar/sylar/db/mysql.cc	/^uint8_t MySQLRes::getUint8(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:uint8_t	signature:(int idx)
sylar::MySQLRes::getUint8	sylar/sylar/db/mysql.h	/^    uint8_t getUint8(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:uint8_t	access:public	signature:(int idx)
sylar::MySQLRes::isNull	sylar/sylar/db/mysql.cc	/^bool MySQLRes::isNull(int idx) {$/;"	f	class:sylar::MySQLRes	typeref:typename:bool	signature:(int idx)
sylar::MySQLRes::isNull	sylar/sylar/db/mysql.h	/^    bool isNull(int idx) override;$/;"	p	class:sylar::MySQLRes	typeref:typename:bool	access:public	signature:(int idx)
sylar::MySQLRes::m_cur	sylar/sylar/db/mysql.h	/^    MYSQL_ROW m_cur;$/;"	m	class:sylar::MySQLRes	typeref:typename:MYSQL_ROW	access:private
sylar::MySQLRes::m_curLength	sylar/sylar/db/mysql.h	/^    unsigned long* m_curLength;$/;"	m	class:sylar::MySQLRes	typeref:typename:unsigned long *	access:private
sylar::MySQLRes::m_data	sylar/sylar/db/mysql.h	/^    std::shared_ptr<MYSQL_RES> m_data;$/;"	m	class:sylar::MySQLRes	typeref:typename:std::shared_ptr<MYSQL_RES>	access:private
sylar::MySQLRes::m_errno	sylar/sylar/db/mysql.h	/^    int m_errno;$/;"	m	class:sylar::MySQLRes	typeref:typename:int	access:private
sylar::MySQLRes::m_errstr	sylar/sylar/db/mysql.h	/^    std::string m_errstr;$/;"	m	class:sylar::MySQLRes	typeref:typename:std::string	access:private
sylar::MySQLRes::next	sylar/sylar/db/mysql.cc	/^bool MySQLRes::next() {$/;"	f	class:sylar::MySQLRes	typeref:typename:bool	signature:()
sylar::MySQLRes::next	sylar/sylar/db/mysql.h	/^    bool next() override;$/;"	p	class:sylar::MySQLRes	typeref:typename:bool	access:public	signature:()
sylar::MySQLRes::ptr	sylar/sylar/db/mysql.h	/^    typedef std::shared_ptr<MySQLRes> ptr;$/;"	t	class:sylar::MySQLRes	typeref:typename:std::shared_ptr<MySQLRes>	access:public
sylar::MySQLStmt	sylar/sylar/db/mysql.h	/^class MySQLStmt : public IStmt$/;"	c	namespace:sylar	inherits:IStmt,std::enable_shared_from_this<MySQLStmt>
sylar::MySQLStmt::Create	sylar/sylar/db/mysql.cc	/^MySQLStmt::ptr MySQLStmt::Create(MySQL::ptr db, const std::string& stmt) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:MySQLStmt::ptr	signature:(MySQL::ptr db,const std::string & stmt)
sylar::MySQLStmt::Create	sylar/sylar/db/mysql.h	/^    static MySQLStmt::ptr Create(MySQL::ptr db, const std::string& stmt);$/;"	p	class:sylar::MySQLStmt	typeref:typename:MySQLStmt::ptr	access:public	signature:(MySQL::ptr db,const std::string & stmt)
sylar::MySQLStmt::MySQLStmt	sylar/sylar/db/mysql.cc	/^MySQLStmt::MySQLStmt(MySQL::ptr db, MYSQL_STMT* stmt)$/;"	f	class:sylar::MySQLStmt	signature:(MySQL::ptr db,MYSQL_STMT * stmt)
sylar::MySQLStmt::MySQLStmt	sylar/sylar/db/mysql.h	/^    MySQLStmt(MySQL::ptr db, MYSQL_STMT* stmt);$/;"	p	class:sylar::MySQLStmt	access:private	signature:(MySQL::ptr db,MYSQL_STMT * stmt)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const char* value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const char * value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const double& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const double & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const float& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const float & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const int16_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int16_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const int32_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int32_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const int64_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int64_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const int8_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int8_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const std::string& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const std::string & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const uint16_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint16_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const uint32_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint32_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const uint64_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint64_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const uint8_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint8_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bind(int idx, const void* value, int len) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const void * value,int len)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const char* value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const char * value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const double& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const double & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const float& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const float & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const int16_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int16_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const int32_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int32_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const int64_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int64_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const int8_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int8_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const std::string& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const uint16_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint16_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const uint32_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint32_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const uint64_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint64_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const uint8_t& value);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint8_t & value)
sylar::MySQLStmt::bind	sylar/sylar/db/mysql.h	/^    int bind(int idx, const void* value, int len);$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const void * value,int len)
sylar::MySQLStmt::bindBlob	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindBlob(int idx, const std::string& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const std::string & value)
sylar::MySQLStmt::bindBlob	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindBlob(int idx, const void* value, int64_t size) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const void * value,int64_t size)
sylar::MySQLStmt::bindBlob	sylar/sylar/db/mysql.h	/^    int bindBlob(int idx, const std::string& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
sylar::MySQLStmt::bindBlob	sylar/sylar/db/mysql.h	/^    int bindBlob(int idx, const void* value, int64_t size) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const void * value,int64_t size)
sylar::MySQLStmt::bindDouble	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindDouble(int idx, const double& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const double & value)
sylar::MySQLStmt::bindDouble	sylar/sylar/db/mysql.h	/^    int bindDouble(int idx, const double& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const double & value)
sylar::MySQLStmt::bindFloat	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindFloat(int idx, const float& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const float & value)
sylar::MySQLStmt::bindFloat	sylar/sylar/db/mysql.h	/^    int bindFloat(int idx, const float& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const float & value)
sylar::MySQLStmt::bindInt16	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindInt16(int idx, const int16_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int16_t & value)
sylar::MySQLStmt::bindInt16	sylar/sylar/db/mysql.h	/^    int bindInt16(int idx, const int16_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int16_t & value)
sylar::MySQLStmt::bindInt32	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindInt32(int idx, const int32_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int32_t & value)
sylar::MySQLStmt::bindInt32	sylar/sylar/db/mysql.h	/^    int bindInt32(int idx, const int32_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int32_t & value)
sylar::MySQLStmt::bindInt64	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindInt64(int idx, const int64_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int64_t & value)
sylar::MySQLStmt::bindInt64	sylar/sylar/db/mysql.h	/^    int bindInt64(int idx, const int64_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int64_t & value)
sylar::MySQLStmt::bindInt8	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindInt8(int idx, const int8_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const int8_t & value)
sylar::MySQLStmt::bindInt8	sylar/sylar/db/mysql.h	/^    int bindInt8(int idx, const int8_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const int8_t & value)
sylar::MySQLStmt::bindNull	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindNull(int idx) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx)
sylar::MySQLStmt::bindNull	sylar/sylar/db/mysql.h	/^    int bindNull(int idx) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx)
sylar::MySQLStmt::bindString	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindString(int idx, const char* value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const char * value)
sylar::MySQLStmt::bindString	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindString(int idx, const std::string& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const std::string & value)
sylar::MySQLStmt::bindString	sylar/sylar/db/mysql.h	/^    int bindString(int idx, const char* value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const char * value)
sylar::MySQLStmt::bindString	sylar/sylar/db/mysql.h	/^    int bindString(int idx, const std::string& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
sylar::MySQLStmt::bindTime	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindTime(int idx, const time_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const time_t & value)
sylar::MySQLStmt::bindTime	sylar/sylar/db/mysql.h	/^    int bindTime(int idx, const time_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const time_t & value)
sylar::MySQLStmt::bindUint16	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindUint16(int idx, const uint16_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint16_t & value)
sylar::MySQLStmt::bindUint16	sylar/sylar/db/mysql.h	/^    int bindUint16(int idx, const uint16_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint16_t & value)
sylar::MySQLStmt::bindUint32	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindUint32(int idx, const uint32_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint32_t & value)
sylar::MySQLStmt::bindUint32	sylar/sylar/db/mysql.h	/^    int bindUint32(int idx, const uint32_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint32_t & value)
sylar::MySQLStmt::bindUint64	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindUint64(int idx, const uint64_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint64_t & value)
sylar::MySQLStmt::bindUint64	sylar/sylar/db/mysql.h	/^    int bindUint64(int idx, const uint64_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint64_t & value)
sylar::MySQLStmt::bindUint8	sylar/sylar/db/mysql.cc	/^int MySQLStmt::bindUint8(int idx, const uint8_t& value) {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:(int idx,const uint8_t & value)
sylar::MySQLStmt::bindUint8	sylar/sylar/db/mysql.h	/^    int bindUint8(int idx, const uint8_t& value) override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:(int idx,const uint8_t & value)
sylar::MySQLStmt::execute	sylar/sylar/db/mysql.cc	/^int MySQLStmt::execute() {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:()
sylar::MySQLStmt::execute	sylar/sylar/db/mysql.h	/^    int execute() override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:()
sylar::MySQLStmt::getErrStr	sylar/sylar/db/mysql.cc	/^std::string MySQLStmt::getErrStr() {$/;"	f	class:sylar::MySQLStmt	typeref:typename:std::string	signature:()
sylar::MySQLStmt::getErrStr	sylar/sylar/db/mysql.h	/^    std::string getErrStr() override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:std::string	access:public	signature:()
sylar::MySQLStmt::getErrno	sylar/sylar/db/mysql.cc	/^int MySQLStmt::getErrno() {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int	signature:()
sylar::MySQLStmt::getErrno	sylar/sylar/db/mysql.h	/^    int getErrno() override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int	access:public	signature:()
sylar::MySQLStmt::getLastInsertId	sylar/sylar/db/mysql.cc	/^int64_t MySQLStmt::getLastInsertId() {$/;"	f	class:sylar::MySQLStmt	typeref:typename:int64_t	signature:()
sylar::MySQLStmt::getLastInsertId	sylar/sylar/db/mysql.h	/^    int64_t getLastInsertId() override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:int64_t	access:public	signature:()
sylar::MySQLStmt::getRaw	sylar/sylar/db/mysql.h	/^    MYSQL_STMT* getRaw() const { return m_stmt;}$/;"	f	class:sylar::MySQLStmt	typeref:typename:MYSQL_STMT *	access:public	signature:() const
sylar::MySQLStmt::m_binds	sylar/sylar/db/mysql.h	/^    std::vector<MYSQL_BIND> m_binds;$/;"	m	class:sylar::MySQLStmt	typeref:typename:std::vector<MYSQL_BIND>	access:private
sylar::MySQLStmt::m_mysql	sylar/sylar/db/mysql.h	/^    MySQL::ptr m_mysql;$/;"	m	class:sylar::MySQLStmt	typeref:typename:MySQL::ptr	access:private
sylar::MySQLStmt::m_stmt	sylar/sylar/db/mysql.h	/^    MYSQL_STMT* m_stmt;$/;"	m	class:sylar::MySQLStmt	typeref:typename:MYSQL_STMT *	access:private
sylar::MySQLStmt::ptr	sylar/sylar/db/mysql.h	/^    typedef std::shared_ptr<MySQLStmt> ptr;$/;"	t	class:sylar::MySQLStmt	typeref:typename:std::shared_ptr<MySQLStmt>	access:public
sylar::MySQLStmt::query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLStmt::query() {$/;"	f	class:sylar::MySQLStmt	typeref:typename:ISQLData::ptr	signature:()
sylar::MySQLStmt::query	sylar/sylar/db/mysql.h	/^    ISQLData::ptr query() override;$/;"	p	class:sylar::MySQLStmt	typeref:typename:ISQLData::ptr	access:public	signature:()
sylar::MySQLStmt::~MySQLStmt	sylar/sylar/db/mysql.cc	/^MySQLStmt::~MySQLStmt() {$/;"	f	class:sylar::MySQLStmt	signature:()
sylar::MySQLStmt::~MySQLStmt	sylar/sylar/db/mysql.h	/^    ~MySQLStmt();$/;"	p	class:sylar::MySQLStmt	access:public	signature:()
sylar::MySQLStmtRes	sylar/sylar/db/mysql.h	/^class MySQLStmtRes : public ISQLData {$/;"	c	namespace:sylar	inherits:ISQLData
sylar::MySQLStmtRes::Create	sylar/sylar/db/mysql.cc	/^MySQLStmtRes::ptr MySQLStmtRes::Create(std::shared_ptr<MySQLStmt> stmt) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:MySQLStmtRes::ptr	signature:(std::shared_ptr<MySQLStmt> stmt)
sylar::MySQLStmtRes::Create	sylar/sylar/db/mysql.h	/^    static MySQLStmtRes::ptr Create(std::shared_ptr<MySQLStmt> stmt);$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:MySQLStmtRes::ptr	access:public	signature:(std::shared_ptr<MySQLStmt> stmt)
sylar::MySQLStmtRes::Data	sylar/sylar/db/mysql.h	/^    struct Data {$/;"	s	class:sylar::MySQLStmtRes	access:private
sylar::MySQLStmtRes::Data::Data	sylar/sylar/db/mysql.cc	/^MySQLStmtRes::Data::Data()$/;"	f	class:sylar::MySQLStmtRes::Data	signature:()
sylar::MySQLStmtRes::Data::Data	sylar/sylar/db/mysql.h	/^        Data();$/;"	p	struct:sylar::MySQLStmtRes::Data	access:public	signature:()
sylar::MySQLStmtRes::Data::alloc	sylar/sylar/db/mysql.cc	/^void MySQLStmtRes::Data::alloc(size_t size) {$/;"	f	class:sylar::MySQLStmtRes::Data	typeref:typename:void	signature:(size_t size)
sylar::MySQLStmtRes::Data::alloc	sylar/sylar/db/mysql.h	/^        void alloc(size_t size);$/;"	p	struct:sylar::MySQLStmtRes::Data	typeref:typename:void	access:public	signature:(size_t size)
sylar::MySQLStmtRes::Data::data	sylar/sylar/db/mysql.h	/^        char* data;$/;"	m	struct:sylar::MySQLStmtRes::Data	typeref:typename:char *	access:public
sylar::MySQLStmtRes::Data::data_length	sylar/sylar/db/mysql.h	/^        int32_t data_length;$/;"	m	struct:sylar::MySQLStmtRes::Data	typeref:typename:int32_t	access:public
sylar::MySQLStmtRes::Data::error	sylar/sylar/db/mysql.h	/^        bool error;$/;"	m	struct:sylar::MySQLStmtRes::Data	typeref:typename:bool	access:public
sylar::MySQLStmtRes::Data::is_null	sylar/sylar/db/mysql.h	/^        bool is_null;$/;"	m	struct:sylar::MySQLStmtRes::Data	typeref:typename:bool	access:public
sylar::MySQLStmtRes::Data::length	sylar/sylar/db/mysql.h	/^        unsigned long length;$/;"	m	struct:sylar::MySQLStmtRes::Data	typeref:typename:unsigned long	access:public
sylar::MySQLStmtRes::Data::type	sylar/sylar/db/mysql.h	/^        enum_field_types type;$/;"	m	struct:sylar::MySQLStmtRes::Data	typeref:typename:enum_field_types	access:public
sylar::MySQLStmtRes::Data::~Data	sylar/sylar/db/mysql.cc	/^MySQLStmtRes::Data::~Data() {$/;"	f	class:sylar::MySQLStmtRes::Data	signature:()
sylar::MySQLStmtRes::Data::~Data	sylar/sylar/db/mysql.h	/^        ~Data();$/;"	p	struct:sylar::MySQLStmtRes::Data	access:public	signature:()
sylar::MySQLStmtRes::MySQLStmtRes	sylar/sylar/db/mysql.cc	/^MySQLStmtRes::MySQLStmtRes(std::shared_ptr<MySQLStmt> stmt, int eno$/;"	f	class:sylar::MySQLStmtRes	signature:(std::shared_ptr<MySQLStmt> stmt,int eno,const std::string & estr)
sylar::MySQLStmtRes::MySQLStmtRes	sylar/sylar/db/mysql.h	/^    MySQLStmtRes(std::shared_ptr<MySQLStmt> stmt, int eno, const std::string& estr);$/;"	p	class:sylar::MySQLStmtRes	access:private	signature:(std::shared_ptr<MySQLStmt> stmt,int eno,const std::string & estr)
sylar::MySQLStmtRes::getBlob	sylar/sylar/db/mysql.cc	/^std::string MySQLStmtRes::getBlob(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:std::string	signature:(int idx)
sylar::MySQLStmtRes::getBlob	sylar/sylar/db/mysql.h	/^    std::string getBlob(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:std::string	access:public	signature:(int idx)
sylar::MySQLStmtRes::getColumnBytes	sylar/sylar/db/mysql.cc	/^int MySQLStmtRes::getColumnBytes(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int	signature:(int idx)
sylar::MySQLStmtRes::getColumnBytes	sylar/sylar/db/mysql.h	/^    int getColumnBytes(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int	access:public	signature:(int idx)
sylar::MySQLStmtRes::getColumnCount	sylar/sylar/db/mysql.cc	/^int MySQLStmtRes::getColumnCount() {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int	signature:()
sylar::MySQLStmtRes::getColumnCount	sylar/sylar/db/mysql.h	/^    int getColumnCount() override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int	access:public	signature:()
sylar::MySQLStmtRes::getColumnName	sylar/sylar/db/mysql.cc	/^std::string MySQLStmtRes::getColumnName(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:std::string	signature:(int idx)
sylar::MySQLStmtRes::getColumnName	sylar/sylar/db/mysql.h	/^    std::string getColumnName(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:std::string	access:public	signature:(int idx)
sylar::MySQLStmtRes::getColumnType	sylar/sylar/db/mysql.cc	/^int MySQLStmtRes::getColumnType(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int	signature:(int idx)
sylar::MySQLStmtRes::getColumnType	sylar/sylar/db/mysql.h	/^    int getColumnType(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int	access:public	signature:(int idx)
sylar::MySQLStmtRes::getDataCount	sylar/sylar/db/mysql.cc	/^int MySQLStmtRes::getDataCount() {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int	signature:()
sylar::MySQLStmtRes::getDataCount	sylar/sylar/db/mysql.h	/^    int getDataCount() override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int	access:public	signature:()
sylar::MySQLStmtRes::getDouble	sylar/sylar/db/mysql.cc	/^double MySQLStmtRes::getDouble(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:double	signature:(int idx)
sylar::MySQLStmtRes::getDouble	sylar/sylar/db/mysql.h	/^    double getDouble(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:double	access:public	signature:(int idx)
sylar::MySQLStmtRes::getErrStr	sylar/sylar/db/mysql.h	/^    const std::string& getErrStr() const { return m_errstr;}$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:const std::string &	access:public	signature:() const
sylar::MySQLStmtRes::getErrno	sylar/sylar/db/mysql.h	/^    int getErrno() const { return m_errno;}$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int	access:public	signature:() const
sylar::MySQLStmtRes::getFloat	sylar/sylar/db/mysql.cc	/^float MySQLStmtRes::getFloat(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:float	signature:(int idx)
sylar::MySQLStmtRes::getFloat	sylar/sylar/db/mysql.h	/^    float getFloat(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:float	access:public	signature:(int idx)
sylar::MySQLStmtRes::getInt16	sylar/sylar/db/mysql.cc	/^int16_t MySQLStmtRes::getInt16(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int16_t	signature:(int idx)
sylar::MySQLStmtRes::getInt16	sylar/sylar/db/mysql.h	/^    int16_t getInt16(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int16_t	access:public	signature:(int idx)
sylar::MySQLStmtRes::getInt32	sylar/sylar/db/mysql.cc	/^int32_t MySQLStmtRes::getInt32(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int32_t	signature:(int idx)
sylar::MySQLStmtRes::getInt32	sylar/sylar/db/mysql.h	/^    int32_t getInt32(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int32_t	access:public	signature:(int idx)
sylar::MySQLStmtRes::getInt64	sylar/sylar/db/mysql.cc	/^int64_t MySQLStmtRes::getInt64(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int64_t	signature:(int idx)
sylar::MySQLStmtRes::getInt64	sylar/sylar/db/mysql.h	/^    int64_t getInt64(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int64_t	access:public	signature:(int idx)
sylar::MySQLStmtRes::getInt8	sylar/sylar/db/mysql.cc	/^int8_t MySQLStmtRes::getInt8(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:int8_t	signature:(int idx)
sylar::MySQLStmtRes::getInt8	sylar/sylar/db/mysql.h	/^    int8_t getInt8(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:int8_t	access:public	signature:(int idx)
sylar::MySQLStmtRes::getString	sylar/sylar/db/mysql.cc	/^std::string MySQLStmtRes::getString(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:std::string	signature:(int idx)
sylar::MySQLStmtRes::getString	sylar/sylar/db/mysql.h	/^    std::string getString(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:std::string	access:public	signature:(int idx)
sylar::MySQLStmtRes::getTime	sylar/sylar/db/mysql.cc	/^time_t MySQLStmtRes::getTime(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:time_t	signature:(int idx)
sylar::MySQLStmtRes::getTime	sylar/sylar/db/mysql.h	/^    time_t getTime(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:time_t	access:public	signature:(int idx)
sylar::MySQLStmtRes::getUint16	sylar/sylar/db/mysql.cc	/^uint16_t MySQLStmtRes::getUint16(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:uint16_t	signature:(int idx)
sylar::MySQLStmtRes::getUint16	sylar/sylar/db/mysql.h	/^    uint16_t getUint16(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:uint16_t	access:public	signature:(int idx)
sylar::MySQLStmtRes::getUint32	sylar/sylar/db/mysql.cc	/^uint32_t MySQLStmtRes::getUint32(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:uint32_t	signature:(int idx)
sylar::MySQLStmtRes::getUint32	sylar/sylar/db/mysql.h	/^    uint32_t getUint32(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:uint32_t	access:public	signature:(int idx)
sylar::MySQLStmtRes::getUint64	sylar/sylar/db/mysql.cc	/^uint64_t MySQLStmtRes::getUint64(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:uint64_t	signature:(int idx)
sylar::MySQLStmtRes::getUint64	sylar/sylar/db/mysql.h	/^    uint64_t getUint64(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:uint64_t	access:public	signature:(int idx)
sylar::MySQLStmtRes::getUint8	sylar/sylar/db/mysql.cc	/^uint8_t MySQLStmtRes::getUint8(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:uint8_t	signature:(int idx)
sylar::MySQLStmtRes::getUint8	sylar/sylar/db/mysql.h	/^    uint8_t getUint8(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:uint8_t	access:public	signature:(int idx)
sylar::MySQLStmtRes::isNull	sylar/sylar/db/mysql.cc	/^bool MySQLStmtRes::isNull(int idx) {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:bool	signature:(int idx)
sylar::MySQLStmtRes::isNull	sylar/sylar/db/mysql.h	/^    bool isNull(int idx) override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:bool	access:public	signature:(int idx)
sylar::MySQLStmtRes::m_binds	sylar/sylar/db/mysql.h	/^    std::vector<MYSQL_BIND> m_binds;$/;"	m	class:sylar::MySQLStmtRes	typeref:typename:std::vector<MYSQL_BIND>	access:private
sylar::MySQLStmtRes::m_datas	sylar/sylar/db/mysql.h	/^    std::vector<Data> m_datas;$/;"	m	class:sylar::MySQLStmtRes	typeref:typename:std::vector<Data>	access:private
sylar::MySQLStmtRes::m_errno	sylar/sylar/db/mysql.h	/^    int m_errno;$/;"	m	class:sylar::MySQLStmtRes	typeref:typename:int	access:private
sylar::MySQLStmtRes::m_errstr	sylar/sylar/db/mysql.h	/^    std::string m_errstr;$/;"	m	class:sylar::MySQLStmtRes	typeref:typename:std::string	access:private
sylar::MySQLStmtRes::m_stmt	sylar/sylar/db/mysql.h	/^    std::shared_ptr<MySQLStmt> m_stmt;$/;"	m	class:sylar::MySQLStmtRes	typeref:typename:std::shared_ptr<MySQLStmt>	access:private
sylar::MySQLStmtRes::next	sylar/sylar/db/mysql.cc	/^bool MySQLStmtRes::next() {$/;"	f	class:sylar::MySQLStmtRes	typeref:typename:bool	signature:()
sylar::MySQLStmtRes::next	sylar/sylar/db/mysql.h	/^    bool next() override;$/;"	p	class:sylar::MySQLStmtRes	typeref:typename:bool	access:public	signature:()
sylar::MySQLStmtRes::ptr	sylar/sylar/db/mysql.h	/^    typedef std::shared_ptr<MySQLStmtRes> ptr;$/;"	t	class:sylar::MySQLStmtRes	typeref:typename:std::shared_ptr<MySQLStmtRes>	access:public
sylar::MySQLStmtRes::~MySQLStmtRes	sylar/sylar/db/mysql.cc	/^MySQLStmtRes::~MySQLStmtRes() {$/;"	f	class:sylar::MySQLStmtRes	signature:()
sylar::MySQLStmtRes::~MySQLStmtRes	sylar/sylar/db/mysql.h	/^    ~MySQLStmtRes();$/;"	p	class:sylar::MySQLStmtRes	access:public	signature:()
sylar::MySQLTime	sylar/sylar/db/mysql.h	/^struct MySQLTime {$/;"	s	namespace:sylar
sylar::MySQLTime::MySQLTime	sylar/sylar/db/mysql.h	/^    MySQLTime(time_t t)$/;"	f	struct:sylar::MySQLTime	access:public	signature:(time_t t)
sylar::MySQLTime::ts	sylar/sylar/db/mysql.h	/^    time_t ts;$/;"	m	struct:sylar::MySQLTime	typeref:typename:time_t	access:public
sylar::MySQLTransaction	sylar/sylar/db/mysql.h	/^class MySQLTransaction : public ITransaction {$/;"	c	namespace:sylar	inherits:ITransaction
sylar::MySQLTransaction::Create	sylar/sylar/db/mysql.cc	/^MySQLTransaction::ptr MySQLTransaction::Create(MySQL::ptr mysql, bool auto_commit) {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:MySQLTransaction::ptr	signature:(MySQL::ptr mysql,bool auto_commit)
sylar::MySQLTransaction::Create	sylar/sylar/db/mysql.h	/^    static MySQLTransaction::ptr Create(MySQL::ptr mysql, bool auto_commit);$/;"	p	class:sylar::MySQLTransaction	typeref:typename:MySQLTransaction::ptr	access:public	signature:(MySQL::ptr mysql,bool auto_commit)
sylar::MySQLTransaction::MySQLTransaction	sylar/sylar/db/mysql.cc	/^MySQLTransaction::MySQLTransaction(MySQL::ptr mysql, bool auto_commit)$/;"	f	class:sylar::MySQLTransaction	signature:(MySQL::ptr mysql,bool auto_commit)
sylar::MySQLTransaction::MySQLTransaction	sylar/sylar/db/mysql.h	/^    MySQLTransaction(MySQL::ptr mysql, bool auto_commit);$/;"	p	class:sylar::MySQLTransaction	access:private	signature:(MySQL::ptr mysql,bool auto_commit)
sylar::MySQLTransaction::begin	sylar/sylar/db/mysql.cc	/^bool MySQLTransaction::begin() {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:bool	signature:()
sylar::MySQLTransaction::begin	sylar/sylar/db/mysql.h	/^    bool begin() override;$/;"	p	class:sylar::MySQLTransaction	typeref:typename:bool	access:public	signature:()
sylar::MySQLTransaction::commit	sylar/sylar/db/mysql.cc	/^bool MySQLTransaction::commit() {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:bool	signature:()
sylar::MySQLTransaction::commit	sylar/sylar/db/mysql.h	/^    bool commit() override;$/;"	p	class:sylar::MySQLTransaction	typeref:typename:bool	access:public	signature:()
sylar::MySQLTransaction::execute	sylar/sylar/db/mysql.cc	/^int MySQLTransaction::execute(const char* format, ...) {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:int	signature:(const char * format,...)
sylar::MySQLTransaction::execute	sylar/sylar/db/mysql.cc	/^int MySQLTransaction::execute(const char* format, va_list ap) {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:int	signature:(const char * format,va_list ap)
sylar::MySQLTransaction::execute	sylar/sylar/db/mysql.cc	/^int MySQLTransaction::execute(const std::string& sql) {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:int	signature:(const std::string & sql)
sylar::MySQLTransaction::execute	sylar/sylar/db/mysql.h	/^    int execute(const char* format, va_list ap);$/;"	p	class:sylar::MySQLTransaction	typeref:typename:int	access:public	signature:(const char * format,va_list ap)
sylar::MySQLTransaction::execute	sylar/sylar/db/mysql.h	/^    virtual int execute(const char* format, ...) override;$/;"	p	class:sylar::MySQLTransaction	typeref:typename:int	access:public	signature:(const char * format,...)
sylar::MySQLTransaction::execute	sylar/sylar/db/mysql.h	/^    virtual int execute(const std::string& sql) override;$/;"	p	class:sylar::MySQLTransaction	typeref:typename:int	access:public	signature:(const std::string & sql)
sylar::MySQLTransaction::getLastInsertId	sylar/sylar/db/mysql.cc	/^int64_t MySQLTransaction::getLastInsertId() {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:int64_t	signature:()
sylar::MySQLTransaction::getLastInsertId	sylar/sylar/db/mysql.h	/^    int64_t getLastInsertId() override;$/;"	p	class:sylar::MySQLTransaction	typeref:typename:int64_t	access:public	signature:()
sylar::MySQLTransaction::getMySQL	sylar/sylar/db/mysql.cc	/^std::shared_ptr<MySQL> MySQLTransaction::getMySQL() {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:std::shared_ptr<MySQL>	signature:()
sylar::MySQLTransaction::getMySQL	sylar/sylar/db/mysql.h	/^    std::shared_ptr<MySQL> getMySQL();$/;"	p	class:sylar::MySQLTransaction	typeref:typename:std::shared_ptr<MySQL>	access:public	signature:()
sylar::MySQLTransaction::isAutoCommit	sylar/sylar/db/mysql.h	/^    bool isAutoCommit() const { return m_autoCommit;}$/;"	f	class:sylar::MySQLTransaction	typeref:typename:bool	access:public	signature:() const
sylar::MySQLTransaction::isError	sylar/sylar/db/mysql.h	/^    bool isError() const { return m_hasError;}$/;"	f	class:sylar::MySQLTransaction	typeref:typename:bool	access:public	signature:() const
sylar::MySQLTransaction::isFinished	sylar/sylar/db/mysql.h	/^    bool isFinished() const { return m_isFinished;}$/;"	f	class:sylar::MySQLTransaction	typeref:typename:bool	access:public	signature:() const
sylar::MySQLTransaction::m_autoCommit	sylar/sylar/db/mysql.h	/^    bool m_autoCommit;$/;"	m	class:sylar::MySQLTransaction	typeref:typename:bool	access:private
sylar::MySQLTransaction::m_hasError	sylar/sylar/db/mysql.h	/^    bool m_hasError;$/;"	m	class:sylar::MySQLTransaction	typeref:typename:bool	access:private
sylar::MySQLTransaction::m_isFinished	sylar/sylar/db/mysql.h	/^    bool m_isFinished;$/;"	m	class:sylar::MySQLTransaction	typeref:typename:bool	access:private
sylar::MySQLTransaction::m_mysql	sylar/sylar/db/mysql.h	/^    MySQL::ptr m_mysql;$/;"	m	class:sylar::MySQLTransaction	typeref:typename:MySQL::ptr	access:private
sylar::MySQLTransaction::ptr	sylar/sylar/db/mysql.h	/^    typedef std::shared_ptr<MySQLTransaction> ptr;$/;"	t	class:sylar::MySQLTransaction	typeref:typename:std::shared_ptr<MySQLTransaction>	access:public
sylar::MySQLTransaction::rollback	sylar/sylar/db/mysql.cc	/^bool MySQLTransaction::rollback() {$/;"	f	class:sylar::MySQLTransaction	typeref:typename:bool	signature:()
sylar::MySQLTransaction::rollback	sylar/sylar/db/mysql.h	/^    bool rollback() override;$/;"	p	class:sylar::MySQLTransaction	typeref:typename:bool	access:public	signature:()
sylar::MySQLTransaction::~MySQLTransaction	sylar/sylar/db/mysql.cc	/^MySQLTransaction::~MySQLTransaction() {$/;"	f	class:sylar::MySQLTransaction	signature:()
sylar::MySQLTransaction::~MySQLTransaction	sylar/sylar/db/mysql.h	/^    ~MySQLTransaction();$/;"	p	class:sylar::MySQLTransaction	access:public	signature:()
sylar::MySQLUtil	sylar/sylar/db/mysql.h	/^class MySQLUtil {$/;"	c	namespace:sylar
sylar::MySQLUtil::Execute	sylar/sylar/db/mysql.cc	/^int MySQLUtil::Execute(const std::string& name, const char* format, ...) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:int	signature:(const std::string & name,const char * format,...)
sylar::MySQLUtil::Execute	sylar/sylar/db/mysql.cc	/^int MySQLUtil::Execute(const std::string& name, const char* format, va_list ap) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:int	signature:(const std::string & name,const char * format,va_list ap)
sylar::MySQLUtil::Execute	sylar/sylar/db/mysql.cc	/^int MySQLUtil::Execute(const std::string& name, const std::string& sql) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:int	signature:(const std::string & name,const std::string & sql)
sylar::MySQLUtil::Execute	sylar/sylar/db/mysql.h	/^    static int Execute(const std::string& name, const char* format, ...);$/;"	p	class:sylar::MySQLUtil	typeref:typename:int	access:public	signature:(const std::string & name,const char * format,...)
sylar::MySQLUtil::Execute	sylar/sylar/db/mysql.h	/^    static int Execute(const std::string& name, const char* format, va_list ap); $/;"	p	class:sylar::MySQLUtil	typeref:typename:int	access:public	signature:(const std::string & name,const char * format,va_list ap)
sylar::MySQLUtil::Execute	sylar/sylar/db/mysql.h	/^    static int Execute(const std::string& name, const std::string& sql);$/;"	p	class:sylar::MySQLUtil	typeref:typename:int	access:public	signature:(const std::string & name,const std::string & sql)
sylar::MySQLUtil::Query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLUtil::Query(const std::string& name, const char* format, ...) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const char * format,...)
sylar::MySQLUtil::Query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLUtil::Query(const std::string& name, const char* format,va_list ap) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const char * format,va_list ap)
sylar::MySQLUtil::Query	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLUtil::Query(const std::string& name, const std::string& sql) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const std::string & sql)
sylar::MySQLUtil::Query	sylar/sylar/db/mysql.h	/^    static ISQLData::ptr Query(const std::string& name, const char* format, ...);$/;"	p	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const char * format,...)
sylar::MySQLUtil::Query	sylar/sylar/db/mysql.h	/^    static ISQLData::ptr Query(const std::string& name, const char* format,va_list ap); $/;"	p	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const char * format,va_list ap)
sylar::MySQLUtil::Query	sylar/sylar/db/mysql.h	/^    static ISQLData::ptr Query(const std::string& name, const std::string& sql);$/;"	p	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const std::string & sql)
sylar::MySQLUtil::TryExecute	sylar/sylar/db/mysql.cc	/^int MySQLUtil::TryExecute(const std::string& name, uint32_t count, const char* format, ...) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:int	signature:(const std::string & name,uint32_t count,const char * format,...)
sylar::MySQLUtil::TryExecute	sylar/sylar/db/mysql.cc	/^int MySQLUtil::TryExecute(const std::string& name, uint32_t count, const std::string& sql) {$/;"	f	class:sylar::MySQLUtil	typeref:typename:int	signature:(const std::string & name,uint32_t count,const std::string & sql)
sylar::MySQLUtil::TryExecute	sylar/sylar/db/mysql.h	/^    static int TryExecute(const std::string& name, uint32_t count, const char* format, ...);$/;"	p	class:sylar::MySQLUtil	typeref:typename:int	access:public	signature:(const std::string & name,uint32_t count,const char * format,...)
sylar::MySQLUtil::TryExecute	sylar/sylar/db/mysql.h	/^    static int TryExecute(const std::string& name, uint32_t count, const char* format, va_list a/;"	p	class:sylar::MySQLUtil	typeref:typename:int	access:public	signature:(const std::string & name,uint32_t count,const char * format,va_list ap)
sylar::MySQLUtil::TryExecute	sylar/sylar/db/mysql.h	/^    static int TryExecute(const std::string& name, uint32_t count, const std::string& sql);$/;"	p	class:sylar::MySQLUtil	typeref:typename:int	access:public	signature:(const std::string & name,uint32_t count,const std::string & sql)
sylar::MySQLUtil::TryQuery	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLUtil::TryQuery(const std::string& name, uint32_t count, const char* format, ./;"	f	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	signature:(const std::string & name,uint32_t count,const char * format,...)
sylar::MySQLUtil::TryQuery	sylar/sylar/db/mysql.cc	/^ISQLData::ptr MySQLUtil::TryQuery(const std::string& name, uint32_t count, const std::string& sq/;"	f	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	signature:(const std::string & name,uint32_t count,const std::string & sql)
sylar::MySQLUtil::TryQuery	sylar/sylar/db/mysql.h	/^    static ISQLData::ptr TryQuery(const std::string& name, uint32_t count, const char* format, ./;"	p	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,uint32_t count,const char * format,...)
sylar::MySQLUtil::TryQuery	sylar/sylar/db/mysql.h	/^    static ISQLData::ptr TryQuery(const std::string& name, uint32_t count, const std::string& sq/;"	p	class:sylar::MySQLUtil	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,uint32_t count,const std::string & sql)
sylar::NameFormatItem	sylar/sylar/log.cc	/^class NameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::NameFormatItem::NameFormatItem	sylar/sylar/log.cc	/^    NameFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::NameFormatItem	file:	access:public	signature:(const std::string & str="")
sylar::NameFormatItem::format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::NameFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::NewLineFormatItem	sylar/sylar/log.cc	/^class NewLineFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::NewLineFormatItem::NewLineFormatItem	sylar/sylar/log.cc	/^    NewLineFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::NewLineFormatItem	file:	access:public	signature:(const std::string & str="")
sylar::NewLineFormatItem::format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::NewLineFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::Noncopyable	sylar/sylar/noncopyable.h	/^class Noncopyable {$/;"	c	namespace:sylar
sylar::Noncopyable::Noncopyable	sylar/sylar/noncopyable.h	/^    Noncopyable() = default;$/;"	p	class:sylar::Noncopyable	access:public	signature:()
sylar::Noncopyable::Noncopyable	sylar/sylar/noncopyable.h	/^    Noncopyable(const Noncopyable&) = delete;$/;"	p	class:sylar::Noncopyable	access:public	signature:(const Noncopyable &)
sylar::Noncopyable::operator =	sylar/sylar/noncopyable.h	/^    Noncopyable& operator=(const Noncopyable&) = delete;$/;"	p	class:sylar::Noncopyable	typeref:typename:Noncopyable &	access:public	signature:(const Noncopyable &)
sylar::Noncopyable::~Noncopyable	sylar/sylar/noncopyable.h	/^    ~Noncopyable() = default;$/;"	p	class:sylar::Noncopyable	access:public	signature:()
sylar::Notify	sylar/sylar/protocol.h	/^class Notify : public Message {$/;"	c	namespace:sylar	inherits:Message
sylar::Notify::Notify	sylar/sylar/protocol.cc	/^Notify::Notify()$/;"	f	class:sylar::Notify	signature:()
sylar::Notify::Notify	sylar/sylar/protocol.h	/^    Notify();$/;"	p	class:sylar::Notify	access:public	signature:()
sylar::Notify::getNotify	sylar/sylar/protocol.h	/^    uint32_t getNotify() const { return m_notify;}$/;"	f	class:sylar::Notify	typeref:typename:uint32_t	access:public	signature:() const
sylar::Notify::m_notify	sylar/sylar/protocol.h	/^    uint32_t m_notify;$/;"	m	class:sylar::Notify	typeref:typename:uint32_t	access:protected
sylar::Notify::parseFromByteArray	sylar/sylar/protocol.cc	/^bool Notify::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::Notify	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::Notify::parseFromByteArray	sylar/sylar/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::Notify	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::Notify::ptr	sylar/sylar/protocol.h	/^    typedef std::shared_ptr<Notify> ptr;$/;"	t	class:sylar::Notify	typeref:typename:std::shared_ptr<Notify>	access:public
sylar::Notify::serializeToByteArray	sylar/sylar/protocol.cc	/^bool Notify::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::Notify	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::Notify::serializeToByteArray	sylar/sylar/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::Notify	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::Notify::setNotify	sylar/sylar/protocol.h	/^    void setNotify(uint32_t v) { m_notify = v;}$/;"	f	class:sylar::Notify	typeref:typename:void	access:public	signature:(uint32_t v)
sylar::NullMutex	sylar/sylar/mutex.h	/^class NullMutex : Noncopyable{$/;"	c	namespace:sylar	inherits:Noncopyable
sylar::NullMutex::Lock	sylar/sylar/mutex.h	/^    typedef ScopedLockImpl<NullMutex> Lock;$/;"	t	class:sylar::NullMutex	typeref:typename:ScopedLockImpl<NullMutex>	access:public
sylar::NullMutex::NullMutex	sylar/sylar/mutex.h	/^    NullMutex() {}$/;"	f	class:sylar::NullMutex	access:public	signature:()
sylar::NullMutex::lock	sylar/sylar/mutex.h	/^    void lock() {}$/;"	f	class:sylar::NullMutex	typeref:typename:void	access:public	signature:()
sylar::NullMutex::unlock	sylar/sylar/mutex.h	/^    void unlock() {}$/;"	f	class:sylar::NullMutex	typeref:typename:void	access:public	signature:()
sylar::NullMutex::~NullMutex	sylar/sylar/mutex.h	/^    ~NullMutex() {}$/;"	f	class:sylar::NullMutex	access:public	signature:()
sylar::NullRWMutex	sylar/sylar/mutex.h	/^class NullRWMutex : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
sylar::NullRWMutex::NullRWMutex	sylar/sylar/mutex.h	/^    NullRWMutex() {}$/;"	f	class:sylar::NullRWMutex	access:public	signature:()
sylar::NullRWMutex::ReadLock	sylar/sylar/mutex.h	/^    typedef ReadScopedLockImpl<NullMutex> ReadLock;$/;"	t	class:sylar::NullRWMutex	typeref:typename:ReadScopedLockImpl<NullMutex>	access:public
sylar::NullRWMutex::WriteLock	sylar/sylar/mutex.h	/^    typedef WriteScopedLockImpl<NullMutex> WriteLock;$/;"	t	class:sylar::NullRWMutex	typeref:typename:WriteScopedLockImpl<NullMutex>	access:public
sylar::NullRWMutex::rdlock	sylar/sylar/mutex.h	/^    void rdlock() {}$/;"	f	class:sylar::NullRWMutex	typeref:typename:void	access:public	signature:()
sylar::NullRWMutex::unlock	sylar/sylar/mutex.h	/^    void unlock() {}$/;"	f	class:sylar::NullRWMutex	typeref:typename:void	access:public	signature:()
sylar::NullRWMutex::wrlock	sylar/sylar/mutex.h	/^    void wrlock() {}$/;"	f	class:sylar::NullRWMutex	typeref:typename:void	access:public	signature:()
sylar::NullRWMutex::~NullRWMutex	sylar/sylar/mutex.h	/^    ~NullRWMutex() {}$/;"	f	class:sylar::NullRWMutex	access:public	signature:()
sylar::OnTimer	sylar/sylar/timer.cc	/^static void OnTimer(std::weak_ptr<void> weak_cond, std::function<void()> cb) {$/;"	f	namespace:sylar	typeref:typename:void	file:	signature:(std::weak_ptr<void> weak_cond,std::function<void ()> cb)
sylar::PBToJsonString	sylar/sylar/util.cc	/^std::string PBToJsonString(const google::protobuf::Message& message) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const google::protobuf::Message & message)
sylar::PBToJsonString	sylar/sylar/util.h	/^std::string PBToJsonString(const google::protobuf::Message& message);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const google::protobuf::Message & message)
sylar::ParseDomainService	sylar/sylar/streams/service_discovery.cc	/^bool ParseDomainService(const std::string& path, std::string& domain, std::string& service) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(const std::string & path,std::string & domain,std::string & service)
sylar::ProcessInfo	sylar/sylar/daemon.h	/^struct ProcessInfo {$/;"	s	namespace:sylar
sylar::ProcessInfo::main_id	sylar/sylar/daemon.h	/^    pid_t main_id = 0;$/;"	m	struct:sylar::ProcessInfo	typeref:typename:pid_t	access:public
sylar::ProcessInfo::main_start_time	sylar/sylar/daemon.h	/^    uint64_t main_start_time = 0;$/;"	m	struct:sylar::ProcessInfo	typeref:typename:uint64_t	access:public
sylar::ProcessInfo::parent_id	sylar/sylar/daemon.h	/^    pid_t parent_id = 0;$/;"	m	struct:sylar::ProcessInfo	typeref:typename:pid_t	access:public
sylar::ProcessInfo::parent_start_time	sylar/sylar/daemon.h	/^    uint64_t parent_start_time = 0;$/;"	m	struct:sylar::ProcessInfo	typeref:typename:uint64_t	access:public
sylar::ProcessInfo::restart_count	sylar/sylar/daemon.h	/^    uint32_t restart_count = 0;$/;"	m	struct:sylar::ProcessInfo	typeref:typename:uint32_t	access:public
sylar::ProcessInfo::toString	sylar/sylar/daemon.cc	/^std::string ProcessInfo::toString() const {$/;"	f	class:sylar::ProcessInfo	typeref:typename:std::string	signature:() const
sylar::ProcessInfo::toString	sylar/sylar/daemon.h	/^    std::string toString() const;$/;"	p	struct:sylar::ProcessInfo	typeref:typename:std::string	access:public	signature:() const
sylar::ProcessInfoMgr	sylar/sylar/daemon.h	/^typedef sylar::Singleton<ProcessInfo> ProcessInfoMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<ProcessInfo>
sylar::RSACipher	sylar/sylar/util/crypto_util.h	/^class RSACipher {$/;"	c	namespace:sylar
sylar::RSACipher::Create	sylar/sylar/util/crypto_util.cc	/^RSACipher::ptr RSACipher::Create(const std::string& pubkey_file$/;"	f	class:sylar::RSACipher	typeref:typename:RSACipher::ptr	signature:(const std::string & pubkey_file,const std::string & prikey_file)
sylar::RSACipher::Create	sylar/sylar/util/crypto_util.h	/^    static RSACipher::ptr Create(const std::string& pubkey_file$/;"	p	class:sylar::RSACipher	typeref:typename:RSACipher::ptr	access:public	signature:(const std::string & pubkey_file,const std::string & prikey_file)
sylar::RSACipher::GenerateKey	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::GenerateKey(const std::string& pubkey_file$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const std::string & pubkey_file,const std::string & prikey_file,uint32_t length)
sylar::RSACipher::GenerateKey	sylar/sylar/util/crypto_util.h	/^    static int32_t GenerateKey(const std::string& pubkey_file$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const std::string & pubkey_file,const std::string & prikey_file,uint32_t length=1024)
sylar::RSACipher::RSACipher	sylar/sylar/util/crypto_util.cc	/^RSACipher::RSACipher()$/;"	f	class:sylar::RSACipher	signature:()
sylar::RSACipher::RSACipher	sylar/sylar/util/crypto_util.h	/^    RSACipher();$/;"	p	class:sylar::RSACipher	access:public	signature:()
sylar::RSACipher::getPriRSASize	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::getPriRSASize() {$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:()
sylar::RSACipher::getPriRSASize	sylar/sylar/util/crypto_util.h	/^    int32_t getPriRSASize();$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:()
sylar::RSACipher::getPrikeyStr	sylar/sylar/util/crypto_util.h	/^    const std::string& getPrikeyStr() const { return m_prikeyStr;}$/;"	f	class:sylar::RSACipher	typeref:typename:const std::string &	access:public	signature:() const
sylar::RSACipher::getPubRSASize	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::getPubRSASize() {$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:()
sylar::RSACipher::getPubRSASize	sylar/sylar/util/crypto_util.h	/^    int32_t getPubRSASize();$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:()
sylar::RSACipher::getPubkeyStr	sylar/sylar/util/crypto_util.h	/^    const std::string& getPubkeyStr() const { return m_pubkeyStr;}$/;"	f	class:sylar::RSACipher	typeref:typename:const std::string &	access:public	signature:() const
sylar::RSACipher::m_prikey	sylar/sylar/util/crypto_util.h	/^    RSA* m_prikey;$/;"	m	class:sylar::RSACipher	typeref:typename:RSA *	access:private
sylar::RSACipher::m_prikeyStr	sylar/sylar/util/crypto_util.h	/^    std::string m_prikeyStr;$/;"	m	class:sylar::RSACipher	typeref:typename:std::string	access:private
sylar::RSACipher::m_pubkey	sylar/sylar/util/crypto_util.h	/^    RSA* m_pubkey;$/;"	m	class:sylar::RSACipher	typeref:typename:RSA *	access:private
sylar::RSACipher::m_pubkeyStr	sylar/sylar/util/crypto_util.h	/^    std::string m_pubkeyStr;$/;"	m	class:sylar::RSACipher	typeref:typename:std::string	access:private
sylar::RSACipher::privateDecrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::privateDecrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,std::string & to,int padding)
sylar::RSACipher::privateDecrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::privateDecrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,void * to,int padding)
sylar::RSACipher::privateDecrypt	sylar/sylar/util/crypto_util.h	/^    int32_t privateDecrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,std::string & to,int padding=RSA_NO_PADDING)
sylar::RSACipher::privateDecrypt	sylar/sylar/util/crypto_util.h	/^    int32_t privateDecrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,void * to,int padding=RSA_NO_PADDING)
sylar::RSACipher::privateEncrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::privateEncrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,std::string & to,int padding)
sylar::RSACipher::privateEncrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::privateEncrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,void * to,int padding)
sylar::RSACipher::privateEncrypt	sylar/sylar/util/crypto_util.h	/^    int32_t privateEncrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,std::string & to,int padding=RSA_NO_PADDING)
sylar::RSACipher::privateEncrypt	sylar/sylar/util/crypto_util.h	/^    int32_t privateEncrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,void * to,int padding=RSA_NO_PADDING)
sylar::RSACipher::ptr	sylar/sylar/util/crypto_util.h	/^    typedef std::shared_ptr<RSACipher> ptr;$/;"	t	class:sylar::RSACipher	typeref:typename:std::shared_ptr<RSACipher>	access:public
sylar::RSACipher::publicDecrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::publicDecrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,std::string & to,int padding)
sylar::RSACipher::publicDecrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::publicDecrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,void * to,int padding)
sylar::RSACipher::publicDecrypt	sylar/sylar/util/crypto_util.h	/^    int32_t publicDecrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,std::string & to,int padding=RSA_NO_PADDING)
sylar::RSACipher::publicDecrypt	sylar/sylar/util/crypto_util.h	/^    int32_t publicDecrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,void * to,int padding=RSA_NO_PADDING)
sylar::RSACipher::publicEncrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::publicEncrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,std::string & to,int padding)
sylar::RSACipher::publicEncrypt	sylar/sylar/util/crypto_util.cc	/^int32_t RSACipher::publicEncrypt(const void* from, int flen,$/;"	f	class:sylar::RSACipher	typeref:typename:int32_t	signature:(const void * from,int flen,void * to,int padding)
sylar::RSACipher::publicEncrypt	sylar/sylar/util/crypto_util.h	/^    int32_t publicEncrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,std::string & to,int padding=RSA_NO_PADDING)
sylar::RSACipher::publicEncrypt	sylar/sylar/util/crypto_util.h	/^    int32_t publicEncrypt(const void* from, int flen,$/;"	p	class:sylar::RSACipher	typeref:typename:int32_t	access:public	signature:(const void * from,int flen,void * to,int padding=RSA_NO_PADDING)
sylar::RSACipher::~RSACipher	sylar/sylar/util/crypto_util.cc	/^RSACipher::~RSACipher() {$/;"	f	class:sylar::RSACipher	signature:()
sylar::RSACipher::~RSACipher	sylar/sylar/util/crypto_util.h	/^    ~RSACipher();$/;"	p	class:sylar::RSACipher	access:public	signature:()
sylar::RWMutex	sylar/sylar/mutex.h	/^class RWMutex : Noncopyable{$/;"	c	namespace:sylar	inherits:Noncopyable
sylar::RWMutex::RWMutex	sylar/sylar/mutex.h	/^    RWMutex() {$/;"	f	class:sylar::RWMutex	access:public	signature:()
sylar::RWMutex::ReadLock	sylar/sylar/mutex.h	/^    typedef ReadScopedLockImpl<RWMutex> ReadLock;$/;"	t	class:sylar::RWMutex	typeref:typename:ReadScopedLockImpl<RWMutex>	access:public
sylar::RWMutex::WriteLock	sylar/sylar/mutex.h	/^    typedef WriteScopedLockImpl<RWMutex> WriteLock;$/;"	t	class:sylar::RWMutex	typeref:typename:WriteScopedLockImpl<RWMutex>	access:public
sylar::RWMutex::m_lock	sylar/sylar/mutex.h	/^    pthread_rwlock_t m_lock;$/;"	m	class:sylar::RWMutex	typeref:typename:pthread_rwlock_t	access:private
sylar::RWMutex::rdlock	sylar/sylar/mutex.h	/^    void rdlock() {$/;"	f	class:sylar::RWMutex	typeref:typename:void	access:public	signature:()
sylar::RWMutex::unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	class:sylar::RWMutex	typeref:typename:void	access:public	signature:()
sylar::RWMutex::wrlock	sylar/sylar/mutex.h	/^    void wrlock() {$/;"	f	class:sylar::RWMutex	typeref:typename:void	access:public	signature:()
sylar::RWMutex::~RWMutex	sylar/sylar/mutex.h	/^    ~RWMutex() {$/;"	f	class:sylar::RWMutex	access:public	signature:()
sylar::ReadFixFromStream	sylar/sylar/util.h	/^inline bool ReadFixFromStream(std::istream& is, char* data, const uint64_t& size) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,char * data,const uint64_t & size)
sylar::ReadFixFromStreamWithSpeed	sylar/sylar/util.cc	/^bool ReadFixFromStreamWithSpeed(std::istream& is, char* data,$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,char * data,const uint64_t & size,const uint64_t & speed)
sylar::ReadFixFromStreamWithSpeed	sylar/sylar/util.h	/^bool ReadFixFromStreamWithSpeed(std::istream& is, char* data,$/;"	p	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,char * data,const uint64_t & size,const uint64_t & speed=-1)
sylar::ReadFromStream	sylar/sylar/util.h	/^bool ReadFromStream(std::istream& is, T& v) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,T & v)
sylar::ReadFromStream	sylar/sylar/util.h	/^bool ReadFromStream(std::istream& is, std::vector<T>& v) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,std::vector<T> & v)
sylar::ReadFromStreamWithSpeed	sylar/sylar/util.h	/^bool ReadFromStreamWithSpeed(std::istream& is, const T& v,$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,const T & v,const uint64_t & speed=-1)
sylar::ReadFromStreamWithSpeed	sylar/sylar/util.h	/^bool ReadFromStreamWithSpeed(std::istream& is, const std::vector<T>& v,$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::istream & is,const std::vector<T> & v,const uint64_t & speed=-1)
sylar::ReadScopedLockImpl	sylar/sylar/mutex.h	/^struct ReadScopedLockImpl {$/;"	s	namespace:sylar
sylar::ReadScopedLockImpl::ReadScopedLockImpl	sylar/sylar/mutex.h	/^    ReadScopedLockImpl(T& mutex)$/;"	f	struct:sylar::ReadScopedLockImpl	access:public	signature:(T & mutex)
sylar::ReadScopedLockImpl::lock	sylar/sylar/mutex.h	/^    void lock() {$/;"	f	struct:sylar::ReadScopedLockImpl	typeref:typename:void	access:public	signature:()
sylar::ReadScopedLockImpl::m_locked	sylar/sylar/mutex.h	/^    bool m_locked;$/;"	m	struct:sylar::ReadScopedLockImpl	typeref:typename:bool	access:private
sylar::ReadScopedLockImpl::m_mutex	sylar/sylar/mutex.h	/^    T& m_mutex;$/;"	m	struct:sylar::ReadScopedLockImpl	typeref:typename:T &	access:private
sylar::ReadScopedLockImpl::unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	struct:sylar::ReadScopedLockImpl	typeref:typename:void	access:public	signature:()
sylar::ReadScopedLockImpl::~ReadScopedLockImpl	sylar/sylar/mutex.h	/^    ~ReadScopedLockImpl() {$/;"	f	struct:sylar::ReadScopedLockImpl	access:public	signature:()
sylar::Redis	sylar/sylar/db/redis.h	/^class Redis : public ISyncRedis {$/;"	c	namespace:sylar	inherits:ISyncRedis
sylar::Redis::Redis	sylar/sylar/db/redis.cc	/^Redis::Redis() {$/;"	f	class:sylar::Redis	signature:()
sylar::Redis::Redis	sylar/sylar/db/redis.cc	/^Redis::Redis(const std::map<std::string, std::string>& conf) {$/;"	f	class:sylar::Redis	signature:(const std::map<std::string,std::string> & conf)
sylar::Redis::Redis	sylar/sylar/db/redis.h	/^    Redis();$/;"	p	class:sylar::Redis	access:public	signature:()
sylar::Redis::Redis	sylar/sylar/db/redis.h	/^    Redis(const std::map<std::string, std::string>& conf);$/;"	p	class:sylar::Redis	access:public	signature:(const std::map<std::string,std::string> & conf)
sylar::Redis::appendCmd	sylar/sylar/db/redis.cc	/^int Redis::appendCmd(const char* fmt, ...) {$/;"	f	class:sylar::Redis	typeref:typename:int	signature:(const char * fmt,...)
sylar::Redis::appendCmd	sylar/sylar/db/redis.cc	/^int Redis::appendCmd(const char* fmt, va_list ap) {$/;"	f	class:sylar::Redis	typeref:typename:int	signature:(const char * fmt,va_list ap)
sylar::Redis::appendCmd	sylar/sylar/db/redis.cc	/^int Redis::appendCmd(const std::vector<std::string>& argv) {$/;"	f	class:sylar::Redis	typeref:typename:int	signature:(const std::vector<std::string> & argv)
sylar::Redis::appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const char* fmt, ...);$/;"	p	class:sylar::Redis	typeref:typename:int	access:public	signature:(const char * fmt,...)
sylar::Redis::appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const char* fmt, va_list ap);$/;"	p	class:sylar::Redis	typeref:typename:int	access:public	signature:(const char * fmt,va_list ap)
sylar::Redis::appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const std::vector<std::string>& argv);$/;"	p	class:sylar::Redis	typeref:typename:int	access:public	signature:(const std::vector<std::string> & argv)
sylar::Redis::cmd	sylar/sylar/db/redis.cc	/^ReplyPtr Redis::cmd(const char* fmt, ...) {$/;"	f	class:sylar::Redis	typeref:typename:ReplyPtr	signature:(const char * fmt,...)
sylar::Redis::cmd	sylar/sylar/db/redis.cc	/^ReplyPtr Redis::cmd(const char* fmt, va_list ap) {$/;"	f	class:sylar::Redis	typeref:typename:ReplyPtr	signature:(const char * fmt,va_list ap)
sylar::Redis::cmd	sylar/sylar/db/redis.cc	/^ReplyPtr Redis::cmd(const std::vector<std::string>& argv) {$/;"	f	class:sylar::Redis	typeref:typename:ReplyPtr	signature:(const std::vector<std::string> & argv)
sylar::Redis::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, ...);$/;"	p	class:sylar::Redis	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,...)
sylar::Redis::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, va_list ap);$/;"	p	class:sylar::Redis	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,va_list ap)
sylar::Redis::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const std::vector<std::string>& argv);$/;"	p	class:sylar::Redis	typeref:typename:ReplyPtr	access:public	signature:(const std::vector<std::string> & argv)
sylar::Redis::connect	sylar/sylar/db/redis.cc	/^bool Redis::connect() {$/;"	f	class:sylar::Redis	typeref:typename:bool	signature:()
sylar::Redis::connect	sylar/sylar/db/redis.cc	/^bool Redis::connect(const std::string& ip, int port, uint64_t ms) {$/;"	f	class:sylar::Redis	typeref:typename:bool	signature:(const std::string & ip,int port,uint64_t ms)
sylar::Redis::connect	sylar/sylar/db/redis.h	/^    virtual bool connect();$/;"	p	class:sylar::Redis	typeref:typename:bool	access:public	signature:()
sylar::Redis::connect	sylar/sylar/db/redis.h	/^    virtual bool connect(const std::string& ip, int port, uint64_t ms = 0);$/;"	p	class:sylar::Redis	typeref:typename:bool	access:public	signature:(const std::string & ip,int port,uint64_t ms=0)
sylar::Redis::getReply	sylar/sylar/db/redis.cc	/^ReplyPtr Redis::getReply() {$/;"	f	class:sylar::Redis	typeref:typename:ReplyPtr	signature:()
sylar::Redis::getReply	sylar/sylar/db/redis.h	/^    virtual ReplyPtr getReply();$/;"	p	class:sylar::Redis	typeref:typename:ReplyPtr	access:public	signature:()
sylar::Redis::m_cmdTimeout	sylar/sylar/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:sylar::Redis	typeref:struct:timeval	access:private
sylar::Redis::m_connectMs	sylar/sylar/db/redis.h	/^    uint32_t m_connectMs;$/;"	m	class:sylar::Redis	typeref:typename:uint32_t	access:private
sylar::Redis::m_context	sylar/sylar/db/redis.h	/^    std::shared_ptr<redisContext> m_context;$/;"	m	class:sylar::Redis	typeref:typename:std::shared_ptr<redisContext>	access:private
sylar::Redis::m_host	sylar/sylar/db/redis.h	/^    std::string m_host;$/;"	m	class:sylar::Redis	typeref:typename:std::string	access:private
sylar::Redis::m_port	sylar/sylar/db/redis.h	/^    uint32_t m_port;$/;"	m	class:sylar::Redis	typeref:typename:uint32_t	access:private
sylar::Redis::ptr	sylar/sylar/db/redis.h	/^    typedef std::shared_ptr<Redis> ptr;$/;"	t	class:sylar::Redis	typeref:typename:std::shared_ptr<Redis>	access:public
sylar::Redis::reconnect	sylar/sylar/db/redis.cc	/^bool Redis::reconnect() {$/;"	f	class:sylar::Redis	typeref:typename:bool	signature:()
sylar::Redis::reconnect	sylar/sylar/db/redis.h	/^    virtual bool reconnect();$/;"	p	class:sylar::Redis	typeref:typename:bool	access:public	signature:()
sylar::Redis::setTimeout	sylar/sylar/db/redis.cc	/^bool Redis::setTimeout(uint64_t v) {$/;"	f	class:sylar::Redis	typeref:typename:bool	signature:(uint64_t v)
sylar::Redis::setTimeout	sylar/sylar/db/redis.h	/^    virtual bool setTimeout(uint64_t ms);$/;"	p	class:sylar::Redis	typeref:typename:bool	access:public	signature:(uint64_t ms)
sylar::RedisCluster	sylar/sylar/db/redis.h	/^class RedisCluster : public ISyncRedis {$/;"	c	namespace:sylar	inherits:ISyncRedis
sylar::RedisCluster::RedisCluster	sylar/sylar/db/redis.cc	/^RedisCluster::RedisCluster() {$/;"	f	class:sylar::RedisCluster	signature:()
sylar::RedisCluster::RedisCluster	sylar/sylar/db/redis.cc	/^RedisCluster::RedisCluster(const std::map<std::string, std::string>& conf) {$/;"	f	class:sylar::RedisCluster	signature:(const std::map<std::string,std::string> & conf)
sylar::RedisCluster::RedisCluster	sylar/sylar/db/redis.h	/^    RedisCluster();$/;"	p	class:sylar::RedisCluster	access:public	signature:()
sylar::RedisCluster::RedisCluster	sylar/sylar/db/redis.h	/^    RedisCluster(const std::map<std::string, std::string>& conf);$/;"	p	class:sylar::RedisCluster	access:public	signature:(const std::map<std::string,std::string> & conf)
sylar::RedisCluster::appendCmd	sylar/sylar/db/redis.cc	/^int RedisCluster::appendCmd(const char* fmt, ...) {$/;"	f	class:sylar::RedisCluster	typeref:typename:int	signature:(const char * fmt,...)
sylar::RedisCluster::appendCmd	sylar/sylar/db/redis.cc	/^int RedisCluster::appendCmd(const char* fmt, va_list ap) {$/;"	f	class:sylar::RedisCluster	typeref:typename:int	signature:(const char * fmt,va_list ap)
sylar::RedisCluster::appendCmd	sylar/sylar/db/redis.cc	/^int RedisCluster::appendCmd(const std::vector<std::string>& argv) {$/;"	f	class:sylar::RedisCluster	typeref:typename:int	signature:(const std::vector<std::string> & argv)
sylar::RedisCluster::appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const char* fmt, ...);$/;"	p	class:sylar::RedisCluster	typeref:typename:int	access:public	signature:(const char * fmt,...)
sylar::RedisCluster::appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const char* fmt, va_list ap);$/;"	p	class:sylar::RedisCluster	typeref:typename:int	access:public	signature:(const char * fmt,va_list ap)
sylar::RedisCluster::appendCmd	sylar/sylar/db/redis.h	/^    virtual int appendCmd(const std::vector<std::string>& argv);$/;"	p	class:sylar::RedisCluster	typeref:typename:int	access:public	signature:(const std::vector<std::string> & argv)
sylar::RedisCluster::cmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisCluster::cmd(const char* fmt, ...) {$/;"	f	class:sylar::RedisCluster	typeref:typename:ReplyPtr	signature:(const char * fmt,...)
sylar::RedisCluster::cmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisCluster::cmd(const char* fmt, va_list ap) {$/;"	f	class:sylar::RedisCluster	typeref:typename:ReplyPtr	signature:(const char * fmt,va_list ap)
sylar::RedisCluster::cmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisCluster::cmd(const std::vector<std::string>& argv) {$/;"	f	class:sylar::RedisCluster	typeref:typename:ReplyPtr	signature:(const std::vector<std::string> & argv)
sylar::RedisCluster::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, ...);$/;"	p	class:sylar::RedisCluster	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,...)
sylar::RedisCluster::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const char* fmt, va_list ap);$/;"	p	class:sylar::RedisCluster	typeref:typename:ReplyPtr	access:public	signature:(const char * fmt,va_list ap)
sylar::RedisCluster::cmd	sylar/sylar/db/redis.h	/^    virtual ReplyPtr cmd(const std::vector<std::string>& argv);$/;"	p	class:sylar::RedisCluster	typeref:typename:ReplyPtr	access:public	signature:(const std::vector<std::string> & argv)
sylar::RedisCluster::connect	sylar/sylar/db/redis.cc	/^bool RedisCluster::connect() {$/;"	f	class:sylar::RedisCluster	typeref:typename:bool	signature:()
sylar::RedisCluster::connect	sylar/sylar/db/redis.cc	/^bool RedisCluster::connect(const std::string& ip, int port, uint64_t ms) {$/;"	f	class:sylar::RedisCluster	typeref:typename:bool	signature:(const std::string & ip,int port,uint64_t ms)
sylar::RedisCluster::connect	sylar/sylar/db/redis.h	/^    virtual bool connect();$/;"	p	class:sylar::RedisCluster	typeref:typename:bool	access:public	signature:()
sylar::RedisCluster::connect	sylar/sylar/db/redis.h	/^    virtual bool connect(const std::string& ip, int port, uint64_t ms = 0);$/;"	p	class:sylar::RedisCluster	typeref:typename:bool	access:public	signature:(const std::string & ip,int port,uint64_t ms=0)
sylar::RedisCluster::getReply	sylar/sylar/db/redis.cc	/^ReplyPtr RedisCluster::getReply() {$/;"	f	class:sylar::RedisCluster	typeref:typename:ReplyPtr	signature:()
sylar::RedisCluster::getReply	sylar/sylar/db/redis.h	/^    virtual ReplyPtr getReply();$/;"	p	class:sylar::RedisCluster	typeref:typename:ReplyPtr	access:public	signature:()
sylar::RedisCluster::m_cmdTimeout	sylar/sylar/db/redis.h	/^    struct timeval m_cmdTimeout;$/;"	m	class:sylar::RedisCluster	typeref:struct:timeval	access:private
sylar::RedisCluster::m_connectMs	sylar/sylar/db/redis.h	/^    uint32_t m_connectMs;$/;"	m	class:sylar::RedisCluster	typeref:typename:uint32_t	access:private
sylar::RedisCluster::m_context	sylar/sylar/db/redis.h	/^    std::shared_ptr<redisClusterContext> m_context;$/;"	m	class:sylar::RedisCluster	typeref:typename:std::shared_ptr<redisClusterContext>	access:private
sylar::RedisCluster::m_host	sylar/sylar/db/redis.h	/^    std::string m_host;$/;"	m	class:sylar::RedisCluster	typeref:typename:std::string	access:private
sylar::RedisCluster::m_port	sylar/sylar/db/redis.h	/^    uint32_t m_port;$/;"	m	class:sylar::RedisCluster	typeref:typename:uint32_t	access:private
sylar::RedisCluster::ptr	sylar/sylar/db/redis.h	/^    typedef std::shared_ptr<RedisCluster> ptr;$/;"	t	class:sylar::RedisCluster	typeref:typename:std::shared_ptr<RedisCluster>	access:public
sylar::RedisCluster::reconnect	sylar/sylar/db/redis.cc	/^bool RedisCluster::reconnect() {$/;"	f	class:sylar::RedisCluster	typeref:typename:bool	signature:()
sylar::RedisCluster::reconnect	sylar/sylar/db/redis.h	/^    virtual bool reconnect();$/;"	p	class:sylar::RedisCluster	typeref:typename:bool	access:public	signature:()
sylar::RedisCluster::setTimeout	sylar/sylar/db/redis.cc	/^bool RedisCluster::setTimeout(uint64_t ms) {$/;"	f	class:sylar::RedisCluster	typeref:typename:bool	signature:(uint64_t ms)
sylar::RedisCluster::setTimeout	sylar/sylar/db/redis.h	/^    virtual bool setTimeout(uint64_t ms);$/;"	p	class:sylar::RedisCluster	typeref:typename:bool	access:public	signature:(uint64_t ms)
sylar::RedisManager	sylar/sylar/db/redis.h	/^class RedisManager {$/;"	c	namespace:sylar
sylar::RedisManager::RedisManager	sylar/sylar/db/redis.cc	/^RedisManager::RedisManager() {$/;"	f	class:sylar::RedisManager	signature:()
sylar::RedisManager::RedisManager	sylar/sylar/db/redis.h	/^    RedisManager();$/;"	p	class:sylar::RedisManager	access:public	signature:()
sylar::RedisManager::dump	sylar/sylar/db/redis.cc	/^std::ostream& RedisManager::dump(std::ostream& os) {$/;"	f	class:sylar::RedisManager	typeref:typename:std::ostream &	signature:(std::ostream & os)
sylar::RedisManager::dump	sylar/sylar/db/redis.h	/^    std::ostream& dump(std::ostream& os);$/;"	p	class:sylar::RedisManager	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
sylar::RedisManager::freeRedis	sylar/sylar/db/redis.cc	/^void RedisManager::freeRedis(IRedis* r) {$/;"	f	class:sylar::RedisManager	typeref:typename:void	signature:(IRedis * r)
sylar::RedisManager::freeRedis	sylar/sylar/db/redis.h	/^    void freeRedis(IRedis* r);$/;"	p	class:sylar::RedisManager	typeref:typename:void	access:private	signature:(IRedis * r)
sylar::RedisManager::get	sylar/sylar/db/redis.cc	/^IRedis::ptr RedisManager::get(const std::string& name) {$/;"	f	class:sylar::RedisManager	typeref:typename:IRedis::ptr	signature:(const std::string & name)
sylar::RedisManager::get	sylar/sylar/db/redis.h	/^    IRedis::ptr get(const std::string& name);$/;"	p	class:sylar::RedisManager	typeref:typename:IRedis::ptr	access:public	signature:(const std::string & name)
sylar::RedisManager::init	sylar/sylar/db/redis.cc	/^void RedisManager::init() {$/;"	f	class:sylar::RedisManager	typeref:typename:void	signature:()
sylar::RedisManager::init	sylar/sylar/db/redis.h	/^    void init();$/;"	p	class:sylar::RedisManager	typeref:typename:void	access:private	signature:()
sylar::RedisManager::m_config	sylar/sylar/db/redis.h	/^    std::map<std::string, std::map<std::string, std::string> > m_config;$/;"	m	class:sylar::RedisManager	typeref:typename:std::map<std::string,std::map<std::string,std::string>>	access:private
sylar::RedisManager::m_datas	sylar/sylar/db/redis.h	/^    std::map<std::string, std::list<IRedis*> > m_datas;$/;"	m	class:sylar::RedisManager	typeref:typename:std::map<std::string,std::list<IRedis * >>	access:private
sylar::RedisManager::m_mutex	sylar/sylar/db/redis.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::RedisManager	typeref:typename:sylar::RWMutex	access:private
sylar::RedisMgr	sylar/sylar/db/redis.h	/^typedef sylar::Singleton<RedisManager> RedisMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<RedisManager>
sylar::RedisReplyClone	sylar/sylar/db/redis.cc	/^redisReply* RedisReplyClone(redisReply* r) {$/;"	f	namespace:sylar	typeref:typename:redisReply *	signature:(redisReply * r)
sylar::RedisUtil	sylar/sylar/db/redis.h	/^class RedisUtil {$/;"	c	namespace:sylar
sylar::RedisUtil::Cmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisUtil::Cmd(const std::string& name, const char* fmt, ...) {$/;"	f	class:sylar::RedisUtil	typeref:typename:ReplyPtr	signature:(const std::string & name,const char * fmt,...)
sylar::RedisUtil::Cmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisUtil::Cmd(const std::string& name, const char* fmt, va_list ap) {$/;"	f	class:sylar::RedisUtil	typeref:typename:ReplyPtr	signature:(const std::string & name,const char * fmt,va_list ap)
sylar::RedisUtil::Cmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisUtil::Cmd(const std::string& name, const std::vector<std::string>& args) {$/;"	f	class:sylar::RedisUtil	typeref:typename:ReplyPtr	signature:(const std::string & name,const std::vector<std::string> & args)
sylar::RedisUtil::Cmd	sylar/sylar/db/redis.h	/^    static ReplyPtr Cmd(const std::string& name, const char* fmt, ...);$/;"	p	class:sylar::RedisUtil	typeref:typename:ReplyPtr	access:public	signature:(const std::string & name,const char * fmt,...)
sylar::RedisUtil::Cmd	sylar/sylar/db/redis.h	/^    static ReplyPtr Cmd(const std::string& name, const char* fmt, va_list ap); $/;"	p	class:sylar::RedisUtil	typeref:typename:ReplyPtr	access:public	signature:(const std::string & name,const char * fmt,va_list ap)
sylar::RedisUtil::Cmd	sylar/sylar/db/redis.h	/^    static ReplyPtr Cmd(const std::string& name, const std::vector<std::string>& args); $/;"	p	class:sylar::RedisUtil	typeref:typename:ReplyPtr	access:public	signature:(const std::string & name,const std::vector<std::string> & args)
sylar::RedisUtil::TryCmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisUtil::TryCmd(const std::string& name, uint32_t count, const char* fmt, ...) {$/;"	f	class:sylar::RedisUtil	typeref:typename:ReplyPtr	signature:(const std::string & name,uint32_t count,const char * fmt,...)
sylar::RedisUtil::TryCmd	sylar/sylar/db/redis.cc	/^ReplyPtr RedisUtil::TryCmd(const std::string& name, uint32_t count, const std::vector<std::strin/;"	f	class:sylar::RedisUtil	typeref:typename:ReplyPtr	signature:(const std::string & name,uint32_t count,const std::vector<std::string> & args)
sylar::RedisUtil::TryCmd	sylar/sylar/db/redis.h	/^    static ReplyPtr TryCmd(const std::string& name, uint32_t count, const char* fmt, ...);$/;"	p	class:sylar::RedisUtil	typeref:typename:ReplyPtr	access:public	signature:(const std::string & name,uint32_t count,const char * fmt,...)
sylar::RedisUtil::TryCmd	sylar/sylar/db/redis.h	/^    static ReplyPtr TryCmd(const std::string& name, uint32_t count, const std::vector<std::strin/;"	p	class:sylar::RedisUtil	typeref:typename:ReplyPtr	access:public	signature:(const std::string & name,uint32_t count,const std::vector<std::string> & args)
sylar::ReplyPtr	sylar/sylar/db/redis.h	/^typedef std::shared_ptr<redisReply> ReplyPtr;$/;"	t	namespace:sylar	typeref:typename:std::shared_ptr<redisReply>
sylar::Request	sylar/sylar/protocol.h	/^class Request : public Message {$/;"	c	namespace:sylar	inherits:Message
sylar::Request::Request	sylar/sylar/protocol.cc	/^Request::Request()$/;"	f	class:sylar::Request	signature:()
sylar::Request::Request	sylar/sylar/protocol.h	/^    Request();$/;"	p	class:sylar::Request	access:public	signature:()
sylar::Request::getCmd	sylar/sylar/protocol.h	/^    uint32_t getCmd() const { return m_cmd;}$/;"	f	class:sylar::Request	typeref:typename:uint32_t	access:public	signature:() const
sylar::Request::getSn	sylar/sylar/protocol.h	/^    uint32_t getSn() const { return m_sn;}$/;"	f	class:sylar::Request	typeref:typename:uint32_t	access:public	signature:() const
sylar::Request::m_cmd	sylar/sylar/protocol.h	/^    uint32_t m_cmd;$/;"	m	class:sylar::Request	typeref:typename:uint32_t	access:protected
sylar::Request::m_sn	sylar/sylar/protocol.h	/^    uint32_t m_sn;$/;"	m	class:sylar::Request	typeref:typename:uint32_t	access:protected
sylar::Request::parseFromByteArray	sylar/sylar/protocol.cc	/^bool Request::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::Request	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::Request::parseFromByteArray	sylar/sylar/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::Request	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::Request::ptr	sylar/sylar/protocol.h	/^    typedef std::shared_ptr<Request> ptr;$/;"	t	class:sylar::Request	typeref:typename:std::shared_ptr<Request>	access:public
sylar::Request::serializeToByteArray	sylar/sylar/protocol.cc	/^bool Request::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::Request	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::Request::serializeToByteArray	sylar/sylar/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::Request	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::Request::setCmd	sylar/sylar/protocol.h	/^    void setCmd(uint32_t v) { m_cmd = v;}$/;"	f	class:sylar::Request	typeref:typename:void	access:public	signature:(uint32_t v)
sylar::Request::setSn	sylar/sylar/protocol.h	/^    void setSn(uint32_t v) { m_sn = v;}$/;"	f	class:sylar::Request	typeref:typename:void	access:public	signature:(uint32_t v)
sylar::Res	sylar/sylar/db/redis.cc	/^struct Res {$/;"	s	namespace:sylar	file:
sylar::Res::ctx	sylar/sylar/db/redis.cc	/^    redisAsyncContext* ctx;$/;"	m	struct:sylar::Res	typeref:typename:redisAsyncContext *	file:	access:public
sylar::Res::event	sylar/sylar/db/redis.cc	/^    struct event* event;$/;"	m	struct:sylar::Res	typeref:struct:event *	file:	access:public
sylar::Response	sylar/sylar/protocol.h	/^class Response : public Message {$/;"	c	namespace:sylar	inherits:Message
sylar::Response::Response	sylar/sylar/protocol.cc	/^Response::Response()$/;"	f	class:sylar::Response	signature:()
sylar::Response::Response	sylar/sylar/protocol.h	/^    Response();$/;"	p	class:sylar::Response	access:public	signature:()
sylar::Response::getCmd	sylar/sylar/protocol.h	/^    uint32_t getCmd() const { return m_cmd;}$/;"	f	class:sylar::Response	typeref:typename:uint32_t	access:public	signature:() const
sylar::Response::getResult	sylar/sylar/protocol.h	/^    uint32_t getResult() const { return m_result;}$/;"	f	class:sylar::Response	typeref:typename:uint32_t	access:public	signature:() const
sylar::Response::getResultStr	sylar/sylar/protocol.h	/^    const std::string& getResultStr() const { return m_resultStr;}$/;"	f	class:sylar::Response	typeref:typename:const std::string &	access:public	signature:() const
sylar::Response::getSn	sylar/sylar/protocol.h	/^    uint32_t getSn() const { return m_sn;}$/;"	f	class:sylar::Response	typeref:typename:uint32_t	access:public	signature:() const
sylar::Response::m_cmd	sylar/sylar/protocol.h	/^    uint32_t m_cmd;$/;"	m	class:sylar::Response	typeref:typename:uint32_t	access:protected
sylar::Response::m_result	sylar/sylar/protocol.h	/^    uint32_t m_result;$/;"	m	class:sylar::Response	typeref:typename:uint32_t	access:protected
sylar::Response::m_resultStr	sylar/sylar/protocol.h	/^    std::string m_resultStr;$/;"	m	class:sylar::Response	typeref:typename:std::string	access:protected
sylar::Response::m_sn	sylar/sylar/protocol.h	/^    uint32_t m_sn;$/;"	m	class:sylar::Response	typeref:typename:uint32_t	access:protected
sylar::Response::parseFromByteArray	sylar/sylar/protocol.cc	/^bool Response::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::Response	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::Response::parseFromByteArray	sylar/sylar/protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::Response	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::Response::ptr	sylar/sylar/protocol.h	/^    typedef std::shared_ptr<Response> ptr;$/;"	t	class:sylar::Response	typeref:typename:std::shared_ptr<Response>	access:public
sylar::Response::serializeToByteArray	sylar/sylar/protocol.cc	/^bool Response::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::Response	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::Response::serializeToByteArray	sylar/sylar/protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::Response	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::Response::setCmd	sylar/sylar/protocol.h	/^    void setCmd(uint32_t v) { m_cmd = v;}$/;"	f	class:sylar::Response	typeref:typename:void	access:public	signature:(uint32_t v)
sylar::Response::setResult	sylar/sylar/protocol.h	/^    void setResult(uint32_t v) { m_result = v;}$/;"	f	class:sylar::Response	typeref:typename:void	access:public	signature:(uint32_t v)
sylar::Response::setResultStr	sylar/sylar/protocol.h	/^    void setResultStr(const std::string& v) { m_resultStr = v;}$/;"	f	class:sylar::Response	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::Response::setSn	sylar/sylar/protocol.h	/^    void setSn(uint32_t v) { m_sn = v;}$/;"	f	class:sylar::Response	typeref:typename:void	access:public	signature:(uint32_t v)
sylar::RockBody	sylar/sylar/rock/rock_protocol.h	/^class RockBody {$/;"	c	namespace:sylar
sylar::RockBody::getAsPB	sylar/sylar/rock/rock_protocol.h	/^    std::shared_ptr<T> getAsPB() const {$/;"	f	class:sylar::RockBody	typeref:typename:std::shared_ptr<T>	access:public	signature:() const
sylar::RockBody::getBody	sylar/sylar/rock/rock_protocol.h	/^    const std::string& getBody() const { return m_body;}$/;"	f	class:sylar::RockBody	typeref:typename:const std::string &	access:public	signature:() const
sylar::RockBody::m_body	sylar/sylar/rock/rock_protocol.h	/^    std::string m_body;$/;"	m	class:sylar::RockBody	typeref:typename:std::string	access:protected
sylar::RockBody::parseFromByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockBody::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockBody	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::RockBody::parseFromByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray);$/;"	p	class:sylar::RockBody	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::RockBody::ptr	sylar/sylar/rock/rock_protocol.h	/^    typedef std::shared_ptr<RockBody> ptr;$/;"	t	class:sylar::RockBody	typeref:typename:std::shared_ptr<RockBody>	access:public
sylar::RockBody::serializeToByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockBody::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockBody	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::RockBody::serializeToByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray);$/;"	p	class:sylar::RockBody	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::RockBody::setAsPB	sylar/sylar/rock/rock_protocol.h	/^    bool setAsPB(const T& v) {$/;"	f	class:sylar::RockBody	typeref:typename:bool	access:public	signature:(const T & v)
sylar::RockBody::setBody	sylar/sylar/rock/rock_protocol.h	/^    void setBody(const std::string& v) { m_body = v;}$/;"	f	class:sylar::RockBody	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::RockBody::~RockBody	sylar/sylar/rock/rock_protocol.h	/^    virtual ~RockBody(){}$/;"	f	class:sylar::RockBody	access:public	signature:()
sylar::RockConnection	sylar/sylar/rock/rock_stream.h	/^class RockConnection : public RockStream {$/;"	c	namespace:sylar	inherits:RockStream
sylar::RockConnection::RockConnection	sylar/sylar/rock/rock_stream.cc	/^RockConnection::RockConnection()$/;"	f	class:sylar::RockConnection	signature:()
sylar::RockConnection::RockConnection	sylar/sylar/rock/rock_stream.h	/^    RockConnection();$/;"	p	class:sylar::RockConnection	access:public	signature:()
sylar::RockConnection::connect	sylar/sylar/rock/rock_stream.cc	/^bool RockConnection::connect(sylar::Address::ptr addr) {$/;"	f	class:sylar::RockConnection	typeref:typename:bool	signature:(sylar::Address::ptr addr)
sylar::RockConnection::connect	sylar/sylar/rock/rock_stream.h	/^    bool connect(sylar::Address::ptr addr);$/;"	p	class:sylar::RockConnection	typeref:typename:bool	access:public	signature:(sylar::Address::ptr addr)
sylar::RockConnection::ptr	sylar/sylar/rock/rock_stream.h	/^    typedef std::shared_ptr<RockConnection> ptr;$/;"	t	class:sylar::RockConnection	typeref:typename:std::shared_ptr<RockConnection>	access:public
sylar::RockMessageDecoder	sylar/sylar/rock/rock_protocol.h	/^class RockMessageDecoder : public MessageDecoder {$/;"	c	namespace:sylar	inherits:MessageDecoder
sylar::RockMessageDecoder::parseFrom	sylar/sylar/rock/rock_protocol.cc	/^Message::ptr RockMessageDecoder::parseFrom(Stream::ptr stream) {$/;"	f	class:sylar::RockMessageDecoder	typeref:typename:Message::ptr	signature:(Stream::ptr stream)
sylar::RockMessageDecoder::parseFrom	sylar/sylar/rock/rock_protocol.h	/^    virtual Message::ptr parseFrom(Stream::ptr stream) override;$/;"	p	class:sylar::RockMessageDecoder	typeref:typename:Message::ptr	access:public	signature:(Stream::ptr stream)
sylar::RockMessageDecoder::ptr	sylar/sylar/rock/rock_protocol.h	/^    typedef std::shared_ptr<RockMessageDecoder> ptr;$/;"	t	class:sylar::RockMessageDecoder	typeref:typename:std::shared_ptr<RockMessageDecoder>	access:public
sylar::RockMessageDecoder::serializeTo	sylar/sylar/rock/rock_protocol.cc	/^int32_t RockMessageDecoder::serializeTo(Stream::ptr stream, Message::ptr msg) {$/;"	f	class:sylar::RockMessageDecoder	typeref:typename:int32_t	signature:(Stream::ptr stream,Message::ptr msg)
sylar::RockMessageDecoder::serializeTo	sylar/sylar/rock/rock_protocol.h	/^    virtual int32_t serializeTo(Stream::ptr stream, Message::ptr msg) override;$/;"	p	class:sylar::RockMessageDecoder	typeref:typename:int32_t	access:public	signature:(Stream::ptr stream,Message::ptr msg)
sylar::RockModule	sylar/sylar/module.h	/^class RockModule : public Module {$/;"	c	namespace:sylar	inherits:Module
sylar::RockModule::RockModule	sylar/sylar/module.cc	/^RockModule::RockModule(const std::string& name$/;"	f	class:sylar::RockModule	signature:(const std::string & name,const std::string & version,const std::string & filename)
sylar::RockModule::RockModule	sylar/sylar/module.h	/^    RockModule(const std::string& name$/;"	p	class:sylar::RockModule	access:public	signature:(const std::string & name,const std::string & version,const std::string & filename)
sylar::RockModule::handleNotify	sylar/sylar/module.cc	/^bool RockModule::handleNotify(sylar::Message::ptr notify$/;"	f	class:sylar::RockModule	typeref:typename:bool	signature:(sylar::Message::ptr notify,sylar::Stream::ptr stream)
sylar::RockModule::handleNotify	sylar/sylar/module.h	/^    virtual bool handleNotify(sylar::Message::ptr notify$/;"	p	class:sylar::RockModule	typeref:typename:bool	access:public	signature:(sylar::Message::ptr notify,sylar::Stream::ptr stream)
sylar::RockModule::handleRequest	sylar/sylar/module.cc	/^bool RockModule::handleRequest(sylar::Message::ptr req$/;"	f	class:sylar::RockModule	typeref:typename:bool	signature:(sylar::Message::ptr req,sylar::Message::ptr rsp,sylar::Stream::ptr stream)
sylar::RockModule::handleRequest	sylar/sylar/module.h	/^    virtual bool handleRequest(sylar::Message::ptr req$/;"	p	class:sylar::RockModule	typeref:typename:bool	access:public	signature:(sylar::Message::ptr req,sylar::Message::ptr rsp,sylar::Stream::ptr stream)
sylar::RockModule::handleRockNotify	sylar/sylar/module.h	/^    virtual bool handleRockNotify(sylar::RockNotify::ptr notify$/;"	p	class:sylar::RockModule	typeref:typename:bool	access:public	signature:(sylar::RockNotify::ptr notify,sylar::RockStream::ptr stream)
sylar::RockModule::handleRockRequest	sylar/sylar/module.h	/^    virtual bool handleRockRequest(sylar::RockRequest::ptr request$/;"	p	class:sylar::RockModule	typeref:typename:bool	access:public	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
sylar::RockModule::ptr	sylar/sylar/module.h	/^    typedef std::shared_ptr<RockModule> ptr;$/;"	t	class:sylar::RockModule	typeref:typename:std::shared_ptr<RockModule>	access:public
sylar::RockMsgHeader	sylar/sylar/rock/rock_protocol.h	/^struct RockMsgHeader {$/;"	s	namespace:sylar
sylar::RockMsgHeader::RockMsgHeader	sylar/sylar/rock/rock_protocol.cc	/^RockMsgHeader::RockMsgHeader()$/;"	f	class:sylar::RockMsgHeader	signature:()
sylar::RockMsgHeader::RockMsgHeader	sylar/sylar/rock/rock_protocol.h	/^    RockMsgHeader();$/;"	p	struct:sylar::RockMsgHeader	access:public	signature:()
sylar::RockMsgHeader::flag	sylar/sylar/rock/rock_protocol.h	/^    uint8_t flag;$/;"	m	struct:sylar::RockMsgHeader	typeref:typename:uint8_t	access:public
sylar::RockMsgHeader::length	sylar/sylar/rock/rock_protocol.h	/^    int32_t length;$/;"	m	struct:sylar::RockMsgHeader	typeref:typename:int32_t	access:public
sylar::RockMsgHeader::magic	sylar/sylar/rock/rock_protocol.h	/^    uint8_t magic[2];$/;"	m	struct:sylar::RockMsgHeader	typeref:typename:uint8_t[2]	access:public
sylar::RockMsgHeader::version	sylar/sylar/rock/rock_protocol.h	/^    uint8_t version;$/;"	m	struct:sylar::RockMsgHeader	typeref:typename:uint8_t	access:public
sylar::RockNotify	sylar/sylar/rock/rock_protocol.h	/^class RockNotify : public Notify, public RockBody {$/;"	c	namespace:sylar	inherits:Notify,RockBody
sylar::RockNotify::getName	sylar/sylar/rock/rock_protocol.cc	/^const std::string& RockNotify::getName() const {$/;"	f	class:sylar::RockNotify	typeref:typename:const std::string &	signature:() const
sylar::RockNotify::getName	sylar/sylar/rock/rock_protocol.h	/^    virtual const std::string& getName() const override;$/;"	p	class:sylar::RockNotify	typeref:typename:const std::string &	access:public	signature:() const
sylar::RockNotify::getType	sylar/sylar/rock/rock_protocol.cc	/^int32_t RockNotify::getType() const {$/;"	f	class:sylar::RockNotify	typeref:typename:int32_t	signature:() const
sylar::RockNotify::getType	sylar/sylar/rock/rock_protocol.h	/^    virtual int32_t getType() const override;$/;"	p	class:sylar::RockNotify	typeref:typename:int32_t	access:public	signature:() const
sylar::RockNotify::parseFromByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockNotify::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockNotify	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::RockNotify::parseFromByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::RockNotify	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::RockNotify::ptr	sylar/sylar/rock/rock_protocol.h	/^    typedef std::shared_ptr<RockNotify> ptr;$/;"	t	class:sylar::RockNotify	typeref:typename:std::shared_ptr<RockNotify>	access:public
sylar::RockNotify::serializeToByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockNotify::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockNotify	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::RockNotify::serializeToByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::RockNotify	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::RockNotify::toString	sylar/sylar/rock/rock_protocol.cc	/^std::string RockNotify::toString() const {$/;"	f	class:sylar::RockNotify	typeref:typename:std::string	signature:() const
sylar::RockNotify::toString	sylar/sylar/rock/rock_protocol.h	/^    virtual std::string toString() const override;$/;"	p	class:sylar::RockNotify	typeref:typename:std::string	access:public	signature:() const
sylar::RockRequest	sylar/sylar/rock/rock_protocol.h	/^class RockRequest : public Request, public RockBody {$/;"	c	namespace:sylar	inherits:Request,RockBody
sylar::RockRequest::createResponse	sylar/sylar/rock/rock_protocol.cc	/^std::shared_ptr<RockResponse> RockRequest::createResponse() {$/;"	f	class:sylar::RockRequest	typeref:typename:std::shared_ptr<RockResponse>	signature:()
sylar::RockRequest::createResponse	sylar/sylar/rock/rock_protocol.h	/^    std::shared_ptr<RockResponse> createResponse();$/;"	p	class:sylar::RockRequest	typeref:typename:std::shared_ptr<RockResponse>	access:public	signature:()
sylar::RockRequest::getName	sylar/sylar/rock/rock_protocol.cc	/^const std::string& RockRequest::getName() const {$/;"	f	class:sylar::RockRequest	typeref:typename:const std::string &	signature:() const
sylar::RockRequest::getName	sylar/sylar/rock/rock_protocol.h	/^    virtual const std::string& getName() const override;$/;"	p	class:sylar::RockRequest	typeref:typename:const std::string &	access:public	signature:() const
sylar::RockRequest::getType	sylar/sylar/rock/rock_protocol.cc	/^int32_t RockRequest::getType() const {$/;"	f	class:sylar::RockRequest	typeref:typename:int32_t	signature:() const
sylar::RockRequest::getType	sylar/sylar/rock/rock_protocol.h	/^    virtual int32_t getType() const override;$/;"	p	class:sylar::RockRequest	typeref:typename:int32_t	access:public	signature:() const
sylar::RockRequest::parseFromByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockRequest::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockRequest	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::RockRequest::parseFromByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::RockRequest	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::RockRequest::ptr	sylar/sylar/rock/rock_protocol.h	/^    typedef std::shared_ptr<RockRequest> ptr;$/;"	t	class:sylar::RockRequest	typeref:typename:std::shared_ptr<RockRequest>	access:public
sylar::RockRequest::serializeToByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockRequest::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockRequest	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::RockRequest::serializeToByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::RockRequest	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::RockRequest::toString	sylar/sylar/rock/rock_protocol.cc	/^std::string RockRequest::toString() const {$/;"	f	class:sylar::RockRequest	typeref:typename:std::string	signature:() const
sylar::RockRequest::toString	sylar/sylar/rock/rock_protocol.h	/^    virtual std::string toString() const override;$/;"	p	class:sylar::RockRequest	typeref:typename:std::string	access:public	signature:() const
sylar::RockResponse	sylar/sylar/rock/rock_protocol.h	/^class RockResponse : public Response, public RockBody {$/;"	c	namespace:sylar	inherits:Response,RockBody
sylar::RockResponse::getName	sylar/sylar/rock/rock_protocol.cc	/^const std::string& RockResponse::getName() const {$/;"	f	class:sylar::RockResponse	typeref:typename:const std::string &	signature:() const
sylar::RockResponse::getName	sylar/sylar/rock/rock_protocol.h	/^    virtual const std::string& getName() const override;$/;"	p	class:sylar::RockResponse	typeref:typename:const std::string &	access:public	signature:() const
sylar::RockResponse::getType	sylar/sylar/rock/rock_protocol.cc	/^int32_t RockResponse::getType() const {$/;"	f	class:sylar::RockResponse	typeref:typename:int32_t	signature:() const
sylar::RockResponse::getType	sylar/sylar/rock/rock_protocol.h	/^    virtual int32_t getType() const override;$/;"	p	class:sylar::RockResponse	typeref:typename:int32_t	access:public	signature:() const
sylar::RockResponse::parseFromByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockResponse::parseFromByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockResponse	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::RockResponse::parseFromByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool parseFromByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::RockResponse	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::RockResponse::ptr	sylar/sylar/rock/rock_protocol.h	/^    typedef std::shared_ptr<RockResponse> ptr;$/;"	t	class:sylar::RockResponse	typeref:typename:std::shared_ptr<RockResponse>	access:public
sylar::RockResponse::serializeToByteArray	sylar/sylar/rock/rock_protocol.cc	/^bool RockResponse::serializeToByteArray(ByteArray::ptr bytearray) {$/;"	f	class:sylar::RockResponse	typeref:typename:bool	signature:(ByteArray::ptr bytearray)
sylar::RockResponse::serializeToByteArray	sylar/sylar/rock/rock_protocol.h	/^    virtual bool serializeToByteArray(ByteArray::ptr bytearray) override;$/;"	p	class:sylar::RockResponse	typeref:typename:bool	access:public	signature:(ByteArray::ptr bytearray)
sylar::RockResponse::toString	sylar/sylar/rock/rock_protocol.cc	/^std::string RockResponse::toString() const {$/;"	f	class:sylar::RockResponse	typeref:typename:std::string	signature:() const
sylar::RockResponse::toString	sylar/sylar/rock/rock_protocol.h	/^    virtual std::string toString() const override;$/;"	p	class:sylar::RockResponse	typeref:typename:std::string	access:public	signature:() const
sylar::RockResult	sylar/sylar/rock/rock_stream.h	/^struct RockResult {$/;"	s	namespace:sylar
sylar::RockResult::RockResult	sylar/sylar/rock/rock_stream.h	/^   RockResult(int32_t _result, int32_t _used, RockResponse::ptr rsp, RockRequest::ptr req)$/;"	f	struct:sylar::RockResult	access:public	signature:(int32_t _result,int32_t _used,RockResponse::ptr rsp,RockRequest::ptr req)
sylar::RockResult::ptr	sylar/sylar/rock/rock_stream.h	/^   typedef std::shared_ptr<RockResult> ptr; $/;"	t	struct:sylar::RockResult	typeref:typename:std::shared_ptr<RockResult>	access:public
sylar::RockResult::request	sylar/sylar/rock/rock_stream.h	/^   RockRequest::ptr request;$/;"	m	struct:sylar::RockResult	typeref:typename:RockRequest::ptr	access:public
sylar::RockResult::response	sylar/sylar/rock/rock_stream.h	/^   RockResponse::ptr response;$/;"	m	struct:sylar::RockResult	typeref:typename:RockResponse::ptr	access:public
sylar::RockResult::result	sylar/sylar/rock/rock_stream.h	/^   int32_t result;$/;"	m	struct:sylar::RockResult	typeref:typename:int32_t	access:public
sylar::RockResult::toString	sylar/sylar/rock/rock_stream.cc	/^std::string RockResult::toString() const {$/;"	f	class:sylar::RockResult	typeref:typename:std::string	signature:() const
sylar::RockResult::toString	sylar/sylar/rock/rock_stream.h	/^   std::string toString() const;$/;"	p	struct:sylar::RockResult	typeref:typename:std::string	access:public	signature:() const
sylar::RockResult::used	sylar/sylar/rock/rock_stream.h	/^   int32_t used;$/;"	m	struct:sylar::RockResult	typeref:typename:int32_t	access:public
sylar::RockSDLoadBalance	sylar/sylar/rock/rock_stream.h	/^class RockSDLoadBalance : public SDLoadBalance {$/;"	c	namespace:sylar	inherits:SDLoadBalance
sylar::RockSDLoadBalance::RockSDLoadBalance	sylar/sylar/rock/rock_stream.cc	/^RockSDLoadBalance::RockSDLoadBalance(IServiceDiscovery::ptr sd)$/;"	f	class:sylar::RockSDLoadBalance	signature:(IServiceDiscovery::ptr sd)
sylar::RockSDLoadBalance::RockSDLoadBalance	sylar/sylar/rock/rock_stream.h	/^    RockSDLoadBalance(IServiceDiscovery::ptr sd);$/;"	p	class:sylar::RockSDLoadBalance	access:public	signature:(IServiceDiscovery::ptr sd)
sylar::RockSDLoadBalance::ptr	sylar/sylar/rock/rock_stream.h	/^    typedef std::shared_ptr<RockSDLoadBalance> ptr;$/;"	t	class:sylar::RockSDLoadBalance	typeref:typename:std::shared_ptr<RockSDLoadBalance>	access:public
sylar::RockSDLoadBalance::request	sylar/sylar/rock/rock_stream.cc	/^RockResult::ptr RockSDLoadBalance::request(const std::string& domain, const std::string& service/;"	f	class:sylar::RockSDLoadBalance	typeref:typename:RockResult::ptr	signature:(const std::string & domain,const std::string & service,RockRequest::ptr req,uint32_t timeout_ms,uint64_t idx)
sylar::RockSDLoadBalance::request	sylar/sylar/rock/rock_stream.h	/^    RockResult::ptr request(const std::string& domain, const std::string& service,$/;"	p	class:sylar::RockSDLoadBalance	typeref:typename:RockResult::ptr	access:public	signature:(const std::string & domain,const std::string & service,RockRequest::ptr req,uint32_t timeout_ms,uint64_t idx=-1)
sylar::RockSDLoadBalance::start	sylar/sylar/rock/rock_stream.cc	/^void RockSDLoadBalance::start() {$/;"	f	class:sylar::RockSDLoadBalance	typeref:typename:void	signature:()
sylar::RockSDLoadBalance::start	sylar/sylar/rock/rock_stream.cc	/^void RockSDLoadBalance::start(const std::unordered_map<std::string$/;"	f	class:sylar::RockSDLoadBalance	typeref:typename:void	signature:(const std::unordered_map<std::string,std::unordered_map<std::string,std::string>> & confs)
sylar::RockSDLoadBalance::start	sylar/sylar/rock/rock_stream.h	/^    virtual void start();$/;"	p	class:sylar::RockSDLoadBalance	typeref:typename:void	access:public	signature:()
sylar::RockSDLoadBalance::start	sylar/sylar/rock/rock_stream.h	/^    void start(const std::unordered_map<std::string$/;"	p	class:sylar::RockSDLoadBalance	typeref:typename:void	access:public	signature:(const std::unordered_map<std::string,std::unordered_map<std::string,std::string>> & confs)
sylar::RockSDLoadBalance::stop	sylar/sylar/rock/rock_stream.cc	/^void RockSDLoadBalance::stop() {$/;"	f	class:sylar::RockSDLoadBalance	typeref:typename:void	signature:()
sylar::RockSDLoadBalance::stop	sylar/sylar/rock/rock_stream.h	/^    virtual void stop();$/;"	p	class:sylar::RockSDLoadBalance	typeref:typename:void	access:public	signature:()
sylar::RockServer	sylar/sylar/rock/rock_server.h	/^class RockServer : public TcpServer {$/;"	c	namespace:sylar	inherits:TcpServer
sylar::RockServer::RockServer	sylar/sylar/rock/rock_server.cc	/^RockServer::RockServer(const std::string& type$/;"	f	class:sylar::RockServer	signature:(const std::string & type,sylar::IOManager * worker,sylar::IOManager * io_worker,sylar::IOManager * accept_worker)
sylar::RockServer::RockServer	sylar/sylar/rock/rock_server.h	/^    RockServer(const std::string& type = "rock"$/;"	p	class:sylar::RockServer	access:public	signature:(const std::string & type="",sylar::IOManager * worker=sylar::IOManager::GetThis (),sylar::IOManager * io_worker=sylar::IOManager::GetThis (),sylar::IOManager * accept_worker=sylar::IOManager::GetThis ())
sylar::RockServer::handleClient	sylar/sylar/rock/rock_server.cc	/^void RockServer::handleClient(Socket::ptr client) {$/;"	f	class:sylar::RockServer	typeref:typename:void	signature:(Socket::ptr client)
sylar::RockServer::handleClient	sylar/sylar/rock/rock_server.h	/^    virtual void handleClient(Socket::ptr client) override;$/;"	p	class:sylar::RockServer	typeref:typename:void	access:protected	signature:(Socket::ptr client)
sylar::RockServer::ptr	sylar/sylar/rock/rock_server.h	/^    typedef std::shared_ptr<RockServer> ptr;$/;"	t	class:sylar::RockServer	typeref:typename:std::shared_ptr<RockServer>	access:public
sylar::RockSession	sylar/sylar/rock/rock_stream.h	/^class RockSession : public RockStream {$/;"	c	namespace:sylar	inherits:RockStream
sylar::RockSession::RockSession	sylar/sylar/rock/rock_stream.cc	/^RockSession::RockSession(Socket::ptr sock)$/;"	f	class:sylar::RockSession	signature:(Socket::ptr sock)
sylar::RockSession::RockSession	sylar/sylar/rock/rock_stream.h	/^    RockSession(Socket::ptr sock);$/;"	p	class:sylar::RockSession	access:public	signature:(Socket::ptr sock)
sylar::RockSession::ptr	sylar/sylar/rock/rock_stream.h	/^    typedef std::shared_ptr<RockSession> ptr;$/;"	t	class:sylar::RockSession	typeref:typename:std::shared_ptr<RockSession>	access:public
sylar::RockStream	sylar/sylar/rock/rock_stream.h	/^class RockStream : public sylar::AsyncSocketStream {$/;"	c	namespace:sylar	inherits:sylar::AsyncSocketStream
sylar::RockStream::RockCtx	sylar/sylar/rock/rock_stream.h	/^    struct RockCtx : public Ctx {$/;"	s	class:sylar::RockStream	inherits:Ctx	access:protected
sylar::RockStream::RockCtx::doSend	sylar/sylar/rock/rock_stream.cc	/^bool RockStream::RockCtx::doSend(AsyncSocketStream::ptr stream) {$/;"	f	class:sylar::RockStream::RockCtx	typeref:typename:bool	signature:(AsyncSocketStream::ptr stream)
sylar::RockStream::RockCtx::doSend	sylar/sylar/rock/rock_stream.h	/^        virtual bool doSend(AsyncSocketStream::ptr stream) override;$/;"	p	struct:sylar::RockStream::RockCtx	typeref:typename:bool	access:public	signature:(AsyncSocketStream::ptr stream)
sylar::RockStream::RockCtx::ptr	sylar/sylar/rock/rock_stream.h	/^        typedef std::shared_ptr<RockCtx> ptr;$/;"	t	struct:sylar::RockStream::RockCtx	typeref:typename:std::shared_ptr<RockCtx>	access:public
sylar::RockStream::RockCtx::request	sylar/sylar/rock/rock_stream.h	/^        RockRequest::ptr request;$/;"	m	struct:sylar::RockStream::RockCtx	typeref:typename:RockRequest::ptr	access:public
sylar::RockStream::RockCtx::response	sylar/sylar/rock/rock_stream.h	/^        RockResponse::ptr response;$/;"	m	struct:sylar::RockStream::RockCtx	typeref:typename:RockResponse::ptr	access:public
sylar::RockStream::RockSendCtx	sylar/sylar/rock/rock_stream.h	/^    struct RockSendCtx : public SendCtx {$/;"	s	class:sylar::RockStream	inherits:SendCtx	access:protected
sylar::RockStream::RockSendCtx::doSend	sylar/sylar/rock/rock_stream.cc	/^bool RockStream::RockSendCtx::doSend(AsyncSocketStream::ptr stream) {$/;"	f	class:sylar::RockStream::RockSendCtx	typeref:typename:bool	signature:(AsyncSocketStream::ptr stream)
sylar::RockStream::RockSendCtx::doSend	sylar/sylar/rock/rock_stream.h	/^        virtual bool doSend(AsyncSocketStream::ptr stream) override;$/;"	p	struct:sylar::RockStream::RockSendCtx	typeref:typename:bool	access:public	signature:(AsyncSocketStream::ptr stream)
sylar::RockStream::RockSendCtx::msg	sylar/sylar/rock/rock_stream.h	/^        Message::ptr msg;$/;"	m	struct:sylar::RockStream::RockSendCtx	typeref:typename:Message::ptr	access:public
sylar::RockStream::RockSendCtx::ptr	sylar/sylar/rock/rock_stream.h	/^        typedef std::shared_ptr<RockSendCtx> ptr;$/;"	t	struct:sylar::RockStream::RockSendCtx	typeref:typename:std::shared_ptr<RockSendCtx>	access:public
sylar::RockStream::RockStream	sylar/sylar/rock/rock_stream.cc	/^RockStream::RockStream(Socket::ptr sock)$/;"	f	class:sylar::RockStream	signature:(Socket::ptr sock)
sylar::RockStream::RockStream	sylar/sylar/rock/rock_stream.h	/^    RockStream(Socket::ptr sock);$/;"	p	class:sylar::RockStream	access:public	signature:(Socket::ptr sock)
sylar::RockStream::doRecv	sylar/sylar/rock/rock_stream.cc	/^AsyncSocketStream::Ctx::ptr RockStream::doRecv() {$/;"	f	class:sylar::RockStream	typeref:typename:AsyncSocketStream::Ctx::ptr	signature:()
sylar::RockStream::doRecv	sylar/sylar/rock/rock_stream.h	/^    virtual Ctx::ptr doRecv() override;$/;"	p	class:sylar::RockStream	typeref:typename:Ctx::ptr	access:protected	signature:()
sylar::RockStream::getData	sylar/sylar/rock/rock_stream.h	/^    T getData() {$/;"	f	class:sylar::RockStream	typeref:typename:T	access:public	signature:()
sylar::RockStream::getNotifyHandler	sylar/sylar/rock/rock_stream.h	/^    notify_handler getNotifyHandler() const { return m_notifyHandler;}$/;"	f	class:sylar::RockStream	typeref:typename:notify_handler	access:public	signature:() const
sylar::RockStream::getRequestHandler	sylar/sylar/rock/rock_stream.h	/^    request_handler getRequestHandler() const { return m_requestHandler;}$/;"	f	class:sylar::RockStream	typeref:typename:request_handler	access:public	signature:() const
sylar::RockStream::handleNotify	sylar/sylar/rock/rock_stream.cc	/^void RockStream::handleNotify(sylar::RockNotify::ptr nty) {$/;"	f	class:sylar::RockStream	typeref:typename:void	signature:(sylar::RockNotify::ptr nty)
sylar::RockStream::handleNotify	sylar/sylar/rock/rock_stream.h	/^    void handleNotify(sylar::RockNotify::ptr nty);$/;"	p	class:sylar::RockStream	typeref:typename:void	access:protected	signature:(sylar::RockNotify::ptr nty)
sylar::RockStream::handleRequest	sylar/sylar/rock/rock_stream.cc	/^void RockStream::handleRequest(sylar::RockRequest::ptr req) {$/;"	f	class:sylar::RockStream	typeref:typename:void	signature:(sylar::RockRequest::ptr req)
sylar::RockStream::handleRequest	sylar/sylar/rock/rock_stream.h	/^    void handleRequest(sylar::RockRequest::ptr req);$/;"	p	class:sylar::RockStream	typeref:typename:void	access:protected	signature:(sylar::RockRequest::ptr req)
sylar::RockStream::m_data	sylar/sylar/rock/rock_stream.h	/^    boost::any m_data;$/;"	m	class:sylar::RockStream	typeref:typename:boost::any	access:private
sylar::RockStream::m_decoder	sylar/sylar/rock/rock_stream.h	/^    RockMessageDecoder::ptr m_decoder;$/;"	m	class:sylar::RockStream	typeref:typename:RockMessageDecoder::ptr	access:private
sylar::RockStream::m_notifyHandler	sylar/sylar/rock/rock_stream.h	/^    notify_handler m_notifyHandler;$/;"	m	class:sylar::RockStream	typeref:typename:notify_handler	access:private
sylar::RockStream::m_requestHandler	sylar/sylar/rock/rock_stream.h	/^    request_handler m_requestHandler;$/;"	m	class:sylar::RockStream	typeref:typename:request_handler	access:private
sylar::RockStream::notify_handler	sylar/sylar/rock/rock_stream.h	/^                               ,sylar::RockStream::ptr)> notify_handler;$/;"	t	class:sylar::RockStream	access:public
sylar::RockStream::ptr	sylar/sylar/rock/rock_stream.h	/^    typedef std::shared_ptr<RockStream> ptr;$/;"	t	class:sylar::RockStream	typeref:typename:std::shared_ptr<RockStream>	access:public
sylar::RockStream::request	sylar/sylar/rock/rock_stream.cc	/^RockResult::ptr RockStream::request(RockRequest::ptr req, uint32_t timeout_ms) {$/;"	f	class:sylar::RockStream	typeref:typename:RockResult::ptr	signature:(RockRequest::ptr req,uint32_t timeout_ms)
sylar::RockStream::request	sylar/sylar/rock/rock_stream.h	/^    RockResult::ptr request(RockRequest::ptr req, uint32_t timeout_ms);$/;"	p	class:sylar::RockStream	typeref:typename:RockResult::ptr	access:public	signature:(RockRequest::ptr req,uint32_t timeout_ms)
sylar::RockStream::request_handler	sylar/sylar/rock/rock_stream.h	/^                               ,sylar::RockStream::ptr)> request_handler;$/;"	t	class:sylar::RockStream	access:public
sylar::RockStream::sendMessage	sylar/sylar/rock/rock_stream.cc	/^int32_t RockStream::sendMessage(Message::ptr msg) {$/;"	f	class:sylar::RockStream	typeref:typename:int32_t	signature:(Message::ptr msg)
sylar::RockStream::sendMessage	sylar/sylar/rock/rock_stream.h	/^    int32_t sendMessage(Message::ptr msg);$/;"	p	class:sylar::RockStream	typeref:typename:int32_t	access:public	signature:(Message::ptr msg)
sylar::RockStream::setData	sylar/sylar/rock/rock_stream.h	/^    void setData(const T& v) {$/;"	f	class:sylar::RockStream	typeref:typename:void	access:public	signature:(const T & v)
sylar::RockStream::setNotifyHandler	sylar/sylar/rock/rock_stream.h	/^    void setNotifyHandler(notify_handler v) { m_notifyHandler = v;}$/;"	f	class:sylar::RockStream	typeref:typename:void	access:public	signature:(notify_handler v)
sylar::RockStream::setRequestHandler	sylar/sylar/rock/rock_stream.h	/^    void setRequestHandler(request_handler v) { m_requestHandler = v;}$/;"	f	class:sylar::RockStream	typeref:typename:void	access:public	signature:(request_handler v)
sylar::RockStream::~RockStream	sylar/sylar/rock/rock_stream.cc	/^RockStream::~RockStream() {$/;"	f	class:sylar::RockStream	signature:()
sylar::RockStream::~RockStream	sylar/sylar/rock/rock_stream.h	/^    ~RockStream();$/;"	p	class:sylar::RockStream	access:public	signature:()
sylar::RoundRobinLoadBalance	sylar/sylar/streams/load_balance.h	/^class RoundRobinLoadBalance : public LoadBalance {$/;"	c	namespace:sylar	inherits:LoadBalance
sylar::RoundRobinLoadBalance::get	sylar/sylar/streams/load_balance.cc	/^LoadBalanceItem::ptr RoundRobinLoadBalance::get(uint64_t v) {$/;"	f	class:sylar::RoundRobinLoadBalance	typeref:typename:LoadBalanceItem::ptr	signature:(uint64_t v)
sylar::RoundRobinLoadBalance::get	sylar/sylar/streams/load_balance.h	/^    virtual LoadBalanceItem::ptr get(uint64_t v = -1) override;$/;"	p	class:sylar::RoundRobinLoadBalance	typeref:typename:LoadBalanceItem::ptr	access:public	signature:(uint64_t v=-1)
sylar::RoundRobinLoadBalance::initNolock	sylar/sylar/streams/load_balance.cc	/^void RoundRobinLoadBalance::initNolock() {$/;"	f	class:sylar::RoundRobinLoadBalance	typeref:typename:void	signature:()
sylar::RoundRobinLoadBalance::initNolock	sylar/sylar/streams/load_balance.h	/^    virtual void initNolock();$/;"	p	class:sylar::RoundRobinLoadBalance	typeref:typename:void	access:protected	signature:()
sylar::RoundRobinLoadBalance::m_items	sylar/sylar/streams/load_balance.h	/^    std::vector<LoadBalanceItem::ptr> m_items;$/;"	m	class:sylar::RoundRobinLoadBalance	typeref:typename:std::vector<LoadBalanceItem::ptr>	access:protected
sylar::RoundRobinLoadBalance::ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<RoundRobinLoadBalance> ptr;$/;"	t	class:sylar::RoundRobinLoadBalance	typeref:typename:std::shared_ptr<RoundRobinLoadBalance>	access:public
sylar::SDLoadBalance	sylar/sylar/streams/load_balance.h	/^class SDLoadBalance {$/;"	c	namespace:sylar
sylar::SDLoadBalance::RWMutexType	sylar/sylar/streams/load_balance.h	/^    typedef sylar::RWMutex RWMutexType;$/;"	t	class:sylar::SDLoadBalance	typeref:typename:sylar::RWMutex	access:public
sylar::SDLoadBalance::SDLoadBalance	sylar/sylar/streams/load_balance.cc	/^SDLoadBalance::SDLoadBalance(IServiceDiscovery::ptr sd)$/;"	f	class:sylar::SDLoadBalance	signature:(IServiceDiscovery::ptr sd)
sylar::SDLoadBalance::SDLoadBalance	sylar/sylar/streams/load_balance.h	/^    SDLoadBalance(IServiceDiscovery::ptr sd);$/;"	p	class:sylar::SDLoadBalance	access:public	signature:(IServiceDiscovery::ptr sd)
sylar::SDLoadBalance::createLoadBalance	sylar/sylar/streams/load_balance.cc	/^LoadBalance::ptr SDLoadBalance::createLoadBalance(ILoadBalance::Type type) {$/;"	f	class:sylar::SDLoadBalance	typeref:typename:LoadBalance::ptr	signature:(ILoadBalance::Type type)
sylar::SDLoadBalance::createLoadBalance	sylar/sylar/streams/load_balance.h	/^    LoadBalance::ptr createLoadBalance(ILoadBalance::Type type);$/;"	p	class:sylar::SDLoadBalance	typeref:typename:LoadBalance::ptr	access:private	signature:(ILoadBalance::Type type)
sylar::SDLoadBalance::createLoadBalanceItem	sylar/sylar/streams/load_balance.cc	/^LoadBalanceItem::ptr SDLoadBalance::createLoadBalanceItem(ILoadBalance::Type type) {$/;"	f	class:sylar::SDLoadBalance	typeref:typename:LoadBalanceItem::ptr	signature:(ILoadBalance::Type type)
sylar::SDLoadBalance::createLoadBalanceItem	sylar/sylar/streams/load_balance.h	/^    LoadBalanceItem::ptr createLoadBalanceItem(ILoadBalance::Type type);$/;"	p	class:sylar::SDLoadBalance	typeref:typename:LoadBalanceItem::ptr	access:private	signature:(ILoadBalance::Type type)
sylar::SDLoadBalance::get	sylar/sylar/streams/load_balance.cc	/^LoadBalance::ptr SDLoadBalance::get(const std::string& domain, const std::string& service, bool /;"	f	class:sylar::SDLoadBalance	typeref:typename:LoadBalance::ptr	signature:(const std::string & domain,const std::string & service,bool auto_create)
sylar::SDLoadBalance::get	sylar/sylar/streams/load_balance.h	/^    LoadBalance::ptr get(const std::string& domain, const std::string& service, bool auto_create/;"	p	class:sylar::SDLoadBalance	typeref:typename:LoadBalance::ptr	access:public	signature:(const std::string & domain,const std::string & service,bool auto_create=false)
sylar::SDLoadBalance::getCb	sylar/sylar/streams/load_balance.h	/^    stream_callback getCb() const { return m_cb;}$/;"	f	class:sylar::SDLoadBalance	typeref:typename:stream_callback	access:public	signature:() const
sylar::SDLoadBalance::getType	sylar/sylar/streams/load_balance.cc	/^ILoadBalance::Type SDLoadBalance::getType(const std::string& domain, const std::string& service)/;"	f	class:sylar::SDLoadBalance	typeref:typename:ILoadBalance::Type	signature:(const std::string & domain,const std::string & service)
sylar::SDLoadBalance::getType	sylar/sylar/streams/load_balance.h	/^    ILoadBalance::Type getType(const std::string& domain, const std::string& service);$/;"	p	class:sylar::SDLoadBalance	typeref:typename:ILoadBalance::Type	access:private	signature:(const std::string & domain,const std::string & service)
sylar::SDLoadBalance::initConf	sylar/sylar/streams/load_balance.cc	/^void SDLoadBalance::initConf(const std::unordered_map<std::string$/;"	f	class:sylar::SDLoadBalance	typeref:typename:void	signature:(const std::unordered_map<std::string,std::unordered_map<std::string,std::string>> & confs)
sylar::SDLoadBalance::initConf	sylar/sylar/streams/load_balance.h	/^    void initConf(const std::unordered_map<std::string, std::unordered_map<std::string, std::str/;"	p	class:sylar::SDLoadBalance	typeref:typename:void	access:public	signature:(const std::unordered_map<std::string,std::unordered_map<std::string,std::string>> & confs)
sylar::SDLoadBalance::m_cb	sylar/sylar/streams/load_balance.h	/^    stream_callback m_cb;$/;"	m	class:sylar::SDLoadBalance	typeref:typename:stream_callback	access:protected
sylar::SDLoadBalance::m_datas	sylar/sylar/streams/load_balance.h	/^    std::unordered_map<std::string, std::unordered_map<std::string, LoadBalance::ptr> > m_datas;$/;"	m	class:sylar::SDLoadBalance	typeref:typename:std::unordered_map<std::string,std::unordered_map<std::string,LoadBalance::ptr>>	access:protected
sylar::SDLoadBalance::m_defaultType	sylar/sylar/streams/load_balance.h	/^    ILoadBalance::Type m_defaultType = ILoadBalance::FAIR;$/;"	m	class:sylar::SDLoadBalance	typeref:typename:ILoadBalance::Type	access:protected
sylar::SDLoadBalance::m_mutex	sylar/sylar/streams/load_balance.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::SDLoadBalance	typeref:typename:RWMutexType	access:protected
sylar::SDLoadBalance::m_sd	sylar/sylar/streams/load_balance.h	/^    IServiceDiscovery::ptr m_sd;$/;"	m	class:sylar::SDLoadBalance	typeref:typename:IServiceDiscovery::ptr	access:protected
sylar::SDLoadBalance::m_types	sylar/sylar/streams/load_balance.h	/^    std::unordered_map<std::string, std::unordered_map<std::string, ILoadBalance::Type> > m_type/;"	m	class:sylar::SDLoadBalance	typeref:typename:std::unordered_map<std::string,std::unordered_map<std::string,ILoadBalance::Type>>	access:protected
sylar::SDLoadBalance::onServiceChange	sylar/sylar/streams/load_balance.cc	/^void SDLoadBalance::onServiceChange(const std::string& domain, const std::string& service$/;"	f	class:sylar::SDLoadBalance	typeref:typename:void	signature:(const std::string & domain,const std::string & service,const std::unordered_map<uint64_t,ServiceItemInfo::ptr> & old_value,const std::unordered_map<uint64_t,ServiceItemInfo::ptr> & new_value)
sylar::SDLoadBalance::onServiceChange	sylar/sylar/streams/load_balance.h	/^    void onServiceChange(const std::string& domain, const std::string& service$/;"	p	class:sylar::SDLoadBalance	typeref:typename:void	access:private	signature:(const std::string & domain,const std::string & service,const std::unordered_map<uint64_t,ServiceItemInfo::ptr> & old_value,const std::unordered_map<uint64_t,ServiceItemInfo::ptr> & new_value)
sylar::SDLoadBalance::ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<SDLoadBalance> ptr;$/;"	t	class:sylar::SDLoadBalance	typeref:typename:std::shared_ptr<SDLoadBalance>	access:public
sylar::SDLoadBalance::setCb	sylar/sylar/streams/load_balance.h	/^    void setCb(stream_callback v) { m_cb = v;}$/;"	f	class:sylar::SDLoadBalance	typeref:typename:void	access:public	signature:(stream_callback v)
sylar::SDLoadBalance::start	sylar/sylar/streams/load_balance.cc	/^void SDLoadBalance::start() {$/;"	f	class:sylar::SDLoadBalance	typeref:typename:void	signature:()
sylar::SDLoadBalance::start	sylar/sylar/streams/load_balance.h	/^    virtual void start();$/;"	p	class:sylar::SDLoadBalance	typeref:typename:void	access:public	signature:()
sylar::SDLoadBalance::statusString	sylar/sylar/streams/load_balance.cc	/^std::string SDLoadBalance::statusString() {$/;"	f	class:sylar::SDLoadBalance	typeref:typename:std::string	signature:()
sylar::SDLoadBalance::statusString	sylar/sylar/streams/load_balance.h	/^    std::string statusString();$/;"	p	class:sylar::SDLoadBalance	typeref:typename:std::string	access:public	signature:()
sylar::SDLoadBalance::stop	sylar/sylar/streams/load_balance.cc	/^void SDLoadBalance::stop() {$/;"	f	class:sylar::SDLoadBalance	typeref:typename:void	signature:()
sylar::SDLoadBalance::stop	sylar/sylar/streams/load_balance.h	/^    virtual void stop();$/;"	p	class:sylar::SDLoadBalance	typeref:typename:void	access:public	signature:()
sylar::SDLoadBalance::stream_callback	sylar/sylar/streams/load_balance.h	/^    typedef std::function<SocketStream::ptr(ServiceItemInfo::ptr)> stream_callback;$/;"	t	class:sylar::SDLoadBalance	access:public
sylar::SDLoadBalance::~SDLoadBalance	sylar/sylar/streams/load_balance.h	/^    virtual ~SDLoadBalance() {}$/;"	f	class:sylar::SDLoadBalance	access:public	signature:()
sylar::SQLite3	sylar/sylar/db/sqlite3.h	/^class SQLite3 : public IDB$/;"	c	namespace:sylar	inherits:IDB,std::enable_shared_from_this<SQLite3>
sylar::SQLite3::CREATE	sylar/sylar/db/sqlite3.h	/^        CREATE = SQLITE_OPEN_CREATE$/;"	e	enum:sylar::SQLite3::Flags	access:public
sylar::SQLite3::Create	sylar/sylar/db/sqlite3.cc	/^SQLite3::ptr SQLite3::Create(const std::string& dbname ,int flags) {$/;"	f	class:sylar::SQLite3	typeref:typename:SQLite3::ptr	signature:(const std::string & dbname,int flags)
sylar::SQLite3::Create	sylar/sylar/db/sqlite3.cc	/^SQLite3::ptr SQLite3::Create(sqlite3* db) {$/;"	f	class:sylar::SQLite3	typeref:typename:SQLite3::ptr	signature:(sqlite3 * db)
sylar::SQLite3::Create	sylar/sylar/db/sqlite3.h	/^    static SQLite3::ptr Create(const std::string& dbname$/;"	p	class:sylar::SQLite3	typeref:typename:SQLite3::ptr	access:public	signature:(const std::string & dbname,int flags=READWRITE|CREATE)
sylar::SQLite3::Create	sylar/sylar/db/sqlite3.h	/^    static SQLite3::ptr Create(sqlite3* db);$/;"	p	class:sylar::SQLite3	typeref:typename:SQLite3::ptr	access:public	signature:(sqlite3 * db)
sylar::SQLite3::Flags	sylar/sylar/db/sqlite3.h	/^    enum Flags {$/;"	g	class:sylar::SQLite3	access:public
sylar::SQLite3::READONLY	sylar/sylar/db/sqlite3.h	/^        READONLY = SQLITE_OPEN_READONLY,$/;"	e	enum:sylar::SQLite3::Flags	access:public
sylar::SQLite3::READWRITE	sylar/sylar/db/sqlite3.h	/^        READWRITE = SQLITE_OPEN_READWRITE,$/;"	e	enum:sylar::SQLite3::Flags	access:public
sylar::SQLite3::SQLite3	sylar/sylar/db/sqlite3.cc	/^SQLite3::SQLite3(sqlite3* db)$/;"	f	class:sylar::SQLite3	signature:(sqlite3 * db)
sylar::SQLite3::SQLite3	sylar/sylar/db/sqlite3.h	/^    SQLite3(sqlite3* db);$/;"	p	class:sylar::SQLite3	access:private	signature:(sqlite3 * db)
sylar::SQLite3::close	sylar/sylar/db/sqlite3.cc	/^int SQLite3::close() {$/;"	f	class:sylar::SQLite3	typeref:typename:int	signature:()
sylar::SQLite3::close	sylar/sylar/db/sqlite3.h	/^    int close();$/;"	p	class:sylar::SQLite3	typeref:typename:int	access:public	signature:()
sylar::SQLite3::execStmt	sylar/sylar/db/sqlite3.h	/^    int execStmt(const char* stmt, Args&&... args);$/;"	p	class:sylar::SQLite3	typeref:typename:int	access:public	signature:(const char * stmt,Args &&...args)
sylar::SQLite3::execStmt	sylar/sylar/db/sqlite3.h	/^int SQLite3::execStmt(const char* stmt, Args&&... args) {$/;"	f	class:sylar::SQLite3	typeref:typename:int	signature:(const char * stmt,Args &&...args)
sylar::SQLite3::execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3::execute(const char* format, ...) {$/;"	f	class:sylar::SQLite3	typeref:typename:int	signature:(const char * format,...)
sylar::SQLite3::execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3::execute(const char* format, va_list ap) {$/;"	f	class:sylar::SQLite3	typeref:typename:int	signature:(const char * format,va_list ap)
sylar::SQLite3::execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3::execute(const std::string& sql) {$/;"	f	class:sylar::SQLite3	typeref:typename:int	signature:(const std::string & sql)
sylar::SQLite3::execute	sylar/sylar/db/sqlite3.h	/^    int execute(const char* format, ...) override;$/;"	p	class:sylar::SQLite3	typeref:typename:int	access:public	signature:(const char * format,...)
sylar::SQLite3::execute	sylar/sylar/db/sqlite3.h	/^    int execute(const char* format, va_list ap);$/;"	p	class:sylar::SQLite3	typeref:typename:int	access:public	signature:(const char * format,va_list ap)
sylar::SQLite3::execute	sylar/sylar/db/sqlite3.h	/^    int execute(const std::string& sql) override;$/;"	p	class:sylar::SQLite3	typeref:typename:int	access:public	signature:(const std::string & sql)
sylar::SQLite3::getDB	sylar/sylar/db/sqlite3.h	/^    sqlite3* getDB() const { return m_db;}$/;"	f	class:sylar::SQLite3	typeref:typename:sqlite3 *	access:public	signature:() const
sylar::SQLite3::getErrStr	sylar/sylar/db/sqlite3.cc	/^std::string SQLite3::getErrStr() {$/;"	f	class:sylar::SQLite3	typeref:typename:std::string	signature:()
sylar::SQLite3::getErrStr	sylar/sylar/db/sqlite3.h	/^    std::string getErrStr() override;$/;"	p	class:sylar::SQLite3	typeref:typename:std::string	access:public	signature:()
sylar::SQLite3::getErrno	sylar/sylar/db/sqlite3.cc	/^int SQLite3::getErrno() {$/;"	f	class:sylar::SQLite3	typeref:typename:int	signature:()
sylar::SQLite3::getErrno	sylar/sylar/db/sqlite3.h	/^    int getErrno() override;$/;"	p	class:sylar::SQLite3	typeref:typename:int	access:public	signature:()
sylar::SQLite3::getLastInsertId	sylar/sylar/db/sqlite3.cc	/^int64_t SQLite3::getLastInsertId() {$/;"	f	class:sylar::SQLite3	typeref:typename:int64_t	signature:()
sylar::SQLite3::getLastInsertId	sylar/sylar/db/sqlite3.h	/^    int64_t getLastInsertId() override;$/;"	p	class:sylar::SQLite3	typeref:typename:int64_t	access:public	signature:()
sylar::SQLite3::m_db	sylar/sylar/db/sqlite3.h	/^    sqlite3* m_db;$/;"	m	class:sylar::SQLite3	typeref:typename:sqlite3 *	access:private
sylar::SQLite3::m_lastUsedTime	sylar/sylar/db/sqlite3.h	/^    uint64_t m_lastUsedTime = 0;$/;"	m	class:sylar::SQLite3	typeref:typename:uint64_t	access:private
sylar::SQLite3::openTransaction	sylar/sylar/db/sqlite3.cc	/^ITransaction::ptr SQLite3::openTransaction(bool auto_commit) {$/;"	f	class:sylar::SQLite3	typeref:typename:ITransaction::ptr	signature:(bool auto_commit)
sylar::SQLite3::openTransaction	sylar/sylar/db/sqlite3.h	/^    ITransaction::ptr openTransaction(bool auto_commit = false) override;$/;"	p	class:sylar::SQLite3	typeref:typename:ITransaction::ptr	access:public	signature:(bool auto_commit=false)
sylar::SQLite3::prepare	sylar/sylar/db/sqlite3.cc	/^IStmt::ptr SQLite3::prepare(const std::string& stmt) {$/;"	f	class:sylar::SQLite3	typeref:typename:IStmt::ptr	signature:(const std::string & stmt)
sylar::SQLite3::prepare	sylar/sylar/db/sqlite3.h	/^    IStmt::ptr prepare(const std::string& stmt) override;$/;"	p	class:sylar::SQLite3	typeref:typename:IStmt::ptr	access:public	signature:(const std::string & stmt)
sylar::SQLite3::ptr	sylar/sylar/db/sqlite3.h	/^    typedef std::shared_ptr<SQLite3> ptr;$/;"	t	class:sylar::SQLite3	typeref:typename:std::shared_ptr<SQLite3>	access:public
sylar::SQLite3::query	sylar/sylar/db/sqlite3.cc	/^ISQLData::ptr SQLite3::query(const char* format, ...) {$/;"	f	class:sylar::SQLite3	typeref:typename:ISQLData::ptr	signature:(const char * format,...)
sylar::SQLite3::query	sylar/sylar/db/sqlite3.cc	/^ISQLData::ptr SQLite3::query(const std::string& sql) {$/;"	f	class:sylar::SQLite3	typeref:typename:ISQLData::ptr	signature:(const std::string & sql)
sylar::SQLite3::query	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr query(const char* format, ...) override;$/;"	p	class:sylar::SQLite3	typeref:typename:ISQLData::ptr	access:public	signature:(const char * format,...)
sylar::SQLite3::query	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr query(const std::string& sql) override;$/;"	p	class:sylar::SQLite3	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & sql)
sylar::SQLite3::queryStmt	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr queryStmt(const char* stmt, const Args&... args);$/;"	p	class:sylar::SQLite3	typeref:typename:ISQLData::ptr	access:public	signature:(const char * stmt,const Args &...args)
sylar::SQLite3::queryStmt	sylar/sylar/db/sqlite3.h	/^ISQLData::ptr SQLite3::queryStmt(const char* stmt, const Args&... args) {$/;"	f	class:sylar::SQLite3	typeref:typename:ISQLData::ptr	signature:(const char * stmt,const Args &...args)
sylar::SQLite3::~SQLite3	sylar/sylar/db/sqlite3.cc	/^SQLite3::~SQLite3() {$/;"	f	class:sylar::SQLite3	signature:()
sylar::SQLite3::~SQLite3	sylar/sylar/db/sqlite3.h	/^    ~SQLite3();$/;"	p	class:sylar::SQLite3	access:public	signature:()
sylar::SQLite3Data	sylar/sylar/db/sqlite3.h	/^class SQLite3Data : public ISQLData {$/;"	c	namespace:sylar	inherits:ISQLData
sylar::SQLite3Data::SQLite3Data	sylar/sylar/db/sqlite3.cc	/^SQLite3Data::SQLite3Data(std::shared_ptr<SQLite3Stmt> stmt, int err$/;"	f	class:sylar::SQLite3Data	signature:(std::shared_ptr<SQLite3Stmt> stmt,int err,const char * errstr)
sylar::SQLite3Data::SQLite3Data	sylar/sylar/db/sqlite3.h	/^    SQLite3Data(std::shared_ptr<SQLite3Stmt> stmt, int err$/;"	p	class:sylar::SQLite3Data	access:public	signature:(std::shared_ptr<SQLite3Stmt> stmt,int err,const char * errstr)
sylar::SQLite3Data::getBlob	sylar/sylar/db/sqlite3.cc	/^std::string SQLite3Data::getBlob(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:std::string	signature:(int idx)
sylar::SQLite3Data::getBlob	sylar/sylar/db/sqlite3.h	/^    std::string getBlob(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:std::string	access:public	signature:(int idx)
sylar::SQLite3Data::getColumnBytes	sylar/sylar/db/sqlite3.cc	/^int SQLite3Data::getColumnBytes(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int	signature:(int idx)
sylar::SQLite3Data::getColumnBytes	sylar/sylar/db/sqlite3.h	/^    int getColumnBytes(int idx);$/;"	p	class:sylar::SQLite3Data	typeref:typename:int	access:public	signature:(int idx)
sylar::SQLite3Data::getColumnCount	sylar/sylar/db/sqlite3.cc	/^int SQLite3Data::getColumnCount() {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int	signature:()
sylar::SQLite3Data::getColumnCount	sylar/sylar/db/sqlite3.h	/^    int getColumnCount() override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:int	access:public	signature:()
sylar::SQLite3Data::getColumnName	sylar/sylar/db/sqlite3.cc	/^std::string SQLite3Data::getColumnName(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:std::string	signature:(int idx)
sylar::SQLite3Data::getColumnName	sylar/sylar/db/sqlite3.h	/^    std::string getColumnName(int idx);$/;"	p	class:sylar::SQLite3Data	typeref:typename:std::string	access:public	signature:(int idx)
sylar::SQLite3Data::getColumnType	sylar/sylar/db/sqlite3.cc	/^int SQLite3Data::getColumnType(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int	signature:(int idx)
sylar::SQLite3Data::getColumnType	sylar/sylar/db/sqlite3.h	/^    int getColumnType(int idx);$/;"	p	class:sylar::SQLite3Data	typeref:typename:int	access:public	signature:(int idx)
sylar::SQLite3Data::getDataCount	sylar/sylar/db/sqlite3.cc	/^int SQLite3Data::getDataCount() {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int	signature:()
sylar::SQLite3Data::getDataCount	sylar/sylar/db/sqlite3.h	/^    int getDataCount() override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:int	access:public	signature:()
sylar::SQLite3Data::getDouble	sylar/sylar/db/sqlite3.cc	/^double SQLite3Data::getDouble(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:double	signature:(int idx)
sylar::SQLite3Data::getDouble	sylar/sylar/db/sqlite3.h	/^    double getDouble(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:double	access:public	signature:(int idx)
sylar::SQLite3Data::getErrStr	sylar/sylar/db/sqlite3.h	/^    const std::string& getErrStr() const override { return m_errstr;}$/;"	f	class:sylar::SQLite3Data	typeref:typename:const std::string &	access:public	signature:() const
sylar::SQLite3Data::getErrno	sylar/sylar/db/sqlite3.h	/^    int getErrno() const override { return m_errno;}$/;"	f	class:sylar::SQLite3Data	typeref:typename:int	access:public	signature:() const
sylar::SQLite3Data::getFloat	sylar/sylar/db/sqlite3.cc	/^float SQLite3Data::getFloat(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:float	signature:(int idx)
sylar::SQLite3Data::getFloat	sylar/sylar/db/sqlite3.h	/^    float getFloat(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:float	access:public	signature:(int idx)
sylar::SQLite3Data::getInt16	sylar/sylar/db/sqlite3.cc	/^int16_t SQLite3Data::getInt16(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int16_t	signature:(int idx)
sylar::SQLite3Data::getInt16	sylar/sylar/db/sqlite3.h	/^    int16_t getInt16(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:int16_t	access:public	signature:(int idx)
sylar::SQLite3Data::getInt32	sylar/sylar/db/sqlite3.cc	/^int32_t SQLite3Data::getInt32(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int32_t	signature:(int idx)
sylar::SQLite3Data::getInt32	sylar/sylar/db/sqlite3.h	/^    int32_t getInt32(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:int32_t	access:public	signature:(int idx)
sylar::SQLite3Data::getInt64	sylar/sylar/db/sqlite3.cc	/^int64_t SQLite3Data::getInt64(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int64_t	signature:(int idx)
sylar::SQLite3Data::getInt64	sylar/sylar/db/sqlite3.h	/^    int64_t getInt64(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:int64_t	access:public	signature:(int idx)
sylar::SQLite3Data::getInt8	sylar/sylar/db/sqlite3.cc	/^int8_t SQLite3Data::getInt8(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:int8_t	signature:(int idx)
sylar::SQLite3Data::getInt8	sylar/sylar/db/sqlite3.h	/^    int8_t getInt8(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:int8_t	access:public	signature:(int idx)
sylar::SQLite3Data::getString	sylar/sylar/db/sqlite3.cc	/^std::string SQLite3Data::getString(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:std::string	signature:(int idx)
sylar::SQLite3Data::getString	sylar/sylar/db/sqlite3.h	/^    std::string getString(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:std::string	access:public	signature:(int idx)
sylar::SQLite3Data::getTime	sylar/sylar/db/sqlite3.cc	/^time_t SQLite3Data::getTime(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:time_t	signature:(int idx)
sylar::SQLite3Data::getTime	sylar/sylar/db/sqlite3.h	/^    time_t getTime(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:time_t	access:public	signature:(int idx)
sylar::SQLite3Data::getUint16	sylar/sylar/db/sqlite3.cc	/^uint16_t SQLite3Data::getUint16(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:uint16_t	signature:(int idx)
sylar::SQLite3Data::getUint16	sylar/sylar/db/sqlite3.h	/^    uint16_t getUint16(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:uint16_t	access:public	signature:(int idx)
sylar::SQLite3Data::getUint32	sylar/sylar/db/sqlite3.cc	/^uint32_t SQLite3Data::getUint32(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:uint32_t	signature:(int idx)
sylar::SQLite3Data::getUint32	sylar/sylar/db/sqlite3.h	/^    uint32_t getUint32(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:uint32_t	access:public	signature:(int idx)
sylar::SQLite3Data::getUint64	sylar/sylar/db/sqlite3.cc	/^uint64_t SQLite3Data::getUint64(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:uint64_t	signature:(int idx)
sylar::SQLite3Data::getUint64	sylar/sylar/db/sqlite3.h	/^    uint64_t getUint64(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:uint64_t	access:public	signature:(int idx)
sylar::SQLite3Data::getUint8	sylar/sylar/db/sqlite3.cc	/^uint8_t SQLite3Data::getUint8(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:uint8_t	signature:(int idx)
sylar::SQLite3Data::getUint8	sylar/sylar/db/sqlite3.h	/^    uint8_t getUint8(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:uint8_t	access:public	signature:(int idx)
sylar::SQLite3Data::isNull	sylar/sylar/db/sqlite3.cc	/^bool SQLite3Data::isNull(int idx) {$/;"	f	class:sylar::SQLite3Data	typeref:typename:bool	signature:(int idx)
sylar::SQLite3Data::isNull	sylar/sylar/db/sqlite3.h	/^    bool isNull(int idx) override;$/;"	p	class:sylar::SQLite3Data	typeref:typename:bool	access:public	signature:(int idx)
sylar::SQLite3Data::m_errno	sylar/sylar/db/sqlite3.h	/^    int m_errno;$/;"	m	class:sylar::SQLite3Data	typeref:typename:int	access:private
sylar::SQLite3Data::m_errstr	sylar/sylar/db/sqlite3.h	/^    std::string m_errstr;$/;"	m	class:sylar::SQLite3Data	typeref:typename:std::string	access:private
sylar::SQLite3Data::m_first	sylar/sylar/db/sqlite3.h	/^    bool m_first;$/;"	m	class:sylar::SQLite3Data	typeref:typename:bool	access:private
sylar::SQLite3Data::m_stmt	sylar/sylar/db/sqlite3.h	/^    std::shared_ptr<SQLite3Stmt> m_stmt;$/;"	m	class:sylar::SQLite3Data	typeref:typename:std::shared_ptr<SQLite3Stmt>	access:private
sylar::SQLite3Data::next	sylar/sylar/db/sqlite3.cc	/^bool SQLite3Data::next() {$/;"	f	class:sylar::SQLite3Data	typeref:typename:bool	signature:()
sylar::SQLite3Data::next	sylar/sylar/db/sqlite3.h	/^    bool next();$/;"	p	class:sylar::SQLite3Data	typeref:typename:bool	access:public	signature:()
sylar::SQLite3Data::ptr	sylar/sylar/db/sqlite3.h	/^    typedef std::shared_ptr<SQLite3Data> ptr;$/;"	t	class:sylar::SQLite3Data	typeref:typename:std::shared_ptr<SQLite3Data>	access:public
sylar::SQLite3Manager	sylar/sylar/db/sqlite3.h	/^class SQLite3Manager {$/;"	c	namespace:sylar
sylar::SQLite3Manager::MutexType	sylar/sylar/db/sqlite3.h	/^    typedef sylar::Mutex MutexType;$/;"	t	class:sylar::SQLite3Manager	typeref:typename:sylar::Mutex	access:public
sylar::SQLite3Manager::SQLite3Manager	sylar/sylar/db/sqlite3.cc	/^SQLite3Manager::SQLite3Manager()$/;"	f	class:sylar::SQLite3Manager	signature:()
sylar::SQLite3Manager::SQLite3Manager	sylar/sylar/db/sqlite3.h	/^    SQLite3Manager();$/;"	p	class:sylar::SQLite3Manager	access:public	signature:()
sylar::SQLite3Manager::checkConnection	sylar/sylar/db/sqlite3.cc	/^void SQLite3Manager::checkConnection(int sec) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:void	signature:(int sec)
sylar::SQLite3Manager::checkConnection	sylar/sylar/db/sqlite3.h	/^    void checkConnection(int sec = 30);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:void	access:public	signature:(int sec=30)
sylar::SQLite3Manager::execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3Manager::execute(const std::string& name, const char* format, ...) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:int	signature:(const std::string & name,const char * format,...)
sylar::SQLite3Manager::execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3Manager::execute(const std::string& name, const char* format, va_list ap) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:int	signature:(const std::string & name,const char * format,va_list ap)
sylar::SQLite3Manager::execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3Manager::execute(const std::string& name, const std::string& sql) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:int	signature:(const std::string & name,const std::string & sql)
sylar::SQLite3Manager::execute	sylar/sylar/db/sqlite3.h	/^    int execute(const std::string& name, const char* format, ...);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:int	access:public	signature:(const std::string & name,const char * format,...)
sylar::SQLite3Manager::execute	sylar/sylar/db/sqlite3.h	/^    int execute(const std::string& name, const char* format, va_list ap);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:int	access:public	signature:(const std::string & name,const char * format,va_list ap)
sylar::SQLite3Manager::execute	sylar/sylar/db/sqlite3.h	/^    int execute(const std::string& name, const std::string& sql);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:int	access:public	signature:(const std::string & name,const std::string & sql)
sylar::SQLite3Manager::freeSQLite3	sylar/sylar/db/sqlite3.cc	/^void SQLite3Manager::freeSQLite3(const std::string& name, SQLite3* m) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:void	signature:(const std::string & name,SQLite3 * m)
sylar::SQLite3Manager::freeSQLite3	sylar/sylar/db/sqlite3.h	/^    void freeSQLite3(const std::string& name, SQLite3* m);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:void	access:private	signature:(const std::string & name,SQLite3 * m)
sylar::SQLite3Manager::get	sylar/sylar/db/sqlite3.cc	/^SQLite3::ptr SQLite3Manager::get(const std::string& name) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:SQLite3::ptr	signature:(const std::string & name)
sylar::SQLite3Manager::get	sylar/sylar/db/sqlite3.h	/^    SQLite3::ptr get(const std::string& name);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:SQLite3::ptr	access:public	signature:(const std::string & name)
sylar::SQLite3Manager::getMaxConn	sylar/sylar/db/sqlite3.h	/^    uint32_t getMaxConn() const { return m_maxConn;}$/;"	f	class:sylar::SQLite3Manager	typeref:typename:uint32_t	access:public	signature:() const
sylar::SQLite3Manager::m_conns	sylar/sylar/db/sqlite3.h	/^    std::map<std::string, std::list<SQLite3*> > m_conns;$/;"	m	class:sylar::SQLite3Manager	typeref:typename:std::map<std::string,std::list<SQLite3 * >>	access:private
sylar::SQLite3Manager::m_dbDefines	sylar/sylar/db/sqlite3.h	/^    std::map<std::string, std::map<std::string, std::string> > m_dbDefines;$/;"	m	class:sylar::SQLite3Manager	typeref:typename:std::map<std::string,std::map<std::string,std::string>>	access:private
sylar::SQLite3Manager::m_maxConn	sylar/sylar/db/sqlite3.h	/^    uint32_t m_maxConn;$/;"	m	class:sylar::SQLite3Manager	typeref:typename:uint32_t	access:private
sylar::SQLite3Manager::m_mutex	sylar/sylar/db/sqlite3.h	/^    MutexType m_mutex;$/;"	m	class:sylar::SQLite3Manager	typeref:typename:MutexType	access:private
sylar::SQLite3Manager::openTransaction	sylar/sylar/db/sqlite3.cc	/^SQLite3Transaction::ptr SQLite3Manager::openTransaction(const std::string& name, bool auto_commi/;"	f	class:sylar::SQLite3Manager	typeref:typename:SQLite3Transaction::ptr	signature:(const std::string & name,bool auto_commit)
sylar::SQLite3Manager::openTransaction	sylar/sylar/db/sqlite3.h	/^    SQLite3Transaction::ptr openTransaction(const std::string& name, bool auto_commit);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:SQLite3Transaction::ptr	access:public	signature:(const std::string & name,bool auto_commit)
sylar::SQLite3Manager::query	sylar/sylar/db/sqlite3.cc	/^ISQLData::ptr SQLite3Manager::query(const std::string& name, const char* format, ...) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const char * format,...)
sylar::SQLite3Manager::query	sylar/sylar/db/sqlite3.cc	/^ISQLData::ptr SQLite3Manager::query(const std::string& name, const char* format, va_list ap) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const char * format,va_list ap)
sylar::SQLite3Manager::query	sylar/sylar/db/sqlite3.cc	/^ISQLData::ptr SQLite3Manager::query(const std::string& name, const std::string& sql) {$/;"	f	class:sylar::SQLite3Manager	typeref:typename:ISQLData::ptr	signature:(const std::string & name,const std::string & sql)
sylar::SQLite3Manager::query	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr query(const std::string& name, const char* format, ...);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const char * format,...)
sylar::SQLite3Manager::query	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr query(const std::string& name, const char* format, va_list ap); $/;"	p	class:sylar::SQLite3Manager	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const char * format,va_list ap)
sylar::SQLite3Manager::query	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr query(const std::string& name, const std::string& sql);$/;"	p	class:sylar::SQLite3Manager	typeref:typename:ISQLData::ptr	access:public	signature:(const std::string & name,const std::string & sql)
sylar::SQLite3Manager::registerSQLite3	sylar/sylar/db/sqlite3.cc	/^void SQLite3Manager::registerSQLite3(const std::string& name, const std::map<std::string, std::s/;"	f	class:sylar::SQLite3Manager	typeref:typename:void	signature:(const std::string & name,const std::map<std::string,std::string> & params)
sylar::SQLite3Manager::registerSQLite3	sylar/sylar/db/sqlite3.h	/^    void registerSQLite3(const std::string& name, const std::map<std::string, std::string>& para/;"	p	class:sylar::SQLite3Manager	typeref:typename:void	access:public	signature:(const std::string & name,const std::map<std::string,std::string> & params)
sylar::SQLite3Manager::setMaxConn	sylar/sylar/db/sqlite3.h	/^    void setMaxConn(uint32_t v) { m_maxConn = v;}$/;"	f	class:sylar::SQLite3Manager	typeref:typename:void	access:public	signature:(uint32_t v)
sylar::SQLite3Manager::~SQLite3Manager	sylar/sylar/db/sqlite3.cc	/^SQLite3Manager::~SQLite3Manager() {$/;"	f	class:sylar::SQLite3Manager	signature:()
sylar::SQLite3Manager::~SQLite3Manager	sylar/sylar/db/sqlite3.h	/^    ~SQLite3Manager();$/;"	p	class:sylar::SQLite3Manager	access:public	signature:()
sylar::SQLite3Mgr	sylar/sylar/db/sqlite3.h	/^typedef sylar::Singleton<SQLite3Manager> SQLite3Mgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<SQLite3Manager>
sylar::SQLite3Stmt	sylar/sylar/db/sqlite3.h	/^class SQLite3Stmt : public IStmt$/;"	c	namespace:sylar	inherits:IStmt,std::enable_shared_from_this<SQLite3Stmt>
sylar::SQLite3Stmt::COPY	sylar/sylar/db/sqlite3.h	/^        COPY = 1,$/;"	e	enum:sylar::SQLite3Stmt::Type	access:public
sylar::SQLite3Stmt::Create	sylar/sylar/db/sqlite3.cc	/^SQLite3Stmt::ptr SQLite3Stmt::Create(SQLite3::ptr db, const char* stmt) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:SQLite3Stmt::ptr	signature:(SQLite3::ptr db,const char * stmt)
sylar::SQLite3Stmt::Create	sylar/sylar/db/sqlite3.h	/^    static SQLite3Stmt::ptr Create(SQLite3::ptr db, const char* stmt);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:SQLite3Stmt::ptr	access:public	signature:(SQLite3::ptr db,const char * stmt)
sylar::SQLite3Stmt::REF	sylar/sylar/db/sqlite3.h	/^        REF = 2$/;"	e	enum:sylar::SQLite3Stmt::Type	access:public
sylar::SQLite3Stmt::SQLite3Stmt	sylar/sylar/db/sqlite3.cc	/^SQLite3Stmt::SQLite3Stmt(SQLite3::ptr db)$/;"	f	class:sylar::SQLite3Stmt	signature:(SQLite3::ptr db)
sylar::SQLite3Stmt::SQLite3Stmt	sylar/sylar/db/sqlite3.h	/^    SQLite3Stmt(SQLite3::ptr db);$/;"	p	class:sylar::SQLite3Stmt	access:protected	signature:(SQLite3::ptr db)
sylar::SQLite3Stmt::Type	sylar/sylar/db/sqlite3.h	/^    enum Type {$/;"	g	class:sylar::SQLite3Stmt	access:public
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, const char* value, Type type) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,const char * value,Type type)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, const std::string& value, Type type) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,const std::string & value,Type type)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, const void* value, int len, Type type) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,const void * value,int len,Type type)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, double value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,double value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, int32_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,int32_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, int64_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,int64_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, uint32_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,uint32_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(const char* name, uint64_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * name,uint64_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, const char* value, Type type) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const char * value,Type type)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, const std::string& value, Type type) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const std::string & value,Type type)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, const void* value, int len, Type type) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const void * value,int len,Type type)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, double value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,double value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, int32_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,int32_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, int64_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,int64_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, uint32_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,uint32_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bind(int idx, uint64_t value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,uint64_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, const char* value, Type type = COPY);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,const char * value,Type type=COPY)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, const std::string& value, Type type = COPY);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,const std::string & value,Type type=COPY)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, const void* value, int len, Type type = COPY);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,const void * value,int len,Type type=COPY)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, double value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,double value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, int32_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,int32_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, int64_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,int64_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, uint32_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,uint32_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(const char* name, uint64_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * name,uint64_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, const char* value, Type type = COPY);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const char * value,Type type=COPY)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, const std::string& value, Type type = COPY);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value,Type type=COPY)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, const void* value, int len, Type type = COPY);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const void * value,int len,Type type=COPY)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, double value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,double value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, int32_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,int32_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, int64_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,int64_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, uint32_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,uint32_t value)
sylar::SQLite3Stmt::bind	sylar/sylar/db/sqlite3.h	/^    int bind(int idx, uint64_t value);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,uint64_t value)
sylar::SQLite3Stmt::bindBlob	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindBlob(int idx, const std::string& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const std::string & value)
sylar::SQLite3Stmt::bindBlob	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindBlob(int idx, const void* value, int64_t size) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const void * value,int64_t size)
sylar::SQLite3Stmt::bindBlob	sylar/sylar/db/sqlite3.h	/^    int bindBlob(int idx, const std::string& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
sylar::SQLite3Stmt::bindBlob	sylar/sylar/db/sqlite3.h	/^    int bindBlob(int idx, const void* value, int64_t size) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const void * value,int64_t size)
sylar::SQLite3Stmt::bindDouble	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindDouble(int idx, const double& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const double & value)
sylar::SQLite3Stmt::bindDouble	sylar/sylar/db/sqlite3.h	/^    int bindDouble(int idx, const double& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const double & value)
sylar::SQLite3Stmt::bindFloat	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindFloat(int idx, const float& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const float & value)
sylar::SQLite3Stmt::bindFloat	sylar/sylar/db/sqlite3.h	/^    int bindFloat(int idx, const float& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const float & value)
sylar::SQLite3Stmt::bindInt16	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindInt16(int idx, const int16_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const int16_t & value)
sylar::SQLite3Stmt::bindInt16	sylar/sylar/db/sqlite3.h	/^    int bindInt16(int idx, const int16_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const int16_t & value)
sylar::SQLite3Stmt::bindInt32	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindInt32(int idx, const int32_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const int32_t & value)
sylar::SQLite3Stmt::bindInt32	sylar/sylar/db/sqlite3.h	/^    int bindInt32(int idx, const int32_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const int32_t & value)
sylar::SQLite3Stmt::bindInt64	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindInt64(int idx, const int64_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const int64_t & value)
sylar::SQLite3Stmt::bindInt64	sylar/sylar/db/sqlite3.h	/^    int bindInt64(int idx, const int64_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const int64_t & value)
sylar::SQLite3Stmt::bindInt8	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindInt8(int idx, const int8_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const int8_t & value)
sylar::SQLite3Stmt::bindInt8	sylar/sylar/db/sqlite3.h	/^    int bindInt8(int idx, const int8_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const int8_t & value)
sylar::SQLite3Stmt::bindNull	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindNull(int idx) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx)
sylar::SQLite3Stmt::bindNull	sylar/sylar/db/sqlite3.h	/^    int bindNull(int idx) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx)
sylar::SQLite3Stmt::bindString	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindString(int idx, const char* value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const char * value)
sylar::SQLite3Stmt::bindString	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindString(int idx, const std::string& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const std::string & value)
sylar::SQLite3Stmt::bindString	sylar/sylar/db/sqlite3.h	/^    int bindString(int idx, const char* value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const char * value)
sylar::SQLite3Stmt::bindString	sylar/sylar/db/sqlite3.h	/^    int bindString(int idx, const std::string& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const std::string & value)
sylar::SQLite3Stmt::bindTime	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindTime(int idx, const time_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const time_t & value)
sylar::SQLite3Stmt::bindTime	sylar/sylar/db/sqlite3.h	/^    int bindTime(int idx, const time_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const time_t & value)
sylar::SQLite3Stmt::bindUint16	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindUint16(int idx, const uint16_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const uint16_t & value)
sylar::SQLite3Stmt::bindUint16	sylar/sylar/db/sqlite3.h	/^    int bindUint16(int idx, const uint16_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const uint16_t & value)
sylar::SQLite3Stmt::bindUint32	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindUint32(int idx, const uint32_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const uint32_t & value)
sylar::SQLite3Stmt::bindUint32	sylar/sylar/db/sqlite3.h	/^    int bindUint32(int idx, const uint32_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const uint32_t & value)
sylar::SQLite3Stmt::bindUint64	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindUint64(int idx, const uint64_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const uint64_t & value)
sylar::SQLite3Stmt::bindUint64	sylar/sylar/db/sqlite3.h	/^    int bindUint64(int idx, const uint64_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const uint64_t & value)
sylar::SQLite3Stmt::bindUint8	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::bindUint8(int idx, const uint8_t& value) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(int idx,const uint8_t & value)
sylar::SQLite3Stmt::bindUint8	sylar/sylar/db/sqlite3.h	/^    int bindUint8(int idx, const uint8_t& value) override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(int idx,const uint8_t & value)
sylar::SQLite3Stmt::execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::execute() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:()
sylar::SQLite3Stmt::execute	sylar/sylar/db/sqlite3.h	/^    int execute() override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:()
sylar::SQLite3Stmt::finish	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::finish() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:()
sylar::SQLite3Stmt::finish	sylar/sylar/db/sqlite3.h	/^    int finish();$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:()
sylar::SQLite3Stmt::getErrStr	sylar/sylar/db/sqlite3.cc	/^std::string SQLite3Stmt::getErrStr() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:std::string	signature:()
sylar::SQLite3Stmt::getErrStr	sylar/sylar/db/sqlite3.h	/^    std::string getErrStr() override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:std::string	access:public	signature:()
sylar::SQLite3Stmt::getErrno	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::getErrno() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:()
sylar::SQLite3Stmt::getErrno	sylar/sylar/db/sqlite3.h	/^    int getErrno() override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:()
sylar::SQLite3Stmt::getLastInsertId	sylar/sylar/db/sqlite3.cc	/^int64_t SQLite3Stmt::getLastInsertId() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int64_t	signature:()
sylar::SQLite3Stmt::getLastInsertId	sylar/sylar/db/sqlite3.h	/^    int64_t getLastInsertId() override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int64_t	access:public	signature:()
sylar::SQLite3Stmt::m_db	sylar/sylar/db/sqlite3.h	/^    SQLite3::ptr m_db;$/;"	m	class:sylar::SQLite3Stmt	typeref:typename:SQLite3::ptr	access:protected
sylar::SQLite3Stmt::m_stmt	sylar/sylar/db/sqlite3.h	/^    sqlite3_stmt* m_stmt;$/;"	m	class:sylar::SQLite3Stmt	typeref:typename:sqlite3_stmt *	access:protected
sylar::SQLite3Stmt::prepare	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::prepare(const char* stmt) {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:(const char * stmt)
sylar::SQLite3Stmt::prepare	sylar/sylar/db/sqlite3.h	/^    int prepare(const char* stmt);$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:(const char * stmt)
sylar::SQLite3Stmt::ptr	sylar/sylar/db/sqlite3.h	/^    typedef std::shared_ptr<SQLite3Stmt> ptr;$/;"	t	class:sylar::SQLite3Stmt	typeref:typename:std::shared_ptr<SQLite3Stmt>	access:public
sylar::SQLite3Stmt::query	sylar/sylar/db/sqlite3.cc	/^ISQLData::ptr SQLite3Stmt::query() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:ISQLData::ptr	signature:()
sylar::SQLite3Stmt::query	sylar/sylar/db/sqlite3.h	/^    ISQLData::ptr query() override;$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:ISQLData::ptr	access:public	signature:()
sylar::SQLite3Stmt::reset	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::reset() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:()
sylar::SQLite3Stmt::reset	sylar/sylar/db/sqlite3.h	/^    int reset();$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:()
sylar::SQLite3Stmt::step	sylar/sylar/db/sqlite3.cc	/^int SQLite3Stmt::step() {$/;"	f	class:sylar::SQLite3Stmt	typeref:typename:int	signature:()
sylar::SQLite3Stmt::step	sylar/sylar/db/sqlite3.h	/^    int step();$/;"	p	class:sylar::SQLite3Stmt	typeref:typename:int	access:public	signature:()
sylar::SQLite3Stmt::~SQLite3Stmt	sylar/sylar/db/sqlite3.cc	/^SQLite3Stmt::~SQLite3Stmt() {$/;"	f	class:sylar::SQLite3Stmt	signature:()
sylar::SQLite3Stmt::~SQLite3Stmt	sylar/sylar/db/sqlite3.h	/^    ~SQLite3Stmt();$/;"	p	class:sylar::SQLite3Stmt	access:public	signature:()
sylar::SQLite3Transaction	sylar/sylar/db/sqlite3.h	/^class SQLite3Transaction : public ITransaction {$/;"	c	namespace:sylar	inherits:ITransaction
sylar::SQLite3Transaction::DEFERRED	sylar/sylar/db/sqlite3.h	/^        DEFERRED = 0,$/;"	e	enum:sylar::SQLite3Transaction::Type	access:public
sylar::SQLite3Transaction::EXCLUSIVE	sylar/sylar/db/sqlite3.h	/^        EXCLUSIVE = 2$/;"	e	enum:sylar::SQLite3Transaction::Type	access:public
sylar::SQLite3Transaction::IMMEDIATE	sylar/sylar/db/sqlite3.h	/^        IMMEDIATE = 1,$/;"	e	enum:sylar::SQLite3Transaction::Type	access:public
sylar::SQLite3Transaction::SQLite3Transaction	sylar/sylar/db/sqlite3.cc	/^SQLite3Transaction::SQLite3Transaction(SQLite3::ptr db, bool auto_commit, Type type)$/;"	f	class:sylar::SQLite3Transaction	signature:(SQLite3::ptr db,bool auto_commit,Type type)
sylar::SQLite3Transaction::SQLite3Transaction	sylar/sylar/db/sqlite3.h	/^    SQLite3Transaction(SQLite3::ptr db$/;"	p	class:sylar::SQLite3Transaction	access:public	signature:(SQLite3::ptr db,bool auto_commit=false,Type type=DEFERRED)
sylar::SQLite3Transaction::Type	sylar/sylar/db/sqlite3.h	/^    enum Type {$/;"	g	class:sylar::SQLite3Transaction	access:public
sylar::SQLite3Transaction::begin	sylar/sylar/db/sqlite3.cc	/^bool SQLite3Transaction::begin() {$/;"	f	class:sylar::SQLite3Transaction	typeref:typename:bool	signature:()
sylar::SQLite3Transaction::begin	sylar/sylar/db/sqlite3.h	/^    bool begin() override;$/;"	p	class:sylar::SQLite3Transaction	typeref:typename:bool	access:public	signature:()
sylar::SQLite3Transaction::commit	sylar/sylar/db/sqlite3.cc	/^bool SQLite3Transaction::commit() {$/;"	f	class:sylar::SQLite3Transaction	typeref:typename:bool	signature:()
sylar::SQLite3Transaction::commit	sylar/sylar/db/sqlite3.h	/^    bool commit() override;$/;"	p	class:sylar::SQLite3Transaction	typeref:typename:bool	access:public	signature:()
sylar::SQLite3Transaction::execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3Transaction::execute(const char* format, ...) {$/;"	f	class:sylar::SQLite3Transaction	typeref:typename:int	signature:(const char * format,...)
sylar::SQLite3Transaction::execute	sylar/sylar/db/sqlite3.cc	/^int SQLite3Transaction::execute(const std::string& sql) {$/;"	f	class:sylar::SQLite3Transaction	typeref:typename:int	signature:(const std::string & sql)
sylar::SQLite3Transaction::execute	sylar/sylar/db/sqlite3.h	/^    int execute(const char* format, ...) override;$/;"	p	class:sylar::SQLite3Transaction	typeref:typename:int	access:public	signature:(const char * format,...)
sylar::SQLite3Transaction::execute	sylar/sylar/db/sqlite3.h	/^    int execute(const std::string& sql) override;$/;"	p	class:sylar::SQLite3Transaction	typeref:typename:int	access:public	signature:(const std::string & sql)
sylar::SQLite3Transaction::getLastInsertId	sylar/sylar/db/sqlite3.cc	/^int64_t SQLite3Transaction::getLastInsertId() {$/;"	f	class:sylar::SQLite3Transaction	typeref:typename:int64_t	signature:()
sylar::SQLite3Transaction::getLastInsertId	sylar/sylar/db/sqlite3.h	/^    int64_t getLastInsertId() override;$/;"	p	class:sylar::SQLite3Transaction	typeref:typename:int64_t	access:public	signature:()
sylar::SQLite3Transaction::m_autoCommit	sylar/sylar/db/sqlite3.h	/^    bool m_autoCommit;$/;"	m	class:sylar::SQLite3Transaction	typeref:typename:bool	access:private
sylar::SQLite3Transaction::m_db	sylar/sylar/db/sqlite3.h	/^    SQLite3::ptr m_db;$/;"	m	class:sylar::SQLite3Transaction	typeref:typename:SQLite3::ptr	access:private
sylar::SQLite3Transaction::m_status	sylar/sylar/db/sqlite3.h	/^    int8_t m_status;$/;"	m	class:sylar::SQLite3Transaction	typeref:typename:int8_t	access:private
sylar::SQLite3Transaction::m_type	sylar/sylar/db/sqlite3.h	/^    Type m_type;$/;"	m	class:sylar::SQLite3Transaction	typeref:typename:Type	access:private
sylar::SQLite3Transaction::rollback	sylar/sylar/db/sqlite3.cc	/^bool SQLite3Transaction::rollback() {$/;"	f	class:sylar::SQLite3Transaction	typeref:typename:bool	signature:()
sylar::SQLite3Transaction::rollback	sylar/sylar/db/sqlite3.h	/^    bool rollback() override;$/;"	p	class:sylar::SQLite3Transaction	typeref:typename:bool	access:public	signature:()
sylar::SQLite3Transaction::~SQLite3Transaction	sylar/sylar/db/sqlite3.cc	/^SQLite3Transaction::~SQLite3Transaction() {$/;"	f	class:sylar::SQLite3Transaction	signature:()
sylar::SQLite3Transaction::~SQLite3Transaction	sylar/sylar/db/sqlite3.h	/^    ~SQLite3Transaction();$/;"	p	class:sylar::SQLite3Transaction	access:public	signature:()
sylar::SSLSocket	sylar/sylar/socket.h	/^class SSLSocket : public Socket {$/;"	c	namespace:sylar	inherits:Socket
sylar::SSLSocket::CreateTCP	sylar/sylar/socket.cc	/^SSLSocket::ptr SSLSocket::CreateTCP(sylar::Address::ptr address) {$/;"	f	class:sylar::SSLSocket	typeref:typename:SSLSocket::ptr	signature:(sylar::Address::ptr address)
sylar::SSLSocket::CreateTCP	sylar/sylar/socket.h	/^    static SSLSocket::ptr CreateTCP(sylar::Address::ptr address);$/;"	p	class:sylar::SSLSocket	typeref:typename:SSLSocket::ptr	access:public	signature:(sylar::Address::ptr address)
sylar::SSLSocket::CreateTCPSocket	sylar/sylar/socket.cc	/^SSLSocket::ptr SSLSocket::CreateTCPSocket() {$/;"	f	class:sylar::SSLSocket	typeref:typename:SSLSocket::ptr	signature:()
sylar::SSLSocket::CreateTCPSocket	sylar/sylar/socket.h	/^    static SSLSocket::ptr CreateTCPSocket();$/;"	p	class:sylar::SSLSocket	typeref:typename:SSLSocket::ptr	access:public	signature:()
sylar::SSLSocket::CreateTCPSocket6	sylar/sylar/socket.cc	/^SSLSocket::ptr SSLSocket::CreateTCPSocket6() {$/;"	f	class:sylar::SSLSocket	typeref:typename:SSLSocket::ptr	signature:()
sylar::SSLSocket::CreateTCPSocket6	sylar/sylar/socket.h	/^    static SSLSocket::ptr CreateTCPSocket6();$/;"	p	class:sylar::SSLSocket	typeref:typename:SSLSocket::ptr	access:public	signature:()
sylar::SSLSocket::SSLSocket	sylar/sylar/socket.cc	/^SSLSocket::SSLSocket(int family, int type, int protocol)$/;"	f	class:sylar::SSLSocket	signature:(int family,int type,int protocol)
sylar::SSLSocket::SSLSocket	sylar/sylar/socket.h	/^    SSLSocket(int family, int type, int protocol = 0);$/;"	p	class:sylar::SSLSocket	access:public	signature:(int family,int type,int protocol=0)
sylar::SSLSocket::accept	sylar/sylar/socket.cc	/^Socket::ptr SSLSocket::accept() {$/;"	f	class:sylar::SSLSocket	typeref:typename:Socket::ptr	signature:()
sylar::SSLSocket::accept	sylar/sylar/socket.h	/^    virtual Socket::ptr accept() override;$/;"	p	class:sylar::SSLSocket	typeref:typename:Socket::ptr	access:public	signature:()
sylar::SSLSocket::bind	sylar/sylar/socket.cc	/^bool SSLSocket::bind(const Address::ptr addr) {$/;"	f	class:sylar::SSLSocket	typeref:typename:bool	signature:(const Address::ptr addr)
sylar::SSLSocket::bind	sylar/sylar/socket.h	/^    virtual bool bind(const Address::ptr addr) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:bool	access:public	signature:(const Address::ptr addr)
sylar::SSLSocket::close	sylar/sylar/socket.cc	/^bool SSLSocket::close() {$/;"	f	class:sylar::SSLSocket	typeref:typename:bool	signature:()
sylar::SSLSocket::close	sylar/sylar/socket.h	/^    virtual bool close() override;$/;"	p	class:sylar::SSLSocket	typeref:typename:bool	access:public	signature:()
sylar::SSLSocket::connect	sylar/sylar/socket.cc	/^bool SSLSocket::connect(const Address::ptr addr, uint64_t timeout_ms) {$/;"	f	class:sylar::SSLSocket	typeref:typename:bool	signature:(const Address::ptr addr,uint64_t timeout_ms)
sylar::SSLSocket::connect	sylar/sylar/socket.h	/^    virtual bool connect(const Address::ptr addr, uint64_t timeout_ms = -1) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:bool	access:public	signature:(const Address::ptr addr,uint64_t timeout_ms=-1)
sylar::SSLSocket::dump	sylar/sylar/socket.cc	/^std::ostream& SSLSocket::dump(std::ostream& os) const {$/;"	f	class:sylar::SSLSocket	typeref:typename:std::ostream &	signature:(std::ostream & os) const
sylar::SSLSocket::dump	sylar/sylar/socket.h	/^    virtual std::ostream& dump(std::ostream& os) const override;$/;"	p	class:sylar::SSLSocket	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
sylar::SSLSocket::init	sylar/sylar/socket.cc	/^bool SSLSocket::init(int sock) {$/;"	f	class:sylar::SSLSocket	typeref:typename:bool	signature:(int sock)
sylar::SSLSocket::init	sylar/sylar/socket.h	/^    virtual bool init(int sock) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:bool	access:protected	signature:(int sock)
sylar::SSLSocket::listen	sylar/sylar/socket.cc	/^bool SSLSocket::listen(int backlog) {$/;"	f	class:sylar::SSLSocket	typeref:typename:bool	signature:(int backlog)
sylar::SSLSocket::listen	sylar/sylar/socket.h	/^    virtual bool listen(int backlog = SOMAXCONN) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:bool	access:public	signature:(int backlog=SOMAXCONN)
sylar::SSLSocket::loadCertificates	sylar/sylar/socket.cc	/^bool SSLSocket::loadCertificates(const std::string& cert_file, const std::string& key_file) {$/;"	f	class:sylar::SSLSocket	typeref:typename:bool	signature:(const std::string & cert_file,const std::string & key_file)
sylar::SSLSocket::loadCertificates	sylar/sylar/socket.h	/^    bool loadCertificates(const std::string& cert_file, const std::string& key_file);$/;"	p	class:sylar::SSLSocket	typeref:typename:bool	access:public	signature:(const std::string & cert_file,const std::string & key_file)
sylar::SSLSocket::m_ctx	sylar/sylar/socket.h	/^    std::shared_ptr<SSL_CTX> m_ctx;$/;"	m	class:sylar::SSLSocket	typeref:typename:std::shared_ptr<SSL_CTX>	access:private
sylar::SSLSocket::m_ssl	sylar/sylar/socket.h	/^    std::shared_ptr<SSL> m_ssl;$/;"	m	class:sylar::SSLSocket	typeref:typename:std::shared_ptr<SSL>	access:private
sylar::SSLSocket::ptr	sylar/sylar/socket.h	/^    typedef std::shared_ptr<SSLSocket> ptr;$/;"	t	class:sylar::SSLSocket	typeref:typename:std::shared_ptr<SSLSocket>	access:public
sylar::SSLSocket::recv	sylar/sylar/socket.cc	/^int SSLSocket::recv(iovec* buffers, size_t length, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(iovec * buffers,size_t length,int flags)
sylar::SSLSocket::recv	sylar/sylar/socket.cc	/^int SSLSocket::recv(void* buffer, size_t length, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(void * buffer,size_t length,int flags)
sylar::SSLSocket::recv	sylar/sylar/socket.h	/^    virtual int recv(iovec* buffers, size_t length, int flags = 0) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(iovec * buffers,size_t length,int flags=0)
sylar::SSLSocket::recv	sylar/sylar/socket.h	/^    virtual int recv(void* buffer, size_t length, int flags = 0) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(void * buffer,size_t length,int flags=0)
sylar::SSLSocket::recvFrom	sylar/sylar/socket.cc	/^int SSLSocket::recvFrom(iovec* buffers, size_t length, Address::ptr from, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(iovec * buffers,size_t length,Address::ptr from,int flags)
sylar::SSLSocket::recvFrom	sylar/sylar/socket.cc	/^int SSLSocket::recvFrom(void* buffer, size_t length, Address::ptr from, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(void * buffer,size_t length,Address::ptr from,int flags)
sylar::SSLSocket::recvFrom	sylar/sylar/socket.h	/^    virtual int recvFrom(iovec* buffers, size_t length, Address::ptr from, int flags = 0) overri/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(iovec * buffers,size_t length,Address::ptr from,int flags=0)
sylar::SSLSocket::recvFrom	sylar/sylar/socket.h	/^    virtual int recvFrom(void* buffer, size_t length, Address::ptr from, int flags = 0) override/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(void * buffer,size_t length,Address::ptr from,int flags=0)
sylar::SSLSocket::send	sylar/sylar/socket.cc	/^int SSLSocket::send(const iovec* buffers, size_t length, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(const iovec * buffers,size_t length,int flags)
sylar::SSLSocket::send	sylar/sylar/socket.cc	/^int SSLSocket::send(const void* buffer, size_t length, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(const void * buffer,size_t length,int flags)
sylar::SSLSocket::send	sylar/sylar/socket.h	/^    virtual int send(const iovec* buffers, size_t length, int flags = 0) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(const iovec * buffers,size_t length,int flags=0)
sylar::SSLSocket::send	sylar/sylar/socket.h	/^    virtual int send(const void* buffer, size_t length, int flags = 0) override;$/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(const void * buffer,size_t length,int flags=0)
sylar::SSLSocket::sendTo	sylar/sylar/socket.cc	/^int SSLSocket::sendTo(const iovec* buffers, size_t length, const Address::ptr to, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(const iovec * buffers,size_t length,const Address::ptr to,int flags)
sylar::SSLSocket::sendTo	sylar/sylar/socket.cc	/^int SSLSocket::sendTo(const void* buffer, size_t length, const Address::ptr to, int flags) {$/;"	f	class:sylar::SSLSocket	typeref:typename:int	signature:(const void * buffer,size_t length,const Address::ptr to,int flags)
sylar::SSLSocket::sendTo	sylar/sylar/socket.h	/^    virtual int sendTo(const iovec* buffers, size_t length, const Address::ptr to, int flags = 0/;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(const iovec * buffers,size_t length,const Address::ptr to,int flags=0)
sylar::SSLSocket::sendTo	sylar/sylar/socket.h	/^    virtual int sendTo(const void* buffer, size_t length, const Address::ptr to, int flags = 0) /;"	p	class:sylar::SSLSocket	typeref:typename:int	access:public	signature:(const void * buffer,size_t length,const Address::ptr to,int flags=0)
sylar::Scheduler	sylar/sylar/scheduler.h	/^class Scheduler {$/;"	c	namespace:sylar
sylar::Scheduler::FiberAndThread	sylar/sylar/scheduler.h	/^    struct FiberAndThread {$/;"	s	class:sylar::Scheduler	access:private
sylar::Scheduler::FiberAndThread::FiberAndThread	sylar/sylar/scheduler.h	/^        FiberAndThread()$/;"	f	struct:sylar::Scheduler::FiberAndThread	access:public	signature:()
sylar::Scheduler::FiberAndThread::FiberAndThread	sylar/sylar/scheduler.h	/^        FiberAndThread(Fiber::ptr f, int thr)$/;"	f	struct:sylar::Scheduler::FiberAndThread	access:public	signature:(Fiber::ptr f,int thr)
sylar::Scheduler::FiberAndThread::FiberAndThread	sylar/sylar/scheduler.h	/^        FiberAndThread(Fiber::ptr* f, int thr)$/;"	f	struct:sylar::Scheduler::FiberAndThread	access:public	signature:(Fiber::ptr * f,int thr)
sylar::Scheduler::FiberAndThread::FiberAndThread	sylar/sylar/scheduler.h	/^        FiberAndThread(std::function<void()> f, int thr)$/;"	f	struct:sylar::Scheduler::FiberAndThread	access:public	signature:(std::function<void ()> f,int thr)
sylar::Scheduler::FiberAndThread::FiberAndThread	sylar/sylar/scheduler.h	/^        FiberAndThread(std::function<void()>* f, int thr)$/;"	f	struct:sylar::Scheduler::FiberAndThread	access:public	signature:(std::function<void ()> * f,int thr)
sylar::Scheduler::FiberAndThread::cb	sylar/sylar/scheduler.h	/^        std::function<void()> cb;$/;"	m	struct:sylar::Scheduler::FiberAndThread	typeref:typename:std::function<void ()>	access:public
sylar::Scheduler::FiberAndThread::fiber	sylar/sylar/scheduler.h	/^        Fiber::ptr fiber;$/;"	m	struct:sylar::Scheduler::FiberAndThread	typeref:typename:Fiber::ptr	access:public
sylar::Scheduler::FiberAndThread::reset	sylar/sylar/scheduler.h	/^        void reset() {$/;"	f	struct:sylar::Scheduler::FiberAndThread	typeref:typename:void	access:public	signature:()
sylar::Scheduler::FiberAndThread::thread	sylar/sylar/scheduler.h	/^        int thread;$/;"	m	struct:sylar::Scheduler::FiberAndThread	typeref:typename:int	access:public
sylar::Scheduler::GetMainFiber	sylar/sylar/scheduler.cc	/^Fiber* Scheduler::GetMainFiber() {$/;"	f	class:sylar::Scheduler	typeref:typename:Fiber *	signature:()
sylar::Scheduler::GetMainFiber	sylar/sylar/scheduler.h	/^    static Fiber* GetMainFiber();$/;"	p	class:sylar::Scheduler	typeref:typename:Fiber *	access:public	signature:()
sylar::Scheduler::GetThis	sylar/sylar/scheduler.cc	/^Scheduler* Scheduler::GetThis() {$/;"	f	class:sylar::Scheduler	typeref:typename:Scheduler *	signature:()
sylar::Scheduler::GetThis	sylar/sylar/scheduler.h	/^    static Scheduler* GetThis();$/;"	p	class:sylar::Scheduler	typeref:typename:Scheduler *	access:public	signature:()
sylar::Scheduler::MutexType	sylar/sylar/scheduler.h	/^    typedef Mutex MutexType;$/;"	t	class:sylar::Scheduler	typeref:typename:Mutex	access:public
sylar::Scheduler::Scheduler	sylar/sylar/scheduler.cc	/^Scheduler::Scheduler(size_t threads, bool use_caller, const std::string& name)$/;"	f	class:sylar::Scheduler	signature:(size_t threads,bool use_caller,const std::string & name)
sylar::Scheduler::Scheduler	sylar/sylar/scheduler.h	/^    Scheduler(size_t threads = 1, bool use_caller = true, const std::string& name = "");$/;"	p	class:sylar::Scheduler	access:public	signature:(size_t threads=1,bool use_caller=true,const std::string & name="")
sylar::Scheduler::dump	sylar/sylar/scheduler.cc	/^std::ostream& Scheduler::dump(std::ostream& os) {$/;"	f	class:sylar::Scheduler	typeref:typename:std::ostream &	signature:(std::ostream & os)
sylar::Scheduler::dump	sylar/sylar/scheduler.h	/^    std::ostream& dump(std::ostream& os);$/;"	p	class:sylar::Scheduler	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
sylar::Scheduler::getName	sylar/sylar/scheduler.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::Scheduler	typeref:typename:const std::string &	access:public	signature:() const
sylar::Scheduler::hasIdleThreads	sylar/sylar/scheduler.h	/^    bool hasIdleThreads() { return m_idleThreadCount > 0;}$/;"	f	class:sylar::Scheduler	typeref:typename:bool	access:protected	signature:()
sylar::Scheduler::idle	sylar/sylar/scheduler.cc	/^void Scheduler::idle() {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:()
sylar::Scheduler::idle	sylar/sylar/scheduler.h	/^    virtual void idle();$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:protected	signature:()
sylar::Scheduler::m_autoStop	sylar/sylar/scheduler.h	/^    bool m_autoStop = false;$/;"	m	class:sylar::Scheduler	typeref:typename:bool	access:protected
sylar::Scheduler::m_fibers	sylar/sylar/scheduler.h	/^    std::list<FiberAndThread> m_fibers;$/;"	m	class:sylar::Scheduler	typeref:typename:std::list<FiberAndThread>	access:private
sylar::Scheduler::m_mutex	sylar/sylar/scheduler.h	/^    MutexType m_mutex;$/;"	m	class:sylar::Scheduler	typeref:typename:MutexType	access:private
sylar::Scheduler::m_name	sylar/sylar/scheduler.h	/^    std::string m_name;$/;"	m	class:sylar::Scheduler	typeref:typename:std::string	access:private
sylar::Scheduler::m_rootFiber	sylar/sylar/scheduler.h	/^    Fiber::ptr m_rootFiber;$/;"	m	class:sylar::Scheduler	typeref:typename:Fiber::ptr	access:private
sylar::Scheduler::m_rootThread	sylar/sylar/scheduler.h	/^    int m_rootThread = 0;$/;"	m	class:sylar::Scheduler	typeref:typename:int	access:protected
sylar::Scheduler::m_stopping	sylar/sylar/scheduler.h	/^    bool m_stopping = true;$/;"	m	class:sylar::Scheduler	typeref:typename:bool	access:protected
sylar::Scheduler::m_threadCount	sylar/sylar/scheduler.h	/^    size_t m_threadCount = 0;$/;"	m	class:sylar::Scheduler	typeref:typename:size_t	access:protected
sylar::Scheduler::m_threadIds	sylar/sylar/scheduler.h	/^    std::vector<int> m_threadIds;$/;"	m	class:sylar::Scheduler	typeref:typename:std::vector<int>	access:protected
sylar::Scheduler::m_threads	sylar/sylar/scheduler.h	/^    std::vector<Thread::ptr> m_threads;$/;"	m	class:sylar::Scheduler	typeref:typename:std::vector<Thread::ptr>	access:private
sylar::Scheduler::ptr	sylar/sylar/scheduler.h	/^    typedef std::shared_ptr<Scheduler> ptr;$/;"	t	class:sylar::Scheduler	typeref:typename:std::shared_ptr<Scheduler>	access:public
sylar::Scheduler::run	sylar/sylar/scheduler.cc	/^void Scheduler::run() {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:()
sylar::Scheduler::run	sylar/sylar/scheduler.h	/^    void run();$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:protected	signature:()
sylar::Scheduler::schedule	sylar/sylar/scheduler.h	/^    void schedule(FiberOrCb fc, int thread = -1) {$/;"	f	class:sylar::Scheduler	typeref:typename:void	access:public	signature:(FiberOrCb fc,int thread=-1)
sylar::Scheduler::schedule	sylar/sylar/scheduler.h	/^    void schedule(InputIterator begin, InputIterator end) {$/;"	f	class:sylar::Scheduler	typeref:typename:void	access:public	signature:(InputIterator begin,InputIterator end)
sylar::Scheduler::scheduleNoLock	sylar/sylar/scheduler.h	/^    bool scheduleNoLock(FiberOrCb fc, int thread) {$/;"	f	class:sylar::Scheduler	typeref:typename:bool	access:private	signature:(FiberOrCb fc,int thread)
sylar::Scheduler::setThis	sylar/sylar/scheduler.cc	/^void Scheduler::setThis() {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:()
sylar::Scheduler::setThis	sylar/sylar/scheduler.h	/^    void setThis();$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:protected	signature:()
sylar::Scheduler::start	sylar/sylar/scheduler.cc	/^void Scheduler::start() {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:()
sylar::Scheduler::start	sylar/sylar/scheduler.h	/^    void start();$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:public	signature:()
sylar::Scheduler::stop	sylar/sylar/scheduler.cc	/^void Scheduler::stop() {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:()
sylar::Scheduler::stop	sylar/sylar/scheduler.h	/^    void stop();$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:public	signature:()
sylar::Scheduler::stopping	sylar/sylar/scheduler.cc	/^bool Scheduler::stopping() {$/;"	f	class:sylar::Scheduler	typeref:typename:bool	signature:()
sylar::Scheduler::stopping	sylar/sylar/scheduler.h	/^    virtual bool stopping();$/;"	p	class:sylar::Scheduler	typeref:typename:bool	access:protected	signature:()
sylar::Scheduler::switchTo	sylar/sylar/scheduler.cc	/^void Scheduler::switchTo(int thread) {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:(int thread)
sylar::Scheduler::switchTo	sylar/sylar/scheduler.h	/^    void switchTo(int thread = -1);$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:public	signature:(int thread=-1)
sylar::Scheduler::tickle	sylar/sylar/scheduler.cc	/^void Scheduler::tickle() {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:()
sylar::Scheduler::tickle	sylar/sylar/scheduler.h	/^    virtual void tickle();$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:protected	signature:()
sylar::Scheduler::~Scheduler	sylar/sylar/scheduler.cc	/^Scheduler::~Scheduler() {$/;"	f	class:sylar::Scheduler	signature:()
sylar::Scheduler::~Scheduler	sylar/sylar/scheduler.h	/^    virtual ~Scheduler();$/;"	p	class:sylar::Scheduler	access:public	signature:()
sylar::SchedulerSwitcher	sylar/sylar/scheduler.h	/^class SchedulerSwitcher : public Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
sylar::SchedulerSwitcher::SchedulerSwitcher	sylar/sylar/scheduler.cc	/^SchedulerSwitcher::SchedulerSwitcher(Scheduler* target) {$/;"	f	class:sylar::SchedulerSwitcher	signature:(Scheduler * target)
sylar::SchedulerSwitcher::SchedulerSwitcher	sylar/sylar/scheduler.h	/^    SchedulerSwitcher(Scheduler* target = nullptr);$/;"	p	class:sylar::SchedulerSwitcher	access:public	signature:(Scheduler * target=nullptr)
sylar::SchedulerSwitcher::m_caller	sylar/sylar/scheduler.h	/^    Scheduler* m_caller;$/;"	m	class:sylar::SchedulerSwitcher	typeref:typename:Scheduler *	access:private
sylar::SchedulerSwitcher::~SchedulerSwitcher	sylar/sylar/scheduler.cc	/^SchedulerSwitcher::~SchedulerSwitcher() {$/;"	f	class:sylar::SchedulerSwitcher	signature:()
sylar::SchedulerSwitcher::~SchedulerSwitcher	sylar/sylar/scheduler.h	/^    ~SchedulerSwitcher();$/;"	p	class:sylar::SchedulerSwitcher	access:public	signature:()
sylar::ScopedLockImpl	sylar/sylar/mutex.h	/^struct ScopedLockImpl {$/;"	s	namespace:sylar
sylar::ScopedLockImpl::ScopedLockImpl	sylar/sylar/mutex.h	/^    ScopedLockImpl(T& mutex)$/;"	f	struct:sylar::ScopedLockImpl	access:public	signature:(T & mutex)
sylar::ScopedLockImpl::lock	sylar/sylar/mutex.h	/^    void lock() {$/;"	f	struct:sylar::ScopedLockImpl	typeref:typename:void	access:public	signature:()
sylar::ScopedLockImpl::m_locked	sylar/sylar/mutex.h	/^    bool m_locked;$/;"	m	struct:sylar::ScopedLockImpl	typeref:typename:bool	access:private
sylar::ScopedLockImpl::m_mutex	sylar/sylar/mutex.h	/^    T& m_mutex;$/;"	m	struct:sylar::ScopedLockImpl	typeref:typename:T &	access:private
sylar::ScopedLockImpl::unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	struct:sylar::ScopedLockImpl	typeref:typename:void	access:public	signature:()
sylar::ScopedLockImpl::~ScopedLockImpl	sylar/sylar/mutex.h	/^    ~ScopedLockImpl() {$/;"	f	struct:sylar::ScopedLockImpl	access:public	signature:()
sylar::Semaphore	sylar/sylar/mutex.h	/^class Semaphore : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
sylar::Semaphore::Semaphore	sylar/sylar/mutex.cc	/^Semaphore::Semaphore(uint32_t count) {$/;"	f	class:sylar::Semaphore	signature:(uint32_t count)
sylar::Semaphore::Semaphore	sylar/sylar/mutex.h	/^    Semaphore(uint32_t count = 0);$/;"	p	class:sylar::Semaphore	access:public	signature:(uint32_t count=0)
sylar::Semaphore::m_semaphore	sylar/sylar/mutex.h	/^    sem_t m_semaphore;$/;"	m	class:sylar::Semaphore	typeref:typename:sem_t	access:private
sylar::Semaphore::notify	sylar/sylar/mutex.cc	/^void Semaphore::notify() {$/;"	f	class:sylar::Semaphore	typeref:typename:void	signature:()
sylar::Semaphore::notify	sylar/sylar/mutex.h	/^    void notify();$/;"	p	class:sylar::Semaphore	typeref:typename:void	access:public	signature:()
sylar::Semaphore::wait	sylar/sylar/mutex.cc	/^void Semaphore::wait() {$/;"	f	class:sylar::Semaphore	typeref:typename:void	signature:()
sylar::Semaphore::wait	sylar/sylar/mutex.h	/^    void wait();$/;"	p	class:sylar::Semaphore	typeref:typename:void	access:public	signature:()
sylar::Semaphore::~Semaphore	sylar/sylar/mutex.cc	/^Semaphore::~Semaphore() {$/;"	f	class:sylar::Semaphore	signature:()
sylar::Semaphore::~Semaphore	sylar/sylar/mutex.h	/^    ~Semaphore();$/;"	p	class:sylar::Semaphore	access:public	signature:()
sylar::ServiceItemInfo	sylar/sylar/streams/service_discovery.h	/^class ServiceItemInfo {$/;"	c	namespace:sylar
sylar::ServiceItemInfo::Create	sylar/sylar/streams/service_discovery.cc	/^ServiceItemInfo::ptr ServiceItemInfo::Create(const std::string& ip_and_port, const std::string& /;"	f	class:sylar::ServiceItemInfo	typeref:typename:ServiceItemInfo::ptr	signature:(const std::string & ip_and_port,const std::string & data)
sylar::ServiceItemInfo::Create	sylar/sylar/streams/service_discovery.h	/^    static ServiceItemInfo::ptr Create(const std::string& ip_and_port, const std::string& data);$/;"	p	class:sylar::ServiceItemInfo	typeref:typename:ServiceItemInfo::ptr	access:public	signature:(const std::string & ip_and_port,const std::string & data)
sylar::ServiceItemInfo::getData	sylar/sylar/streams/service_discovery.h	/^    const std::string& getData() const { return m_data;}$/;"	f	class:sylar::ServiceItemInfo	typeref:typename:const std::string &	access:public	signature:() const
sylar::ServiceItemInfo::getId	sylar/sylar/streams/service_discovery.h	/^    uint64_t getId() const { return m_id;}$/;"	f	class:sylar::ServiceItemInfo	typeref:typename:uint64_t	access:public	signature:() const
sylar::ServiceItemInfo::getIp	sylar/sylar/streams/service_discovery.h	/^    const std::string& getIp() const { return m_ip;}$/;"	f	class:sylar::ServiceItemInfo	typeref:typename:const std::string &	access:public	signature:() const
sylar::ServiceItemInfo::getPort	sylar/sylar/streams/service_discovery.h	/^    uint16_t getPort() const { return m_port;}$/;"	f	class:sylar::ServiceItemInfo	typeref:typename:uint16_t	access:public	signature:() const
sylar::ServiceItemInfo::m_data	sylar/sylar/streams/service_discovery.h	/^    std::string m_data;$/;"	m	class:sylar::ServiceItemInfo	typeref:typename:std::string	access:private
sylar::ServiceItemInfo::m_id	sylar/sylar/streams/service_discovery.h	/^    uint64_t m_id;$/;"	m	class:sylar::ServiceItemInfo	typeref:typename:uint64_t	access:private
sylar::ServiceItemInfo::m_ip	sylar/sylar/streams/service_discovery.h	/^    std::string m_ip;$/;"	m	class:sylar::ServiceItemInfo	typeref:typename:std::string	access:private
sylar::ServiceItemInfo::m_port	sylar/sylar/streams/service_discovery.h	/^    uint16_t m_port;$/;"	m	class:sylar::ServiceItemInfo	typeref:typename:uint16_t	access:private
sylar::ServiceItemInfo::ptr	sylar/sylar/streams/service_discovery.h	/^    typedef std::shared_ptr<ServiceItemInfo> ptr;$/;"	t	class:sylar::ServiceItemInfo	typeref:typename:std::shared_ptr<ServiceItemInfo>	access:public
sylar::ServiceItemInfo::toString	sylar/sylar/streams/service_discovery.cc	/^std::string ServiceItemInfo::toString() const {$/;"	f	class:sylar::ServiceItemInfo	typeref:typename:std::string	signature:() const
sylar::ServiceItemInfo::toString	sylar/sylar/streams/service_discovery.h	/^    std::string toString() const;$/;"	p	class:sylar::ServiceItemInfo	typeref:typename:std::string	access:public	signature:() const
sylar::SharedArray	sylar/sylar/util.h	/^class SharedArray {$/;"	c	namespace:sylar
sylar::SharedArray::SharedArray	sylar/sylar/util.h	/^    SharedArray(const SharedArray& r)$/;"	f	class:sylar::SharedArray	access:public	signature:(const SharedArray & r)
sylar::SharedArray::SharedArray	sylar/sylar/util.h	/^    explicit SharedArray(const uint64_t& size = 0, T* p = 0)$/;"	f	class:sylar::SharedArray	access:public	signature:(const uint64_t & size=0,T * p=0)
sylar::SharedArray::SharedArray	sylar/sylar/util.h	/^    template<class D> SharedArray(const uint64_t& size, T* p, D d)$/;"	f	class:sylar::SharedArray	access:public	signature:(const uint64_t & size,T * p,D d)
sylar::SharedArray::__anon037a23cd0102	sylar/sylar/util.h	/^    T& operator[](std::ptrdiff_t i) const {$/;"	f	class:sylar::SharedArray	file:	access:public	signature:(std::ptrdiff_t i) 
sylar::SharedArray::__anon037a23cd0202	sylar/sylar/util.h	/^    T* get() const {$/;"	f	class:sylar::SharedArray	file:	access:public	signature:(std::ptrdiff_t i) 
sylar::SharedArray::__anon037a23cd0302	sylar/sylar/util.h	/^    bool unique() const {$/;"	f	class:sylar::SharedArray	file:	access:public	signature:(std::ptrdiff_t i) 
sylar::SharedArray::__anon037a23cd0402	sylar/sylar/util.h	/^    long use_count() const {$/;"	f	class:sylar::SharedArray	file:	access:public	signature:(std::ptrdiff_t i) 
sylar::SharedArray::m_ptr	sylar/sylar/util.h	/^    std::shared_ptr<T> m_ptr;$/;"	m	class:sylar::SharedArray	typeref:typename:std::shared_ptr<T>	access:private
sylar::SharedArray::m_size	sylar/sylar/util.h	/^    uint64_t m_size;$/;"	m	class:sylar::SharedArray	typeref:typename:uint64_t	access:private
sylar::SharedArray::operator !	sylar/sylar/util.h	/^    bool operator!() const {$/;"	f	class:sylar::SharedArray	typeref:typename:bool	access:public	signature:() const
sylar::SharedArray::operator =	sylar/sylar/util.h	/^    SharedArray& operator=(const SharedArray& r) {$/;"	f	class:sylar::SharedArray	typeref:typename:SharedArray &	access:public	signature:(const SharedArray & r)
sylar::SharedArray::operator []	sylar/sylar/util.h	/^    T& operator[](std::ptrdiff_t i) const {$/;"	f	class:sylar::SharedArray	typeref:typename:T &	access:public	signature:(std::ptrdiff_t i) const
sylar::SharedArray::size	sylar/sylar/util.h	/^    uint64_t size() const {$/;"	f	class:sylar::SharedArray	typeref:typename:uint64_t	access:public	signature:() const
sylar::Singleton	sylar/sylar/singleton.h	/^class Singleton {$/;"	c	namespace:sylar
sylar::Singleton::GetInstance	sylar/sylar/singleton.h	/^    static T* GetInstance() {$/;"	f	class:sylar::Singleton	typeref:typename:T *	access:public	signature:()
sylar::SingletonPtr	sylar/sylar/singleton.h	/^class SingletonPtr {$/;"	c	namespace:sylar
sylar::SingletonPtr::GetInstance	sylar/sylar/singleton.h	/^    static std::shared_ptr<T> GetInstance() {$/;"	f	class:sylar::SingletonPtr	typeref:typename:std::shared_ptr<T>	access:public	signature:()
sylar::Slice	sylar/sylar/util.h	/^void Slice(std::vector<std::vector<T> >& dst, const std::vector<T>& src, size_t size) {$/;"	f	namespace:sylar	typeref:typename:void	signature:(std::vector<std::vector<T>> & dst,const std::vector<T> & src,size_t size)
sylar::SmtpClient	sylar/sylar/email/smtp.h	/^class SmtpClient : public sylar::SocketStream {$/;"	c	namespace:sylar	inherits:sylar::SocketStream
sylar::SmtpClient::Create	sylar/sylar/email/smtp.cc	/^SmtpClient::ptr SmtpClient::Create(const std::string& host, uint32_t port, bool ssl) {$/;"	f	class:sylar::SmtpClient	typeref:typename:SmtpClient::ptr	signature:(const std::string & host,uint32_t port,bool ssl)
sylar::SmtpClient::Create	sylar/sylar/email/smtp.h	/^    static SmtpClient::ptr Create(const std::string& host, uint32_t port, bool ssl= false);$/;"	p	class:sylar::SmtpClient	typeref:typename:SmtpClient::ptr	access:public	signature:(const std::string & host,uint32_t port,bool ssl=false)
sylar::SmtpClient::SmtpClient	sylar/sylar/email/smtp.cc	/^SmtpClient::SmtpClient(Socket::ptr sock)$/;"	f	class:sylar::SmtpClient	signature:(Socket::ptr sock)
sylar::SmtpClient::SmtpClient	sylar/sylar/email/smtp.h	/^    SmtpClient(Socket::ptr sock);$/;"	p	class:sylar::SmtpClient	access:private	signature:(Socket::ptr sock)
sylar::SmtpClient::doCmd	sylar/sylar/email/smtp.cc	/^SmtpResult::ptr SmtpClient::doCmd(const std::string& cmd, bool debug) {$/;"	f	class:sylar::SmtpClient	typeref:typename:SmtpResult::ptr	signature:(const std::string & cmd,bool debug)
sylar::SmtpClient::doCmd	sylar/sylar/email/smtp.h	/^    SmtpResult::ptr doCmd(const std::string& cmd, bool debug);$/;"	p	class:sylar::SmtpClient	typeref:typename:SmtpResult::ptr	access:private	signature:(const std::string & cmd,bool debug)
sylar::SmtpClient::getDebugInfo	sylar/sylar/email/smtp.cc	/^std::string SmtpClient::getDebugInfo() {$/;"	f	class:sylar::SmtpClient	typeref:typename:std::string	signature:()
sylar::SmtpClient::getDebugInfo	sylar/sylar/email/smtp.h	/^    std::string getDebugInfo();$/;"	p	class:sylar::SmtpClient	typeref:typename:std::string	access:public	signature:()
sylar::SmtpClient::m_authed	sylar/sylar/email/smtp.h	/^    bool m_authed = false;$/;"	m	class:sylar::SmtpClient	typeref:typename:bool	access:private
sylar::SmtpClient::m_host	sylar/sylar/email/smtp.h	/^    std::string m_host;$/;"	m	class:sylar::SmtpClient	typeref:typename:std::string	access:private
sylar::SmtpClient::m_ss	sylar/sylar/email/smtp.h	/^    std::stringstream m_ss;$/;"	m	class:sylar::SmtpClient	typeref:typename:std::stringstream	access:private
sylar::SmtpClient::ptr	sylar/sylar/email/smtp.h	/^    typedef std::shared_ptr<SmtpClient> ptr;$/;"	t	class:sylar::SmtpClient	typeref:typename:std::shared_ptr<SmtpClient>	access:public
sylar::SmtpClient::send	sylar/sylar/email/smtp.cc	/^SmtpResult::ptr SmtpClient::send(EMail::ptr email, int64_t timeout_ms, bool debug) {$/;"	f	class:sylar::SmtpClient	typeref:typename:SmtpResult::ptr	signature:(EMail::ptr email,int64_t timeout_ms,bool debug)
sylar::SmtpClient::send	sylar/sylar/email/smtp.h	/^    SmtpResult::ptr send(EMail::ptr email, int64_t timeout_ms = 1000, bool debug = false);$/;"	p	class:sylar::SmtpClient	typeref:typename:SmtpResult::ptr	access:public	signature:(EMail::ptr email,int64_t timeout_ms=1000,bool debug=false)
sylar::SmtpResult	sylar/sylar/email/smtp.h	/^struct SmtpResult {$/;"	s	namespace:sylar
sylar::SmtpResult::IO_ERROR	sylar/sylar/email/smtp.h	/^        IO_ERROR = -1$/;"	e	enum:sylar::SmtpResult::Result	access:public
sylar::SmtpResult::OK	sylar/sylar/email/smtp.h	/^        OK = 0,$/;"	e	enum:sylar::SmtpResult::Result	access:public
sylar::SmtpResult::Result	sylar/sylar/email/smtp.h	/^    enum Result {$/;"	g	struct:sylar::SmtpResult	access:public
sylar::SmtpResult::SmtpResult	sylar/sylar/email/smtp.h	/^    SmtpResult(int r, const std::string& m)$/;"	f	struct:sylar::SmtpResult	access:public	signature:(int r,const std::string & m)
sylar::SmtpResult::msg	sylar/sylar/email/smtp.h	/^    std::string msg;$/;"	m	struct:sylar::SmtpResult	typeref:typename:std::string	access:public
sylar::SmtpResult::ptr	sylar/sylar/email/smtp.h	/^    typedef std::shared_ptr<SmtpResult> ptr;$/;"	t	struct:sylar::SmtpResult	typeref:typename:std::shared_ptr<SmtpResult>	access:public
sylar::SmtpResult::result	sylar/sylar/email/smtp.h	/^    int result;$/;"	m	struct:sylar::SmtpResult	typeref:typename:int	access:public
sylar::Socket	sylar/sylar/socket.h	/^class Socket : public std::enable_shared_from_this<Socket>, Noncopyable {$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<Socket>,Noncopyable
sylar::Socket::CreateTCP	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateTCP(sylar::Address::ptr address) {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:(sylar::Address::ptr address)
sylar::Socket::CreateTCP	sylar/sylar/socket.h	/^    static Socket::ptr CreateTCP(sylar::Address::ptr address);$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:(sylar::Address::ptr address)
sylar::Socket::CreateTCPSocket	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateTCPSocket() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
sylar::Socket::CreateTCPSocket	sylar/sylar/socket.h	/^    static Socket::ptr CreateTCPSocket();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
sylar::Socket::CreateTCPSocket6	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateTCPSocket6() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
sylar::Socket::CreateTCPSocket6	sylar/sylar/socket.h	/^    static Socket::ptr CreateTCPSocket6();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
sylar::Socket::CreateUDP	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateUDP(sylar::Address::ptr address) {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:(sylar::Address::ptr address)
sylar::Socket::CreateUDP	sylar/sylar/socket.h	/^    static Socket::ptr CreateUDP(sylar::Address::ptr address);$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:(sylar::Address::ptr address)
sylar::Socket::CreateUDPSocket	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateUDPSocket() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
sylar::Socket::CreateUDPSocket	sylar/sylar/socket.h	/^    static Socket::ptr CreateUDPSocket();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
sylar::Socket::CreateUDPSocket6	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateUDPSocket6() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
sylar::Socket::CreateUDPSocket6	sylar/sylar/socket.h	/^    static Socket::ptr CreateUDPSocket6();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
sylar::Socket::CreateUnixTCPSocket	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateUnixTCPSocket() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
sylar::Socket::CreateUnixTCPSocket	sylar/sylar/socket.h	/^    static Socket::ptr CreateUnixTCPSocket();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
sylar::Socket::CreateUnixUDPSocket	sylar/sylar/socket.cc	/^Socket::ptr Socket::CreateUnixUDPSocket() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
sylar::Socket::CreateUnixUDPSocket	sylar/sylar/socket.h	/^    static Socket::ptr CreateUnixUDPSocket();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
sylar::Socket::Family	sylar/sylar/socket.h	/^    enum Family {$/;"	g	class:sylar::Socket	access:public
sylar::Socket::IPv4	sylar/sylar/socket.h	/^        IPv4 = AF_INET,$/;"	e	enum:sylar::Socket::Family	access:public
sylar::Socket::IPv6	sylar/sylar/socket.h	/^        IPv6 = AF_INET6,$/;"	e	enum:sylar::Socket::Family	access:public
sylar::Socket::Socket	sylar/sylar/socket.cc	/^Socket::Socket(int family, int type, int protocol)$/;"	f	class:sylar::Socket	signature:(int family,int type,int protocol)
sylar::Socket::Socket	sylar/sylar/socket.h	/^    Socket(int family, int type, int protocol = 0);$/;"	p	class:sylar::Socket	access:public	signature:(int family,int type,int protocol=0)
sylar::Socket::TCP	sylar/sylar/socket.h	/^        TCP = SOCK_STREAM,$/;"	e	enum:sylar::Socket::Type	access:public
sylar::Socket::Type	sylar/sylar/socket.h	/^    enum Type {$/;"	g	class:sylar::Socket	access:public
sylar::Socket::UDP	sylar/sylar/socket.h	/^        UDP = SOCK_DGRAM$/;"	e	enum:sylar::Socket::Type	access:public
sylar::Socket::UNIX	sylar/sylar/socket.h	/^        UNIX = AF_UNIX,$/;"	e	enum:sylar::Socket::Family	access:public
sylar::Socket::accept	sylar/sylar/socket.cc	/^Socket::ptr Socket::accept() {$/;"	f	class:sylar::Socket	typeref:typename:Socket::ptr	signature:()
sylar::Socket::accept	sylar/sylar/socket.h	/^    virtual Socket::ptr accept();$/;"	p	class:sylar::Socket	typeref:typename:Socket::ptr	access:public	signature:()
sylar::Socket::bind	sylar/sylar/socket.cc	/^bool Socket::bind(const Address::ptr addr) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(const Address::ptr addr)
sylar::Socket::bind	sylar/sylar/socket.h	/^    virtual bool bind(const Address::ptr addr);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:(const Address::ptr addr)
sylar::Socket::cancelAccept	sylar/sylar/socket.cc	/^bool Socket::cancelAccept() {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:()
sylar::Socket::cancelAccept	sylar/sylar/socket.h	/^    bool cancelAccept();$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:()
sylar::Socket::cancelAll	sylar/sylar/socket.cc	/^bool Socket::cancelAll() {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:()
sylar::Socket::cancelAll	sylar/sylar/socket.h	/^    bool cancelAll();$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:()
sylar::Socket::cancelRead	sylar/sylar/socket.cc	/^bool Socket::cancelRead() {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:()
sylar::Socket::cancelRead	sylar/sylar/socket.h	/^    bool cancelRead();$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:()
sylar::Socket::cancelWrite	sylar/sylar/socket.cc	/^bool Socket::cancelWrite() {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:()
sylar::Socket::cancelWrite	sylar/sylar/socket.h	/^    bool cancelWrite();$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:()
sylar::Socket::close	sylar/sylar/socket.cc	/^bool Socket::close() {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:()
sylar::Socket::close	sylar/sylar/socket.h	/^    virtual bool close();$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:()
sylar::Socket::connect	sylar/sylar/socket.cc	/^bool Socket::connect(const Address::ptr addr, uint64_t timeout_ms) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(const Address::ptr addr,uint64_t timeout_ms)
sylar::Socket::connect	sylar/sylar/socket.h	/^    virtual bool connect(const Address::ptr addr, uint64_t timeout_ms = -1);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:(const Address::ptr addr,uint64_t timeout_ms=-1)
sylar::Socket::dump	sylar/sylar/socket.cc	/^std::ostream& Socket::dump(std::ostream& os) const {$/;"	f	class:sylar::Socket	typeref:typename:std::ostream &	signature:(std::ostream & os) const
sylar::Socket::dump	sylar/sylar/socket.h	/^    virtual std::ostream& dump(std::ostream& os) const;$/;"	p	class:sylar::Socket	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
sylar::Socket::getError	sylar/sylar/socket.cc	/^int Socket::getError() {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:()
sylar::Socket::getError	sylar/sylar/socket.h	/^    int getError();$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:()
sylar::Socket::getFamily	sylar/sylar/socket.h	/^    int getFamily() const { return m_family;}$/;"	f	class:sylar::Socket	typeref:typename:int	access:public	signature:() const
sylar::Socket::getLocalAddress	sylar/sylar/socket.cc	/^Address::ptr Socket::getLocalAddress() {$/;"	f	class:sylar::Socket	typeref:typename:Address::ptr	signature:()
sylar::Socket::getLocalAddress	sylar/sylar/socket.h	/^    Address::ptr getLocalAddress();$/;"	p	class:sylar::Socket	typeref:typename:Address::ptr	access:public	signature:()
sylar::Socket::getOption	sylar/sylar/socket.cc	/^bool Socket::getOption(int level, int option, void* result, socklen_t* len) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(int level,int option,void * result,socklen_t * len)
sylar::Socket::getOption	sylar/sylar/socket.h	/^    bool getOption(int level, int option, T& result) {$/;"	f	class:sylar::Socket	typeref:typename:bool	access:public	signature:(int level,int option,T & result)
sylar::Socket::getOption	sylar/sylar/socket.h	/^    bool getOption(int level, int option, void* result, socklen_t* len);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:(int level,int option,void * result,socklen_t * len)
sylar::Socket::getProtocol	sylar/sylar/socket.h	/^    int getProtocol() const { return m_protocol;}$/;"	f	class:sylar::Socket	typeref:typename:int	access:public	signature:() const
sylar::Socket::getRecvTimeout	sylar/sylar/socket.cc	/^int64_t Socket::getRecvTimeout() {$/;"	f	class:sylar::Socket	typeref:typename:int64_t	signature:()
sylar::Socket::getRecvTimeout	sylar/sylar/socket.h	/^    int64_t getRecvTimeout();$/;"	p	class:sylar::Socket	typeref:typename:int64_t	access:public	signature:()
sylar::Socket::getRemoteAddress	sylar/sylar/socket.cc	/^Address::ptr Socket::getRemoteAddress() {$/;"	f	class:sylar::Socket	typeref:typename:Address::ptr	signature:()
sylar::Socket::getRemoteAddress	sylar/sylar/socket.h	/^    Address::ptr getRemoteAddress();$/;"	p	class:sylar::Socket	typeref:typename:Address::ptr	access:public	signature:()
sylar::Socket::getSendTimeout	sylar/sylar/socket.cc	/^int64_t Socket::getSendTimeout() {$/;"	f	class:sylar::Socket	typeref:typename:int64_t	signature:()
sylar::Socket::getSendTimeout	sylar/sylar/socket.h	/^    int64_t getSendTimeout();$/;"	p	class:sylar::Socket	typeref:typename:int64_t	access:public	signature:()
sylar::Socket::getSocket	sylar/sylar/socket.h	/^    int getSocket() const { return m_sock;}$/;"	f	class:sylar::Socket	typeref:typename:int	access:public	signature:() const
sylar::Socket::getType	sylar/sylar/socket.h	/^    int getType() const { return m_type;}$/;"	f	class:sylar::Socket	typeref:typename:int	access:public	signature:() const
sylar::Socket::init	sylar/sylar/socket.cc	/^bool Socket::init(int sock) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(int sock)
sylar::Socket::init	sylar/sylar/socket.h	/^    virtual bool init(int sock);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:protected	signature:(int sock)
sylar::Socket::initSock	sylar/sylar/socket.cc	/^void Socket::initSock() {$/;"	f	class:sylar::Socket	typeref:typename:void	signature:()
sylar::Socket::initSock	sylar/sylar/socket.h	/^    void initSock();$/;"	p	class:sylar::Socket	typeref:typename:void	access:protected	signature:()
sylar::Socket::isConnected	sylar/sylar/socket.h	/^    bool isConnected() const { return m_isConnected;}$/;"	f	class:sylar::Socket	typeref:typename:bool	access:public	signature:() const
sylar::Socket::isValid	sylar/sylar/socket.cc	/^bool Socket::isValid() const {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:() const
sylar::Socket::isValid	sylar/sylar/socket.h	/^    bool isValid() const;$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:() const
sylar::Socket::listen	sylar/sylar/socket.cc	/^bool Socket::listen(int backlog) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(int backlog)
sylar::Socket::listen	sylar/sylar/socket.h	/^    virtual bool listen(int backlog = SOMAXCONN);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:(int backlog=SOMAXCONN)
sylar::Socket::m_family	sylar/sylar/socket.h	/^    int m_family;$/;"	m	class:sylar::Socket	typeref:typename:int	access:protected
sylar::Socket::m_isConnected	sylar/sylar/socket.h	/^    bool m_isConnected;$/;"	m	class:sylar::Socket	typeref:typename:bool	access:protected
sylar::Socket::m_localAddress	sylar/sylar/socket.h	/^    Address::ptr m_localAddress;$/;"	m	class:sylar::Socket	typeref:typename:Address::ptr	access:protected
sylar::Socket::m_protocol	sylar/sylar/socket.h	/^    int m_protocol;$/;"	m	class:sylar::Socket	typeref:typename:int	access:protected
sylar::Socket::m_remoteAddress	sylar/sylar/socket.h	/^    Address::ptr m_remoteAddress;$/;"	m	class:sylar::Socket	typeref:typename:Address::ptr	access:protected
sylar::Socket::m_sock	sylar/sylar/socket.h	/^    int m_sock;$/;"	m	class:sylar::Socket	typeref:typename:int	access:protected
sylar::Socket::m_type	sylar/sylar/socket.h	/^    int m_type;$/;"	m	class:sylar::Socket	typeref:typename:int	access:protected
sylar::Socket::newSock	sylar/sylar/socket.cc	/^void Socket::newSock() {$/;"	f	class:sylar::Socket	typeref:typename:void	signature:()
sylar::Socket::newSock	sylar/sylar/socket.h	/^    void newSock();$/;"	p	class:sylar::Socket	typeref:typename:void	access:protected	signature:()
sylar::Socket::ptr	sylar/sylar/socket.h	/^    typedef std::shared_ptr<Socket> ptr;$/;"	t	class:sylar::Socket	typeref:typename:std::shared_ptr<Socket>	access:public
sylar::Socket::reconnect	sylar/sylar/socket.cc	/^bool Socket::reconnect(uint64_t timeout_ms) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(uint64_t timeout_ms)
sylar::Socket::reconnect	sylar/sylar/socket.h	/^    virtual bool reconnect(uint64_t timeout_ms = -1);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:(uint64_t timeout_ms=-1)
sylar::Socket::recv	sylar/sylar/socket.cc	/^int Socket::recv(iovec* buffers, size_t length, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(iovec * buffers,size_t length,int flags)
sylar::Socket::recv	sylar/sylar/socket.cc	/^int Socket::recv(void* buffer, size_t length, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(void * buffer,size_t length,int flags)
sylar::Socket::recv	sylar/sylar/socket.h	/^    virtual int recv(iovec* buffers, size_t length, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(iovec * buffers,size_t length,int flags=0)
sylar::Socket::recv	sylar/sylar/socket.h	/^    virtual int recv(void* buffer, size_t length, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(void * buffer,size_t length,int flags=0)
sylar::Socket::recvFrom	sylar/sylar/socket.cc	/^int Socket::recvFrom(iovec* buffers, size_t length, Address::ptr from, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(iovec * buffers,size_t length,Address::ptr from,int flags)
sylar::Socket::recvFrom	sylar/sylar/socket.cc	/^int Socket::recvFrom(void* buffer, size_t length, Address::ptr from, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(void * buffer,size_t length,Address::ptr from,int flags)
sylar::Socket::recvFrom	sylar/sylar/socket.h	/^    virtual int recvFrom(iovec* buffers, size_t length, Address::ptr from, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(iovec * buffers,size_t length,Address::ptr from,int flags=0)
sylar::Socket::recvFrom	sylar/sylar/socket.h	/^    virtual int recvFrom(void* buffer, size_t length, Address::ptr from, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(void * buffer,size_t length,Address::ptr from,int flags=0)
sylar::Socket::send	sylar/sylar/socket.cc	/^int Socket::send(const iovec* buffers, size_t length, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(const iovec * buffers,size_t length,int flags)
sylar::Socket::send	sylar/sylar/socket.cc	/^int Socket::send(const void* buffer, size_t length, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(const void * buffer,size_t length,int flags)
sylar::Socket::send	sylar/sylar/socket.h	/^    virtual int send(const iovec* buffers, size_t length, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(const iovec * buffers,size_t length,int flags=0)
sylar::Socket::send	sylar/sylar/socket.h	/^    virtual int send(const void* buffer, size_t length, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(const void * buffer,size_t length,int flags=0)
sylar::Socket::sendTo	sylar/sylar/socket.cc	/^int Socket::sendTo(const iovec* buffers, size_t length, const Address::ptr to, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(const iovec * buffers,size_t length,const Address::ptr to,int flags)
sylar::Socket::sendTo	sylar/sylar/socket.cc	/^int Socket::sendTo(const void* buffer, size_t length, const Address::ptr to, int flags) {$/;"	f	class:sylar::Socket	typeref:typename:int	signature:(const void * buffer,size_t length,const Address::ptr to,int flags)
sylar::Socket::sendTo	sylar/sylar/socket.h	/^    virtual int sendTo(const iovec* buffers, size_t length, const Address::ptr to, int flags = 0/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(const iovec * buffers,size_t length,const Address::ptr to,int flags=0)
sylar::Socket::sendTo	sylar/sylar/socket.h	/^    virtual int sendTo(const void* buffer, size_t length, const Address::ptr to, int flags = 0);$/;"	p	class:sylar::Socket	typeref:typename:int	access:public	signature:(const void * buffer,size_t length,const Address::ptr to,int flags=0)
sylar::Socket::setOption	sylar/sylar/socket.cc	/^bool Socket::setOption(int level, int option, const void* result, socklen_t len) {$/;"	f	class:sylar::Socket	typeref:typename:bool	signature:(int level,int option,const void * result,socklen_t len)
sylar::Socket::setOption	sylar/sylar/socket.h	/^    bool setOption(int level, int option, const T& value) {$/;"	f	class:sylar::Socket	typeref:typename:bool	access:public	signature:(int level,int option,const T & value)
sylar::Socket::setOption	sylar/sylar/socket.h	/^    bool setOption(int level, int option, const void* result, socklen_t len);$/;"	p	class:sylar::Socket	typeref:typename:bool	access:public	signature:(int level,int option,const void * result,socklen_t len)
sylar::Socket::setRecvTimeout	sylar/sylar/socket.cc	/^void Socket::setRecvTimeout(int64_t v) {$/;"	f	class:sylar::Socket	typeref:typename:void	signature:(int64_t v)
sylar::Socket::setRecvTimeout	sylar/sylar/socket.h	/^    void setRecvTimeout(int64_t v);$/;"	p	class:sylar::Socket	typeref:typename:void	access:public	signature:(int64_t v)
sylar::Socket::setSendTimeout	sylar/sylar/socket.cc	/^void Socket::setSendTimeout(int64_t v) {$/;"	f	class:sylar::Socket	typeref:typename:void	signature:(int64_t v)
sylar::Socket::setSendTimeout	sylar/sylar/socket.h	/^    void setSendTimeout(int64_t v);$/;"	p	class:sylar::Socket	typeref:typename:void	access:public	signature:(int64_t v)
sylar::Socket::toString	sylar/sylar/socket.cc	/^std::string Socket::toString() const {$/;"	f	class:sylar::Socket	typeref:typename:std::string	signature:() const
sylar::Socket::toString	sylar/sylar/socket.h	/^    virtual std::string toString() const;$/;"	p	class:sylar::Socket	typeref:typename:std::string	access:public	signature:() const
sylar::Socket::weak_ptr	sylar/sylar/socket.h	/^    typedef std::weak_ptr<Socket> weak_ptr;$/;"	t	class:sylar::Socket	typeref:typename:std::weak_ptr<Socket>	access:public
sylar::Socket::~Socket	sylar/sylar/socket.cc	/^Socket::~Socket() {$/;"	f	class:sylar::Socket	signature:()
sylar::Socket::~Socket	sylar/sylar/socket.h	/^    virtual ~Socket();$/;"	p	class:sylar::Socket	access:public	signature:()
sylar::SocketStream	sylar/sylar/streams/socket_stream.h	/^class SocketStream : public Stream {$/;"	c	namespace:sylar	inherits:Stream
sylar::SocketStream::SocketStream	sylar/sylar/streams/socket_stream.cc	/^SocketStream::SocketStream(Socket::ptr sock, bool owner)$/;"	f	class:sylar::SocketStream	signature:(Socket::ptr sock,bool owner)
sylar::SocketStream::SocketStream	sylar/sylar/streams/socket_stream.h	/^    SocketStream(Socket::ptr sock, bool owner = true);$/;"	p	class:sylar::SocketStream	access:public	signature:(Socket::ptr sock,bool owner=true)
sylar::SocketStream::close	sylar/sylar/streams/socket_stream.cc	/^void SocketStream::close() {$/;"	f	class:sylar::SocketStream	typeref:typename:void	signature:()
sylar::SocketStream::close	sylar/sylar/streams/socket_stream.h	/^    virtual void close() override;$/;"	p	class:sylar::SocketStream	typeref:typename:void	access:public	signature:()
sylar::SocketStream::getLocalAddress	sylar/sylar/streams/socket_stream.cc	/^Address::ptr SocketStream::getLocalAddress() {$/;"	f	class:sylar::SocketStream	typeref:typename:Address::ptr	signature:()
sylar::SocketStream::getLocalAddress	sylar/sylar/streams/socket_stream.h	/^    Address::ptr getLocalAddress();$/;"	p	class:sylar::SocketStream	typeref:typename:Address::ptr	access:public	signature:()
sylar::SocketStream::getLocalAddressString	sylar/sylar/streams/socket_stream.cc	/^std::string SocketStream::getLocalAddressString() {$/;"	f	class:sylar::SocketStream	typeref:typename:std::string	signature:()
sylar::SocketStream::getLocalAddressString	sylar/sylar/streams/socket_stream.h	/^    std::string getLocalAddressString();$/;"	p	class:sylar::SocketStream	typeref:typename:std::string	access:public	signature:()
sylar::SocketStream::getRemoteAddress	sylar/sylar/streams/socket_stream.cc	/^Address::ptr SocketStream::getRemoteAddress() {$/;"	f	class:sylar::SocketStream	typeref:typename:Address::ptr	signature:()
sylar::SocketStream::getRemoteAddress	sylar/sylar/streams/socket_stream.h	/^    Address::ptr getRemoteAddress();$/;"	p	class:sylar::SocketStream	typeref:typename:Address::ptr	access:public	signature:()
sylar::SocketStream::getRemoteAddressString	sylar/sylar/streams/socket_stream.cc	/^std::string SocketStream::getRemoteAddressString() {$/;"	f	class:sylar::SocketStream	typeref:typename:std::string	signature:()
sylar::SocketStream::getRemoteAddressString	sylar/sylar/streams/socket_stream.h	/^    std::string getRemoteAddressString();$/;"	p	class:sylar::SocketStream	typeref:typename:std::string	access:public	signature:()
sylar::SocketStream::getSocket	sylar/sylar/streams/socket_stream.h	/^    Socket::ptr getSocket() const { return m_socket;}$/;"	f	class:sylar::SocketStream	typeref:typename:Socket::ptr	access:public	signature:() const
sylar::SocketStream::isConnected	sylar/sylar/streams/socket_stream.cc	/^bool SocketStream::isConnected() const {$/;"	f	class:sylar::SocketStream	typeref:typename:bool	signature:() const
sylar::SocketStream::isConnected	sylar/sylar/streams/socket_stream.h	/^    bool isConnected() const;$/;"	p	class:sylar::SocketStream	typeref:typename:bool	access:public	signature:() const
sylar::SocketStream::m_owner	sylar/sylar/streams/socket_stream.h	/^    bool m_owner;$/;"	m	class:sylar::SocketStream	typeref:typename:bool	access:protected
sylar::SocketStream::m_socket	sylar/sylar/streams/socket_stream.h	/^    Socket::ptr m_socket;$/;"	m	class:sylar::SocketStream	typeref:typename:Socket::ptr	access:protected
sylar::SocketStream::ptr	sylar/sylar/streams/socket_stream.h	/^    typedef std::shared_ptr<SocketStream> ptr;$/;"	t	class:sylar::SocketStream	typeref:typename:std::shared_ptr<SocketStream>	access:public
sylar::SocketStream::read	sylar/sylar/streams/socket_stream.cc	/^int SocketStream::read(ByteArray::ptr ba, size_t length) {$/;"	f	class:sylar::SocketStream	typeref:typename:int	signature:(ByteArray::ptr ba,size_t length)
sylar::SocketStream::read	sylar/sylar/streams/socket_stream.cc	/^int SocketStream::read(void* buffer, size_t length) {$/;"	f	class:sylar::SocketStream	typeref:typename:int	signature:(void * buffer,size_t length)
sylar::SocketStream::read	sylar/sylar/streams/socket_stream.h	/^    virtual int read(ByteArray::ptr ba, size_t length) override;$/;"	p	class:sylar::SocketStream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
sylar::SocketStream::read	sylar/sylar/streams/socket_stream.h	/^    virtual int read(void* buffer, size_t length) override;$/;"	p	class:sylar::SocketStream	typeref:typename:int	access:public	signature:(void * buffer,size_t length)
sylar::SocketStream::write	sylar/sylar/streams/socket_stream.cc	/^int SocketStream::write(ByteArray::ptr ba, size_t length) {$/;"	f	class:sylar::SocketStream	typeref:typename:int	signature:(ByteArray::ptr ba,size_t length)
sylar::SocketStream::write	sylar/sylar/streams/socket_stream.cc	/^int SocketStream::write(const void* buffer, size_t length) {$/;"	f	class:sylar::SocketStream	typeref:typename:int	signature:(const void * buffer,size_t length)
sylar::SocketStream::write	sylar/sylar/streams/socket_stream.h	/^    virtual int write(ByteArray::ptr ba, size_t length) override;$/;"	p	class:sylar::SocketStream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
sylar::SocketStream::write	sylar/sylar/streams/socket_stream.h	/^    virtual int write(const void* buffer, size_t length) override;$/;"	p	class:sylar::SocketStream	typeref:typename:int	access:public	signature:(const void * buffer,size_t length)
sylar::SocketStream::~SocketStream	sylar/sylar/streams/socket_stream.cc	/^SocketStream::~SocketStream() {$/;"	f	class:sylar::SocketStream	signature:()
sylar::SocketStream::~SocketStream	sylar/sylar/streams/socket_stream.h	/^    ~SocketStream();$/;"	p	class:sylar::SocketStream	access:public	signature:()
sylar::SpeedLimit	sylar/sylar/util.h	/^class SpeedLimit {$/;"	c	namespace:sylar
sylar::SpeedLimit::SpeedLimit	sylar/sylar/util.cc	/^SpeedLimit::SpeedLimit(uint32_t speed)$/;"	f	class:sylar::SpeedLimit	signature:(uint32_t speed)
sylar::SpeedLimit::SpeedLimit	sylar/sylar/util.h	/^    SpeedLimit(uint32_t speed);$/;"	p	class:sylar::SpeedLimit	access:public	signature:(uint32_t speed)
sylar::SpeedLimit::add	sylar/sylar/util.cc	/^void SpeedLimit::add(uint32_t v) {$/;"	f	class:sylar::SpeedLimit	typeref:typename:void	signature:(uint32_t v)
sylar::SpeedLimit::add	sylar/sylar/util.h	/^    void add(uint32_t v);$/;"	p	class:sylar::SpeedLimit	typeref:typename:void	access:public	signature:(uint32_t v)
sylar::SpeedLimit::m_countPerMS	sylar/sylar/util.h	/^    float m_countPerMS;$/;"	m	class:sylar::SpeedLimit	typeref:typename:float	access:private
sylar::SpeedLimit::m_curCount	sylar/sylar/util.h	/^    uint32_t m_curCount;$/;"	m	class:sylar::SpeedLimit	typeref:typename:uint32_t	access:private
sylar::SpeedLimit::m_curSec	sylar/sylar/util.h	/^    uint32_t m_curSec;$/;"	m	class:sylar::SpeedLimit	typeref:typename:uint32_t	access:private
sylar::SpeedLimit::m_speed	sylar/sylar/util.h	/^    uint32_t m_speed;$/;"	m	class:sylar::SpeedLimit	typeref:typename:uint32_t	access:private
sylar::SpeedLimit::ptr	sylar/sylar/util.h	/^    typedef std::shared_ptr<SpeedLimit> ptr;$/;"	t	class:sylar::SpeedLimit	typeref:typename:std::shared_ptr<SpeedLimit>	access:public
sylar::Spinlock	sylar/sylar/mutex.h	/^class Spinlock : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
sylar::Spinlock::Lock	sylar/sylar/mutex.h	/^    typedef ScopedLockImpl<Spinlock> Lock;$/;"	t	class:sylar::Spinlock	typeref:typename:ScopedLockImpl<Spinlock>	access:public
sylar::Spinlock::Spinlock	sylar/sylar/mutex.h	/^    Spinlock() {$/;"	f	class:sylar::Spinlock	access:public	signature:()
sylar::Spinlock::lock	sylar/sylar/mutex.h	/^    void lock() {$/;"	f	class:sylar::Spinlock	typeref:typename:void	access:public	signature:()
sylar::Spinlock::m_mutex	sylar/sylar/mutex.h	/^    pthread_spinlock_t m_mutex;$/;"	m	class:sylar::Spinlock	typeref:typename:pthread_spinlock_t	access:private
sylar::Spinlock::unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	class:sylar::Spinlock	typeref:typename:void	access:public	signature:()
sylar::Spinlock::~Spinlock	sylar/sylar/mutex.h	/^    ~Spinlock() {$/;"	f	class:sylar::Spinlock	access:public	signature:()
sylar::StackAllocator	sylar/sylar/fiber.cc	/^using StackAllocator = MallocStackAllocator;$/;"	t	namespace:sylar	typeref:typename:MallocStackAllocator	file:
sylar::StdoutLogAppender	sylar/sylar/log.h	/^class StdoutLogAppender : public LogAppender {$/;"	c	namespace:sylar	inherits:LogAppender
sylar::StdoutLogAppender::log	sylar/sylar/log.cc	/^void StdoutLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level, LogEvent::ptr/;"	f	class:sylar::StdoutLogAppender	typeref:typename:void	signature:(std::shared_ptr<Logger> logger,LogLevel::Level level,LogEvent::ptr event)
sylar::StdoutLogAppender::log	sylar/sylar/log.h	/^    void log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event) override;$/;"	p	class:sylar::StdoutLogAppender	typeref:typename:void	access:public	signature:(Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::StdoutLogAppender::ptr	sylar/sylar/log.h	/^    typedef std::shared_ptr<StdoutLogAppender> ptr;$/;"	t	class:sylar::StdoutLogAppender	typeref:typename:std::shared_ptr<StdoutLogAppender>	access:public
sylar::StdoutLogAppender::toYamlString	sylar/sylar/log.cc	/^std::string StdoutLogAppender::toYamlString() {$/;"	f	class:sylar::StdoutLogAppender	typeref:typename:std::string	signature:()
sylar::StdoutLogAppender::toYamlString	sylar/sylar/log.h	/^    std::string toYamlString() override;$/;"	p	class:sylar::StdoutLogAppender	typeref:typename:std::string	access:public	signature:()
sylar::Str2Time	sylar/sylar/util.cc	/^time_t Str2Time(const char* str, const char* format) {$/;"	f	namespace:sylar	typeref:typename:time_t	signature:(const char * str,const char * format)
sylar::Str2Time	sylar/sylar/util.h	/^time_t Str2Time(const char* str, const char* format = "%Y-%m-%d %H:%M:%S");$/;"	p	namespace:sylar	typeref:typename:time_t	signature:(const char * str,const char * format="")
sylar::Stream	sylar/sylar/stream.h	/^class Stream {$/;"	c	namespace:sylar
sylar::Stream::close	sylar/sylar/stream.h	/^    virtual void close() = 0;$/;"	p	class:sylar::Stream	typeref:typename:void	access:public	signature:()
sylar::Stream::ptr	sylar/sylar/stream.h	/^    typedef std::shared_ptr<Stream> ptr;$/;"	t	class:sylar::Stream	typeref:typename:std::shared_ptr<Stream>	access:public
sylar::Stream::read	sylar/sylar/stream.h	/^    virtual int read(ByteArray::ptr ba, size_t length) = 0;$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
sylar::Stream::read	sylar/sylar/stream.h	/^    virtual int read(void* buffer, size_t length) = 0;$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(void * buffer,size_t length)
sylar::Stream::readFixSize	sylar/sylar/stream.cc	/^int Stream::readFixSize(ByteArray::ptr ba, size_t length) {$/;"	f	class:sylar::Stream	typeref:typename:int	signature:(ByteArray::ptr ba,size_t length)
sylar::Stream::readFixSize	sylar/sylar/stream.cc	/^int Stream::readFixSize(void* buffer, size_t length) {$/;"	f	class:sylar::Stream	typeref:typename:int	signature:(void * buffer,size_t length)
sylar::Stream::readFixSize	sylar/sylar/stream.h	/^    virtual int readFixSize(ByteArray::ptr ba, size_t length);$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
sylar::Stream::readFixSize	sylar/sylar/stream.h	/^    virtual int readFixSize(void* buffer, size_t length);$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(void * buffer,size_t length)
sylar::Stream::write	sylar/sylar/stream.h	/^    virtual int write(ByteArray::ptr ba, size_t length) = 0;$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
sylar::Stream::write	sylar/sylar/stream.h	/^    virtual int write(const void* buffer, size_t length) = 0;$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(const void * buffer,size_t length)
sylar::Stream::writeFixSize	sylar/sylar/stream.cc	/^int Stream::writeFixSize(ByteArray::ptr ba, size_t length) {$/;"	f	class:sylar::Stream	typeref:typename:int	signature:(ByteArray::ptr ba,size_t length)
sylar::Stream::writeFixSize	sylar/sylar/stream.cc	/^int Stream::writeFixSize(const void* buffer, size_t length) {$/;"	f	class:sylar::Stream	typeref:typename:int	signature:(const void * buffer,size_t length)
sylar::Stream::writeFixSize	sylar/sylar/stream.h	/^    virtual int writeFixSize(ByteArray::ptr ba, size_t length);$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
sylar::Stream::writeFixSize	sylar/sylar/stream.h	/^    virtual int writeFixSize(const void* buffer, size_t length);$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(const void * buffer,size_t length)
sylar::Stream::~Stream	sylar/sylar/stream.h	/^    virtual ~Stream() {}$/;"	f	class:sylar::Stream	access:public	signature:()
sylar::StringFormatItem	sylar/sylar/log.cc	/^class StringFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::StringFormatItem::StringFormatItem	sylar/sylar/log.cc	/^    StringFormatItem(const std::string& str)$/;"	f	class:sylar::StringFormatItem	file:	access:public	signature:(const std::string & str)
sylar::StringFormatItem::format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::StringFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::StringFormatItem::m_string	sylar/sylar/log.cc	/^    std::string m_string;$/;"	m	class:sylar::StringFormatItem	typeref:typename:std::string	file:	access:private
sylar::StringUtil	sylar/sylar/util.h	/^class StringUtil {$/;"	c	namespace:sylar
sylar::StringUtil::Format	sylar/sylar/util.cc	/^std::string StringUtil::Format(const char* fmt, ...) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const char * fmt,...)
sylar::StringUtil::Format	sylar/sylar/util.h	/^    static std::string Format(const char* fmt, ...);$/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const char * fmt,...)
sylar::StringUtil::Formatv	sylar/sylar/util.cc	/^std::string StringUtil::Formatv(const char* fmt, va_list ap) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const char * fmt,va_list ap)
sylar::StringUtil::Formatv	sylar/sylar/util.h	/^    static std::string Formatv(const char* fmt, va_list ap);$/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const char * fmt,va_list ap)
sylar::StringUtil::StringToWString	sylar/sylar/util.cc	/^std::wstring StringUtil::StringToWString(const std::string& s) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::wstring	signature:(const std::string & s)
sylar::StringUtil::StringToWString	sylar/sylar/util.h	/^    static std::wstring StringToWString(const std::string& s);$/;"	p	class:sylar::StringUtil	typeref:typename:std::wstring	access:public	signature:(const std::string & s)
sylar::StringUtil::Trim	sylar/sylar/util.cc	/^std::string StringUtil::Trim(const std::string& str, const std::string& delimit) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const std::string & str,const std::string & delimit)
sylar::StringUtil::Trim	sylar/sylar/util.h	/^    static std::string Trim(const std::string& str, const std::string& delimit = " \\t\\r\\n");$/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const std::string & str,const std::string & delimit="")
sylar::StringUtil::TrimLeft	sylar/sylar/util.cc	/^std::string StringUtil::TrimLeft(const std::string& str, const std::string& delimit) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const std::string & str,const std::string & delimit)
sylar::StringUtil::TrimLeft	sylar/sylar/util.h	/^    static std::string TrimLeft(const std::string& str, const std::string& delimit = " \\t\\r\\n/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const std::string & str,const std::string & delimit="")
sylar::StringUtil::TrimRight	sylar/sylar/util.cc	/^std::string StringUtil::TrimRight(const std::string& str, const std::string& delimit) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const std::string & str,const std::string & delimit)
sylar::StringUtil::TrimRight	sylar/sylar/util.h	/^    static std::string TrimRight(const std::string& str, const std::string& delimit = " \\t\\r\\/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const std::string & str,const std::string & delimit="")
sylar::StringUtil::UrlDecode	sylar/sylar/util.cc	/^std::string StringUtil::UrlDecode(const std::string& str, bool space_as_plus) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const std::string & str,bool space_as_plus)
sylar::StringUtil::UrlDecode	sylar/sylar/util.h	/^    static std::string UrlDecode(const std::string& str, bool space_as_plus = true);$/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const std::string & str,bool space_as_plus=true)
sylar::StringUtil::UrlEncode	sylar/sylar/util.cc	/^std::string StringUtil::UrlEncode(const std::string& str, bool space_as_plus) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const std::string & str,bool space_as_plus)
sylar::StringUtil::UrlEncode	sylar/sylar/util.h	/^    static std::string UrlEncode(const std::string& str, bool space_as_plus = true);$/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const std::string & str,bool space_as_plus=true)
sylar::StringUtil::WStringToString	sylar/sylar/util.cc	/^std::string StringUtil::WStringToString(const std::wstring& ws) {$/;"	f	class:sylar::StringUtil	typeref:typename:std::string	signature:(const std::wstring & ws)
sylar::StringUtil::WStringToString	sylar/sylar/util.h	/^    static std::string WStringToString(const std::wstring& ws);$/;"	p	class:sylar::StringUtil	typeref:typename:std::string	access:public	signature:(const std::wstring & ws)
sylar::TabFormatItem	sylar/sylar/log.cc	/^class TabFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::TabFormatItem::TabFormatItem	sylar/sylar/log.cc	/^    TabFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::TabFormatItem	file:	access:public	signature:(const std::string & str="")
sylar::TabFormatItem::format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::TabFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::TabFormatItem::m_string	sylar/sylar/log.cc	/^    std::string m_string;$/;"	m	class:sylar::TabFormatItem	typeref:typename:std::string	file:	access:private
sylar::TcpServer	sylar/sylar/tcp_server.h	/^class TcpServer : public std::enable_shared_from_this<TcpServer>$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<TcpServer>,Noncopyable
sylar::TcpServer::TcpServer	sylar/sylar/tcp_server.cc	/^TcpServer::TcpServer(sylar::IOManager* worker,$/;"	f	class:sylar::TcpServer	signature:(sylar::IOManager * worker,sylar::IOManager * io_worker,sylar::IOManager * accept_worker)
sylar::TcpServer::TcpServer	sylar/sylar/tcp_server.h	/^    TcpServer(sylar::IOManager* worker = sylar::IOManager::GetThis()$/;"	p	class:sylar::TcpServer	access:public	signature:(sylar::IOManager * worker=sylar::IOManager::GetThis (),sylar::IOManager * io_woker=sylar::IOManager::GetThis (),sylar::IOManager * accept_worker=sylar::IOManager::GetThis ())
sylar::TcpServer::bind	sylar/sylar/tcp_server.cc	/^bool TcpServer::bind(const std::vector<Address::ptr>& addrs$/;"	f	class:sylar::TcpServer	typeref:typename:bool	signature:(const std::vector<Address::ptr> & addrs,std::vector<Address::ptr> & fails,bool ssl)
sylar::TcpServer::bind	sylar/sylar/tcp_server.cc	/^bool TcpServer::bind(sylar::Address::ptr addr, bool ssl) {$/;"	f	class:sylar::TcpServer	typeref:typename:bool	signature:(sylar::Address::ptr addr,bool ssl)
sylar::TcpServer::bind	sylar/sylar/tcp_server.h	/^    virtual bool bind(const std::vector<Address::ptr>& addrs$/;"	p	class:sylar::TcpServer	typeref:typename:bool	access:public	signature:(const std::vector<Address::ptr> & addrs,std::vector<Address::ptr> & fails,bool ssl=false)
sylar::TcpServer::bind	sylar/sylar/tcp_server.h	/^    virtual bool bind(sylar::Address::ptr addr, bool ssl = false);$/;"	p	class:sylar::TcpServer	typeref:typename:bool	access:public	signature:(sylar::Address::ptr addr,bool ssl=false)
sylar::TcpServer::getConf	sylar/sylar/tcp_server.h	/^    TcpServerConf::ptr getConf() const { return m_conf;}$/;"	f	class:sylar::TcpServer	typeref:typename:TcpServerConf::ptr	access:public	signature:() const
sylar::TcpServer::getName	sylar/sylar/tcp_server.h	/^    std::string getName() const { return m_name;}$/;"	f	class:sylar::TcpServer	typeref:typename:std::string	access:public	signature:() const
sylar::TcpServer::getRecvTimeout	sylar/sylar/tcp_server.h	/^    uint64_t getRecvTimeout() const { return m_recvTimeout;}$/;"	f	class:sylar::TcpServer	typeref:typename:uint64_t	access:public	signature:() const
sylar::TcpServer::getSocks	sylar/sylar/tcp_server.h	/^    std::vector<Socket::ptr> getSocks() const { return m_socks;}$/;"	f	class:sylar::TcpServer	typeref:typename:std::vector<Socket::ptr>	access:public	signature:() const
sylar::TcpServer::handleClient	sylar/sylar/tcp_server.cc	/^void TcpServer::handleClient(Socket::ptr client) {$/;"	f	class:sylar::TcpServer	typeref:typename:void	signature:(Socket::ptr client)
sylar::TcpServer::handleClient	sylar/sylar/tcp_server.h	/^    virtual void handleClient(Socket::ptr client);$/;"	p	class:sylar::TcpServer	typeref:typename:void	access:protected	signature:(Socket::ptr client)
sylar::TcpServer::isStop	sylar/sylar/tcp_server.h	/^    bool isStop() const { return m_isStop;}$/;"	f	class:sylar::TcpServer	typeref:typename:bool	access:public	signature:() const
sylar::TcpServer::loadCertificates	sylar/sylar/tcp_server.cc	/^bool TcpServer::loadCertificates(const std::string& cert_file, const std::string& key_file) {$/;"	f	class:sylar::TcpServer	typeref:typename:bool	signature:(const std::string & cert_file,const std::string & key_file)
sylar::TcpServer::loadCertificates	sylar/sylar/tcp_server.h	/^    bool loadCertificates(const std::string& cert_file, const std::string& key_file);$/;"	p	class:sylar::TcpServer	typeref:typename:bool	access:public	signature:(const std::string & cert_file,const std::string & key_file)
sylar::TcpServer::m_acceptWorker	sylar/sylar/tcp_server.h	/^    IOManager* m_acceptWorker;$/;"	m	class:sylar::TcpServer	typeref:typename:IOManager *	access:protected
sylar::TcpServer::m_conf	sylar/sylar/tcp_server.h	/^    TcpServerConf::ptr m_conf;$/;"	m	class:sylar::TcpServer	typeref:typename:TcpServerConf::ptr	access:protected
sylar::TcpServer::m_ioWorker	sylar/sylar/tcp_server.h	/^    IOManager* m_ioWorker;$/;"	m	class:sylar::TcpServer	typeref:typename:IOManager *	access:protected
sylar::TcpServer::m_isStop	sylar/sylar/tcp_server.h	/^    bool m_isStop;$/;"	m	class:sylar::TcpServer	typeref:typename:bool	access:protected
sylar::TcpServer::m_name	sylar/sylar/tcp_server.h	/^    std::string m_name;$/;"	m	class:sylar::TcpServer	typeref:typename:std::string	access:protected
sylar::TcpServer::m_recvTimeout	sylar/sylar/tcp_server.h	/^    uint64_t m_recvTimeout;$/;"	m	class:sylar::TcpServer	typeref:typename:uint64_t	access:protected
sylar::TcpServer::m_socks	sylar/sylar/tcp_server.h	/^    std::vector<Socket::ptr> m_socks;$/;"	m	class:sylar::TcpServer	typeref:typename:std::vector<Socket::ptr>	access:protected
sylar::TcpServer::m_ssl	sylar/sylar/tcp_server.h	/^    bool m_ssl = false;$/;"	m	class:sylar::TcpServer	typeref:typename:bool	access:protected
sylar::TcpServer::m_type	sylar/sylar/tcp_server.h	/^    std::string m_type = "tcp";$/;"	m	class:sylar::TcpServer	typeref:typename:std::string	access:protected
sylar::TcpServer::m_worker	sylar/sylar/tcp_server.h	/^    IOManager* m_worker;$/;"	m	class:sylar::TcpServer	typeref:typename:IOManager *	access:protected
sylar::TcpServer::ptr	sylar/sylar/tcp_server.h	/^    typedef std::shared_ptr<TcpServer> ptr;$/;"	t	class:sylar::TcpServer	typeref:typename:std::shared_ptr<TcpServer>	access:public
sylar::TcpServer::setConf	sylar/sylar/tcp_server.cc	/^void TcpServer::setConf(const TcpServerConf& v) {$/;"	f	class:sylar::TcpServer	typeref:typename:void	signature:(const TcpServerConf & v)
sylar::TcpServer::setConf	sylar/sylar/tcp_server.h	/^    void setConf(TcpServerConf::ptr v) { m_conf = v;}$/;"	f	class:sylar::TcpServer	typeref:typename:void	access:public	signature:(TcpServerConf::ptr v)
sylar::TcpServer::setConf	sylar/sylar/tcp_server.h	/^    void setConf(const TcpServerConf& v);$/;"	p	class:sylar::TcpServer	typeref:typename:void	access:public	signature:(const TcpServerConf & v)
sylar::TcpServer::setName	sylar/sylar/tcp_server.h	/^    virtual void setName(const std::string& v) { m_name = v;}$/;"	f	class:sylar::TcpServer	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::TcpServer::setRecvTimeout	sylar/sylar/tcp_server.h	/^    void setRecvTimeout(uint64_t v) { m_recvTimeout = v;}$/;"	f	class:sylar::TcpServer	typeref:typename:void	access:public	signature:(uint64_t v)
sylar::TcpServer::start	sylar/sylar/tcp_server.cc	/^bool TcpServer::start() {$/;"	f	class:sylar::TcpServer	typeref:typename:bool	signature:()
sylar::TcpServer::start	sylar/sylar/tcp_server.h	/^    virtual bool start();$/;"	p	class:sylar::TcpServer	typeref:typename:bool	access:public	signature:()
sylar::TcpServer::startAccept	sylar/sylar/tcp_server.cc	/^void TcpServer::startAccept(Socket::ptr sock) {$/;"	f	class:sylar::TcpServer	typeref:typename:void	signature:(Socket::ptr sock)
sylar::TcpServer::startAccept	sylar/sylar/tcp_server.h	/^    virtual void startAccept(Socket::ptr sock);$/;"	p	class:sylar::TcpServer	typeref:typename:void	access:protected	signature:(Socket::ptr sock)
sylar::TcpServer::stop	sylar/sylar/tcp_server.cc	/^void TcpServer::stop() {$/;"	f	class:sylar::TcpServer	typeref:typename:void	signature:()
sylar::TcpServer::stop	sylar/sylar/tcp_server.h	/^    virtual void stop();$/;"	p	class:sylar::TcpServer	typeref:typename:void	access:public	signature:()
sylar::TcpServer::toString	sylar/sylar/tcp_server.cc	/^std::string TcpServer::toString(const std::string& prefix) {$/;"	f	class:sylar::TcpServer	typeref:typename:std::string	signature:(const std::string & prefix)
sylar::TcpServer::toString	sylar/sylar/tcp_server.h	/^    virtual std::string toString(const std::string& prefix = "");$/;"	p	class:sylar::TcpServer	typeref:typename:std::string	access:public	signature:(const std::string & prefix="")
sylar::TcpServer::~TcpServer	sylar/sylar/tcp_server.cc	/^TcpServer::~TcpServer() {$/;"	f	class:sylar::TcpServer	signature:()
sylar::TcpServer::~TcpServer	sylar/sylar/tcp_server.h	/^    virtual ~TcpServer();$/;"	p	class:sylar::TcpServer	access:public	signature:()
sylar::TcpServerConf	sylar/sylar/tcp_server.h	/^struct TcpServerConf {$/;"	s	namespace:sylar
sylar::TcpServerConf::accept_worker	sylar/sylar/tcp_server.h	/^    std::string accept_worker;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
sylar::TcpServerConf::address	sylar/sylar/tcp_server.h	/^    std::vector<std::string> address;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::vector<std::string>	access:public
sylar::TcpServerConf::args	sylar/sylar/tcp_server.h	/^    std::map<std::string, std::string> args;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::map<std::string,std::string>	access:public
sylar::TcpServerConf::cert_file	sylar/sylar/tcp_server.h	/^    std::string cert_file;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
sylar::TcpServerConf::id	sylar/sylar/tcp_server.h	/^    std::string id;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
sylar::TcpServerConf::io_worker	sylar/sylar/tcp_server.h	/^    std::string io_worker;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
sylar::TcpServerConf::isValid	sylar/sylar/tcp_server.h	/^    bool isValid() const {$/;"	f	struct:sylar::TcpServerConf	typeref:typename:bool	access:public	signature:() const
sylar::TcpServerConf::keepalive	sylar/sylar/tcp_server.h	/^    int keepalive = 0;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:int	access:public
sylar::TcpServerConf::key_file	sylar/sylar/tcp_server.h	/^    std::string key_file;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
sylar::TcpServerConf::name	sylar/sylar/tcp_server.h	/^    std::string name;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
sylar::TcpServerConf::operator ==	sylar/sylar/tcp_server.h	/^    bool operator==(const TcpServerConf& oth) const {$/;"	f	struct:sylar::TcpServerConf	typeref:typename:bool	access:public	signature:(const TcpServerConf & oth) const
sylar::TcpServerConf::process_worker	sylar/sylar/tcp_server.h	/^    std::string process_worker;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
sylar::TcpServerConf::ptr	sylar/sylar/tcp_server.h	/^    typedef std::shared_ptr<TcpServerConf> ptr;$/;"	t	struct:sylar::TcpServerConf	typeref:typename:std::shared_ptr<TcpServerConf>	access:public
sylar::TcpServerConf::ssl	sylar/sylar/tcp_server.h	/^    int ssl = 0;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:int	access:public
sylar::TcpServerConf::timeout	sylar/sylar/tcp_server.h	/^    int timeout = 1000 * 2 * 60;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:int	access:public
sylar::TcpServerConf::type	sylar/sylar/tcp_server.h	/^    std::string type = "http";$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
sylar::Thread	sylar/sylar/thread.h	/^class Thread : Noncopyable {$/;"	c	namespace:sylar	inherits:Noncopyable
sylar::Thread::GetName	sylar/sylar/thread.cc	/^const std::string& Thread::GetName() {$/;"	f	class:sylar::Thread	typeref:typename:const std::string &	signature:()
sylar::Thread::GetName	sylar/sylar/thread.h	/^    static const std::string& GetName();$/;"	p	class:sylar::Thread	typeref:typename:const std::string &	access:public	signature:()
sylar::Thread::GetThis	sylar/sylar/thread.cc	/^Thread* Thread::GetThis() {$/;"	f	class:sylar::Thread	typeref:typename:Thread *	signature:()
sylar::Thread::GetThis	sylar/sylar/thread.h	/^    static Thread* GetThis();$/;"	p	class:sylar::Thread	typeref:typename:Thread *	access:public	signature:()
sylar::Thread::SetName	sylar/sylar/thread.cc	/^void Thread::SetName(const std::string& name) {$/;"	f	class:sylar::Thread	typeref:typename:void	signature:(const std::string & name)
sylar::Thread::SetName	sylar/sylar/thread.h	/^    static void SetName(const std::string& name);$/;"	p	class:sylar::Thread	typeref:typename:void	access:public	signature:(const std::string & name)
sylar::Thread::Thread	sylar/sylar/thread.cc	/^Thread::Thread(std::function<void()> cb, const std::string& name)$/;"	f	class:sylar::Thread	signature:(std::function<void ()> cb,const std::string & name)
sylar::Thread::Thread	sylar/sylar/thread.h	/^    Thread(std::function<void()> cb, const std::string& name);$/;"	p	class:sylar::Thread	access:public	signature:(std::function<void ()> cb,const std::string & name)
sylar::Thread::getId	sylar/sylar/thread.h	/^    pid_t getId() const { return m_id;}$/;"	f	class:sylar::Thread	typeref:typename:pid_t	access:public	signature:() const
sylar::Thread::getName	sylar/sylar/thread.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::Thread	typeref:typename:const std::string &	access:public	signature:() const
sylar::Thread::join	sylar/sylar/thread.cc	/^void Thread::join() {$/;"	f	class:sylar::Thread	typeref:typename:void	signature:()
sylar::Thread::join	sylar/sylar/thread.h	/^    void join();$/;"	p	class:sylar::Thread	typeref:typename:void	access:public	signature:()
sylar::Thread::m_cb	sylar/sylar/thread.h	/^    std::function<void()> m_cb;$/;"	m	class:sylar::Thread	typeref:typename:std::function<void ()>	access:private
sylar::Thread::m_id	sylar/sylar/thread.h	/^    pid_t m_id = -1;$/;"	m	class:sylar::Thread	typeref:typename:pid_t	access:private
sylar::Thread::m_name	sylar/sylar/thread.h	/^    std::string m_name;$/;"	m	class:sylar::Thread	typeref:typename:std::string	access:private
sylar::Thread::m_semaphore	sylar/sylar/thread.h	/^    Semaphore m_semaphore;$/;"	m	class:sylar::Thread	typeref:typename:Semaphore	access:private
sylar::Thread::m_thread	sylar/sylar/thread.h	/^    pthread_t m_thread = 0;$/;"	m	class:sylar::Thread	typeref:typename:pthread_t	access:private
sylar::Thread::ptr	sylar/sylar/thread.h	/^    typedef std::shared_ptr<Thread> ptr;$/;"	t	class:sylar::Thread	typeref:typename:std::shared_ptr<Thread>	access:public
sylar::Thread::run	sylar/sylar/thread.cc	/^void* Thread::run(void* arg) {$/;"	f	class:sylar::Thread	typeref:typename:void *	signature:(void * arg)
sylar::Thread::run	sylar/sylar/thread.h	/^    static void* run(void* arg);$/;"	p	class:sylar::Thread	typeref:typename:void *	access:private	signature:(void * arg)
sylar::Thread::~Thread	sylar/sylar/thread.cc	/^Thread::~Thread() {$/;"	f	class:sylar::Thread	signature:()
sylar::Thread::~Thread	sylar/sylar/thread.h	/^    ~Thread();$/;"	p	class:sylar::Thread	access:public	signature:()
sylar::ThreadIdFormatItem	sylar/sylar/log.cc	/^class ThreadIdFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::ThreadIdFormatItem::ThreadIdFormatItem	sylar/sylar/log.cc	/^    ThreadIdFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::ThreadIdFormatItem	file:	access:public	signature:(const std::string & str="")
sylar::ThreadIdFormatItem::format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::ThreadIdFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::ThreadNameFormatItem	sylar/sylar/log.cc	/^class ThreadNameFormatItem : public LogFormatter::FormatItem {$/;"	c	namespace:sylar	file:	inherits:LogFormatter::FormatItem
sylar::ThreadNameFormatItem::ThreadNameFormatItem	sylar/sylar/log.cc	/^    ThreadNameFormatItem(const std::string& str = "") {}$/;"	f	class:sylar::ThreadNameFormatItem	file:	access:public	signature:(const std::string & str="")
sylar::ThreadNameFormatItem::format	sylar/sylar/log.cc	/^    void format(std::ostream& os, Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event/;"	f	class:sylar::ThreadNameFormatItem	typeref:typename:void	file:	access:public	signature:(std::ostream & os,Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event)
sylar::Time2Str	sylar/sylar/util.cc	/^std::string Time2Str(time_t ts, const std::string& format) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(time_t ts,const std::string & format)
sylar::Time2Str	sylar/sylar/util.h	/^std::string Time2Str(time_t ts = time(0), const std::string& format = "%Y-%m-%d %H:%M:%S");$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(time_t ts=time (0),const std::string & format="")
sylar::Timer	sylar/sylar/timer.h	/^class Timer : public std::enable_shared_from_this<Timer> {$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<Timer>
sylar::Timer::Comparator	sylar/sylar/timer.h	/^    struct Comparator {$/;"	s	class:sylar::Timer	access:private
sylar::Timer::Comparator::operator ()	sylar/sylar/timer.cc	/^bool Timer::Comparator::operator()(const Timer::ptr& lhs$/;"	f	class:sylar::Timer::Comparator	typeref:typename:bool	signature:(const Timer::ptr & lhs,const Timer::ptr & rhs) const
sylar::Timer::Comparator::operator ()	sylar/sylar/timer.h	/^        bool operator()(const Timer::ptr& lhs, const Timer::ptr& rhs) const;$/;"	p	struct:sylar::Timer::Comparator	typeref:typename:bool	access:public	signature:(const Timer::ptr & lhs,const Timer::ptr & rhs) const
sylar::Timer::Timer	sylar/sylar/timer.cc	/^Timer::Timer(uint64_t ms, std::function<void()> cb,$/;"	f	class:sylar::Timer	signature:(uint64_t ms,std::function<void ()> cb,bool recurring,TimerManager * manager)
sylar::Timer::Timer	sylar/sylar/timer.cc	/^Timer::Timer(uint64_t next)$/;"	f	class:sylar::Timer	signature:(uint64_t next)
sylar::Timer::Timer	sylar/sylar/timer.h	/^    Timer(uint64_t ms, std::function<void()> cb,$/;"	p	class:sylar::Timer	access:private	signature:(uint64_t ms,std::function<void ()> cb,bool recurring,TimerManager * manager)
sylar::Timer::Timer	sylar/sylar/timer.h	/^    Timer(uint64_t next);$/;"	p	class:sylar::Timer	access:private	signature:(uint64_t next)
sylar::Timer::cancel	sylar/sylar/timer.cc	/^bool Timer::cancel() {$/;"	f	class:sylar::Timer	typeref:typename:bool	signature:()
sylar::Timer::cancel	sylar/sylar/timer.h	/^    bool cancel();$/;"	p	class:sylar::Timer	typeref:typename:bool	access:public	signature:()
sylar::Timer::m_cb	sylar/sylar/timer.h	/^    std::function<void()> m_cb;$/;"	m	class:sylar::Timer	typeref:typename:std::function<void ()>	access:private
sylar::Timer::m_manager	sylar/sylar/timer.h	/^    TimerManager* m_manager = nullptr;$/;"	m	class:sylar::Timer	typeref:typename:TimerManager *	access:private
sylar::Timer::m_ms	sylar/sylar/timer.h	/^    uint64_t m_ms = 0;$/;"	m	class:sylar::Timer	typeref:typename:uint64_t	access:private
sylar::Timer::m_next	sylar/sylar/timer.h	/^    uint64_t m_next = 0;$/;"	m	class:sylar::Timer	typeref:typename:uint64_t	access:private
sylar::Timer::m_recurring	sylar/sylar/timer.h	/^    bool m_recurring = false;$/;"	m	class:sylar::Timer	typeref:typename:bool	access:private
sylar::Timer::ptr	sylar/sylar/timer.h	/^    typedef std::shared_ptr<Timer> ptr;$/;"	t	class:sylar::Timer	typeref:typename:std::shared_ptr<Timer>	access:public
sylar::Timer::refresh	sylar/sylar/timer.cc	/^bool Timer::refresh() {$/;"	f	class:sylar::Timer	typeref:typename:bool	signature:()
sylar::Timer::refresh	sylar/sylar/timer.h	/^    bool refresh();$/;"	p	class:sylar::Timer	typeref:typename:bool	access:public	signature:()
sylar::Timer::reset	sylar/sylar/timer.cc	/^bool Timer::reset(uint64_t ms, bool from_now) {$/;"	f	class:sylar::Timer	typeref:typename:bool	signature:(uint64_t ms,bool from_now)
sylar::Timer::reset	sylar/sylar/timer.h	/^    bool reset(uint64_t ms, bool from_now);$/;"	p	class:sylar::Timer	typeref:typename:bool	access:public	signature:(uint64_t ms,bool from_now)
sylar::TimerManager	sylar/sylar/timer.h	/^class TimerManager {$/;"	c	namespace:sylar
sylar::TimerManager::RWMutexType	sylar/sylar/timer.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::TimerManager	typeref:typename:RWMutex	access:public
sylar::TimerManager::TimerManager	sylar/sylar/timer.cc	/^TimerManager::TimerManager() {$/;"	f	class:sylar::TimerManager	signature:()
sylar::TimerManager::TimerManager	sylar/sylar/timer.h	/^    TimerManager();$/;"	p	class:sylar::TimerManager	access:public	signature:()
sylar::TimerManager::addConditionTimer	sylar/sylar/timer.cc	/^Timer::ptr TimerManager::addConditionTimer(uint64_t ms, std::function<void()> cb$/;"	f	class:sylar::TimerManager	typeref:typename:Timer::ptr	signature:(uint64_t ms,std::function<void ()> cb,std::weak_ptr<void> weak_cond,bool recurring)
sylar::TimerManager::addConditionTimer	sylar/sylar/timer.h	/^    Timer::ptr addConditionTimer(uint64_t ms, std::function<void()> cb$/;"	p	class:sylar::TimerManager	typeref:typename:Timer::ptr	access:public	signature:(uint64_t ms,std::function<void ()> cb,std::weak_ptr<void> weak_cond,bool recurring=false)
sylar::TimerManager::addTimer	sylar/sylar/timer.cc	/^Timer::ptr TimerManager::addTimer(uint64_t ms, std::function<void()> cb$/;"	f	class:sylar::TimerManager	typeref:typename:Timer::ptr	signature:(uint64_t ms,std::function<void ()> cb,bool recurring)
sylar::TimerManager::addTimer	sylar/sylar/timer.cc	/^void TimerManager::addTimer(Timer::ptr val, RWMutexType::WriteLock& lock) {$/;"	f	class:sylar::TimerManager	typeref:typename:void	signature:(Timer::ptr val,RWMutexType::WriteLock & lock)
sylar::TimerManager::addTimer	sylar/sylar/timer.h	/^    Timer::ptr addTimer(uint64_t ms, std::function<void()> cb$/;"	p	class:sylar::TimerManager	typeref:typename:Timer::ptr	access:public	signature:(uint64_t ms,std::function<void ()> cb,bool recurring=false)
sylar::TimerManager::addTimer	sylar/sylar/timer.h	/^    void addTimer(Timer::ptr val, RWMutexType::WriteLock& lock);$/;"	p	class:sylar::TimerManager	typeref:typename:void	access:protected	signature:(Timer::ptr val,RWMutexType::WriteLock & lock)
sylar::TimerManager::detectClockRollover	sylar/sylar/timer.cc	/^bool TimerManager::detectClockRollover(uint64_t now_ms) {$/;"	f	class:sylar::TimerManager	typeref:typename:bool	signature:(uint64_t now_ms)
sylar::TimerManager::detectClockRollover	sylar/sylar/timer.h	/^    bool detectClockRollover(uint64_t now_ms);$/;"	p	class:sylar::TimerManager	typeref:typename:bool	access:private	signature:(uint64_t now_ms)
sylar::TimerManager::getNextTimer	sylar/sylar/timer.cc	/^uint64_t TimerManager::getNextTimer() {$/;"	f	class:sylar::TimerManager	typeref:typename:uint64_t	signature:()
sylar::TimerManager::getNextTimer	sylar/sylar/timer.h	/^    uint64_t getNextTimer();$/;"	p	class:sylar::TimerManager	typeref:typename:uint64_t	access:public	signature:()
sylar::TimerManager::hasTimer	sylar/sylar/timer.cc	/^bool TimerManager::hasTimer() {$/;"	f	class:sylar::TimerManager	typeref:typename:bool	signature:()
sylar::TimerManager::hasTimer	sylar/sylar/timer.h	/^    bool hasTimer();$/;"	p	class:sylar::TimerManager	typeref:typename:bool	access:public	signature:()
sylar::TimerManager::listExpiredCb	sylar/sylar/timer.cc	/^void TimerManager::listExpiredCb(std::vector<std::function<void()> >& cbs) {$/;"	f	class:sylar::TimerManager	typeref:typename:void	signature:(std::vector<std::function<void ()>> & cbs)
sylar::TimerManager::listExpiredCb	sylar/sylar/timer.h	/^    void listExpiredCb(std::vector<std::function<void()> >& cbs);$/;"	p	class:sylar::TimerManager	typeref:typename:void	access:public	signature:(std::vector<std::function<void ()>> & cbs)
sylar::TimerManager::m_mutex	sylar/sylar/timer.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::TimerManager	typeref:typename:RWMutexType	access:private
sylar::TimerManager::m_previouseTime	sylar/sylar/timer.h	/^    uint64_t m_previouseTime = 0;$/;"	m	class:sylar::TimerManager	typeref:typename:uint64_t	access:private
sylar::TimerManager::m_tickled	sylar/sylar/timer.h	/^    bool m_tickled = false;$/;"	m	class:sylar::TimerManager	typeref:typename:bool	access:private
sylar::TimerManager::m_timers	sylar/sylar/timer.h	/^    std::set<Timer::ptr, Timer::Comparator> m_timers;$/;"	m	class:sylar::TimerManager	typeref:typename:std::set<Timer::ptr,Timer::Comparator>	access:private
sylar::TimerManager::onTimerInsertedAtFront	sylar/sylar/timer.h	/^    virtual void onTimerInsertedAtFront() = 0;$/;"	p	class:sylar::TimerManager	typeref:typename:void	access:protected	signature:()
sylar::TimerManager::~TimerManager	sylar/sylar/timer.cc	/^TimerManager::~TimerManager() {$/;"	f	class:sylar::TimerManager	signature:()
sylar::TimerManager::~TimerManager	sylar/sylar/timer.h	/^    virtual ~TimerManager();$/;"	p	class:sylar::TimerManager	access:public	signature:()
sylar::ToLower	sylar/sylar/util.cc	/^std::string ToLower(const std::string& name) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & name)
sylar::ToLower	sylar/sylar/util.h	/^std::string ToLower(const std::string& name);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & name)
sylar::ToUpper	sylar/sylar/util.cc	/^std::string ToUpper(const std::string& name) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & name)
sylar::ToUpper	sylar/sylar/util.h	/^std::string ToUpper(const std::string& name);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & name)
sylar::TypeToName	sylar/sylar/util.h	/^const char* TypeToName() {$/;"	f	namespace:sylar	typeref:typename:const char *	signature:()
sylar::TypeUtil	sylar/sylar/util.h	/^class TypeUtil {$/;"	c	namespace:sylar
sylar::TypeUtil::Atof	sylar/sylar/util.cc	/^double  TypeUtil::Atof(const char* str) {$/;"	f	class:sylar::TypeUtil	typeref:typename:double	signature:(const char * str)
sylar::TypeUtil::Atof	sylar/sylar/util.cc	/^double  TypeUtil::Atof(const std::string& str) {$/;"	f	class:sylar::TypeUtil	typeref:typename:double	signature:(const std::string & str)
sylar::TypeUtil::Atof	sylar/sylar/util.h	/^    static double Atof(const char* str);$/;"	p	class:sylar::TypeUtil	typeref:typename:double	access:public	signature:(const char * str)
sylar::TypeUtil::Atof	sylar/sylar/util.h	/^    static double Atof(const std::string& str);$/;"	p	class:sylar::TypeUtil	typeref:typename:double	access:public	signature:(const std::string & str)
sylar::TypeUtil::Atoi	sylar/sylar/util.cc	/^int64_t TypeUtil::Atoi(const char* str) {$/;"	f	class:sylar::TypeUtil	typeref:typename:int64_t	signature:(const char * str)
sylar::TypeUtil::Atoi	sylar/sylar/util.cc	/^int64_t TypeUtil::Atoi(const std::string& str) {$/;"	f	class:sylar::TypeUtil	typeref:typename:int64_t	signature:(const std::string & str)
sylar::TypeUtil::Atoi	sylar/sylar/util.h	/^    static int64_t Atoi(const char* str);$/;"	p	class:sylar::TypeUtil	typeref:typename:int64_t	access:public	signature:(const char * str)
sylar::TypeUtil::Atoi	sylar/sylar/util.h	/^    static int64_t Atoi(const std::string& str);$/;"	p	class:sylar::TypeUtil	typeref:typename:int64_t	access:public	signature:(const std::string & str)
sylar::TypeUtil::ToChar	sylar/sylar/util.cc	/^int8_t  TypeUtil::ToChar(const char* str) {$/;"	f	class:sylar::TypeUtil	typeref:typename:int8_t	signature:(const char * str)
sylar::TypeUtil::ToChar	sylar/sylar/util.cc	/^int8_t  TypeUtil::ToChar(const std::string& str) {$/;"	f	class:sylar::TypeUtil	typeref:typename:int8_t	signature:(const std::string & str)
sylar::TypeUtil::ToChar	sylar/sylar/util.h	/^    static int8_t ToChar(const char* str);$/;"	p	class:sylar::TypeUtil	typeref:typename:int8_t	access:public	signature:(const char * str)
sylar::TypeUtil::ToChar	sylar/sylar/util.h	/^    static int8_t ToChar(const std::string& str);$/;"	p	class:sylar::TypeUtil	typeref:typename:int8_t	access:public	signature:(const std::string & str)
sylar::UnixAddress	sylar/sylar/address.h	/^class UnixAddress : public Address {$/;"	c	namespace:sylar	inherits:Address
sylar::UnixAddress::UnixAddress	sylar/sylar/address.cc	/^UnixAddress::UnixAddress() {$/;"	f	class:sylar::UnixAddress	signature:()
sylar::UnixAddress::UnixAddress	sylar/sylar/address.cc	/^UnixAddress::UnixAddress(const std::string& path) {$/;"	f	class:sylar::UnixAddress	signature:(const std::string & path)
sylar::UnixAddress::UnixAddress	sylar/sylar/address.h	/^    UnixAddress();$/;"	p	class:sylar::UnixAddress	access:public	signature:()
sylar::UnixAddress::UnixAddress	sylar/sylar/address.h	/^    UnixAddress(const std::string& path);$/;"	p	class:sylar::UnixAddress	access:public	signature:(const std::string & path)
sylar::UnixAddress::getAddr	sylar/sylar/address.cc	/^const sockaddr* UnixAddress::getAddr() const {$/;"	f	class:sylar::UnixAddress	typeref:typename:const sockaddr *	signature:() const
sylar::UnixAddress::getAddr	sylar/sylar/address.cc	/^sockaddr* UnixAddress::getAddr() {$/;"	f	class:sylar::UnixAddress	typeref:typename:sockaddr *	signature:()
sylar::UnixAddress::getAddr	sylar/sylar/address.h	/^    const sockaddr* getAddr() const override;$/;"	p	class:sylar::UnixAddress	typeref:typename:const sockaddr *	access:public	signature:() const
sylar::UnixAddress::getAddr	sylar/sylar/address.h	/^    sockaddr* getAddr() override;$/;"	p	class:sylar::UnixAddress	typeref:typename:sockaddr *	access:public	signature:()
sylar::UnixAddress::getAddrLen	sylar/sylar/address.cc	/^socklen_t UnixAddress::getAddrLen() const {$/;"	f	class:sylar::UnixAddress	typeref:typename:socklen_t	signature:() const
sylar::UnixAddress::getAddrLen	sylar/sylar/address.h	/^    socklen_t getAddrLen() const override;$/;"	p	class:sylar::UnixAddress	typeref:typename:socklen_t	access:public	signature:() const
sylar::UnixAddress::getPath	sylar/sylar/address.cc	/^std::string UnixAddress::getPath() const {$/;"	f	class:sylar::UnixAddress	typeref:typename:std::string	signature:() const
sylar::UnixAddress::getPath	sylar/sylar/address.h	/^    std::string getPath() const;$/;"	p	class:sylar::UnixAddress	typeref:typename:std::string	access:public	signature:() const
sylar::UnixAddress::insert	sylar/sylar/address.cc	/^std::ostream& UnixAddress::insert(std::ostream& os) const {$/;"	f	class:sylar::UnixAddress	typeref:typename:std::ostream &	signature:(std::ostream & os) const
sylar::UnixAddress::insert	sylar/sylar/address.h	/^    std::ostream& insert(std::ostream& os) const override;$/;"	p	class:sylar::UnixAddress	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
sylar::UnixAddress::m_addr	sylar/sylar/address.h	/^    sockaddr_un m_addr;$/;"	m	class:sylar::UnixAddress	typeref:typename:sockaddr_un	access:private
sylar::UnixAddress::m_length	sylar/sylar/address.h	/^    socklen_t m_length;$/;"	m	class:sylar::UnixAddress	typeref:typename:socklen_t	access:private
sylar::UnixAddress::ptr	sylar/sylar/address.h	/^    typedef std::shared_ptr<UnixAddress> ptr;$/;"	t	class:sylar::UnixAddress	typeref:typename:std::shared_ptr<UnixAddress>	access:public
sylar::UnixAddress::setAddrLen	sylar/sylar/address.cc	/^void UnixAddress::setAddrLen(uint32_t v) {$/;"	f	class:sylar::UnixAddress	typeref:typename:void	signature:(uint32_t v)
sylar::UnixAddress::setAddrLen	sylar/sylar/address.h	/^    void setAddrLen(uint32_t v);$/;"	p	class:sylar::UnixAddress	typeref:typename:void	access:public	signature:(uint32_t v)
sylar::UnknownAddress	sylar/sylar/address.h	/^class UnknownAddress : public Address {$/;"	c	namespace:sylar	inherits:Address
sylar::UnknownAddress::UnknownAddress	sylar/sylar/address.cc	/^UnknownAddress::UnknownAddress(const sockaddr& addr) {$/;"	f	class:sylar::UnknownAddress	signature:(const sockaddr & addr)
sylar::UnknownAddress::UnknownAddress	sylar/sylar/address.cc	/^UnknownAddress::UnknownAddress(int family) {$/;"	f	class:sylar::UnknownAddress	signature:(int family)
sylar::UnknownAddress::UnknownAddress	sylar/sylar/address.h	/^    UnknownAddress(const sockaddr& addr);$/;"	p	class:sylar::UnknownAddress	access:public	signature:(const sockaddr & addr)
sylar::UnknownAddress::UnknownAddress	sylar/sylar/address.h	/^    UnknownAddress(int family);$/;"	p	class:sylar::UnknownAddress	access:public	signature:(int family)
sylar::UnknownAddress::getAddr	sylar/sylar/address.cc	/^const sockaddr* UnknownAddress::getAddr() const {$/;"	f	class:sylar::UnknownAddress	typeref:typename:const sockaddr *	signature:() const
sylar::UnknownAddress::getAddr	sylar/sylar/address.cc	/^sockaddr* UnknownAddress::getAddr() {$/;"	f	class:sylar::UnknownAddress	typeref:typename:sockaddr *	signature:()
sylar::UnknownAddress::getAddr	sylar/sylar/address.h	/^    const sockaddr* getAddr() const override;$/;"	p	class:sylar::UnknownAddress	typeref:typename:const sockaddr *	access:public	signature:() const
sylar::UnknownAddress::getAddr	sylar/sylar/address.h	/^    sockaddr* getAddr() override;$/;"	p	class:sylar::UnknownAddress	typeref:typename:sockaddr *	access:public	signature:()
sylar::UnknownAddress::getAddrLen	sylar/sylar/address.cc	/^socklen_t UnknownAddress::getAddrLen() const {$/;"	f	class:sylar::UnknownAddress	typeref:typename:socklen_t	signature:() const
sylar::UnknownAddress::getAddrLen	sylar/sylar/address.h	/^    socklen_t getAddrLen() const override;$/;"	p	class:sylar::UnknownAddress	typeref:typename:socklen_t	access:public	signature:() const
sylar::UnknownAddress::insert	sylar/sylar/address.cc	/^std::ostream& UnknownAddress::insert(std::ostream& os) const {$/;"	f	class:sylar::UnknownAddress	typeref:typename:std::ostream &	signature:(std::ostream & os) const
sylar::UnknownAddress::insert	sylar/sylar/address.h	/^    std::ostream& insert(std::ostream& os) const override;$/;"	p	class:sylar::UnknownAddress	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
sylar::UnknownAddress::m_addr	sylar/sylar/address.h	/^    sockaddr m_addr;$/;"	m	class:sylar::UnknownAddress	typeref:typename:sockaddr	access:private
sylar::UnknownAddress::ptr	sylar/sylar/address.h	/^    typedef std::shared_ptr<UnknownAddress> ptr;$/;"	t	class:sylar::UnknownAddress	typeref:typename:std::shared_ptr<UnknownAddress>	access:public
sylar::Uri	sylar/sylar/uri.h	/^class Uri {$/;"	c	namespace:sylar
sylar::Uri::Create	sylar/sylar/uri.h	/^    static Uri::ptr Create(const std::string& uri);$/;"	p	class:sylar::Uri	typeref:typename:Uri::ptr	access:public	signature:(const std::string & uri)
sylar::Uri::Create	sylar/sylar/uri.rl.cc	/^Uri::ptr Uri::Create(const std::string& uristr) {$/;"	f	class:sylar::Uri	typeref:typename:Uri::ptr	signature:(const std::string & uristr)
sylar::Uri::Uri	sylar/sylar/uri.h	/^    Uri();$/;"	p	class:sylar::Uri	access:public	signature:()
sylar::Uri::Uri	sylar/sylar/uri.rl.cc	/^Uri::Uri()$/;"	f	class:sylar::Uri	signature:()
sylar::Uri::createAddress	sylar/sylar/uri.h	/^    Address::ptr createAddress() const;$/;"	p	class:sylar::Uri	typeref:typename:Address::ptr	access:public	signature:() const
sylar::Uri::createAddress	sylar/sylar/uri.rl.cc	/^Address::ptr Uri::createAddress() const {$/;"	f	class:sylar::Uri	typeref:typename:Address::ptr	signature:() const
sylar::Uri::dump	sylar/sylar/uri.h	/^    std::ostream& dump(std::ostream& os) const;$/;"	p	class:sylar::Uri	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
sylar::Uri::dump	sylar/sylar/uri.rl.cc	/^std::ostream& Uri::dump(std::ostream& os) const {$/;"	f	class:sylar::Uri	typeref:typename:std::ostream &	signature:(std::ostream & os) const
sylar::Uri::getFragment	sylar/sylar/uri.h	/^    const std::string& getFragment() const { return m_fragment;}$/;"	f	class:sylar::Uri	typeref:typename:const std::string &	access:public	signature:() const
sylar::Uri::getHost	sylar/sylar/uri.h	/^    const std::string& getHost() const { return m_host;}$/;"	f	class:sylar::Uri	typeref:typename:const std::string &	access:public	signature:() const
sylar::Uri::getPath	sylar/sylar/uri.h	/^    const std::string& getPath() const;$/;"	p	class:sylar::Uri	typeref:typename:const std::string &	access:public	signature:() const
sylar::Uri::getPath	sylar/sylar/uri.rl.cc	/^const std::string& Uri::getPath() const {$/;"	f	class:sylar::Uri	typeref:typename:const std::string &	signature:() const
sylar::Uri::getPort	sylar/sylar/uri.h	/^    int32_t getPort() const;$/;"	p	class:sylar::Uri	typeref:typename:int32_t	access:public	signature:() const
sylar::Uri::getPort	sylar/sylar/uri.rl.cc	/^int32_t Uri::getPort() const {$/;"	f	class:sylar::Uri	typeref:typename:int32_t	signature:() const
sylar::Uri::getQuery	sylar/sylar/uri.h	/^    const std::string& getQuery() const { return m_query;}$/;"	f	class:sylar::Uri	typeref:typename:const std::string &	access:public	signature:() const
sylar::Uri::getScheme	sylar/sylar/uri.h	/^    const std::string& getScheme() const { return m_scheme;}$/;"	f	class:sylar::Uri	typeref:typename:const std::string &	access:public	signature:() const
sylar::Uri::getUserinfo	sylar/sylar/uri.h	/^    const std::string& getUserinfo() const { return m_userinfo;}$/;"	f	class:sylar::Uri	typeref:typename:const std::string &	access:public	signature:() const
sylar::Uri::isDefaultPort	sylar/sylar/uri.h	/^    bool isDefaultPort() const;$/;"	p	class:sylar::Uri	typeref:typename:bool	access:private	signature:() const
sylar::Uri::isDefaultPort	sylar/sylar/uri.rl.cc	/^bool Uri::isDefaultPort() const {$/;"	f	class:sylar::Uri	typeref:typename:bool	signature:() const
sylar::Uri::m_fragment	sylar/sylar/uri.h	/^    std::string m_fragment;$/;"	m	class:sylar::Uri	typeref:typename:std::string	access:private
sylar::Uri::m_host	sylar/sylar/uri.h	/^    std::string m_host;$/;"	m	class:sylar::Uri	typeref:typename:std::string	access:private
sylar::Uri::m_path	sylar/sylar/uri.h	/^    std::string m_path;$/;"	m	class:sylar::Uri	typeref:typename:std::string	access:private
sylar::Uri::m_port	sylar/sylar/uri.h	/^    int32_t m_port;$/;"	m	class:sylar::Uri	typeref:typename:int32_t	access:private
sylar::Uri::m_query	sylar/sylar/uri.h	/^    std::string m_query;$/;"	m	class:sylar::Uri	typeref:typename:std::string	access:private
sylar::Uri::m_scheme	sylar/sylar/uri.h	/^    std::string m_scheme;$/;"	m	class:sylar::Uri	typeref:typename:std::string	access:private
sylar::Uri::m_userinfo	sylar/sylar/uri.h	/^    std::string m_userinfo;$/;"	m	class:sylar::Uri	typeref:typename:std::string	access:private
sylar::Uri::ptr	sylar/sylar/uri.h	/^    typedef std::shared_ptr<Uri> ptr;$/;"	t	class:sylar::Uri	typeref:typename:std::shared_ptr<Uri>	access:public
sylar::Uri::setFragment	sylar/sylar/uri.h	/^    void setFragment(const std::string& v) { m_fragment = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::Uri::setHost	sylar/sylar/uri.h	/^    void setHost(const std::string& v) { m_host = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::Uri::setPath	sylar/sylar/uri.h	/^    void setPath(const std::string& v) { m_path = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::Uri::setPort	sylar/sylar/uri.h	/^    void setPort(int32_t v) { m_port = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(int32_t v)
sylar::Uri::setQuery	sylar/sylar/uri.h	/^    void setQuery(const std::string& v) { m_query = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::Uri::setScheme	sylar/sylar/uri.h	/^    void setScheme(const std::string& v) { m_scheme = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::Uri::setUserinfo	sylar/sylar/uri.h	/^    void setUserinfo(const std::string& v) { m_userinfo = v;}$/;"	f	class:sylar::Uri	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::Uri::toString	sylar/sylar/uri.h	/^    std::string toString() const;$/;"	p	class:sylar::Uri	typeref:typename:std::string	access:public	signature:() const
sylar::Uri::toString	sylar/sylar/uri.rl.cc	/^std::string Uri::toString() const {$/;"	f	class:sylar::Uri	typeref:typename:std::string	signature:() const
sylar::WeightLoadBalance	sylar/sylar/streams/load_balance.h	/^class WeightLoadBalance : public LoadBalance {$/;"	c	namespace:sylar	inherits:LoadBalance
sylar::WeightLoadBalance::get	sylar/sylar/streams/load_balance.cc	/^LoadBalanceItem::ptr WeightLoadBalance::get(uint64_t v) {$/;"	f	class:sylar::WeightLoadBalance	typeref:typename:LoadBalanceItem::ptr	signature:(uint64_t v)
sylar::WeightLoadBalance::get	sylar/sylar/streams/load_balance.h	/^    virtual LoadBalanceItem::ptr get(uint64_t v = -1) override;$/;"	p	class:sylar::WeightLoadBalance	typeref:typename:LoadBalanceItem::ptr	access:public	signature:(uint64_t v=-1)
sylar::WeightLoadBalance::getAsFair	sylar/sylar/streams/load_balance.cc	/^FairLoadBalanceItem::ptr WeightLoadBalance::getAsFair() {$/;"	f	class:sylar::WeightLoadBalance	typeref:typename:FairLoadBalanceItem::ptr	signature:()
sylar::WeightLoadBalance::getAsFair	sylar/sylar/streams/load_balance.h	/^    FairLoadBalanceItem::ptr getAsFair();$/;"	p	class:sylar::WeightLoadBalance	typeref:typename:FairLoadBalanceItem::ptr	access:public	signature:()
sylar::WeightLoadBalance::getIdx	sylar/sylar/streams/load_balance.cc	/^int32_t WeightLoadBalance::getIdx(uint64_t v) {$/;"	f	class:sylar::WeightLoadBalance	typeref:typename:int32_t	signature:(uint64_t v)
sylar::WeightLoadBalance::getIdx	sylar/sylar/streams/load_balance.h	/^    int32_t getIdx(uint64_t v = -1);$/;"	p	class:sylar::WeightLoadBalance	typeref:typename:int32_t	access:private	signature:(uint64_t v=-1)
sylar::WeightLoadBalance::initNolock	sylar/sylar/streams/load_balance.cc	/^void WeightLoadBalance::initNolock() {$/;"	f	class:sylar::WeightLoadBalance	typeref:typename:void	signature:()
sylar::WeightLoadBalance::initNolock	sylar/sylar/streams/load_balance.h	/^    virtual void initNolock();$/;"	p	class:sylar::WeightLoadBalance	typeref:typename:void	access:protected	signature:()
sylar::WeightLoadBalance::m_items	sylar/sylar/streams/load_balance.h	/^    std::vector<LoadBalanceItem::ptr> m_items;$/;"	m	class:sylar::WeightLoadBalance	typeref:typename:std::vector<LoadBalanceItem::ptr>	access:protected
sylar::WeightLoadBalance::m_weights	sylar/sylar/streams/load_balance.h	/^    std::vector<int64_t> m_weights;$/;"	m	class:sylar::WeightLoadBalance	typeref:typename:std::vector<int64_t>	access:private
sylar::WeightLoadBalance::ptr	sylar/sylar/streams/load_balance.h	/^    typedef std::shared_ptr<WeightLoadBalance> ptr;$/;"	t	class:sylar::WeightLoadBalance	typeref:typename:std::shared_ptr<WeightLoadBalance>	access:public
sylar::WorkerGroup	sylar/sylar/worker.h	/^class WorkerGroup : Noncopyable, public std::enable_shared_from_this<WorkerGroup> {$/;"	c	namespace:sylar	inherits:Noncopyable,std::enable_shared_from_this<WorkerGroup>
sylar::WorkerGroup::Create	sylar/sylar/worker.h	/^    static WorkerGroup::ptr Create(uint32_t batch_size, sylar::Scheduler* s = sylar::Scheduler::/;"	f	class:sylar::WorkerGroup	typeref:typename:WorkerGroup::ptr	access:public	signature:(uint32_t batch_size,sylar::Scheduler * s=sylar::Scheduler::GetThis ())
sylar::WorkerGroup::WorkerGroup	sylar/sylar/worker.cc	/^WorkerGroup::WorkerGroup(uint32_t batch_size, sylar::Scheduler* s)$/;"	f	class:sylar::WorkerGroup	signature:(uint32_t batch_size,sylar::Scheduler * s)
sylar::WorkerGroup::WorkerGroup	sylar/sylar/worker.h	/^    WorkerGroup(uint32_t batch_size, sylar::Scheduler* s = sylar::Scheduler::GetThis());$/;"	p	class:sylar::WorkerGroup	access:public	signature:(uint32_t batch_size,sylar::Scheduler * s=sylar::Scheduler::GetThis ())
sylar::WorkerGroup::doWork	sylar/sylar/worker.cc	/^void WorkerGroup::doWork(std::function<void()> cb) {$/;"	f	class:sylar::WorkerGroup	typeref:typename:void	signature:(std::function<void ()> cb)
sylar::WorkerGroup::doWork	sylar/sylar/worker.h	/^    void doWork(std::function<void()> cb);$/;"	p	class:sylar::WorkerGroup	typeref:typename:void	access:private	signature:(std::function<void ()> cb)
sylar::WorkerGroup::m_batchSize	sylar/sylar/worker.h	/^    uint32_t m_batchSize;$/;"	m	class:sylar::WorkerGroup	typeref:typename:uint32_t	access:private
sylar::WorkerGroup::m_finish	sylar/sylar/worker.h	/^    bool m_finish;$/;"	m	class:sylar::WorkerGroup	typeref:typename:bool	access:private
sylar::WorkerGroup::m_scheduler	sylar/sylar/worker.h	/^    Scheduler* m_scheduler;$/;"	m	class:sylar::WorkerGroup	typeref:typename:Scheduler *	access:private
sylar::WorkerGroup::m_sem	sylar/sylar/worker.h	/^    FiberSemaphore m_sem;$/;"	m	class:sylar::WorkerGroup	typeref:typename:FiberSemaphore	access:private
sylar::WorkerGroup::ptr	sylar/sylar/worker.h	/^    typedef std::shared_ptr<WorkerGroup> ptr;$/;"	t	class:sylar::WorkerGroup	typeref:typename:std::shared_ptr<WorkerGroup>	access:public
sylar::WorkerGroup::schedule	sylar/sylar/worker.cc	/^void WorkerGroup::schedule(std::function<void()> cb, int thread) {$/;"	f	class:sylar::WorkerGroup	typeref:typename:void	signature:(std::function<void ()> cb,int thread)
sylar::WorkerGroup::schedule	sylar/sylar/worker.h	/^    void schedule(std::function<void()> cb, int thread = -1);$/;"	p	class:sylar::WorkerGroup	typeref:typename:void	access:public	signature:(std::function<void ()> cb,int thread=-1)
sylar::WorkerGroup::waitAll	sylar/sylar/worker.cc	/^void WorkerGroup::waitAll() {$/;"	f	class:sylar::WorkerGroup	typeref:typename:void	signature:()
sylar::WorkerGroup::waitAll	sylar/sylar/worker.h	/^    void waitAll();$/;"	p	class:sylar::WorkerGroup	typeref:typename:void	access:public	signature:()
sylar::WorkerGroup::~WorkerGroup	sylar/sylar/worker.cc	/^WorkerGroup::~WorkerGroup() {$/;"	f	class:sylar::WorkerGroup	signature:()
sylar::WorkerGroup::~WorkerGroup	sylar/sylar/worker.h	/^    ~WorkerGroup();$/;"	p	class:sylar::WorkerGroup	access:public	signature:()
sylar::WorkerManager	sylar/sylar/worker.h	/^class WorkerManager {$/;"	c	namespace:sylar
sylar::WorkerManager::WorkerManager	sylar/sylar/worker.cc	/^WorkerManager::WorkerManager()$/;"	f	class:sylar::WorkerManager	signature:()
sylar::WorkerManager::WorkerManager	sylar/sylar/worker.h	/^    WorkerManager();$/;"	p	class:sylar::WorkerManager	access:public	signature:()
sylar::WorkerManager::add	sylar/sylar/worker.cc	/^void WorkerManager::add(Scheduler::ptr s) {$/;"	f	class:sylar::WorkerManager	typeref:typename:void	signature:(Scheduler::ptr s)
sylar::WorkerManager::add	sylar/sylar/worker.h	/^    void add(Scheduler::ptr s);$/;"	p	class:sylar::WorkerManager	typeref:typename:void	access:public	signature:(Scheduler::ptr s)
sylar::WorkerManager::dump	sylar/sylar/worker.cc	/^std::ostream& WorkerManager::dump(std::ostream& os) {$/;"	f	class:sylar::WorkerManager	typeref:typename:std::ostream &	signature:(std::ostream & os)
sylar::WorkerManager::dump	sylar/sylar/worker.h	/^    std::ostream& dump(std::ostream& os);$/;"	p	class:sylar::WorkerManager	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
sylar::WorkerManager::get	sylar/sylar/worker.cc	/^Scheduler::ptr WorkerManager::get(const std::string& name) {$/;"	f	class:sylar::WorkerManager	typeref:typename:Scheduler::ptr	signature:(const std::string & name)
sylar::WorkerManager::get	sylar/sylar/worker.h	/^    Scheduler::ptr get(const std::string& name);$/;"	p	class:sylar::WorkerManager	typeref:typename:Scheduler::ptr	access:public	signature:(const std::string & name)
sylar::WorkerManager::getAsIOManager	sylar/sylar/worker.cc	/^IOManager::ptr WorkerManager::getAsIOManager(const std::string& name) {$/;"	f	class:sylar::WorkerManager	typeref:typename:IOManager::ptr	signature:(const std::string & name)
sylar::WorkerManager::getAsIOManager	sylar/sylar/worker.h	/^    IOManager::ptr getAsIOManager(const std::string& name);$/;"	p	class:sylar::WorkerManager	typeref:typename:IOManager::ptr	access:public	signature:(const std::string & name)
sylar::WorkerManager::getCount	sylar/sylar/worker.cc	/^uint32_t WorkerManager::getCount() {$/;"	f	class:sylar::WorkerManager	typeref:typename:uint32_t	signature:()
sylar::WorkerManager::getCount	sylar/sylar/worker.h	/^    uint32_t getCount();$/;"	p	class:sylar::WorkerManager	typeref:typename:uint32_t	access:public	signature:()
sylar::WorkerManager::init	sylar/sylar/worker.cc	/^bool WorkerManager::init() {$/;"	f	class:sylar::WorkerManager	typeref:typename:bool	signature:()
sylar::WorkerManager::init	sylar/sylar/worker.cc	/^bool WorkerManager::init(const std::map<std::string, std::map<std::string, std::string> >& v) {$/;"	f	class:sylar::WorkerManager	typeref:typename:bool	signature:(const std::map<std::string,std::map<std::string,std::string>> & v)
sylar::WorkerManager::init	sylar/sylar/worker.h	/^    bool init();$/;"	p	class:sylar::WorkerManager	typeref:typename:bool	access:public	signature:()
sylar::WorkerManager::init	sylar/sylar/worker.h	/^    bool init(const std::map<std::string, std::map<std::string, std::string> >& v);$/;"	p	class:sylar::WorkerManager	typeref:typename:bool	access:public	signature:(const std::map<std::string,std::map<std::string,std::string>> & v)
sylar::WorkerManager::isStoped	sylar/sylar/worker.h	/^    bool isStoped() const { return m_stop;}$/;"	f	class:sylar::WorkerManager	typeref:typename:bool	access:public	signature:() const
sylar::WorkerManager::m_datas	sylar/sylar/worker.h	/^    std::map<std::string, std::vector<Scheduler::ptr> > m_datas;$/;"	m	class:sylar::WorkerManager	typeref:typename:std::map<std::string,std::vector<Scheduler::ptr>>	access:private
sylar::WorkerManager::m_stop	sylar/sylar/worker.h	/^    bool m_stop;$/;"	m	class:sylar::WorkerManager	typeref:typename:bool	access:private
sylar::WorkerManager::schedule	sylar/sylar/worker.h	/^    void schedule(const std::string& name, FiberOrCb fc, int thread = -1) {$/;"	f	class:sylar::WorkerManager	typeref:typename:void	access:public	signature:(const std::string & name,FiberOrCb fc,int thread=-1)
sylar::WorkerManager::schedule	sylar/sylar/worker.h	/^    void schedule(const std::string& name, Iter begin, Iter end) {$/;"	f	class:sylar::WorkerManager	typeref:typename:void	access:public	signature:(const std::string & name,Iter begin,Iter end)
sylar::WorkerManager::stop	sylar/sylar/worker.cc	/^void WorkerManager::stop() {$/;"	f	class:sylar::WorkerManager	typeref:typename:void	signature:()
sylar::WorkerManager::stop	sylar/sylar/worker.h	/^    void stop();$/;"	p	class:sylar::WorkerManager	typeref:typename:void	access:public	signature:()
sylar::WorkerMgr	sylar/sylar/worker.h	/^typedef sylar::Singleton<WorkerManager> WorkerMgr;$/;"	t	namespace:sylar	typeref:typename:sylar::Singleton<WorkerManager>
sylar::WriteFixToStreamWithSpeed	sylar/sylar/util.cc	/^bool WriteFixToStreamWithSpeed(std::ostream& os, const char* data,$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::ostream & os,const char * data,const uint64_t & size,const uint64_t & speed)
sylar::WriteFixToStreamWithSpeed	sylar/sylar/util.h	/^bool WriteFixToStreamWithSpeed(std::ostream& os, const char* data,$/;"	p	namespace:sylar	typeref:typename:bool	signature:(std::ostream & os,const char * data,const uint64_t & size,const uint64_t & speed=-1)
sylar::WriteScopedLockImpl	sylar/sylar/mutex.h	/^struct WriteScopedLockImpl {$/;"	s	namespace:sylar
sylar::WriteScopedLockImpl::WriteScopedLockImpl	sylar/sylar/mutex.h	/^    WriteScopedLockImpl(T& mutex)$/;"	f	struct:sylar::WriteScopedLockImpl	access:public	signature:(T & mutex)
sylar::WriteScopedLockImpl::lock	sylar/sylar/mutex.h	/^    void lock() {$/;"	f	struct:sylar::WriteScopedLockImpl	typeref:typename:void	access:public	signature:()
sylar::WriteScopedLockImpl::m_locked	sylar/sylar/mutex.h	/^    bool m_locked;$/;"	m	struct:sylar::WriteScopedLockImpl	typeref:typename:bool	access:private
sylar::WriteScopedLockImpl::m_mutex	sylar/sylar/mutex.h	/^    T& m_mutex;$/;"	m	struct:sylar::WriteScopedLockImpl	typeref:typename:T &	access:private
sylar::WriteScopedLockImpl::unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	struct:sylar::WriteScopedLockImpl	typeref:typename:void	access:public	signature:()
sylar::WriteScopedLockImpl::~WriteScopedLockImpl	sylar/sylar/mutex.h	/^    ~WriteScopedLockImpl() {$/;"	f	struct:sylar::WriteScopedLockImpl	access:public	signature:()
sylar::WriteToStream	sylar/sylar/util.h	/^bool WriteToStream(std::ostream& os, const T& v) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::ostream & os,const T & v)
sylar::WriteToStream	sylar/sylar/util.h	/^bool WriteToStream(std::ostream& os, const std::vector<T>& v) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::ostream & os,const std::vector<T> & v)
sylar::WriteToStreamWithSpeed	sylar/sylar/util.h	/^bool WriteToStreamWithSpeed(std::ostream& os, const T& v,$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::ostream & os,const T & v,const uint64_t & speed=-1)
sylar::WriteToStreamWithSpeed	sylar/sylar/util.h	/^bool WriteToStreamWithSpeed(std::ostream& os, const std::vector<T>& v,$/;"	f	namespace:sylar	typeref:typename:bool	signature:(std::ostream & os,const std::vector<T> & v,const uint64_t & speed=-1,const uint64_t & min_duration_ms=10)
sylar::YamlToJson	sylar/sylar/util.cc	/^bool YamlToJson(const YAML::Node& ynode, Json::Value& jnode) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(const YAML::Node & ynode,Json::Value & jnode)
sylar::YamlToJson	sylar/sylar/util.h	/^bool YamlToJson(const YAML::Node& ynode, Json::Value& jnode);$/;"	p	namespace:sylar	typeref:typename:bool	signature:(const YAML::Node & ynode,Json::Value & jnode)
sylar::ZKClient	sylar/sylar/zk_client.h	/^class ZKClient : public std::enable_shared_from_this<ZKClient> {$/;"	c	namespace:sylar	inherits:std::enable_shared_from_this<ZKClient>
sylar::ZKClient::EventType	sylar/sylar/zk_client.h	/^    class EventType {$/;"	c	class:sylar::ZKClient	access:public
sylar::ZKClient::EventType::CHANGED	sylar/sylar/zk_client.cc	/^const int ZKClient::EventType::CHANGED = ZOO_CHANGED_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int
sylar::ZKClient::EventType::CHANGED	sylar/sylar/zk_client.h	/^        static const int CHANGED; \/\/ = ZOO_CHANGED_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int	access:public
sylar::ZKClient::EventType::CHILD	sylar/sylar/zk_client.cc	/^const int ZKClient::EventType::CHILD   = ZOO_CHILD_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int
sylar::ZKClient::EventType::CHILD	sylar/sylar/zk_client.h	/^        static const int CHILD  ; \/\/ = ZOO_CHILD_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int	access:public
sylar::ZKClient::EventType::CREATED	sylar/sylar/zk_client.cc	/^const int ZKClient::EventType::CREATED = ZOO_CREATED_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int
sylar::ZKClient::EventType::CREATED	sylar/sylar/zk_client.h	/^        static const int CREATED; \/\/ = ZOO_CREATED_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int	access:public
sylar::ZKClient::EventType::DELETED	sylar/sylar/zk_client.cc	/^const int ZKClient::EventType::DELETED = ZOO_DELETED_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int
sylar::ZKClient::EventType::DELETED	sylar/sylar/zk_client.h	/^        static const int DELETED; \/\/ = ZOO_DELETED_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int	access:public
sylar::ZKClient::EventType::NOWATCHING	sylar/sylar/zk_client.cc	/^const int ZKClient::EventType::NOWATCHING = ZOO_NOTWATCHING_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int
sylar::ZKClient::EventType::NOWATCHING	sylar/sylar/zk_client.h	/^        static const int NOWATCHING; \/\/ = ZOO_NOTWATCHING_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int	access:public
sylar::ZKClient::EventType::SESSION	sylar/sylar/zk_client.cc	/^const int ZKClient::EventType::SESSION = ZOO_SESSION_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int
sylar::ZKClient::EventType::SESSION	sylar/sylar/zk_client.h	/^        static const int SESSION; \/\/ = ZOO_SESSION_EVENT;$/;"	m	class:sylar::ZKClient::EventType	typeref:typename:const int	access:public
sylar::ZKClient::FlagsType	sylar/sylar/zk_client.h	/^    class FlagsType {$/;"	c	class:sylar::ZKClient	access:public
sylar::ZKClient::FlagsType::CONTAINER	sylar/sylar/zk_client.h	/^        static const int CONTAINER; \/\/ = ZOO_CONTAINER;$/;"	m	class:sylar::ZKClient::FlagsType	typeref:typename:const int	access:public
sylar::ZKClient::FlagsType::EPHEMERAL	sylar/sylar/zk_client.cc	/^const int ZKClient::FlagsType::EPHEMERAL = ZOO_EPHEMERAL;$/;"	m	class:sylar::ZKClient::FlagsType	typeref:typename:const int
sylar::ZKClient::FlagsType::EPHEMERAL	sylar/sylar/zk_client.h	/^        static const int EPHEMERAL; \/\/ = ZOO_EPHEMERAL;$/;"	m	class:sylar::ZKClient::FlagsType	typeref:typename:const int	access:public
sylar::ZKClient::FlagsType::SEQUENCE	sylar/sylar/zk_client.cc	/^const int ZKClient::FlagsType::SEQUENCE  = ZOO_SEQUENCE;$/;"	m	class:sylar::ZKClient::FlagsType	typeref:typename:const int
sylar::ZKClient::FlagsType::SEQUENCE	sylar/sylar/zk_client.h	/^        static const int SEQUENCE;  \/\/  = ZOO_SEQUENCE;$/;"	m	class:sylar::ZKClient::FlagsType	typeref:typename:const int	access:public
sylar::ZKClient::OnWatcher	sylar/sylar/zk_client.cc	/^void ZKClient::OnWatcher(zhandle_t *zh, int type, int stat, const char *path,void *watcherCtx) {$/;"	f	class:sylar::ZKClient	typeref:typename:void	signature:(zhandle_t * zh,int type,int stat,const char * path,void * watcherCtx)
sylar::ZKClient::OnWatcher	sylar/sylar/zk_client.h	/^    static void OnWatcher(zhandle_t *zh, int type, int stat, const char *path,void *watcherCtx);$/;"	p	class:sylar::ZKClient	typeref:typename:void	access:private	signature:(zhandle_t * zh,int type,int stat,const char * path,void * watcherCtx)
sylar::ZKClient::StateType	sylar/sylar/zk_client.h	/^    class StateType {$/;"	c	class:sylar::ZKClient	access:public
sylar::ZKClient::StateType::ASSOCIATING	sylar/sylar/zk_client.cc	/^const int ZKClient::StateType::ASSOCIATING = ZOO_ASSOCIATING_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int
sylar::ZKClient::StateType::ASSOCIATING	sylar/sylar/zk_client.h	/^        static const int ASSOCIATING; \/\/ = ZOO_ASSOCIATING_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
sylar::ZKClient::StateType::AUTH_FAILED	sylar/sylar/zk_client.cc	/^const int ZKClient::StateType::AUTH_FAILED = ZOO_AUTH_FAILED_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int
sylar::ZKClient::StateType::AUTH_FAILED	sylar/sylar/zk_client.h	/^        static const int AUTH_FAILED; \/\/ = ZOO_AUTH_FAILED_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
sylar::ZKClient::StateType::CONNECTED	sylar/sylar/zk_client.cc	/^const int ZKClient::StateType::CONNECTED = ZOO_CONNECTED_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int
sylar::ZKClient::StateType::CONNECTED	sylar/sylar/zk_client.h	/^        static const int CONNECTED; \/\/ = ZOO_CONNECTED_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
sylar::ZKClient::StateType::CONNECTING	sylar/sylar/zk_client.cc	/^const int ZKClient::StateType::CONNECTING = ZOO_CONNECTING_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int
sylar::ZKClient::StateType::CONNECTING	sylar/sylar/zk_client.h	/^        static const int CONNECTING; \/\/ = ZOO_CONNECTING_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
sylar::ZKClient::StateType::EXPIRED_SESSION	sylar/sylar/zk_client.cc	/^const int ZKClient::StateType::EXPIRED_SESSION = ZOO_EXPIRED_SESSION_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int
sylar::ZKClient::StateType::EXPIRED_SESSION	sylar/sylar/zk_client.h	/^        static const int EXPIRED_SESSION; \/\/ = ZOO_EXPIRED_SESSION_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
sylar::ZKClient::StateType::NOTCONNECTED	sylar/sylar/zk_client.h	/^        static const int NOTCONNECTED; \/\/ = ZOO_NOTCONNECTED_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
sylar::ZKClient::StateType::READONLY	sylar/sylar/zk_client.h	/^        static const int READONLY; \/\/ = ZOO_READONLY_STATE;$/;"	m	class:sylar::ZKClient::StateType	typeref:typename:const int	access:public
sylar::ZKClient::ZKClient	sylar/sylar/zk_client.cc	/^ZKClient::ZKClient()$/;"	f	class:sylar::ZKClient	signature:()
sylar::ZKClient::ZKClient	sylar/sylar/zk_client.h	/^    ZKClient();$/;"	p	class:sylar::ZKClient	access:public	signature:()
sylar::ZKClient::close	sylar/sylar/zk_client.cc	/^int32_t ZKClient::close() {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:()
sylar::ZKClient::close	sylar/sylar/zk_client.h	/^    int32_t close();$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:()
sylar::ZKClient::create	sylar/sylar/zk_client.cc	/^int32_t ZKClient::create(const std::string& path, const std::string& val, std::string& new_path$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & path,const std::string & val,std::string & new_path,const struct ACL_vector * acl,int flags)
sylar::ZKClient::create	sylar/sylar/zk_client.h	/^    int32_t create(const std::string& path, const std::string& val, std::string& new_path$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & path,const std::string & val,std::string & new_path,const struct ACL_vector * acl=& ZOO_OPEN_ACL_UNSAFE,int flags=0)
sylar::ZKClient::del	sylar/sylar/zk_client.cc	/^int32_t ZKClient::del(const std::string& path, int version) {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & path,int version)
sylar::ZKClient::del	sylar/sylar/zk_client.h	/^    int32_t del(const std::string& path, int version = -1);$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & path,int version=-1)
sylar::ZKClient::exists	sylar/sylar/zk_client.cc	/^int32_t ZKClient::exists(const std::string& path, bool watch, Stat* stat) {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & path,bool watch,Stat * stat)
sylar::ZKClient::exists	sylar/sylar/zk_client.h	/^    int32_t exists(const std::string& path, bool watch, Stat* stat = nullptr);$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & path,bool watch,Stat * stat=nullptr)
sylar::ZKClient::get	sylar/sylar/zk_client.cc	/^int32_t ZKClient::get(const std::string& path, std::string& val, bool watch, Stat* stat) {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & path,std::string & val,bool watch,Stat * stat)
sylar::ZKClient::get	sylar/sylar/zk_client.h	/^    int32_t get(const std::string& path, std::string& val, bool watch, Stat* stat = nullptr);$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & path,std::string & val,bool watch,Stat * stat=nullptr)
sylar::ZKClient::getChildren	sylar/sylar/zk_client.cc	/^int32_t ZKClient::getChildren(const std::string& path, std::vector<std::string>& val, bool watch/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & path,std::vector<std::string> & val,bool watch,Stat * stat)
sylar::ZKClient::getChildren	sylar/sylar/zk_client.h	/^    int32_t getChildren(const std::string& path, std::vector<std::string>& val, bool watch, Stat/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & path,std::vector<std::string> & val,bool watch,Stat * stat=nullptr)
sylar::ZKClient::getConfig	sylar/sylar/zk_client.cc	/^int32_t ZKClient::getConfig(std::string& val, bool watch, Stat* stat) {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(std::string & val,bool watch,Stat * stat)
sylar::ZKClient::getConfig	sylar/sylar/zk_client.h	/^    int32_t getConfig(std::string& val, bool watch, Stat* stat = nullptr);$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(std::string & val,bool watch,Stat * stat=nullptr)
sylar::ZKClient::getCurrentServer	sylar/sylar/zk_client.cc	/^std::string  ZKClient::getCurrentServer() {$/;"	f	class:sylar::ZKClient	typeref:typename:std::string	signature:()
sylar::ZKClient::getCurrentServer	sylar/sylar/zk_client.h	/^    std::string  getCurrentServer();$/;"	p	class:sylar::ZKClient	typeref:typename:std::string	access:public	signature:()
sylar::ZKClient::getState	sylar/sylar/zk_client.cc	/^int32_t ZKClient::getState() {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:()
sylar::ZKClient::getState	sylar/sylar/zk_client.h	/^    int32_t getState();$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:()
sylar::ZKClient::init	sylar/sylar/zk_client.cc	/^bool ZKClient::init(const std::string& hosts, int recv_timeout, watcher_callback cb, log_callbac/;"	f	class:sylar::ZKClient	typeref:typename:bool	signature:(const std::string & hosts,int recv_timeout,watcher_callback cb,log_callback lcb)
sylar::ZKClient::init	sylar/sylar/zk_client.h	/^    bool init(const std::string& hosts, int recv_timeout, watcher_callback cb, log_callback lcb /;"	p	class:sylar::ZKClient	typeref:typename:bool	access:public	signature:(const std::string & hosts,int recv_timeout,watcher_callback cb,log_callback lcb=nullptr)
sylar::ZKClient::log_callback	sylar/sylar/zk_client.h	/^    typedef void(*log_callback)(const char *message);$/;"	t	class:sylar::ZKClient	typeref:typename:void (*)(const char * message)	access:public
sylar::ZKClient::m_handle	sylar/sylar/zk_client.h	/^    zhandle_t* m_handle;$/;"	m	class:sylar::ZKClient	typeref:typename:zhandle_t *	access:private
sylar::ZKClient::m_hosts	sylar/sylar/zk_client.h	/^    std::string m_hosts;$/;"	m	class:sylar::ZKClient	typeref:typename:std::string	access:private
sylar::ZKClient::m_logCb	sylar/sylar/zk_client.h	/^    log_callback m_logCb;$/;"	m	class:sylar::ZKClient	typeref:typename:log_callback	access:private
sylar::ZKClient::m_recvTimeout	sylar/sylar/zk_client.h	/^    int32_t m_recvTimeout;$/;"	m	class:sylar::ZKClient	typeref:typename:int32_t	access:private
sylar::ZKClient::m_watcherCb	sylar/sylar/zk_client.h	/^    watcher_callback2 m_watcherCb;$/;"	m	class:sylar::ZKClient	typeref:typename:watcher_callback2	access:private
sylar::ZKClient::ptr	sylar/sylar/zk_client.h	/^    typedef std::shared_ptr<ZKClient> ptr;$/;"	t	class:sylar::ZKClient	typeref:typename:std::shared_ptr<ZKClient>	access:public
sylar::ZKClient::reconnect	sylar/sylar/zk_client.cc	/^bool ZKClient::reconnect() {$/;"	f	class:sylar::ZKClient	typeref:typename:bool	signature:()
sylar::ZKClient::reconnect	sylar/sylar/zk_client.h	/^    bool reconnect();$/;"	p	class:sylar::ZKClient	typeref:typename:bool	access:public	signature:()
sylar::ZKClient::set	sylar/sylar/zk_client.cc	/^int32_t ZKClient::set(const std::string& path, const std::string& val, int version, Stat* stat) /;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & path,const std::string & val,int version,Stat * stat)
sylar::ZKClient::set	sylar/sylar/zk_client.h	/^    int32_t set(const std::string& path, const std::string& val, int version = -1, Stat* stat = /;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & path,const std::string & val,int version=-1,Stat * stat=nullptr)
sylar::ZKClient::setServers	sylar/sylar/zk_client.cc	/^int32_t ZKClient::setServers(const std::string& hosts) {$/;"	f	class:sylar::ZKClient	typeref:typename:int32_t	signature:(const std::string & hosts)
sylar::ZKClient::setServers	sylar/sylar/zk_client.h	/^    int32_t setServers(const std::string& hosts);$/;"	p	class:sylar::ZKClient	typeref:typename:int32_t	access:public	signature:(const std::string & hosts)
sylar::ZKClient::watcher_callback	sylar/sylar/zk_client.h	/^    typedef std::function<void(int type, int stat, const std::string& path, ZKClient::ptr)> watc/;"	t	class:sylar::ZKClient	access:public
sylar::ZKClient::watcher_callback2	sylar/sylar/zk_client.h	/^    typedef std::function<void(int type, int stat, const std::string& path)> watcher_callback2;$/;"	t	class:sylar::ZKClient	access:private
sylar::ZKClient::~ZKClient	sylar/sylar/zk_client.cc	/^ZKClient::~ZKClient() {$/;"	f	class:sylar::ZKClient	signature:()
sylar::ZKClient::~ZKClient	sylar/sylar/zk_client.h	/^    ~ZKClient();$/;"	p	class:sylar::ZKClient	access:public	signature:()
sylar::ZKServiceDiscovery	sylar/sylar/streams/service_discovery.h	/^class ZKServiceDiscovery : public IServiceDiscovery$/;"	c	namespace:sylar	inherits:IServiceDiscovery,std::enable_shared_from_this<ZKServiceDiscovery>
sylar::ZKServiceDiscovery::ZKServiceDiscovery	sylar/sylar/streams/service_discovery.cc	/^ZKServiceDiscovery::ZKServiceDiscovery(const std::string& hosts)$/;"	f	class:sylar::ZKServiceDiscovery	signature:(const std::string & hosts)
sylar::ZKServiceDiscovery::ZKServiceDiscovery	sylar/sylar/streams/service_discovery.h	/^    ZKServiceDiscovery(const std::string& hosts);$/;"	p	class:sylar::ZKServiceDiscovery	access:public	signature:(const std::string & hosts)
sylar::ZKServiceDiscovery::existsOrCreate	sylar/sylar/streams/service_discovery.cc	/^bool ZKServiceDiscovery::existsOrCreate(const std::string& path) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:bool	signature:(const std::string & path)
sylar::ZKServiceDiscovery::existsOrCreate	sylar/sylar/streams/service_discovery.h	/^    bool existsOrCreate(const std::string& path);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:bool	access:private	signature:(const std::string & path)
sylar::ZKServiceDiscovery::getChildren	sylar/sylar/streams/service_discovery.cc	/^bool ZKServiceDiscovery::getChildren(const std::string& path) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:bool	signature:(const std::string & path)
sylar::ZKServiceDiscovery::getChildren	sylar/sylar/streams/service_discovery.h	/^    bool getChildren(const std::string& path);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:bool	access:private	signature:(const std::string & path)
sylar::ZKServiceDiscovery::getSelfData	sylar/sylar/streams/service_discovery.h	/^    const std::string& getSelfData() const { return m_selfData;}$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:const std::string &	access:public	signature:() const
sylar::ZKServiceDiscovery::getSelfInfo	sylar/sylar/streams/service_discovery.h	/^    const std::string& getSelfInfo() const { return m_selfInfo;}$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:const std::string &	access:public	signature:() const
sylar::ZKServiceDiscovery::m_client	sylar/sylar/streams/service_discovery.h	/^    ZKClient::ptr m_client;$/;"	m	class:sylar::ZKServiceDiscovery	typeref:typename:ZKClient::ptr	access:private
sylar::ZKServiceDiscovery::m_hosts	sylar/sylar/streams/service_discovery.h	/^    std::string m_hosts;$/;"	m	class:sylar::ZKServiceDiscovery	typeref:typename:std::string	access:private
sylar::ZKServiceDiscovery::m_isOnTimer	sylar/sylar/streams/service_discovery.h	/^    bool m_isOnTimer = false;$/;"	m	class:sylar::ZKServiceDiscovery	typeref:typename:bool	access:private
sylar::ZKServiceDiscovery::m_selfData	sylar/sylar/streams/service_discovery.h	/^    std::string m_selfData;$/;"	m	class:sylar::ZKServiceDiscovery	typeref:typename:std::string	access:private
sylar::ZKServiceDiscovery::m_selfInfo	sylar/sylar/streams/service_discovery.h	/^    std::string m_selfInfo;$/;"	m	class:sylar::ZKServiceDiscovery	typeref:typename:std::string	access:private
sylar::ZKServiceDiscovery::m_timer	sylar/sylar/streams/service_discovery.h	/^    sylar::Timer::ptr m_timer;$/;"	m	class:sylar::ZKServiceDiscovery	typeref:typename:sylar::Timer::ptr	access:private
sylar::ZKServiceDiscovery::onWatch	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::onWatch(int type, int stat, const std::string& path, ZKClient::ptr clie/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:(int type,int stat,const std::string & path,ZKClient::ptr client)
sylar::ZKServiceDiscovery::onWatch	sylar/sylar/streams/service_discovery.h	/^    void onWatch(int type, int stat, const std::string& path, ZKClient::ptr);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:private	signature:(int type,int stat,const std::string & path,ZKClient::ptr)
sylar::ZKServiceDiscovery::onZKChanged	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::onZKChanged(const std::string& path, ZKClient::ptr client) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:(const std::string & path,ZKClient::ptr client)
sylar::ZKServiceDiscovery::onZKChanged	sylar/sylar/streams/service_discovery.h	/^    void onZKChanged(const std::string& path, ZKClient::ptr client);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:private	signature:(const std::string & path,ZKClient::ptr client)
sylar::ZKServiceDiscovery::onZKChild	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::onZKChild(const std::string& path, ZKClient::ptr client) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:(const std::string & path,ZKClient::ptr client)
sylar::ZKServiceDiscovery::onZKChild	sylar/sylar/streams/service_discovery.h	/^    void onZKChild(const std::string& path, ZKClient::ptr client);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:private	signature:(const std::string & path,ZKClient::ptr client)
sylar::ZKServiceDiscovery::onZKConnect	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::onZKConnect(const std::string& path, ZKClient::ptr client) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:(const std::string & path,ZKClient::ptr client)
sylar::ZKServiceDiscovery::onZKConnect	sylar/sylar/streams/service_discovery.h	/^    void onZKConnect(const std::string& path, ZKClient::ptr client);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:private	signature:(const std::string & path,ZKClient::ptr client)
sylar::ZKServiceDiscovery::onZKDeleted	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::onZKDeleted(const std::string& path, ZKClient::ptr client) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:(const std::string & path,ZKClient::ptr client)
sylar::ZKServiceDiscovery::onZKDeleted	sylar/sylar/streams/service_discovery.h	/^    void onZKDeleted(const std::string& path, ZKClient::ptr client);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:private	signature:(const std::string & path,ZKClient::ptr client)
sylar::ZKServiceDiscovery::onZKExpiredSession	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::onZKExpiredSession(const std::string& path, ZKClient::ptr client) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:(const std::string & path,ZKClient::ptr client)
sylar::ZKServiceDiscovery::onZKExpiredSession	sylar/sylar/streams/service_discovery.h	/^    void onZKExpiredSession(const std::string& path, ZKClient::ptr client);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:private	signature:(const std::string & path,ZKClient::ptr client)
sylar::ZKServiceDiscovery::ptr	sylar/sylar/streams/service_discovery.h	/^    typedef std::shared_ptr<ZKServiceDiscovery> ptr;$/;"	t	class:sylar::ZKServiceDiscovery	typeref:typename:std::shared_ptr<ZKServiceDiscovery>	access:public
sylar::ZKServiceDiscovery::queryData	sylar/sylar/streams/service_discovery.cc	/^bool ZKServiceDiscovery::queryData(const std::string& domain, const std::string& service) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:bool	signature:(const std::string & domain,const std::string & service)
sylar::ZKServiceDiscovery::queryData	sylar/sylar/streams/service_discovery.h	/^    bool queryData(const std::string& domain, const std::string& service);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:bool	access:private	signature:(const std::string & domain,const std::string & service)
sylar::ZKServiceDiscovery::queryInfo	sylar/sylar/streams/service_discovery.cc	/^bool ZKServiceDiscovery::queryInfo(const std::string& domain, const std::string& service) {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:bool	signature:(const std::string & domain,const std::string & service)
sylar::ZKServiceDiscovery::queryInfo	sylar/sylar/streams/service_discovery.h	/^    bool queryInfo(const std::string& domain, const std::string& service);$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:bool	access:private	signature:(const std::string & domain,const std::string & service)
sylar::ZKServiceDiscovery::registerInfo	sylar/sylar/streams/service_discovery.cc	/^bool ZKServiceDiscovery::registerInfo(const std::string& domain, const std::string& service, $/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:bool	signature:(const std::string & domain,const std::string & service,const std::string & ip_and_port,const std::string & data)
sylar::ZKServiceDiscovery::registerInfo	sylar/sylar/streams/service_discovery.h	/^    bool registerInfo(const std::string& domain, const std::string& service, $/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:bool	access:private	signature:(const std::string & domain,const std::string & service,const std::string & ip_and_port,const std::string & data)
sylar::ZKServiceDiscovery::setSelfData	sylar/sylar/streams/service_discovery.h	/^    void setSelfData(const std::string& v) { m_selfData = v;}$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::ZKServiceDiscovery::setSelfInfo	sylar/sylar/streams/service_discovery.h	/^    void setSelfInfo(const std::string& v) { m_selfInfo = v;}$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::ZKServiceDiscovery::start	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::start() {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:()
sylar::ZKServiceDiscovery::start	sylar/sylar/streams/service_discovery.h	/^    virtual void start();$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:public	signature:()
sylar::ZKServiceDiscovery::stop	sylar/sylar/streams/service_discovery.cc	/^void ZKServiceDiscovery::stop() {$/;"	f	class:sylar::ZKServiceDiscovery	typeref:typename:void	signature:()
sylar::ZKServiceDiscovery::stop	sylar/sylar/streams/service_discovery.h	/^    virtual void stop();$/;"	p	class:sylar::ZKServiceDiscovery	typeref:typename:void	access:public	signature:()
sylar::ZlibStream	sylar/sylar/streams/zlib_stream.h	/^class ZlibStream : public Stream {$/;"	c	namespace:sylar	inherits:Stream
sylar::ZlibStream::BEST_COMPRESSION	sylar/sylar/streams/zlib_stream.h	/^        BEST_COMPRESSION = Z_BEST_COMPRESSION,$/;"	e	enum:sylar::ZlibStream::CompressLevel	access:public
sylar::ZlibStream::BEST_SPEED	sylar/sylar/streams/zlib_stream.h	/^        BEST_SPEED = Z_BEST_SPEED,$/;"	e	enum:sylar::ZlibStream::CompressLevel	access:public
sylar::ZlibStream::CompressLevel	sylar/sylar/streams/zlib_stream.h	/^    enum CompressLevel {$/;"	g	class:sylar::ZlibStream	access:public
sylar::ZlibStream::Create	sylar/sylar/streams/zlib_stream.cc	/^ZlibStream::ptr ZlibStream::Create(bool encode, uint32_t buff_size,$/;"	f	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	signature:(bool encode,uint32_t buff_size,Type type,int level,int window_bits,int memlevel,Strategy strategy)
sylar::ZlibStream::Create	sylar/sylar/streams/zlib_stream.h	/^    static ZlibStream::ptr Create(bool encode, uint32_t buff_size = 4096,$/;"	p	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	access:public	signature:(bool encode,uint32_t buff_size=4096,Type type=DEFLATE,int level=DEFAULT_COMPRESSION,int window_bits=15,int memlevel=8,Strategy strategy=DEFAULT)
sylar::ZlibStream::CreateDeflate	sylar/sylar/streams/zlib_stream.cc	/^ZlibStream::ptr ZlibStream::CreateDeflate(bool encode, uint32_t buff_size) {$/;"	f	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	signature:(bool encode,uint32_t buff_size)
sylar::ZlibStream::CreateDeflate	sylar/sylar/streams/zlib_stream.h	/^    static ZlibStream::ptr CreateDeflate(bool encode, uint32_t buff_size = 4096);$/;"	p	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	access:public	signature:(bool encode,uint32_t buff_size=4096)
sylar::ZlibStream::CreateGzip	sylar/sylar/streams/zlib_stream.cc	/^ZlibStream::ptr ZlibStream::CreateGzip(bool encode, uint32_t buff_size) {$/;"	f	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	signature:(bool encode,uint32_t buff_size)
sylar::ZlibStream::CreateGzip	sylar/sylar/streams/zlib_stream.h	/^    static ZlibStream::ptr CreateGzip(bool encode, uint32_t buff_size = 4096);$/;"	p	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	access:public	signature:(bool encode,uint32_t buff_size=4096)
sylar::ZlibStream::CreateZlib	sylar/sylar/streams/zlib_stream.cc	/^ZlibStream::ptr ZlibStream::CreateZlib(bool encode, uint32_t buff_size) {$/;"	f	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	signature:(bool encode,uint32_t buff_size)
sylar::ZlibStream::CreateZlib	sylar/sylar/streams/zlib_stream.h	/^    static ZlibStream::ptr CreateZlib(bool encode, uint32_t buff_size = 4096);$/;"	p	class:sylar::ZlibStream	typeref:typename:ZlibStream::ptr	access:public	signature:(bool encode,uint32_t buff_size=4096)
sylar::ZlibStream::DEFAULT	sylar/sylar/streams/zlib_stream.h	/^        DEFAULT = Z_DEFAULT_STRATEGY,$/;"	e	enum:sylar::ZlibStream::Strategy	access:public
sylar::ZlibStream::DEFAULT_COMPRESSION	sylar/sylar/streams/zlib_stream.h	/^        DEFAULT_COMPRESSION = Z_DEFAULT_COMPRESSION$/;"	e	enum:sylar::ZlibStream::CompressLevel	access:public
sylar::ZlibStream::DEFLATE	sylar/sylar/streams/zlib_stream.h	/^        DEFLATE,$/;"	e	enum:sylar::ZlibStream::Type	access:public
sylar::ZlibStream::FILTERED	sylar/sylar/streams/zlib_stream.h	/^        FILTERED = Z_FILTERED,$/;"	e	enum:sylar::ZlibStream::Strategy	access:public
sylar::ZlibStream::FIXED	sylar/sylar/streams/zlib_stream.h	/^        FIXED = Z_FIXED,$/;"	e	enum:sylar::ZlibStream::Strategy	access:public
sylar::ZlibStream::GZIP	sylar/sylar/streams/zlib_stream.h	/^        GZIP$/;"	e	enum:sylar::ZlibStream::Type	access:public
sylar::ZlibStream::HUFFMAN	sylar/sylar/streams/zlib_stream.h	/^        HUFFMAN = Z_HUFFMAN_ONLY,$/;"	e	enum:sylar::ZlibStream::Strategy	access:public
sylar::ZlibStream::NO_COMPRESSION	sylar/sylar/streams/zlib_stream.h	/^        NO_COMPRESSION = Z_NO_COMPRESSION,$/;"	e	enum:sylar::ZlibStream::CompressLevel	access:public
sylar::ZlibStream::RLE	sylar/sylar/streams/zlib_stream.h	/^        RLE = Z_RLE$/;"	e	enum:sylar::ZlibStream::Strategy	access:public
sylar::ZlibStream::Strategy	sylar/sylar/streams/zlib_stream.h	/^    enum Strategy {$/;"	g	class:sylar::ZlibStream	access:public
sylar::ZlibStream::Type	sylar/sylar/streams/zlib_stream.h	/^    enum Type {$/;"	g	class:sylar::ZlibStream	access:public
sylar::ZlibStream::ZLIB	sylar/sylar/streams/zlib_stream.h	/^        ZLIB,$/;"	e	enum:sylar::ZlibStream::Type	access:public
sylar::ZlibStream::ZlibStream	sylar/sylar/streams/zlib_stream.cc	/^ZlibStream::ZlibStream(bool encode, uint32_t buff_size)$/;"	f	class:sylar::ZlibStream	signature:(bool encode,uint32_t buff_size)
sylar::ZlibStream::ZlibStream	sylar/sylar/streams/zlib_stream.h	/^    ZlibStream(bool encode, uint32_t buff_size = 4096);$/;"	p	class:sylar::ZlibStream	access:public	signature:(bool encode,uint32_t buff_size=4096)
sylar::ZlibStream::close	sylar/sylar/streams/zlib_stream.cc	/^void ZlibStream::close() {$/;"	f	class:sylar::ZlibStream	typeref:typename:void	signature:()
sylar::ZlibStream::close	sylar/sylar/streams/zlib_stream.h	/^    virtual void close() override;$/;"	p	class:sylar::ZlibStream	typeref:typename:void	access:public	signature:()
sylar::ZlibStream::decode	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::decode(const iovec* v, const uint64_t& size, bool finish) {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(const iovec * v,const uint64_t & size,bool finish)
sylar::ZlibStream::decode	sylar/sylar/streams/zlib_stream.h	/^    int decode(const iovec* v, const uint64_t& size, bool finish);$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:private	signature:(const iovec * v,const uint64_t & size,bool finish)
sylar::ZlibStream::encode	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::encode(const iovec* v, const uint64_t& size, bool finish) {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(const iovec * v,const uint64_t & size,bool finish)
sylar::ZlibStream::encode	sylar/sylar/streams/zlib_stream.h	/^    int encode(const iovec* v, const uint64_t& size, bool finish);$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:private	signature:(const iovec * v,const uint64_t & size,bool finish)
sylar::ZlibStream::flush	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::flush() {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:()
sylar::ZlibStream::flush	sylar/sylar/streams/zlib_stream.h	/^    int flush();$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:public	signature:()
sylar::ZlibStream::getBuffers	sylar/sylar/streams/zlib_stream.h	/^    std::vector<iovec>& getBuffers() { return m_buffs;}$/;"	f	class:sylar::ZlibStream	typeref:typename:std::vector<iovec> &	access:public	signature:()
sylar::ZlibStream::getByteArray	sylar/sylar/streams/zlib_stream.cc	/^sylar::ByteArray::ptr ZlibStream::getByteArray() {$/;"	f	class:sylar::ZlibStream	typeref:typename:sylar::ByteArray::ptr	signature:()
sylar::ZlibStream::getByteArray	sylar/sylar/streams/zlib_stream.h	/^    sylar::ByteArray::ptr getByteArray();$/;"	p	class:sylar::ZlibStream	typeref:typename:sylar::ByteArray::ptr	access:public	signature:()
sylar::ZlibStream::getResult	sylar/sylar/streams/zlib_stream.cc	/^std::string ZlibStream::getResult() const {$/;"	f	class:sylar::ZlibStream	typeref:typename:std::string	signature:() const
sylar::ZlibStream::getResult	sylar/sylar/streams/zlib_stream.h	/^    std::string getResult() const;$/;"	p	class:sylar::ZlibStream	typeref:typename:std::string	access:public	signature:() const
sylar::ZlibStream::init	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::init(Type type, int level, int window_bits$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(Type type,int level,int window_bits,int memlevel,Strategy strategy)
sylar::ZlibStream::init	sylar/sylar/streams/zlib_stream.h	/^    int init(Type type = DEFLATE, int level = DEFAULT_COMPRESSION$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:private	signature:(Type type=DEFLATE,int level=DEFAULT_COMPRESSION,int window_bits=15,int memlevel=8,Strategy strategy=DEFAULT)
sylar::ZlibStream::isEncode	sylar/sylar/streams/zlib_stream.h	/^    bool isEncode() const { return m_encode;}$/;"	f	class:sylar::ZlibStream	typeref:typename:bool	access:public	signature:() const
sylar::ZlibStream::isFree	sylar/sylar/streams/zlib_stream.h	/^    bool isFree() const { return m_free;}$/;"	f	class:sylar::ZlibStream	typeref:typename:bool	access:public	signature:() const
sylar::ZlibStream::m_buffSize	sylar/sylar/streams/zlib_stream.h	/^    uint32_t m_buffSize;$/;"	m	class:sylar::ZlibStream	typeref:typename:uint32_t	access:private
sylar::ZlibStream::m_buffs	sylar/sylar/streams/zlib_stream.h	/^    std::vector<iovec> m_buffs;$/;"	m	class:sylar::ZlibStream	typeref:typename:std::vector<iovec>	access:private
sylar::ZlibStream::m_encode	sylar/sylar/streams/zlib_stream.h	/^    bool m_encode;$/;"	m	class:sylar::ZlibStream	typeref:typename:bool	access:private
sylar::ZlibStream::m_free	sylar/sylar/streams/zlib_stream.h	/^    bool m_free;$/;"	m	class:sylar::ZlibStream	typeref:typename:bool	access:private
sylar::ZlibStream::m_zstream	sylar/sylar/streams/zlib_stream.h	/^    z_stream m_zstream;$/;"	m	class:sylar::ZlibStream	typeref:typename:z_stream	access:private
sylar::ZlibStream::ptr	sylar/sylar/streams/zlib_stream.h	/^    typedef std::shared_ptr<ZlibStream> ptr;$/;"	t	class:sylar::ZlibStream	typeref:typename:std::shared_ptr<ZlibStream>	access:public
sylar::ZlibStream::read	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::read(ByteArray::ptr ba, size_t length) {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(ByteArray::ptr ba,size_t length)
sylar::ZlibStream::read	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::read(void* buffer, size_t length) {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(void * buffer,size_t length)
sylar::ZlibStream::read	sylar/sylar/streams/zlib_stream.h	/^    virtual int read(ByteArray::ptr ba, size_t length) override;$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
sylar::ZlibStream::read	sylar/sylar/streams/zlib_stream.h	/^    virtual int read(void* buffer, size_t length) override;$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:public	signature:(void * buffer,size_t length)
sylar::ZlibStream::setEndcode	sylar/sylar/streams/zlib_stream.h	/^    void setEndcode(bool v) { m_encode = v;}$/;"	f	class:sylar::ZlibStream	typeref:typename:void	access:public	signature:(bool v)
sylar::ZlibStream::setFree	sylar/sylar/streams/zlib_stream.h	/^    void setFree(bool v) { m_free = v;}$/;"	f	class:sylar::ZlibStream	typeref:typename:void	access:public	signature:(bool v)
sylar::ZlibStream::write	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::write(ByteArray::ptr ba, size_t length) {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(ByteArray::ptr ba,size_t length)
sylar::ZlibStream::write	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::write(const void* buffer, size_t length) {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(const void * buffer,size_t length)
sylar::ZlibStream::write	sylar/sylar/streams/zlib_stream.h	/^    virtual int write(ByteArray::ptr ba, size_t length) override;$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
sylar::ZlibStream::write	sylar/sylar/streams/zlib_stream.h	/^    virtual int write(const void* buffer, size_t length) override;$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:public	signature:(const void * buffer,size_t length)
sylar::ZlibStream::~ZlibStream	sylar/sylar/streams/zlib_stream.cc	/^ZlibStream::~ZlibStream() {$/;"	f	class:sylar::ZlibStream	signature:()
sylar::ZlibStream::~ZlibStream	sylar/sylar/streams/zlib_stream.h	/^    ~ZlibStream();$/;"	p	class:sylar::ZlibStream	access:public	signature:()
sylar::_GetIPv4	sylar/sylar/util.cc	/^std::string _GetIPv4() {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:()
sylar::_HookIniter	sylar/sylar/hook.cc	/^struct _HookIniter {$/;"	s	namespace:sylar	file:
sylar::_HookIniter::_HookIniter	sylar/sylar/hook.cc	/^    _HookIniter() {$/;"	f	struct:sylar::_HookIniter	file:	access:public	signature:()
sylar::__anon2ac126f80110	sylar/sylar/util/crypto_util.cc	/^namespace {$/;"	n	namespace:sylar	file:
sylar::__anonb8e76c1a0110	sylar/sylar/db/mysql.h	/^namespace {$/;"	n	namespace:sylar
sylar::__anonb8e76c1a0110::MySQLBinder	sylar/sylar/db/mysql.h	/^struct MySQLBinder {$/;"	s	namespace:sylar::__anonb8e76c1a0110
sylar::__anonb8e76c1a0110::MySQLBinder::Bind	sylar/sylar/db/mysql.h	/^    static int Bind(std::shared_ptr<MySQLStmt> stmt) { return 0; }$/;"	f	struct:sylar::__anonb8e76c1a0110::MySQLBinder	typeref:typename:int	access:public	signature:(std::shared_ptr<MySQLStmt> stmt)
sylar::__anonb8e76c1a0110::bindX	sylar/sylar/db/mysql.h	/^int bindX(MySQLStmt::ptr stmt, Args&... args) {$/;"	f	namespace:sylar::__anonb8e76c1a0110	typeref:typename:int	signature:(MySQLStmt::ptr stmt,Args &...args)
sylar::__anonb8e76c1a0210	sylar/sylar/db/mysql.h	/^namespace {$/;"	n	namespace:sylar
sylar::__anonb8e76c1a0210::MySQLBinder	sylar/sylar/db/mysql.h	/^struct MySQLBinder<N, Head, Tail...> {$/;"	s	namespace:sylar::__anonb8e76c1a0210
sylar::__anonb8e76c1a0210::MySQLBinder::Bind	sylar/sylar/db/mysql.h	/^    static int Bind(MySQLStmt::ptr stmt$/;"	f	struct:sylar::__anonb8e76c1a0210::MySQLBinder	typeref:typename:int	access:public	signature:(MySQLStmt::ptr stmt,const Head &,Tail &...)
sylar::__anonb8e76c1a0210::XX	sylar/sylar/db/mysql.h	/^XX(char*, char*);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(char *,char *)
sylar::__anonb8e76c1a0210::XX	sylar/sylar/db/mysql.h	/^XX(const char*, char*);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(const char *,char *)
sylar::__anonb8e76c1a0210::XX	sylar/sylar/db/mysql.h	/^XX(double, double&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(double,double &)
sylar::__anonb8e76c1a0210::XX	sylar/sylar/db/mysql.h	/^XX(float, float&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(float,float &)
sylar::__anonb8e76c1a0210::XX	sylar/sylar/db/mysql.h	/^XX(int16_t, int16_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(int16_t,int16_t &)
sylar::__anonb8e76c1a0210::XX	sylar/sylar/db/mysql.h	/^XX(int32_t, int32_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(int32_t,int32_t &)
sylar::__anonb8e76c1a0210::XX	sylar/sylar/db/mysql.h	/^XX(int64_t, int64_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(int64_t,int64_t &)
sylar::__anonb8e76c1a0210::XX	sylar/sylar/db/mysql.h	/^XX(int8_t, int8_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(int8_t,int8_t &)
sylar::__anonb8e76c1a0210::XX	sylar/sylar/db/mysql.h	/^XX(std::string, std::string&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(std::string,std::string &)
sylar::__anonb8e76c1a0210::XX	sylar/sylar/db/mysql.h	/^XX(uint16_t, uint16_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(uint16_t,uint16_t &)
sylar::__anonb8e76c1a0210::XX	sylar/sylar/db/mysql.h	/^XX(uint32_t, uint32_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(uint32_t,uint32_t &)
sylar::__anonb8e76c1a0210::XX	sylar/sylar/db/mysql.h	/^XX(uint64_t, uint64_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(uint64_t,uint64_t &)
sylar::__anonb8e76c1a0210::XX	sylar/sylar/db/mysql.h	/^XX(uint8_t, uint8_t&);$/;"	p	namespace:sylar::__anonb8e76c1a0210	signature:(uint8_t,uint8_t &)
sylar::__anonbc7bfd090110	sylar/sylar/db/sqlite3.h	/^namespace {$/;"	n	namespace:sylar
sylar::__anonbc7bfd090110::SQLite3Binder	sylar/sylar/db/sqlite3.h	/^struct SQLite3Binder {$/;"	s	namespace:sylar::__anonbc7bfd090110
sylar::__anonbc7bfd090110::SQLite3Binder::Bind	sylar/sylar/db/sqlite3.h	/^    static int Bind(std::shared_ptr<SQLite3Stmt> stmt) { return SQLITE_OK; }$/;"	f	struct:sylar::__anonbc7bfd090110::SQLite3Binder	typeref:typename:int	access:public	signature:(std::shared_ptr<SQLite3Stmt> stmt)
sylar::__anonbc7bfd090210	sylar/sylar/db/sqlite3.h	/^namespace {$/;"	n	namespace:sylar
sylar::__anonbc7bfd090210::bindX	sylar/sylar/db/sqlite3.h	/^int bindX(SQLite3Stmt::ptr stmt, const Args&... args) {$/;"	f	namespace:sylar::__anonbc7bfd090210	typeref:typename:int	signature:(SQLite3Stmt::ptr stmt,const Args &...args)
sylar::__anonbc7bfd090310	sylar/sylar/db/sqlite3.h	/^namespace {$/;"	n	namespace:sylar
sylar::__anonbc7bfd090310::SQLite3Binder	sylar/sylar/db/sqlite3.h	/^struct SQLite3Binder<N, Head, Tail...> {$/;"	s	namespace:sylar::__anonbc7bfd090310
sylar::__anonbc7bfd090310::SQLite3Binder::Bind	sylar/sylar/db/sqlite3.h	/^    static int Bind(SQLite3Stmt::ptr stmt$/;"	f	struct:sylar::__anonbc7bfd090310::SQLite3Binder	typeref:typename:int	access:public	signature:(SQLite3Stmt::ptr stmt,const Head &,const Tail &...)
sylar::__anonbc7bfd090310::XX	sylar/sylar/db/sqlite3.h	/^XX(char*, char* const);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(char *,char * const)
sylar::__anonbc7bfd090310::XX	sylar/sylar/db/sqlite3.h	/^XX(const char*, char* const);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(const char *,char * const)
sylar::__anonbc7bfd090310::XX	sylar/sylar/db/sqlite3.h	/^XX(double, double);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(double,double)
sylar::__anonbc7bfd090310::XX	sylar/sylar/db/sqlite3.h	/^XX(float, double);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(float,double)
sylar::__anonbc7bfd090310::XX	sylar/sylar/db/sqlite3.h	/^XX(int16_t, int32_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(int16_t,int32_t)
sylar::__anonbc7bfd090310::XX	sylar/sylar/db/sqlite3.h	/^XX(int32_t, int32_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(int32_t,int32_t)
sylar::__anonbc7bfd090310::XX	sylar/sylar/db/sqlite3.h	/^XX(int64_t, int64_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(int64_t,int64_t)
sylar::__anonbc7bfd090310::XX	sylar/sylar/db/sqlite3.h	/^XX(int8_t, int32_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(int8_t,int32_t)
sylar::__anonbc7bfd090310::XX	sylar/sylar/db/sqlite3.h	/^XX(std::string, std::string);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(std::string,std::string)
sylar::__anonbc7bfd090310::XX	sylar/sylar/db/sqlite3.h	/^XX(uint16_t, int32_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(uint16_t,int32_t)
sylar::__anonbc7bfd090310::XX	sylar/sylar/db/sqlite3.h	/^XX(uint32_t, int32_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(uint32_t,int32_t)
sylar::__anonbc7bfd090310::XX	sylar/sylar/db/sqlite3.h	/^XX(uint64_t, int64_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(uint64_t,int64_t)
sylar::__anonbc7bfd090310::XX	sylar/sylar/db/sqlite3.h	/^XX(uint8_t, int32_t);$/;"	p	namespace:sylar::__anonbc7bfd090310	signature:(uint8_t,int32_t)
sylar::__anonca51b6360110	sylar/sylar/socket.cc	/^namespace {$/;"	n	namespace:sylar	file:
sylar::__anonca51b6360110::_SSLInit	sylar/sylar/socket.cc	/^struct _SSLInit {$/;"	s	namespace:sylar::__anonca51b6360110	file:
sylar::__anonca51b6360110::_SSLInit::_SSLInit	sylar/sylar/socket.cc	/^    _SSLInit() {$/;"	f	struct:sylar::__anonca51b6360110::_SSLInit	file:	access:public	signature:()
sylar::__anonca51b6360110::s_init	sylar/sylar/socket.cc	/^static _SSLInit s_init;$/;"	v	namespace:sylar::__anonca51b6360110	typeref:typename:_SSLInit	file:
sylar::__anond5d4ef180110	sylar/sylar/db/mysql.cc	/^namespace {$/;"	n	namespace:sylar	file:
sylar::__anond5d4ef180110::MySQLThreadIniter	sylar/sylar/db/mysql.cc	/^    struct MySQLThreadIniter {$/;"	s	namespace:sylar::__anond5d4ef180110	file:
sylar::__anond5d4ef180110::MySQLThreadIniter::MySQLThreadIniter	sylar/sylar/db/mysql.cc	/^        MySQLThreadIniter() {$/;"	f	struct:sylar::__anond5d4ef180110::MySQLThreadIniter	file:	access:public	signature:()
sylar::__anond5d4ef180110::MySQLThreadIniter::~MySQLThreadIniter	sylar/sylar/db/mysql.cc	/^        ~MySQLThreadIniter() {$/;"	f	struct:sylar::__anond5d4ef180110::MySQLThreadIniter	file:	access:public	signature:()
sylar::__anonda7e01420110	sylar/sylar/singleton.h	/^namespace {$/;"	n	namespace:sylar
sylar::__anonda7e01420110::GetInstancePtr	sylar/sylar/singleton.h	/^std::shared_ptr<T> GetInstancePtr() {$/;"	f	namespace:sylar::__anonda7e01420110	typeref:typename:std::shared_ptr<T>	signature:()
sylar::__anonda7e01420110::GetInstanceX	sylar/sylar/singleton.h	/^T& GetInstanceX() {$/;"	f	namespace:sylar::__anonda7e01420110	typeref:typename:T &	signature:()
sylar::__log_init	sylar/sylar/log.cc	/^static LogIniter __log_init;$/;"	v	namespace:sylar	typeref:typename:LogIniter	file:
sylar::__lstat	sylar/sylar/util.cc	/^static int __lstat(const char* file, struct stat* st = nullptr) {$/;"	f	namespace:sylar	typeref:typename:int	file:	signature:(const char * file,struct stat * st=nullptr)
sylar::__mkdir	sylar/sylar/util.cc	/^static int __mkdir(const char* dirname) {$/;"	f	namespace:sylar	typeref:typename:int	file:	signature:(const char * dirname)
sylar::base64decode	sylar/sylar/util/hash_util.cc	/^std::string base64decode(const std::string &src) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & src)
sylar::base64decode	sylar/sylar/util/hash_util.h	/^std::string base64decode(const std::string &src);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & src)
sylar::base64encode	sylar/sylar/util/hash_util.cc	/^std::string base64encode(const std::string& data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::base64encode	sylar/sylar/util/hash_util.cc	/^std::string base64encode(const void* data, size_t len) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
sylar::base64encode	sylar/sylar/util/hash_util.h	/^std::string base64encode(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::base64encode	sylar/sylar/util/hash_util.h	/^std::string base64encode(const void *data, size_t len);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
sylar::byteswap	sylar/sylar/endian.h	/^byteswap(T value) {$/;"	f	namespace:sylar	typeref:typename:std::enable_if<sizeof (T)==sizeof (uint16_t),T>::type	signature:(T value)
sylar::byteswap	sylar/sylar/endian.h	/^byteswap(T value) {$/;"	f	namespace:sylar	typeref:typename:std::enable_if<sizeof (T)==sizeof (uint32_t),T>::type	signature:(T value)
sylar::byteswap	sylar/sylar/endian.h	/^byteswap(T value) {$/;"	f	namespace:sylar	typeref:typename:std::enable_if<sizeof (T)==sizeof (uint64_t),T>::type	signature:(T value)
sylar::byteswapOnBigEndian	sylar/sylar/endian.h	/^T byteswapOnBigEndian(T t) {$/;"	f	namespace:sylar	typeref:typename:T	signature:(T t)
sylar::byteswapOnLittleEndian	sylar/sylar/endian.h	/^T byteswapOnLittleEndian(T t) {$/;"	f	namespace:sylar	typeref:typename:T	signature:(T t)
sylar::create_module	sylar/sylar/library.cc	/^typedef Module* (*create_module)();$/;"	t	namespace:sylar	typeref:typename:Module * (*)()	file:
sylar::create_rock_stream	sylar/sylar/rock/rock_stream.cc	/^static SocketStream::ptr create_rock_stream(ServiceItemInfo::ptr info) {$/;"	f	namespace:sylar	typeref:typename:SocketStream::ptr	file:	signature:(ServiceItemInfo::ptr info)
sylar::data_from_hexstring	sylar/sylar/util/hash_util.cc	/^std::string data_from_hexstring(const char *hexstring, size_t length) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const char * hexstring,size_t length)
sylar::data_from_hexstring	sylar/sylar/util/hash_util.cc	/^std::string data_from_hexstring(const std::string &hexstring) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & hexstring)
sylar::data_from_hexstring	sylar/sylar/util/hash_util.cc	/^void data_from_hexstring(const char *hexstring, size_t length, void *output) {$/;"	f	namespace:sylar	typeref:typename:void	signature:(const char * hexstring,size_t length,void * output)
sylar::data_from_hexstring	sylar/sylar/util/hash_util.h	/^std::string data_from_hexstring(const char *hexstring, size_t length);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const char * hexstring,size_t length)
sylar::data_from_hexstring	sylar/sylar/util/hash_util.h	/^std::string data_from_hexstring(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::data_from_hexstring	sylar/sylar/util/hash_util.h	/^void data_from_hexstring(const char *hexstring, size_t length, void *output);$/;"	p	namespace:sylar	typeref:typename:void	signature:(const char * hexstring,size_t length,void * output)
sylar::delete_array	sylar/sylar/util.h	/^void delete_array(T* v) {$/;"	f	namespace:sylar	typeref:typename:void	signature:(T * v)
sylar::demangle	sylar/sylar/util.cc	/^static std::string demangle(const char* str) {$/;"	f	namespace:sylar	typeref:typename:std::string	file:	signature:(const char * str)
sylar::destory_module	sylar/sylar/library.cc	/^typedef void (*destory_module)(Module*);$/;"	t	namespace:sylar	typeref:typename:void (*)(Module *)	file:
sylar::ds	sylar/sylar/ds/array.h	/^namespace ds {$/;"	n	namespace:sylar
sylar::ds	sylar/sylar/ds/bitmap.cc	/^namespace ds {$/;"	n	namespace:sylar	file:
sylar::ds	sylar/sylar/ds/bitmap.h	/^namespace ds {$/;"	n	namespace:sylar
sylar::ds	sylar/sylar/ds/cache_status.h	/^namespace ds {$/;"	n	namespace:sylar
sylar::ds	sylar/sylar/ds/dict.h	/^namespace ds {$/;"	n	namespace:sylar
sylar::ds	sylar/sylar/ds/hash_map.h	/^namespace ds {$/;"	n	namespace:sylar
sylar::ds	sylar/sylar/ds/hash_multimap.h	/^namespace ds {$/;"	n	namespace:sylar
sylar::ds	sylar/sylar/ds/lru_cache.h	/^namespace ds {$/;"	n	namespace:sylar
sylar::ds	sylar/sylar/ds/roaring_bitmap.cc	/^namespace ds {$/;"	n	namespace:sylar	file:
sylar::ds	sylar/sylar/ds/roaring_bitmap.h	/^namespace ds {$/;"	n	namespace:sylar
sylar::ds	sylar/sylar/ds/timed_cache.h	/^namespace ds {$/;"	n	namespace:sylar
sylar::ds	sylar/sylar/ds/timed_lru_cache.h	/^namespace ds {$/;"	n	namespace:sylar
sylar::ds	sylar/sylar/ds/util.cc	/^namespace ds {$/;"	n	namespace:sylar	file:
sylar::ds	sylar/sylar/ds/util.h	/^namespace ds {$/;"	n	namespace:sylar
sylar::ds::Array	sylar/sylar/ds/array.h	/^class Array {$/;"	c	namespace:sylar::ds
sylar::ds::Array::Array	sylar/sylar/ds/array.h	/^    Array(const T* data, const uint64_t size, bool copy)$/;"	f	class:sylar::ds::Array	access:public	signature:(const T * data,const uint64_t size,bool copy)
sylar::ds::Array::Array	sylar/sylar/ds/array.h	/^    Array(const uint64_t size = 0)$/;"	f	class:sylar::ds::Array	access:public	signature:(const uint64_t size=0)
sylar::ds::Array::__anonc90150740102	sylar/sylar/ds/array.h	/^    const T& operator[](uint64_t idx) const {$/;"	f	class:sylar::ds::Array	file:	access:public	signature:(uint64_t idx) 
sylar::ds::Array::append	sylar/sylar/ds/array.h	/^    void append(const T& v) {$/;"	f	class:sylar::ds::Array	typeref:typename:void	access:public	signature:(const T & v)
sylar::ds::Array::at	sylar/sylar/ds/array.h	/^    T& at(uint64_t idx) {$/;"	f	class:sylar::ds::Array	typeref:typename:T &	access:public	signature:(uint64_t idx)
sylar::ds::Array::at	sylar/sylar/ds/array.h	/^    const T& at(uint64_t idx) const {$/;"	f	class:sylar::ds::Array	typeref:typename:const T &	access:public	signature:(uint64_t idx) const
sylar::ds::Array::begin	sylar/sylar/ds/array.h	/^    T* begin() {$/;"	f	class:sylar::ds::Array	typeref:typename:T *	access:public	signature:()
sylar::ds::Array::begin	sylar/sylar/ds/array.h	/^    const T* begin() const {$/;"	f	class:sylar::ds::Array	typeref:typename:const T *	access:public	signature:() const
sylar::ds::Array::data	sylar/sylar/ds/array.h	/^    T* data() {$/;"	f	class:sylar::ds::Array	typeref:typename:T *	access:public	signature:()
sylar::ds::Array::data	sylar/sylar/ds/array.h	/^    const T* data() const {$/;"	f	class:sylar::ds::Array	typeref:typename:const T *	access:public	signature:() const
sylar::ds::Array::end	sylar/sylar/ds/array.h	/^    T* end() {$/;"	f	class:sylar::ds::Array	typeref:typename:T *	access:public	signature:()
sylar::ds::Array::end	sylar/sylar/ds/array.h	/^    const T* end() const {$/;"	f	class:sylar::ds::Array	typeref:typename:const T *	access:public	signature:() const
sylar::ds::Array::erase	sylar/sylar/ds/array.h	/^    bool erase(int64_t idx) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(int64_t idx)
sylar::ds::Array::exists	sylar/sylar/ds/array.h	/^    int64_t exists(const T& v) {$/;"	f	class:sylar::ds::Array	typeref:typename:int64_t	access:public	signature:(const T & v)
sylar::ds::Array::exists	sylar/sylar/ds/array.h	/^    int64_t exists(const T& v, std::function<bool(const T&, const T&)> cmp) {$/;"	f	class:sylar::ds::Array	typeref:typename:int64_t	access:public	signature:(const T & v,std::function<bool (const T &,const T &)> cmp)
sylar::ds::Array::get	sylar/sylar/ds/array.h	/^    const T& get(uint64_t idx) {$/;"	f	class:sylar::ds::Array	typeref:typename:const T &	access:public	signature:(uint64_t idx)
sylar::ds::Array::insert	sylar/sylar/ds/array.h	/^    bool insert(const T& v) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(const T & v)
sylar::ds::Array::insert	sylar/sylar/ds/array.h	/^    bool insert(const T& v, std::function<bool(const T&, const T&)> cmp) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(const T & v,std::function<bool (const T &,const T &)> cmp)
sylar::ds::Array::insert	sylar/sylar/ds/array.h	/^    bool insert(int64_t idx, const T& v) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(int64_t idx,const T & v)
sylar::ds::Array::isSorted	sylar/sylar/ds/array.h	/^    bool isSorted() {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:()
sylar::ds::Array::isSorted	sylar/sylar/ds/array.h	/^    bool isSorted(std::function<bool(const T&, const T&)> cb) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(std::function<bool (const T &,const T &)> cb)
sylar::ds::Array::m_data	sylar/sylar/ds/array.h	/^    T* m_data;$/;"	m	class:sylar::ds::Array	typeref:typename:T *	access:private
sylar::ds::Array::m_size	sylar/sylar/ds/array.h	/^    uint64_t m_size;$/;"	m	class:sylar::ds::Array	typeref:typename:uint64_t	access:private
sylar::ds::Array::operator []	sylar/sylar/ds/array.h	/^    T& operator[](uint64_t idx) {$/;"	f	class:sylar::ds::Array	typeref:typename:T &	access:public	signature:(uint64_t idx)
sylar::ds::Array::operator []	sylar/sylar/ds/array.h	/^    const T& operator[](uint64_t idx) const {$/;"	f	class:sylar::ds::Array	typeref:typename:const T &	access:public	signature:(uint64_t idx) const
sylar::ds::Array::ptr	sylar/sylar/ds/array.h	/^    typedef std::shared_ptr<Array> ptr;$/;"	t	class:sylar::ds::Array	typeref:typename:std::shared_ptr<Array>	access:public
sylar::ds::Array::readFrom	sylar/sylar/ds/array.h	/^    bool readFrom(std::istream& is, uint64_t speed = -1) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(std::istream & is,uint64_t speed=-1)
sylar::ds::Array::size	sylar/sylar/ds/array.h	/^    uint64_t size() const { return m_size;}$/;"	f	class:sylar::ds::Array	typeref:typename:uint64_t	access:public	signature:() const
sylar::ds::Array::sort	sylar/sylar/ds/array.h	/^    void sort() {$/;"	f	class:sylar::ds::Array	typeref:typename:void	access:public	signature:()
sylar::ds::Array::sort	sylar/sylar/ds/array.h	/^    void sort(std::function<bool(const T&, const T&)> cmp) {$/;"	f	class:sylar::ds::Array	typeref:typename:void	access:public	signature:(std::function<bool (const T &,const T &)> cmp)
sylar::ds::Array::writeTo	sylar/sylar/ds/array.h	/^    bool writeTo(std::ostream& os, uint64_t speed = -1) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(std::ostream & os,uint64_t speed=-1)
sylar::ds::Array::~Array	sylar/sylar/ds/array.h	/^    ~Array() {$/;"	f	class:sylar::ds::Array	access:public	signature:()
sylar::ds::BinarySearch	sylar/sylar/ds/util.h	/^T BinarySearch(const T& begin, const T& end, const V& v) {$/;"	f	namespace:sylar::ds	typeref:typename:T	signature:(const T & begin,const T & end,const V & v)
sylar::ds::Bitmap	sylar/sylar/ds/bitmap.h	/^class Bitmap {$/;"	c	namespace:sylar::ds
sylar::ds::Bitmap::Bitmap	sylar/sylar/ds/bitmap.cc	/^Bitmap::Bitmap()$/;"	f	class:sylar::ds::Bitmap	signature:()
sylar::ds::Bitmap::Bitmap	sylar/sylar/ds/bitmap.cc	/^Bitmap::Bitmap(const Bitmap& b) {$/;"	f	class:sylar::ds::Bitmap	signature:(const Bitmap & b)
sylar::ds::Bitmap::Bitmap	sylar/sylar/ds/bitmap.cc	/^Bitmap::Bitmap(uint32_t size, uint8_t def)$/;"	f	class:sylar::ds::Bitmap	signature:(uint32_t size,uint8_t def)
sylar::ds::Bitmap::Bitmap	sylar/sylar/ds/bitmap.h	/^    Bitmap();$/;"	p	class:sylar::ds::Bitmap	access:private	signature:()
sylar::ds::Bitmap::Bitmap	sylar/sylar/ds/bitmap.h	/^    Bitmap(const Bitmap& b);$/;"	p	class:sylar::ds::Bitmap	access:public	signature:(const Bitmap & b)
sylar::ds::Bitmap::Bitmap	sylar/sylar/ds/bitmap.h	/^    Bitmap(uint32_t size, uint8_t def = 0);$/;"	p	class:sylar::ds::Bitmap	access:public	signature:(uint32_t size,uint8_t def=0)
sylar::ds::Bitmap::COMPRESS_MASK	sylar/sylar/ds/bitmap.h	/^    static const base_type COMPRESS_MASK = ((base_type)1 << (sizeof(base_type) * 8 - 1));$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const base_type	access:private
sylar::ds::Bitmap::COUNT_MASK	sylar/sylar/ds/bitmap.h	/^    static const base_type COUNT_MASK = ((base_type)1 << (sizeof(base_type) * 8 - 2)) - 1;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const base_type	access:private
sylar::ds::Bitmap::MASK	sylar/sylar/ds/bitmap.cc	/^Bitmap::base_type Bitmap::MASK[sizeof(base_type) * 8];$/;"	m	class:sylar::ds::Bitmap	typeref:typename:Bitmap::base_type[]
sylar::ds::Bitmap::MASK	sylar/sylar/ds/bitmap.h	/^    static base_type MASK[sizeof(base_type) * 8];$/;"	m	class:sylar::ds::Bitmap	typeref:typename:base_type[]	access:private
sylar::ds::Bitmap::NOT_VALUE_MASK	sylar/sylar/ds/bitmap.h	/^    static const base_type NOT_VALUE_MASK = ~VALUE_MASK;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const base_type	access:private
sylar::ds::Bitmap::NPOS	sylar/sylar/ds/bitmap.cc	/^Bitmap::base_type Bitmap::NPOS[sizeof(base_type) * 8];$/;"	m	class:sylar::ds::Bitmap	typeref:typename:Bitmap::base_type[]
sylar::ds::Bitmap::NPOS	sylar/sylar/ds/bitmap.h	/^    static base_type NPOS[sizeof(base_type) * 8];$/;"	m	class:sylar::ds::Bitmap	typeref:typename:base_type[]	access:private
sylar::ds::Bitmap::POS	sylar/sylar/ds/bitmap.cc	/^Bitmap::base_type Bitmap::POS[sizeof(base_type) * 8];$/;"	m	class:sylar::ds::Bitmap	typeref:typename:Bitmap::base_type[]
sylar::ds::Bitmap::POS	sylar/sylar/ds/bitmap.h	/^    static base_type POS[sizeof(base_type) * 8];$/;"	m	class:sylar::ds::Bitmap	typeref:typename:base_type[]	access:private
sylar::ds::Bitmap::U64_DIV_BASE	sylar/sylar/ds/bitmap.h	/^    static const base_type U64_DIV_BASE = (sizeof(uint64_t) \/ sizeof(base_type));$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const base_type	access:private
sylar::ds::Bitmap::U64_VALUE_SIZE	sylar/sylar/ds/bitmap.h	/^    static const base_type U64_VALUE_SIZE = (VALUE_SIZE * U64_DIV_BASE);$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const base_type	access:private
sylar::ds::Bitmap::VALUE_MASK	sylar/sylar/ds/bitmap.h	/^    static const base_type VALUE_MASK = ((base_type)1 << (sizeof(base_type) * 8 - 2));$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const base_type	access:private
sylar::ds::Bitmap::VALUE_SIZE	sylar/sylar/ds/bitmap.h	/^    static const uint32_t VALUE_SIZE = sizeof(base_type) * 8 - 2;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:const uint32_t	access:private
sylar::ds::Bitmap::any	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::any() const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:() const
sylar::ds::Bitmap::any	sylar/sylar/ds/bitmap.h	/^    bool any() const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:() const
sylar::ds::Bitmap::base_type	sylar/sylar/ds/bitmap.h	/^    typedef uint16_t base_type;$/;"	t	class:sylar::ds::Bitmap	typeref:typename:uint16_t	access:public
sylar::ds::Bitmap::base_type	sylar/sylar/ds/bitmap.h	/^    typedef uint32_t base_type;$/;"	t	class:sylar::ds::Bitmap	typeref:typename:uint32_t	access:public
sylar::ds::Bitmap::base_type	sylar/sylar/ds/bitmap.h	/^    typedef uint64_t base_type;$/;"	t	class:sylar::ds::Bitmap	typeref:typename:uint64_t	access:public
sylar::ds::Bitmap::base_type	sylar/sylar/ds/bitmap.h	/^    typedef uint8_t base_type;$/;"	t	class:sylar::ds::Bitmap	typeref:typename:uint8_t	access:public
sylar::ds::Bitmap::begin	sylar/sylar/ds/bitmap.h	/^    iterator begin() { return iterator(this);}$/;"	f	class:sylar::ds::Bitmap	typeref:typename:iterator	access:public	signature:()
sylar::ds::Bitmap::begin_new	sylar/sylar/ds/bitmap.cc	/^Bitmap::iterator_base::ptr Bitmap::begin_new() {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap::iterator_base::ptr	signature:()
sylar::ds::Bitmap::begin_new	sylar/sylar/ds/bitmap.h	/^    typename iterator_base::ptr begin_new();$/;"	p	class:sylar::ds::Bitmap	typeref:typename:iterator_base::ptr	access:public	signature:()
sylar::ds::Bitmap::compress	sylar/sylar/ds/bitmap.cc	/^Bitmap::ptr Bitmap::compress() const{$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap::ptr	signature:() const
sylar::ds::Bitmap::compress	sylar/sylar/ds/bitmap.h	/^    Bitmap::ptr compress() const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap::ptr	access:public	signature:() const
sylar::ds::Bitmap::compressCross	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::compressCross(const Bitmap& b) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(const Bitmap & b) const
sylar::ds::Bitmap::compressCross	sylar/sylar/ds/bitmap.h	/^    bool compressCross(const Bitmap& b) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:private	signature:(const Bitmap & b) const
sylar::ds::Bitmap::cross	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::cross(const Bitmap& b) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(const Bitmap & b) const
sylar::ds::Bitmap::cross	sylar/sylar/ds/bitmap.h	/^    bool cross(const Bitmap& b) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:(const Bitmap & b) const
sylar::ds::Bitmap::foreach	sylar/sylar/ds/bitmap.cc	/^void Bitmap::foreach(std::function<bool(uint32_t)> cb) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(std::function<bool (uint32_t)> cb)
sylar::ds::Bitmap::foreach	sylar/sylar/ds/bitmap.h	/^    void foreach(std::function<bool(uint32_t)> cb);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(std::function<bool (uint32_t)> cb)
sylar::ds::Bitmap::get	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::get(uint32_t from, uint32_t size, bool v) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(uint32_t from,uint32_t size,bool v) const
sylar::ds::Bitmap::get	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::get(uint32_t idx) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(uint32_t idx) const
sylar::ds::Bitmap::get	sylar/sylar/ds/bitmap.h	/^    bool get(uint32_t from, uint32_t size, bool v) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:(uint32_t from,uint32_t size,bool v) const
sylar::ds::Bitmap::get	sylar/sylar/ds/bitmap.h	/^    bool get(uint32_t idx) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:(uint32_t idx) const
sylar::ds::Bitmap::getCompressRate	sylar/sylar/ds/bitmap.cc	/^float Bitmap::getCompressRate() const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:float	signature:() const
sylar::ds::Bitmap::getCompressRate	sylar/sylar/ds/bitmap.h	/^    float getCompressRate() const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:float	access:public	signature:() const
sylar::ds::Bitmap::getCount	sylar/sylar/ds/bitmap.cc	/^uint32_t Bitmap::getCount() const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:uint32_t	signature:() const
sylar::ds::Bitmap::getCount	sylar/sylar/ds/bitmap.h	/^    uint32_t getCount() const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:uint32_t	access:public	signature:() const
sylar::ds::Bitmap::getDataSize	sylar/sylar/ds/bitmap.h	/^    uint32_t getDataSize() const { return m_dataSize;}$/;"	f	class:sylar::ds::Bitmap	typeref:typename:uint32_t	access:public	signature:() const
sylar::ds::Bitmap::getSize	sylar/sylar/ds/bitmap.h	/^    uint32_t getSize() const { return m_size;}$/;"	f	class:sylar::ds::Bitmap	typeref:typename:uint32_t	access:public	signature:() const
sylar::ds::Bitmap::init	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::init() {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:()
sylar::ds::Bitmap::init	sylar/sylar/ds/bitmap.h	/^    static bool init();$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:()
sylar::ds::Bitmap::isCompress	sylar/sylar/ds/bitmap.h	/^    bool isCompress() const { return m_compress;}$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:() const
sylar::ds::Bitmap::iterator	sylar/sylar/ds/bitmap.h	/^    class iterator : public iterator_base {$/;"	c	class:sylar::ds::Bitmap	inherits:iterator_base	access:public
sylar::ds::Bitmap::iterator::iterator	sylar/sylar/ds/bitmap.cc	/^Bitmap::iterator::iterator(Bitmap* b) {$/;"	f	class:sylar::ds::Bitmap::iterator	signature:(Bitmap * b)
sylar::ds::Bitmap::iterator::iterator	sylar/sylar/ds/bitmap.h	/^        iterator() {}$/;"	f	class:sylar::ds::Bitmap::iterator	access:public	signature:()
sylar::ds::Bitmap::iterator::iterator	sylar/sylar/ds/bitmap.h	/^        iterator(Bitmap* b);$/;"	p	class:sylar::ds::Bitmap::iterator	access:public	signature:(Bitmap * b)
sylar::ds::Bitmap::iterator::next	sylar/sylar/ds/bitmap.cc	/^void Bitmap::iterator::next() {$/;"	f	class:sylar::ds::Bitmap::iterator	typeref:typename:void	signature:()
sylar::ds::Bitmap::iterator::next	sylar/sylar/ds/bitmap.h	/^        void next();$/;"	p	class:sylar::ds::Bitmap::iterator	typeref:typename:void	access:public	signature:()
sylar::ds::Bitmap::iterator_base	sylar/sylar/ds/bitmap.h	/^    class iterator_base {$/;"	c	class:sylar::ds::Bitmap	access:public
sylar::ds::Bitmap::iterator_base::iterator_base	sylar/sylar/ds/bitmap.cc	/^Bitmap::iterator_base::iterator_base()$/;"	f	class:sylar::ds::Bitmap::iterator_base	signature:()
sylar::ds::Bitmap::iterator_base::iterator_base	sylar/sylar/ds/bitmap.h	/^        iterator_base();$/;"	p	class:sylar::ds::Bitmap::iterator_base	access:public	signature:()
sylar::ds::Bitmap::iterator_base::m_compress	sylar/sylar/ds/bitmap.h	/^        bool m_compress;$/;"	m	class:sylar::ds::Bitmap::iterator_base	typeref:typename:bool	access:protected
sylar::ds::Bitmap::iterator_base::m_data	sylar/sylar/ds/bitmap.h	/^        base_type* m_data;$/;"	m	class:sylar::ds::Bitmap::iterator_base	typeref:typename:base_type *	access:protected
sylar::ds::Bitmap::iterator_base::m_dataSize	sylar/sylar/ds/bitmap.h	/^        int32_t m_dataSize;$/;"	m	class:sylar::ds::Bitmap::iterator_base	typeref:typename:int32_t	access:protected
sylar::ds::Bitmap::iterator_base::m_pos	sylar/sylar/ds/bitmap.h	/^        int32_t m_pos;$/;"	m	class:sylar::ds::Bitmap::iterator_base	typeref:typename:int32_t	access:protected
sylar::ds::Bitmap::iterator_base::m_size	sylar/sylar/ds/bitmap.h	/^        int32_t m_size;$/;"	m	class:sylar::ds::Bitmap::iterator_base	typeref:typename:int32_t	access:protected
sylar::ds::Bitmap::iterator_base::next	sylar/sylar/ds/bitmap.h	/^        virtual void next() = 0;$/;"	p	class:sylar::ds::Bitmap::iterator_base	typeref:typename:void	access:public	signature:()
sylar::ds::Bitmap::iterator_base::operator !	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::iterator_base::operator!() {$/;"	f	class:sylar::ds::Bitmap::iterator_base	typeref:typename:bool	signature:()
sylar::ds::Bitmap::iterator_base::operator !	sylar/sylar/ds/bitmap.h	/^        bool operator!();$/;"	p	class:sylar::ds::Bitmap::iterator_base	typeref:typename:bool	access:public	signature:()
sylar::ds::Bitmap::iterator_base::operator *	sylar/sylar/ds/bitmap.cc	/^int32_t Bitmap::iterator_base::operator*() {$/;"	f	class:sylar::ds::Bitmap::iterator_base	typeref:typename:int32_t	signature:()
sylar::ds::Bitmap::iterator_base::operator *	sylar/sylar/ds/bitmap.h	/^        int32_t operator*();$/;"	p	class:sylar::ds::Bitmap::iterator_base	typeref:typename:int32_t	access:public	signature:()
sylar::ds::Bitmap::iterator_base::ptr	sylar/sylar/ds/bitmap.h	/^        typedef std::shared_ptr<iterator_base> ptr;$/;"	t	class:sylar::ds::Bitmap::iterator_base	typeref:typename:std::shared_ptr<iterator_base>	access:public
sylar::ds::Bitmap::iterator_base::~iterator_base	sylar/sylar/ds/bitmap.h	/^        virtual ~iterator_base() {}$/;"	f	class:sylar::ds::Bitmap::iterator_base	access:public	signature:()
sylar::ds::Bitmap::iterator_reverse	sylar/sylar/ds/bitmap.h	/^    class iterator_reverse : public iterator_base {$/;"	c	class:sylar::ds::Bitmap	inherits:iterator_base	access:public
sylar::ds::Bitmap::iterator_reverse::iterator_reverse	sylar/sylar/ds/bitmap.cc	/^Bitmap::iterator_reverse::iterator_reverse(Bitmap* b) {$/;"	f	class:sylar::ds::Bitmap::iterator_reverse	signature:(Bitmap * b)
sylar::ds::Bitmap::iterator_reverse::iterator_reverse	sylar/sylar/ds/bitmap.h	/^        iterator_reverse() {}$/;"	f	class:sylar::ds::Bitmap::iterator_reverse	access:public	signature:()
sylar::ds::Bitmap::iterator_reverse::iterator_reverse	sylar/sylar/ds/bitmap.h	/^        iterator_reverse(Bitmap* b);$/;"	p	class:sylar::ds::Bitmap::iterator_reverse	access:public	signature:(Bitmap * b)
sylar::ds::Bitmap::iterator_reverse::next	sylar/sylar/ds/bitmap.cc	/^void Bitmap::iterator_reverse::next() {$/;"	f	class:sylar::ds::Bitmap::iterator_reverse	typeref:typename:void	signature:()
sylar::ds::Bitmap::iterator_reverse::next	sylar/sylar/ds/bitmap.h	/^        void next();$/;"	p	class:sylar::ds::Bitmap::iterator_reverse	typeref:typename:void	access:public	signature:()
sylar::ds::Bitmap::listPosAsc	sylar/sylar/ds/bitmap.cc	/^void Bitmap::listPosAsc(std::vector<uint32_t>& pos) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(std::vector<uint32_t> & pos)
sylar::ds::Bitmap::listPosAsc	sylar/sylar/ds/bitmap.h	/^    void listPosAsc(std::vector<uint32_t>& pos);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(std::vector<uint32_t> & pos)
sylar::ds::Bitmap::m_compress	sylar/sylar/ds/bitmap.h	/^    bool m_compress;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:bool	access:private
sylar::ds::Bitmap::m_data	sylar/sylar/ds/bitmap.h	/^    base_type* m_data;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:base_type *	access:private
sylar::ds::Bitmap::m_dataSize	sylar/sylar/ds/bitmap.h	/^    uint32_t m_dataSize;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:uint32_t	access:private
sylar::ds::Bitmap::m_size	sylar/sylar/ds/bitmap.h	/^    uint32_t m_size;$/;"	m	class:sylar::ds::Bitmap	typeref:typename:uint32_t	access:private
sylar::ds::Bitmap::normalCross	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::normalCross(const Bitmap& b) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(const Bitmap & b) const
sylar::ds::Bitmap::normalCross	sylar/sylar/ds/bitmap.h	/^    bool normalCross(const Bitmap& b) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:private	signature:(const Bitmap & b) const
sylar::ds::Bitmap::operator !=	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::operator!= (const Bitmap& b) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(const Bitmap & b) const
sylar::ds::Bitmap::operator !=	sylar/sylar/ds/bitmap.h	/^    bool operator!= (const Bitmap& b) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:(const Bitmap & b) const
sylar::ds::Bitmap::operator &	sylar/sylar/ds/bitmap.cc	/^Bitmap Bitmap::operator& (const Bitmap& b) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap	signature:(const Bitmap & b)
sylar::ds::Bitmap::operator &	sylar/sylar/ds/bitmap.h	/^    Bitmap operator& (const Bitmap& b);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap	access:public	signature:(const Bitmap & b)
sylar::ds::Bitmap::operator &=	sylar/sylar/ds/bitmap.cc	/^Bitmap& Bitmap::operator&=(const Bitmap& b) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	signature:(const Bitmap & b)
sylar::ds::Bitmap::operator &=	sylar/sylar/ds/bitmap.h	/^    Bitmap& operator&=(const Bitmap& b);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	access:public	signature:(const Bitmap & b)
sylar::ds::Bitmap::operator =	sylar/sylar/ds/bitmap.cc	/^Bitmap& Bitmap::operator=(const Bitmap& b) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	signature:(const Bitmap & b)
sylar::ds::Bitmap::operator =	sylar/sylar/ds/bitmap.h	/^    Bitmap& operator=(const Bitmap& b);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	access:public	signature:(const Bitmap & b)
sylar::ds::Bitmap::operator ==	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::operator== (const Bitmap& b) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(const Bitmap & b) const
sylar::ds::Bitmap::operator ==	sylar/sylar/ds/bitmap.h	/^    bool operator== (const Bitmap& b) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:(const Bitmap & b) const
sylar::ds::Bitmap::operator |	sylar/sylar/ds/bitmap.cc	/^Bitmap Bitmap::operator| (const Bitmap& b) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap	signature:(const Bitmap & b)
sylar::ds::Bitmap::operator |	sylar/sylar/ds/bitmap.h	/^    Bitmap operator| (const Bitmap& b);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap	access:public	signature:(const Bitmap & b)
sylar::ds::Bitmap::operator |=	sylar/sylar/ds/bitmap.cc	/^Bitmap& Bitmap::operator|=(const Bitmap& b) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	signature:(const Bitmap & b)
sylar::ds::Bitmap::operator |=	sylar/sylar/ds/bitmap.h	/^    Bitmap& operator|=(const Bitmap& b);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	access:public	signature:(const Bitmap & b)
sylar::ds::Bitmap::operator ~	sylar/sylar/ds/bitmap.cc	/^Bitmap& Bitmap::operator~() {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	signature:()
sylar::ds::Bitmap::operator ~	sylar/sylar/ds/bitmap.h	/^    Bitmap& operator~();$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap &	access:public	signature:()
sylar::ds::Bitmap::ptr	sylar/sylar/ds/bitmap.h	/^    typedef std::shared_ptr<Bitmap> ptr;$/;"	t	class:sylar::ds::Bitmap	typeref:typename:std::shared_ptr<Bitmap>	access:public
sylar::ds::Bitmap::rbegin	sylar/sylar/ds/bitmap.h	/^    iterator_reverse rbegin() { return iterator_reverse(this);}$/;"	f	class:sylar::ds::Bitmap	typeref:typename:iterator_reverse	access:public	signature:()
sylar::ds::Bitmap::rbegin_new	sylar/sylar/ds/bitmap.cc	/^Bitmap::iterator_base::ptr Bitmap::rbegin_new() {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap::iterator_base::ptr	signature:()
sylar::ds::Bitmap::rbegin_new	sylar/sylar/ds/bitmap.h	/^    typename iterator_base::ptr rbegin_new();$/;"	p	class:sylar::ds::Bitmap	typeref:typename:iterator_base::ptr	access:public	signature:()
sylar::ds::Bitmap::readFrom	sylar/sylar/ds/bitmap.cc	/^bool Bitmap::readFrom(sylar::ByteArray::ptr ba) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:bool	signature:(sylar::ByteArray::ptr ba)
sylar::ds::Bitmap::readFrom	sylar/sylar/ds/bitmap.h	/^    bool readFrom(sylar::ByteArray::ptr ba);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:bool	access:public	signature:(sylar::ByteArray::ptr ba)
sylar::ds::Bitmap::resize	sylar/sylar/ds/bitmap.cc	/^void Bitmap::resize(uint32_t size, bool v) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(uint32_t size,bool v)
sylar::ds::Bitmap::resize	sylar/sylar/ds/bitmap.h	/^    void resize(uint32_t size, bool v = false);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(uint32_t size,bool v=false)
sylar::ds::Bitmap::rforeach	sylar/sylar/ds/bitmap.cc	/^void Bitmap::rforeach(std::function<bool(uint32_t)> cb) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(std::function<bool (uint32_t)> cb)
sylar::ds::Bitmap::rforeach	sylar/sylar/ds/bitmap.h	/^    void rforeach(std::function<bool(uint32_t)> cb);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(std::function<bool (uint32_t)> cb)
sylar::ds::Bitmap::set	sylar/sylar/ds/bitmap.cc	/^void Bitmap::set(uint32_t from, uint32_t size, bool v) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(uint32_t from,uint32_t size,bool v)
sylar::ds::Bitmap::set	sylar/sylar/ds/bitmap.cc	/^void Bitmap::set(uint32_t idx, bool v) {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(uint32_t idx,bool v)
sylar::ds::Bitmap::set	sylar/sylar/ds/bitmap.h	/^    void set(uint32_t from, uint32_t size, bool v);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(uint32_t from,uint32_t size,bool v)
sylar::ds::Bitmap::set	sylar/sylar/ds/bitmap.h	/^    void set(uint32_t idx, bool v);$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(uint32_t idx,bool v)
sylar::ds::Bitmap::toString	sylar/sylar/ds/bitmap.cc	/^std::string Bitmap::toString() const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:std::string	signature:() const
sylar::ds::Bitmap::toString	sylar/sylar/ds/bitmap.h	/^    std::string toString() const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:std::string	access:public	signature:() const
sylar::ds::Bitmap::uncompress	sylar/sylar/ds/bitmap.cc	/^Bitmap::ptr Bitmap::uncompress() const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap::ptr	signature:() const
sylar::ds::Bitmap::uncompress	sylar/sylar/ds/bitmap.h	/^    Bitmap::ptr uncompress() const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap::ptr	access:public	signature:() const
sylar::ds::Bitmap::writeTo	sylar/sylar/ds/bitmap.cc	/^void Bitmap::writeTo(sylar::ByteArray::ptr ba) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(sylar::ByteArray::ptr ba) const
sylar::ds::Bitmap::writeTo	sylar/sylar/ds/bitmap.h	/^    void writeTo(sylar::ByteArray::ptr ba) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(sylar::ByteArray::ptr ba) const
sylar::ds::Bitmap::~Bitmap	sylar/sylar/ds/bitmap.cc	/^Bitmap::~Bitmap() {$/;"	f	class:sylar::ds::Bitmap	signature:()
sylar::ds::Bitmap::~Bitmap	sylar/sylar/ds/bitmap.h	/^    ~Bitmap();$/;"	p	class:sylar::ds::Bitmap	access:public	signature:()
sylar::ds::CacheStatus	sylar/sylar/ds/cache_status.h	/^class CacheStatus {$/;"	c	namespace:sylar::ds
sylar::ds::CacheStatus::CacheStatus	sylar/sylar/ds/cache_status.h	/^    CacheStatus() {}$/;"	f	class:sylar::ds::CacheStatus	access:public	signature:()
sylar::ds::CacheStatus::decDel	sylar/sylar/ds/cache_status.h	/^    int64_t decDel(int64_t v = 1) { return Atomic::subFetch(m_del, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
sylar::ds::CacheStatus::decGet	sylar/sylar/ds/cache_status.h	/^    int64_t decGet(int64_t v = 1) { return Atomic::subFetch(m_get, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
sylar::ds::CacheStatus::decHit	sylar/sylar/ds/cache_status.h	/^    int64_t decHit(int64_t v = 1) { return Atomic::subFetch(m_hit, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
sylar::ds::CacheStatus::decPrune	sylar/sylar/ds/cache_status.h	/^    int64_t decPrune(int64_t v = 1) { return Atomic::subFetch(m_prune, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
sylar::ds::CacheStatus::decSet	sylar/sylar/ds/cache_status.h	/^    int64_t decSet(int64_t v = 1) { return Atomic::subFetch(m_set, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
sylar::ds::CacheStatus::decTimeout	sylar/sylar/ds/cache_status.h	/^    int64_t decTimeout(int64_t v = 1) { return Atomic::subFetch(m_timeout, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
sylar::ds::CacheStatus::getDel	sylar/sylar/ds/cache_status.h	/^    int64_t getDel() const { return m_del;}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:() const
sylar::ds::CacheStatus::getGet	sylar/sylar/ds/cache_status.h	/^    int64_t getGet() const { return m_get;}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:() const
sylar::ds::CacheStatus::getHit	sylar/sylar/ds/cache_status.h	/^    int64_t getHit() const { return m_hit;}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:() const
sylar::ds::CacheStatus::getHitRate	sylar/sylar/ds/cache_status.h	/^    double getHitRate() const {$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:double	access:public	signature:() const
sylar::ds::CacheStatus::getPrune	sylar/sylar/ds/cache_status.h	/^    int64_t getPrune() const { return m_prune;}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:() const
sylar::ds::CacheStatus::getSet	sylar/sylar/ds/cache_status.h	/^    int64_t getSet() const { return m_set;}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:() const
sylar::ds::CacheStatus::getTimeout	sylar/sylar/ds/cache_status.h	/^    int64_t getTimeout() const { return m_timeout;}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:() const
sylar::ds::CacheStatus::incDel	sylar/sylar/ds/cache_status.h	/^    int64_t incDel(int64_t v = 1) { return Atomic::addFetch(m_del, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
sylar::ds::CacheStatus::incGet	sylar/sylar/ds/cache_status.h	/^    int64_t incGet(int64_t v = 1) { return Atomic::addFetch(m_get, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
sylar::ds::CacheStatus::incHit	sylar/sylar/ds/cache_status.h	/^    int64_t incHit(int64_t v = 1) { return Atomic::addFetch(m_hit, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
sylar::ds::CacheStatus::incPrune	sylar/sylar/ds/cache_status.h	/^    int64_t incPrune(int64_t v = 1) { return Atomic::addFetch(m_prune, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
sylar::ds::CacheStatus::incSet	sylar/sylar/ds/cache_status.h	/^    int64_t incSet(int64_t v = 1) { return Atomic::addFetch(m_set, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
sylar::ds::CacheStatus::incTimeout	sylar/sylar/ds/cache_status.h	/^    int64_t incTimeout(int64_t v = 1) { return Atomic::addFetch(m_timeout, v);}$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:public	signature:(int64_t v=1)
sylar::ds::CacheStatus::m_del	sylar/sylar/ds/cache_status.h	/^    int64_t m_del = 0;$/;"	m	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:private
sylar::ds::CacheStatus::m_get	sylar/sylar/ds/cache_status.h	/^    int64_t m_get = 0;$/;"	m	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:private
sylar::ds::CacheStatus::m_hit	sylar/sylar/ds/cache_status.h	/^    int64_t m_hit = 0;$/;"	m	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:private
sylar::ds::CacheStatus::m_prune	sylar/sylar/ds/cache_status.h	/^    int64_t m_prune = 0;$/;"	m	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:private
sylar::ds::CacheStatus::m_set	sylar/sylar/ds/cache_status.h	/^    int64_t m_set = 0;$/;"	m	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:private
sylar::ds::CacheStatus::m_timeout	sylar/sylar/ds/cache_status.h	/^    int64_t m_timeout = 0;$/;"	m	class:sylar::ds::CacheStatus	typeref:typename:int64_t	access:private
sylar::ds::CacheStatus::merge	sylar/sylar/ds/cache_status.h	/^    void merge(const CacheStatus& o) {$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:void	access:public	signature:(const CacheStatus & o)
sylar::ds::CacheStatus::toString	sylar/sylar/ds/cache_status.h	/^    std::string toString() const {$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:std::string	access:public	signature:() const
sylar::ds::Dict	sylar/sylar/ds/dict.h	/^class Dict {$/;"	c	namespace:sylar::ds
sylar::ds::Dict::Dict	sylar/sylar/ds/dict.h	/^    Dict(const uint32_t& size = 0)$/;"	f	class:sylar::ds::Dict	access:public	signature:(const uint32_t & size=0)
sylar::ds::Dict::MAX_MUTEX	sylar/sylar/ds/dict.h	/^    static const uint32_t MAX_MUTEX = 1024 * 128;$/;"	m	class:sylar::ds::Dict	typeref:typename:const uint32_t	access:private
sylar::ds::Dict::Node	sylar/sylar/ds/dict.h	/^    struct Node {$/;"	s	class:sylar::ds::Dict	access:private
sylar::ds::Dict::Node::Node	sylar/sylar/ds/dict.h	/^        Node(const K& k = K()) $/;"	f	struct:sylar::ds::Dict::Node	access:public	signature:(const K & k=K ())
sylar::ds::Dict::Node::key	sylar/sylar/ds/dict.h	/^        K key;$/;"	m	struct:sylar::ds::Dict::Node	typeref:typename:K	access:public
sylar::ds::Dict::Node::operator <	sylar/sylar/ds/dict.h	/^        bool operator<(const Node& o) const {$/;"	f	struct:sylar::ds::Dict::Node	typeref:typename:bool	access:public	signature:(const Node & o) const
sylar::ds::Dict::Node::operator ==	sylar/sylar/ds/dict.h	/^        bool operator==(const Node& o) const {$/;"	f	struct:sylar::ds::Dict::Node	typeref:typename:bool	access:public	signature:(const Node & o) const
sylar::ds::Dict::Node::size	sylar/sylar/ds/dict.h	/^        int size;$/;"	m	struct:sylar::ds::Dict::Node	typeref:typename:int	access:public
sylar::ds::Dict::Node::val	sylar/sylar/ds/dict.h	/^        V* val;$/;"	m	struct:sylar::ds::Dict::Node	typeref:typename:V *	access:public
sylar::ds::Dict::callback	sylar/sylar/ds/dict.h	/^    typedef std::function<bool(const K& k, const V* v, size_t size)> callback;$/;"	t	class:sylar::ds::Dict	access:public
sylar::ds::Dict::del	sylar/sylar/ds/dict.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::Dict::dump	sylar/sylar/ds/dict.h	/^    std::ostream& dump(std::ostream& os) {$/;"	f	class:sylar::ds::Dict	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
sylar::ds::Dict::exists	sylar/sylar/ds/dict.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::Dict::foreach	sylar/sylar/ds/dict.h	/^    void foreach(callback cb) {$/;"	f	class:sylar::ds::Dict	typeref:typename:void	access:public	signature:(callback cb)
sylar::ds::Dict::freeDatas	sylar/sylar/ds/dict.h	/^    void freeDatas(std::vector<Node>*& datas, uint64_t size) {$/;"	f	class:sylar::ds::Dict	typeref:typename:void	access:private	signature:(std::vector<Node> * & datas,uint64_t size)
sylar::ds::Dict::get	sylar/sylar/ds/dict.h	/^    SharedArray<V> get(const K& k, bool duplicate = true) {$/;"	f	class:sylar::ds::Dict	typeref:typename:SharedArray<V>	access:public	signature:(const K & k,bool duplicate=true)
sylar::ds::Dict::get	sylar/sylar/ds/dict.h	/^    bool get(const K& k, std::vector<V>& v) {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:public	signature:(const K & k,std::vector<V> & v)
sylar::ds::Dict::getRate	sylar/sylar/ds/dict.h	/^    float getRate() const {$/;"	f	class:sylar::ds::Dict	typeref:typename:float	access:private	signature:() const
sylar::ds::Dict::getString	sylar/sylar/ds/dict.h	/^    std::string getString(const K& k) {$/;"	f	class:sylar::ds::Dict	typeref:typename:std::string	access:private	signature:(const K & k)
sylar::ds::Dict::getTotal	sylar/sylar/ds/dict.h	/^    uint64_t getTotal() const { return m_total;}$/;"	f	class:sylar::ds::Dict	typeref:typename:uint64_t	access:public	signature:() const
sylar::ds::Dict::inValues	sylar/sylar/ds/dict.h	/^    bool inValues(V* ptr) const {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:private	signature:(V * ptr) const
sylar::ds::Dict::insert	sylar/sylar/ds/dict.h	/^    bool insert(const K& k, const V* v, const uint32_t& size) {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:public	signature:(const K & k,const V * v,const uint32_t & size)
sylar::ds::Dict::m_datas	sylar/sylar/ds/dict.h	/^    std::vector<Node>* m_datas;$/;"	m	class:sylar::ds::Dict	typeref:typename:std::vector<Node> *	access:private
sylar::ds::Dict::m_mutex	sylar/sylar/ds/dict.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ds::Dict	typeref:typename:sylar::RWMutex	access:private
sylar::ds::Dict::m_posHash	sylar/sylar/ds/dict.h	/^    PosHash m_posHash;$/;"	m	class:sylar::ds::Dict	typeref:typename:PosHash	access:private
sylar::ds::Dict::m_size	sylar/sylar/ds/dict.h	/^    uint64_t m_size;$/;"	m	class:sylar::ds::Dict	typeref:typename:uint64_t	access:private
sylar::ds::Dict::m_total	sylar/sylar/ds/dict.h	/^    uint64_t m_total;$/;"	m	class:sylar::ds::Dict	typeref:typename:uint64_t	access:private
sylar::ds::Dict::m_values	sylar/sylar/ds/dict.h	/^    std::vector<V> m_values;$/;"	m	class:sylar::ds::Dict	typeref:typename:std::vector<V>	access:private
sylar::ds::Dict::needRehash	sylar/sylar/ds/dict.h	/^    bool needRehash() const {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:private	signature:() const
sylar::ds::Dict::ptr	sylar/sylar/ds/dict.h	/^    typedef std::shared_ptr<Dict> ptr;$/;"	t	class:sylar::ds::Dict	typeref:typename:std::shared_ptr<Dict>	access:public
sylar::ds::Dict::readFrom	sylar/sylar/ds/dict.h	/^    bool readFrom(std::istream& is, uint64_t speed = -1) {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:public	signature:(std::istream & is,uint64_t speed=-1)
sylar::ds::Dict::rehash	sylar/sylar/ds/dict.h	/^    void rehash() {$/;"	f	class:sylar::ds::Dict	typeref:typename:void	access:public	signature:()
sylar::ds::Dict::rehashUnlock	sylar/sylar/ds/dict.h	/^    void rehashUnlock() {$/;"	f	class:sylar::ds::Dict	typeref:typename:void	access:private	signature:()
sylar::ds::Dict::s_mutex	sylar/sylar/ds/dict.h	/^    static sylar::RWMutex s_mutex[MAX_MUTEX];$/;"	m	class:sylar::ds::Dict	typeref:typename:sylar::RWMutex[]	access:private
sylar::ds::Dict::writeTo	sylar/sylar/ds/dict.h	/^    bool writeTo(std::ostream& os, uint64_t speed = -1) {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:public	signature:(std::ostream & os,uint64_t speed=-1)
sylar::ds::Dict::~Dict	sylar/sylar/ds/dict.h	/^    ~Dict() {$/;"	f	class:sylar::ds::Dict	access:public	signature:()
sylar::ds::Dict<K, V, PosHash>::s_mutex	sylar/sylar/ds/dict.h	/^sylar::RWMutex Dict<K, V, PosHash>::s_mutex[MAX_MUTEX];$/;"	m	class:sylar::ds::Dict<K, V, PosHash>	typeref:typename:sylar::RWMutex[]
sylar::ds::HashLruCache	sylar/sylar/ds/lru_cache.h	/^class HashLruCache {$/;"	c	namespace:sylar::ds
sylar::ds::HashLruCache::HashLruCache	sylar/sylar/ds/lru_cache.h	/^    HashLruCache(size_t bucket, size_t max_size, size_t elasticity)$/;"	f	class:sylar::ds::HashLruCache	access:public	signature:(size_t bucket,size_t max_size,size_t elasticity)
sylar::ds::HashLruCache::cache_type	sylar/sylar/ds/lru_cache.h	/^    typedef LruCache<K, V, MutexType> cache_type;$/;"	t	class:sylar::ds::HashLruCache	typeref:typename:LruCache<K,V,MutexType>	access:public
sylar::ds::HashLruCache::clear	sylar/sylar/ds/lru_cache.h	/^    void clear() {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:void	access:public	signature:()
sylar::ds::HashLruCache::del	sylar/sylar/ds/lru_cache.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::HashLruCache::empty	sylar/sylar/ds/lru_cache.h	/^    bool empty() {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:bool	access:public	signature:()
sylar::ds::HashLruCache::exists	sylar/sylar/ds/lru_cache.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::HashLruCache::foreach	sylar/sylar/ds/lru_cache.h	/^    void foreach(F& f) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:void	access:public	signature:(F & f)
sylar::ds::HashLruCache::get	sylar/sylar/ds/lru_cache.h	/^    V get(const K& k) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:V	access:public	signature:(const K & k)
sylar::ds::HashLruCache::get	sylar/sylar/ds/lru_cache.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:bool	access:public	signature:(const K & k,V & v)
sylar::ds::HashLruCache::getBucket	sylar/sylar/ds/lru_cache.h	/^    size_t getBucket() const { return m_bucket;}$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::HashLruCache::getElasticity	sylar/sylar/ds/lru_cache.h	/^    size_t getElasticity() const { return m_elasticity;}$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::HashLruCache::getMaxAllowedSize	sylar/sylar/ds/lru_cache.h	/^    size_t getMaxAllowedSize() const { return m_maxSize + m_elasticity;}$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::HashLruCache::getMaxSize	sylar/sylar/ds/lru_cache.h	/^    size_t getMaxSize() const { return m_maxSize;}$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::HashLruCache::getStatus	sylar/sylar/ds/lru_cache.h	/^    CacheStatus* getStatus() {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:CacheStatus *	access:public	signature:()
sylar::ds::HashLruCache::m_bucket	sylar/sylar/ds/lru_cache.h	/^    size_t m_bucket;$/;"	m	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:private
sylar::ds::HashLruCache::m_datas	sylar/sylar/ds/lru_cache.h	/^    std::vector<cache_type*> m_datas;$/;"	m	class:sylar::ds::HashLruCache	typeref:typename:std::vector<cache_type * >	access:private
sylar::ds::HashLruCache::m_elasticity	sylar/sylar/ds/lru_cache.h	/^    size_t m_elasticity;$/;"	m	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:private
sylar::ds::HashLruCache::m_hash	sylar/sylar/ds/lru_cache.h	/^    Hash m_hash;$/;"	m	class:sylar::ds::HashLruCache	typeref:typename:Hash	access:private
sylar::ds::HashLruCache::m_maxSize	sylar/sylar/ds/lru_cache.h	/^    size_t m_maxSize;$/;"	m	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:private
sylar::ds::HashLruCache::m_status	sylar/sylar/ds/lru_cache.h	/^    CacheStatus m_status;$/;"	m	class:sylar::ds::HashLruCache	typeref:typename:CacheStatus	access:private
sylar::ds::HashLruCache::ptr	sylar/sylar/ds/lru_cache.h	/^    typedef std::shared_ptr<HashLruCache> ptr;$/;"	t	class:sylar::ds::HashLruCache	typeref:typename:std::shared_ptr<HashLruCache>	access:public
sylar::ds::HashLruCache::set	sylar/sylar/ds/lru_cache.h	/^    void set(const K& k, const V& v) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:void	access:public	signature:(const K & k,const V & v)
sylar::ds::HashLruCache::setElasticity	sylar/sylar/ds/lru_cache.h	/^    void setElasticity(const size_t& v) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:void	access:public	signature:(const size_t & v)
sylar::ds::HashLruCache::setMaxSize	sylar/sylar/ds/lru_cache.h	/^    void setMaxSize(const size_t& v) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:void	access:public	signature:(const size_t & v)
sylar::ds::HashLruCache::setPruneCallback	sylar/sylar/ds/lru_cache.h	/^    void setPruneCallback(typename cache_type::prune_callback cb) {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:void	access:public	signature:(typename cache_type::prune_callback cb)
sylar::ds::HashLruCache::size	sylar/sylar/ds/lru_cache.h	/^    size_t size() {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:size_t	access:public	signature:()
sylar::ds::HashLruCache::toStatusString	sylar/sylar/ds/lru_cache.h	/^    std::string toStatusString() {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:std::string	access:public	signature:()
sylar::ds::HashLruCache::~HashLruCache	sylar/sylar/ds/lru_cache.h	/^    ~HashLruCache() {$/;"	f	class:sylar::ds::HashLruCache	access:public	signature:()
sylar::ds::HashMap	sylar/sylar/ds/hash_map.h	/^class HashMap {$/;"	c	namespace:sylar::ds
sylar::ds::HashMap::HashMap	sylar/sylar/ds/hash_map.h	/^    HashMap(const uint32_t& size = 0)$/;"	f	class:sylar::ds::HashMap	access:public	signature:(const uint32_t & size=0)
sylar::ds::HashMap::MAX_MUTEX	sylar/sylar/ds/hash_map.h	/^    static const uint32_t MAX_MUTEX = 1024 * 128;$/;"	m	class:sylar::ds::HashMap	typeref:typename:const uint32_t	access:private
sylar::ds::HashMap::Node	sylar/sylar/ds/hash_map.h	/^    struct Node {$/;"	s	class:sylar::ds::HashMap	access:private
sylar::ds::HashMap::Node::Node	sylar/sylar/ds/hash_map.h	/^        Node(const K& k = K()) $/;"	f	struct:sylar::ds::HashMap::Node	access:public	signature:(const K & k=K ())
sylar::ds::HashMap::Node::key	sylar/sylar/ds/hash_map.h	/^        K key;$/;"	m	struct:sylar::ds::HashMap::Node	typeref:typename:K	access:public
sylar::ds::HashMap::Node::operator <	sylar/sylar/ds/hash_map.h	/^        bool operator<(const Node& o) const {$/;"	f	struct:sylar::ds::HashMap::Node	typeref:typename:bool	access:public	signature:(const Node & o) const
sylar::ds::HashMap::Node::operator ==	sylar/sylar/ds/hash_map.h	/^        bool operator==(const Node& o) const {$/;"	f	struct:sylar::ds::HashMap::Node	typeref:typename:bool	access:public	signature:(const Node & o) const
sylar::ds::HashMap::Node::val	sylar/sylar/ds/hash_map.h	/^        V val;$/;"	m	struct:sylar::ds::HashMap::Node	typeref:typename:V	access:public
sylar::ds::HashMap::clear	sylar/sylar/ds/hash_map.h	/^    void clear() {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:public	signature:()
sylar::ds::HashMap::del	sylar/sylar/ds/hash_map.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::HashMap::dump	sylar/sylar/ds/hash_map.h	/^    std::ostream& dump(std::ostream& os) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
sylar::ds::HashMap::exists	sylar/sylar/ds/hash_map.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::HashMap::freeDatas	sylar/sylar/ds/hash_map.h	/^    void freeDatas(std::vector<Node>*& datas, uint64_t size) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:private	signature:(std::vector<Node> * & datas,uint64_t size)
sylar::ds::HashMap::get	sylar/sylar/ds/hash_map.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:public	signature:(const K & k,V & v)
sylar::ds::HashMap::getRate	sylar/sylar/ds/hash_map.h	/^    float getRate() const {$/;"	f	class:sylar::ds::HashMap	typeref:typename:float	access:private	signature:() const
sylar::ds::HashMap::getTotal	sylar/sylar/ds/hash_map.h	/^    uint64_t getTotal() const { return m_total;}$/;"	f	class:sylar::ds::HashMap	typeref:typename:uint64_t	access:public	signature:() const
sylar::ds::HashMap::m_datas	sylar/sylar/ds/hash_map.h	/^    std::vector<Node>* m_datas;$/;"	m	class:sylar::ds::HashMap	typeref:typename:std::vector<Node> *	access:private
sylar::ds::HashMap::m_mutex	sylar/sylar/ds/hash_map.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ds::HashMap	typeref:typename:sylar::RWMutex	access:private
sylar::ds::HashMap::m_posHash	sylar/sylar/ds/hash_map.h	/^    PosHash m_posHash;$/;"	m	class:sylar::ds::HashMap	typeref:typename:PosHash	access:private
sylar::ds::HashMap::m_size	sylar/sylar/ds/hash_map.h	/^    uint64_t m_size;$/;"	m	class:sylar::ds::HashMap	typeref:typename:uint64_t	access:private
sylar::ds::HashMap::m_total	sylar/sylar/ds/hash_map.h	/^    uint64_t m_total;$/;"	m	class:sylar::ds::HashMap	typeref:typename:uint64_t	access:private
sylar::ds::HashMap::merge	sylar/sylar/ds/hash_map.h	/^    void merge(HashMap& oth) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:public	signature:(HashMap & oth)
sylar::ds::HashMap::needRehash	sylar/sylar/ds/hash_map.h	/^    bool needRehash() const {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:private	signature:() const
sylar::ds::HashMap::ptr	sylar/sylar/ds/hash_map.h	/^    typedef std::shared_ptr<HashMap> ptr;$/;"	t	class:sylar::ds::HashMap	typeref:typename:std::shared_ptr<HashMap>	access:public
sylar::ds::HashMap::rcallback	sylar/sylar/ds/hash_map.h	/^    typedef std::function<bool(const K& k, const V& v)> rcallback;$/;"	t	class:sylar::ds::HashMap	access:public
sylar::ds::HashMap::readFrom	sylar/sylar/ds/hash_map.h	/^    bool readFrom(std::istream& is, uint64_t speed = -1) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:public	signature:(std::istream & is,uint64_t speed=-1)
sylar::ds::HashMap::rehash	sylar/sylar/ds/hash_map.h	/^    void rehash() {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:public	signature:()
sylar::ds::HashMap::rehashUnlock	sylar/sylar/ds/hash_map.h	/^    void rehashUnlock() {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:private	signature:()
sylar::ds::HashMap::rforeach	sylar/sylar/ds/hash_map.h	/^    void rforeach(rcallback cb) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:public	signature:(rcallback cb)
sylar::ds::HashMap::s_mutex	sylar/sylar/ds/hash_map.h	/^    static sylar::RWMutex s_mutex[MAX_MUTEX];$/;"	m	class:sylar::ds::HashMap	typeref:typename:sylar::RWMutex[]	access:private
sylar::ds::HashMap::set	sylar/sylar/ds/hash_map.h	/^    bool set(const K& k, const V& v) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:public	signature:(const K & k,const V & v)
sylar::ds::HashMap::swap	sylar/sylar/ds/hash_map.h	/^    void swap(HashMap& oth) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:public	signature:(HashMap & oth)
sylar::ds::HashMap::value_type	sylar/sylar/ds/hash_map.h	/^    typedef Pair<K, V> value_type;$/;"	t	class:sylar::ds::HashMap	typeref:typename:Pair<K,V>	access:public
sylar::ds::HashMap::wcallback	sylar/sylar/ds/hash_map.h	/^    typedef std::function<bool(const K& k, V& v)> wcallback;$/;"	t	class:sylar::ds::HashMap	access:public
sylar::ds::HashMap::wforeach	sylar/sylar/ds/hash_map.h	/^    void wforeach(wcallback cb) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:public	signature:(wcallback cb)
sylar::ds::HashMap::writeTo	sylar/sylar/ds/hash_map.h	/^    bool writeTo(std::ostream& os, uint64_t speed = -1) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:public	signature:(std::ostream & os,uint64_t speed=-1)
sylar::ds::HashMap::~HashMap	sylar/sylar/ds/hash_map.h	/^    ~HashMap() {$/;"	f	class:sylar::ds::HashMap	access:public	signature:()
sylar::ds::HashMap<K, V, PosHash>::s_mutex	sylar/sylar/ds/hash_map.h	/^sylar::RWMutex HashMap<K, V, PosHash>::s_mutex[MAX_MUTEX];$/;"	m	class:sylar::ds::HashMap<K, V, PosHash>	typeref:typename:sylar::RWMutex[]
sylar::ds::HashMultimap	sylar/sylar/ds/hash_multimap.h	/^class HashMultimap {$/;"	c	namespace:sylar::ds
sylar::ds::HashMultimap::HashMultimap	sylar/sylar/ds/hash_multimap.h	/^    HashMultimap(const uint32_t& size = 10)$/;"	f	class:sylar::ds::HashMultimap	access:public	signature:(const uint32_t & size=10)
sylar::ds::HashMultimap::MAX_MUTEX	sylar/sylar/ds/hash_multimap.h	/^    static const uint32_t MAX_MUTEX = 1024 * 128;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:const uint32_t	access:private
sylar::ds::HashMultimap::Node	sylar/sylar/ds/hash_multimap.h	/^    struct Node {$/;"	s	class:sylar::ds::HashMultimap	access:private
sylar::ds::HashMultimap::Node::Node	sylar/sylar/ds/hash_multimap.h	/^        Node(const K& k = K()) $/;"	f	struct:sylar::ds::HashMultimap::Node	access:public	signature:(const K & k=K ())
sylar::ds::HashMultimap::Node::key	sylar/sylar/ds/hash_multimap.h	/^        K key;$/;"	m	struct:sylar::ds::HashMultimap::Node	typeref:typename:K	access:public
sylar::ds::HashMultimap::Node::operator <	sylar/sylar/ds/hash_multimap.h	/^        bool operator<(const Node& o) const {$/;"	f	struct:sylar::ds::HashMultimap::Node	typeref:typename:bool	access:public	signature:(const Node & o) const
sylar::ds::HashMultimap::Node::size	sylar/sylar/ds/hash_multimap.h	/^        int size;$/;"	m	struct:sylar::ds::HashMultimap::Node	typeref:typename:int	access:public
sylar::ds::HashMultimap::Node::val	sylar/sylar/ds/hash_multimap.h	/^        V* val;$/;"	m	struct:sylar::ds::HashMultimap::Node	typeref:typename:V *	access:public
sylar::ds::HashMultimap::del	sylar/sylar/ds/hash_multimap.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::HashMultimap::del	sylar/sylar/ds/hash_multimap.h	/^    bool del(const K& k, const V& v) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,const V & v)
sylar::ds::HashMultimap::dump	sylar/sylar/ds/hash_multimap.h	/^    std::ostream& dump(std::ostream& os) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
sylar::ds::HashMultimap::exists	sylar/sylar/ds/hash_multimap.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::HashMultimap::exists	sylar/sylar/ds/hash_multimap.h	/^    bool exists(const K& k, const V& v) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,const V & v)
sylar::ds::HashMultimap::freeDatas	sylar/sylar/ds/hash_multimap.h	/^    void freeDatas(std::vector<Node>*& datas, uint64_t size) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:void	access:private	signature:(std::vector<Node> * & datas,uint64_t size)
sylar::ds::HashMultimap::get	sylar/sylar/ds/hash_multimap.h	/^    SharedArray<V> get(const K& k, bool duplicate = true) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:SharedArray<V>	access:public	signature:(const K & k,bool duplicate=true)
sylar::ds::HashMultimap::get	sylar/sylar/ds/hash_multimap.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,V & v)
sylar::ds::HashMultimap::get	sylar/sylar/ds/hash_multimap.h	/^    bool get(const K& k, std::vector<V>& v) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,std::vector<V> & v)
sylar::ds::HashMultimap::getElements	sylar/sylar/ds/hash_multimap.h	/^    uint64_t getElements() const { return m_elements;}$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:uint64_t	access:public	signature:() const
sylar::ds::HashMultimap::getRate	sylar/sylar/ds/hash_multimap.h	/^    float getRate() const {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:float	access:private	signature:() const
sylar::ds::HashMultimap::getTotal	sylar/sylar/ds/hash_multimap.h	/^    uint64_t getTotal() const { return m_total;}$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:uint64_t	access:public	signature:() const
sylar::ds::HashMultimap::inValues	sylar/sylar/ds/hash_multimap.h	/^    bool inValues(V* ptr) const {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:private	signature:(V * ptr) const
sylar::ds::HashMultimap::insert	sylar/sylar/ds/hash_multimap.h	/^    bool insert(const K& k, const V& v) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,const V & v)
sylar::ds::HashMultimap::insert	sylar/sylar/ds/hash_multimap.h	/^    bool insert(const K& k, const V* v, const uint32_t& size) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,const V * v,const uint32_t & size)
sylar::ds::HashMultimap::m_datas	sylar/sylar/ds/hash_multimap.h	/^    std::vector<Node>* m_datas;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:std::vector<Node> *	access:private
sylar::ds::HashMultimap::m_elements	sylar/sylar/ds/hash_multimap.h	/^    uint64_t m_elements;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:uint64_t	access:private
sylar::ds::HashMultimap::m_mutex	sylar/sylar/ds/hash_multimap.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:sylar::RWMutex	access:private
sylar::ds::HashMultimap::m_posHash	sylar/sylar/ds/hash_multimap.h	/^    PosHash m_posHash;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:PosHash	access:private
sylar::ds::HashMultimap::m_size	sylar/sylar/ds/hash_multimap.h	/^    uint64_t m_size;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:uint64_t	access:private
sylar::ds::HashMultimap::m_total	sylar/sylar/ds/hash_multimap.h	/^    uint64_t m_total;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:uint64_t	access:private
sylar::ds::HashMultimap::m_values	sylar/sylar/ds/hash_multimap.h	/^    std::vector<V> m_values;$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:std::vector<V>	access:private
sylar::ds::HashMultimap::needRehash	sylar/sylar/ds/hash_multimap.h	/^    bool needRehash() const {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:private	signature:() const
sylar::ds::HashMultimap::ptr	sylar/sylar/ds/hash_multimap.h	/^    typedef std::shared_ptr<HashMultimap> ptr;$/;"	t	class:sylar::ds::HashMultimap	typeref:typename:std::shared_ptr<HashMultimap>	access:public
sylar::ds::HashMultimap::rcallback	sylar/sylar/ds/hash_multimap.h	/^    typedef std::function<bool(const K& k, const V* v, int)> rcallback;$/;"	t	class:sylar::ds::HashMultimap	access:public
sylar::ds::HashMultimap::readFrom	sylar/sylar/ds/hash_multimap.h	/^    bool readFrom(std::istream& is, uint64_t speed = -1) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(std::istream & is,uint64_t speed=-1)
sylar::ds::HashMultimap::rehash	sylar/sylar/ds/hash_multimap.h	/^    void rehash() {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:void	access:public	signature:()
sylar::ds::HashMultimap::rehashUnlock	sylar/sylar/ds/hash_multimap.h	/^    void rehashUnlock() {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:void	access:private	signature:()
sylar::ds::HashMultimap::rforeach	sylar/sylar/ds/hash_multimap.h	/^    void rforeach(rcallback cb) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:void	access:public	signature:(rcallback cb)
sylar::ds::HashMultimap::s_mutex	sylar/sylar/ds/hash_multimap.h	/^    static sylar::RWMutex s_mutex[MAX_MUTEX];$/;"	m	class:sylar::ds::HashMultimap	typeref:typename:sylar::RWMutex[]	access:private
sylar::ds::HashMultimap::set	sylar/sylar/ds/hash_multimap.h	/^    bool set(const K& k, const V* v, const uint32_t& size) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(const K & k,const V * v,const uint32_t & size)
sylar::ds::HashMultimap::wcallback	sylar/sylar/ds/hash_multimap.h	/^    typedef std::function<bool(const K& k, V* v, int)> wcallback;$/;"	t	class:sylar::ds::HashMultimap	access:public
sylar::ds::HashMultimap::wforeach	sylar/sylar/ds/hash_multimap.h	/^    void wforeach(wcallback cb) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:void	access:public	signature:(wcallback cb)
sylar::ds::HashMultimap::writeTo	sylar/sylar/ds/hash_multimap.h	/^    bool writeTo(std::ostream& os, uint64_t speed = -1) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(std::ostream & os,uint64_t speed=-1)
sylar::ds::HashMultimap::~HashMultimap	sylar/sylar/ds/hash_multimap.h	/^    ~HashMultimap() {$/;"	f	class:sylar::ds::HashMultimap	access:public	signature:()
sylar::ds::HashMultimap<K, V, PosHash>::s_mutex	sylar/sylar/ds/hash_multimap.h	/^sylar::RWMutex HashMultimap<K, V, PosHash>::s_mutex[MAX_MUTEX];$/;"	m	class:sylar::ds::HashMultimap<K, V, PosHash>	typeref:typename:sylar::RWMutex[]
sylar::ds::HashTimedCache	sylar/sylar/ds/timed_cache.h	/^class HashTimedCache {$/;"	c	namespace:sylar::ds
sylar::ds::HashTimedCache::HashTimedCache	sylar/sylar/ds/timed_cache.h	/^    HashTimedCache(size_t bucket, size_t max_size, size_t elasticity)$/;"	f	class:sylar::ds::HashTimedCache	access:public	signature:(size_t bucket,size_t max_size,size_t elasticity)
sylar::ds::HashTimedCache::cache_type	sylar/sylar/ds/timed_cache.h	/^    typedef TimedCache<K, V, RWMutexType> cache_type;$/;"	t	class:sylar::ds::HashTimedCache	typeref:typename:TimedCache<K,V,RWMutexType>	access:public
sylar::ds::HashTimedCache::checkTimeout	sylar/sylar/ds/timed_cache.h	/^    size_t checkTimeout(const uint64_t& ts = sylar::GetCurrentMS()) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:public	signature:(const uint64_t & ts=sylar::GetCurrentMS ())
sylar::ds::HashTimedCache::clear	sylar/sylar/ds/timed_cache.h	/^    void clear() {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:void	access:public	signature:()
sylar::ds::HashTimedCache::del	sylar/sylar/ds/timed_cache.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::HashTimedCache::empty	sylar/sylar/ds/timed_cache.h	/^    bool empty() {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:bool	access:public	signature:()
sylar::ds::HashTimedCache::exists	sylar/sylar/ds/timed_cache.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::HashTimedCache::expired	sylar/sylar/ds/timed_cache.h	/^    bool expired(const K& k, const uint64_t& ts) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:bool	access:public	signature:(const K & k,const uint64_t & ts)
sylar::ds::HashTimedCache::foreach	sylar/sylar/ds/timed_cache.h	/^    void foreach(F& f) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:void	access:public	signature:(F & f)
sylar::ds::HashTimedCache::get	sylar/sylar/ds/timed_cache.h	/^    V get(const K& k) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:V	access:public	signature:(const K & k)
sylar::ds::HashTimedCache::get	sylar/sylar/ds/timed_cache.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:bool	access:public	signature:(const K & k,V & v)
sylar::ds::HashTimedCache::getBucket	sylar/sylar/ds/timed_cache.h	/^    size_t getBucket() const { return m_bucket;}$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::HashTimedCache::getElasticity	sylar/sylar/ds/timed_cache.h	/^    size_t getElasticity() const { return m_elasticity;}$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::HashTimedCache::getMaxAllowedSize	sylar/sylar/ds/timed_cache.h	/^    size_t getMaxAllowedSize() const { return m_maxSize + m_elasticity;}$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::HashTimedCache::getMaxSize	sylar/sylar/ds/timed_cache.h	/^    size_t getMaxSize() const { return m_maxSize;}$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::HashTimedCache::getStatus	sylar/sylar/ds/timed_cache.h	/^    CacheStatus* getStatus() {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:CacheStatus *	access:public	signature:()
sylar::ds::HashTimedCache::m_bucket	sylar/sylar/ds/timed_cache.h	/^    size_t m_bucket;$/;"	m	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:private
sylar::ds::HashTimedCache::m_datas	sylar/sylar/ds/timed_cache.h	/^    std::vector<cache_type*> m_datas;$/;"	m	class:sylar::ds::HashTimedCache	typeref:typename:std::vector<cache_type * >	access:private
sylar::ds::HashTimedCache::m_elasticity	sylar/sylar/ds/timed_cache.h	/^    size_t m_elasticity;$/;"	m	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:private
sylar::ds::HashTimedCache::m_hash	sylar/sylar/ds/timed_cache.h	/^    Hash m_hash;$/;"	m	class:sylar::ds::HashTimedCache	typeref:typename:Hash	access:private
sylar::ds::HashTimedCache::m_maxSize	sylar/sylar/ds/timed_cache.h	/^    size_t m_maxSize;$/;"	m	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:private
sylar::ds::HashTimedCache::m_status	sylar/sylar/ds/timed_cache.h	/^    CacheStatus m_status;$/;"	m	class:sylar::ds::HashTimedCache	typeref:typename:CacheStatus	access:private
sylar::ds::HashTimedCache::ptr	sylar/sylar/ds/timed_cache.h	/^    typedef std::shared_ptr<HashTimedCache> ptr;$/;"	t	class:sylar::ds::HashTimedCache	typeref:typename:std::shared_ptr<HashTimedCache>	access:public
sylar::ds::HashTimedCache::set	sylar/sylar/ds/timed_cache.h	/^    void set(const K& k, const V& v, uint64_t expired) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:void	access:public	signature:(const K & k,const V & v,uint64_t expired)
sylar::ds::HashTimedCache::setElasticity	sylar/sylar/ds/timed_cache.h	/^    void setElasticity(const size_t& v) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:void	access:public	signature:(const size_t & v)
sylar::ds::HashTimedCache::setMaxSize	sylar/sylar/ds/timed_cache.h	/^    void setMaxSize(const size_t& v) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:void	access:public	signature:(const size_t & v)
sylar::ds::HashTimedCache::setPruneCallback	sylar/sylar/ds/timed_cache.h	/^    void setPruneCallback(typename cache_type::prune_callback cb) {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:void	access:public	signature:(typename cache_type::prune_callback cb)
sylar::ds::HashTimedCache::size	sylar/sylar/ds/timed_cache.h	/^    size_t size() {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:size_t	access:public	signature:()
sylar::ds::HashTimedCache::toStatusString	sylar/sylar/ds/timed_cache.h	/^    std::string toStatusString() {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:std::string	access:public	signature:()
sylar::ds::HashTimedCache::~HashTimedCache	sylar/sylar/ds/timed_cache.h	/^    ~HashTimedCache() {$/;"	f	class:sylar::ds::HashTimedCache	access:public	signature:()
sylar::ds::HashTimedLruCache	sylar/sylar/ds/timed_lru_cache.h	/^class HashTimedLruCache {$/;"	c	namespace:sylar::ds
sylar::ds::HashTimedLruCache::HashTimedLruCache	sylar/sylar/ds/timed_lru_cache.h	/^    HashTimedLruCache(size_t bucket, size_t max_size, size_t elasticity)$/;"	f	class:sylar::ds::HashTimedLruCache	access:public	signature:(size_t bucket,size_t max_size,size_t elasticity)
sylar::ds::HashTimedLruCache::cache_type	sylar/sylar/ds/timed_lru_cache.h	/^    typedef TimedLruCache<K, V, MutexType> cache_type;$/;"	t	class:sylar::ds::HashTimedLruCache	typeref:typename:TimedLruCache<K,V,MutexType>	access:public
sylar::ds::HashTimedLruCache::checkTimeout	sylar/sylar/ds/timed_lru_cache.h	/^    size_t checkTimeout(const uint64_t& ts = sylar::GetCurrentMS()) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:public	signature:(const uint64_t & ts=sylar::GetCurrentMS ())
sylar::ds::HashTimedLruCache::clear	sylar/sylar/ds/timed_lru_cache.h	/^    void clear() {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:void	access:public	signature:()
sylar::ds::HashTimedLruCache::del	sylar/sylar/ds/timed_lru_cache.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::HashTimedLruCache::empty	sylar/sylar/ds/timed_lru_cache.h	/^    bool empty() {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:bool	access:public	signature:()
sylar::ds::HashTimedLruCache::exists	sylar/sylar/ds/timed_lru_cache.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::HashTimedLruCache::expired	sylar/sylar/ds/timed_lru_cache.h	/^    bool expired(const K& k, const uint64_t& ts) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:bool	access:public	signature:(const K & k,const uint64_t & ts)
sylar::ds::HashTimedLruCache::foreach	sylar/sylar/ds/timed_lru_cache.h	/^    void foreach(F& f) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:void	access:public	signature:(F & f)
sylar::ds::HashTimedLruCache::get	sylar/sylar/ds/timed_lru_cache.h	/^    V get(const K& k) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:V	access:public	signature:(const K & k)
sylar::ds::HashTimedLruCache::get	sylar/sylar/ds/timed_lru_cache.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:bool	access:public	signature:(const K & k,V & v)
sylar::ds::HashTimedLruCache::getBucket	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getBucket() const { return m_bucket;}$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::HashTimedLruCache::getElasticity	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getElasticity() const { return m_elasticity;}$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::HashTimedLruCache::getMaxAllowedSize	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getMaxAllowedSize() const { return m_maxSize + m_elasticity;}$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::HashTimedLruCache::getMaxSize	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getMaxSize() const { return m_maxSize;}$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::HashTimedLruCache::getStatus	sylar/sylar/ds/timed_lru_cache.h	/^    CacheStatus* getStatus() {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:CacheStatus *	access:public	signature:()
sylar::ds::HashTimedLruCache::m_bucket	sylar/sylar/ds/timed_lru_cache.h	/^    size_t m_bucket;$/;"	m	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:private
sylar::ds::HashTimedLruCache::m_datas	sylar/sylar/ds/timed_lru_cache.h	/^    std::vector<cache_type*> m_datas;$/;"	m	class:sylar::ds::HashTimedLruCache	typeref:typename:std::vector<cache_type * >	access:private
sylar::ds::HashTimedLruCache::m_elasticity	sylar/sylar/ds/timed_lru_cache.h	/^    size_t m_elasticity;$/;"	m	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:private
sylar::ds::HashTimedLruCache::m_hash	sylar/sylar/ds/timed_lru_cache.h	/^    Hash m_hash;$/;"	m	class:sylar::ds::HashTimedLruCache	typeref:typename:Hash	access:private
sylar::ds::HashTimedLruCache::m_maxSize	sylar/sylar/ds/timed_lru_cache.h	/^    size_t m_maxSize;$/;"	m	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:private
sylar::ds::HashTimedLruCache::m_status	sylar/sylar/ds/timed_lru_cache.h	/^    CacheStatus m_status;$/;"	m	class:sylar::ds::HashTimedLruCache	typeref:typename:CacheStatus	access:private
sylar::ds::HashTimedLruCache::ptr	sylar/sylar/ds/timed_lru_cache.h	/^    typedef std::shared_ptr<HashTimedLruCache> ptr;$/;"	t	class:sylar::ds::HashTimedLruCache	typeref:typename:std::shared_ptr<HashTimedLruCache>	access:public
sylar::ds::HashTimedLruCache::set	sylar/sylar/ds/timed_lru_cache.h	/^    void set(const K& k, const V& v, uint64_t expired) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:void	access:public	signature:(const K & k,const V & v,uint64_t expired)
sylar::ds::HashTimedLruCache::setElasticity	sylar/sylar/ds/timed_lru_cache.h	/^    void setElasticity(const size_t& v) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:void	access:public	signature:(const size_t & v)
sylar::ds::HashTimedLruCache::setMaxSize	sylar/sylar/ds/timed_lru_cache.h	/^    void setMaxSize(const size_t& v) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:void	access:public	signature:(const size_t & v)
sylar::ds::HashTimedLruCache::setPruneCallback	sylar/sylar/ds/timed_lru_cache.h	/^    void setPruneCallback(typename cache_type::prune_callback cb) {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:void	access:public	signature:(typename cache_type::prune_callback cb)
sylar::ds::HashTimedLruCache::size	sylar/sylar/ds/timed_lru_cache.h	/^    size_t size() {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:size_t	access:public	signature:()
sylar::ds::HashTimedLruCache::toStatusString	sylar/sylar/ds/timed_lru_cache.h	/^    std::string toStatusString() {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:std::string	access:public	signature:()
sylar::ds::HashTimedLruCache::~HashTimedLruCache	sylar/sylar/ds/timed_lru_cache.h	/^    ~HashTimedLruCache() {$/;"	f	class:sylar::ds::HashTimedLruCache	access:public	signature:()
sylar::ds::Ivt	sylar/sylar/ds/util.h	/^struct Ivt {$/;"	s	namespace:sylar::ds
sylar::ds::Ivt::Ivt	sylar/sylar/ds/util.h	/^    Ivt()$/;"	f	struct:sylar::ds::Ivt	access:public	signature:()
sylar::ds::Ivt::convert	sylar/sylar/ds/util.h	/^    inline void convert(const V* v) {$/;"	f	struct:sylar::ds::Ivt	typeref:typename:void	access:public	signature:(const V * v)
sylar::ds::Ivt::convert	sylar/sylar/ds/util.h	/^    inline void convert(const size_t& offset) {$/;"	f	struct:sylar::ds::Ivt	typeref:typename:void	access:public	signature:(const size_t & offset)
sylar::ds::Ivt::count	sylar/sylar/ds/util.h	/^    int count;$/;"	m	struct:sylar::ds::Ivt	typeref:typename:int	access:public
sylar::ds::Ivt::data	sylar/sylar/ds/util.h	/^    V* data;$/;"	m	struct:sylar::ds::Ivt	typeref:typename:V *	access:public
sylar::ds::Ivt::duplicate	sylar/sylar/ds/util.h	/^    inline void duplicate(const Ivt<K, V>& v) {$/;"	f	struct:sylar::ds::Ivt	typeref:typename:void	access:public	signature:(const Ivt<K,V> & v)
sylar::ds::Ivt::duplicate	sylar/sylar/ds/util.h	/^    inline void duplicate(const V* v, const int& cnt) {$/;"	f	struct:sylar::ds::Ivt	typeref:typename:void	access:public	signature:(const V * v,const int & cnt)
sylar::ds::Ivt::duplicate	sylar/sylar/ds/util.h	/^    inline void duplicate(const std::vector<V>& v) {$/;"	f	struct:sylar::ds::Ivt	typeref:typename:void	access:public	signature:(const std::vector<V> & v)
sylar::ds::Ivt::free	sylar/sylar/ds/util.h	/^    inline void free() {$/;"	f	struct:sylar::ds::Ivt	typeref:typename:void	access:public	signature:()
sylar::ds::Ivt::id	sylar/sylar/ds/util.h	/^    K id;$/;"	m	struct:sylar::ds::Ivt	typeref:typename:K	access:public
sylar::ds::LruCache	sylar/sylar/ds/lru_cache.h	/^class LruCache {$/;"	c	namespace:sylar::ds
sylar::ds::LruCache::LruCache	sylar/sylar/ds/lru_cache.h	/^    LruCache(size_t max_size = 0, size_t elasticity = 0$/;"	f	class:sylar::ds::LruCache	access:public	signature:(size_t max_size=0,size_t elasticity=0,CacheStatus * status=nullptr)
sylar::ds::LruCache::clear	sylar/sylar/ds/lru_cache.h	/^    bool clear() {$/;"	f	class:sylar::ds::LruCache	typeref:typename:bool	access:public	signature:()
sylar::ds::LruCache::del	sylar/sylar/ds/lru_cache.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::LruCache::empty	sylar/sylar/ds/lru_cache.h	/^    bool empty() {$/;"	f	class:sylar::ds::LruCache	typeref:typename:bool	access:public	signature:()
sylar::ds::LruCache::exists	sylar/sylar/ds/lru_cache.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::LruCache::foreach	sylar/sylar/ds/lru_cache.h	/^    void foreach(F& f) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:void	access:public	signature:(F & f)
sylar::ds::LruCache::get	sylar/sylar/ds/lru_cache.h	/^    V get(const K& k) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:V	access:public	signature:(const K & k)
sylar::ds::LruCache::get	sylar/sylar/ds/lru_cache.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:bool	access:public	signature:(const K & k,V & v)
sylar::ds::LruCache::getElasticity	sylar/sylar/ds/lru_cache.h	/^    size_t getElasticity() const { return m_elasticity;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::LruCache::getMaxAllowedSize	sylar/sylar/ds/lru_cache.h	/^    size_t getMaxAllowedSize() const { return m_maxSize + m_elasticity;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::LruCache::getMaxSize	sylar/sylar/ds/lru_cache.h	/^    size_t getMaxSize() const { return m_maxSize;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::LruCache::getStatus	sylar/sylar/ds/lru_cache.h	/^    CacheStatus* getStatus() const { return m_status;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:CacheStatus *	access:public	signature:() const
sylar::ds::LruCache::item_type	sylar/sylar/ds/lru_cache.h	/^    typedef std::pair<K, V> item_type;$/;"	t	class:sylar::ds::LruCache	typeref:typename:std::pair<K,V>	access:public
sylar::ds::LruCache::list_type	sylar/sylar/ds/lru_cache.h	/^    typedef std::list<item_type> list_type;$/;"	t	class:sylar::ds::LruCache	typeref:typename:std::list<item_type>	access:public
sylar::ds::LruCache::m_cache	sylar/sylar/ds/lru_cache.h	/^    map_type m_cache;$/;"	m	class:sylar::ds::LruCache	typeref:typename:map_type	access:private
sylar::ds::LruCache::m_cb	sylar/sylar/ds/lru_cache.h	/^    prune_callback m_cb;$/;"	m	class:sylar::ds::LruCache	typeref:typename:prune_callback	access:private
sylar::ds::LruCache::m_elasticity	sylar/sylar/ds/lru_cache.h	/^    size_t m_elasticity;$/;"	m	class:sylar::ds::LruCache	typeref:typename:size_t	access:private
sylar::ds::LruCache::m_keys	sylar/sylar/ds/lru_cache.h	/^    list_type m_keys;$/;"	m	class:sylar::ds::LruCache	typeref:typename:list_type	access:private
sylar::ds::LruCache::m_maxSize	sylar/sylar/ds/lru_cache.h	/^    size_t m_maxSize;$/;"	m	class:sylar::ds::LruCache	typeref:typename:size_t	access:private
sylar::ds::LruCache::m_mutex	sylar/sylar/ds/lru_cache.h	/^    MutexType m_mutex;$/;"	m	class:sylar::ds::LruCache	typeref:typename:MutexType	access:private
sylar::ds::LruCache::m_status	sylar/sylar/ds/lru_cache.h	/^    CacheStatus* m_status = nullptr;$/;"	m	class:sylar::ds::LruCache	typeref:typename:CacheStatus *	access:private
sylar::ds::LruCache::m_statusOwner	sylar/sylar/ds/lru_cache.h	/^    bool m_statusOwner = false;$/;"	m	class:sylar::ds::LruCache	typeref:typename:bool	access:private
sylar::ds::LruCache::map_type	sylar/sylar/ds/lru_cache.h	/^    typedef std::unordered_map<K, typename list_type::iterator> map_type;$/;"	t	class:sylar::ds::LruCache	typeref:typename:std::unordered_map<K,typename list_type::iterator>	access:public
sylar::ds::LruCache::prune	sylar/sylar/ds/lru_cache.h	/^    size_t prune() {$/;"	f	class:sylar::ds::LruCache	typeref:typename:size_t	access:protected	signature:()
sylar::ds::LruCache::prune_callback	sylar/sylar/ds/lru_cache.h	/^    typedef std::function<void(const K&, const V&)> prune_callback;$/;"	t	class:sylar::ds::LruCache	access:public
sylar::ds::LruCache::ptr	sylar/sylar/ds/lru_cache.h	/^    typedef std::shared_ptr<LruCache> ptr;$/;"	t	class:sylar::ds::LruCache	typeref:typename:std::shared_ptr<LruCache>	access:public
sylar::ds::LruCache::set	sylar/sylar/ds/lru_cache.h	/^    void set(const K& k, const V& v) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:void	access:public	signature:(const K & k,const V & v)
sylar::ds::LruCache::setElasticity	sylar/sylar/ds/lru_cache.h	/^    void setElasticity(const size_t& v) { m_elasticity = v;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:void	access:public	signature:(const size_t & v)
sylar::ds::LruCache::setMaxSize	sylar/sylar/ds/lru_cache.h	/^    void setMaxSize(const size_t& v) { m_maxSize = v;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:void	access:public	signature:(const size_t & v)
sylar::ds::LruCache::setPruneCallback	sylar/sylar/ds/lru_cache.h	/^    void setPruneCallback(prune_callback cb) { m_cb = cb;}$/;"	f	class:sylar::ds::LruCache	typeref:typename:void	access:public	signature:(prune_callback cb)
sylar::ds::LruCache::setStatus	sylar/sylar/ds/lru_cache.h	/^    void setStatus(CacheStatus* v, bool owner = false) {$/;"	f	class:sylar::ds::LruCache	typeref:typename:void	access:public	signature:(CacheStatus * v,bool owner=false)
sylar::ds::LruCache::size	sylar/sylar/ds/lru_cache.h	/^    size_t size() {$/;"	f	class:sylar::ds::LruCache	typeref:typename:size_t	access:public	signature:()
sylar::ds::LruCache::toStatusString	sylar/sylar/ds/lru_cache.h	/^    std::string toStatusString() {$/;"	f	class:sylar::ds::LruCache	typeref:typename:std::string	access:public	signature:()
sylar::ds::LruCache::~LruCache	sylar/sylar/ds/lru_cache.h	/^    ~LruCache() {$/;"	f	class:sylar::ds::LruCache	access:public	signature:()
sylar::ds::MultiPair	sylar/sylar/ds/util.h	/^struct MultiPair {$/;"	s	namespace:sylar::ds
sylar::ds::MultiPair::MultiPair	sylar/sylar/ds/util.h	/^    MultiPair(const K& k = K(), const V& v = V())$/;"	f	struct:sylar::ds::MultiPair	access:public	signature:(const K & k=K (),const V & v=V ())
sylar::ds::MultiPair::first	sylar/sylar/ds/util.h	/^    K first;$/;"	m	struct:sylar::ds::MultiPair	typeref:typename:K	access:public
sylar::ds::MultiPair::operator <	sylar/sylar/ds/util.h	/^    bool operator<(const Pair<K, V>& o) const {$/;"	f	struct:sylar::ds::MultiPair	typeref:typename:bool	access:public	signature:(const Pair<K,V> & o) const
sylar::ds::MultiPair::operator ==	sylar/sylar/ds/util.h	/^    bool operator==(const Pair<K, V>& o) const {$/;"	f	struct:sylar::ds::MultiPair	typeref:typename:bool	access:public	signature:(const Pair<K,V> & o) const
sylar::ds::MultiPair::second	sylar/sylar/ds/util.h	/^    V second;$/;"	m	struct:sylar::ds::MultiPair	typeref:typename:V	access:public
sylar::ds::Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash {$/;"	c	namespace:sylar::ds
sylar::ds::Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<Pair<K, V>, seed> {$/;"	c	namespace:sylar::ds
sylar::ds::Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<int32_t, seed> {$/;"	c	namespace:sylar::ds
sylar::ds::Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<int64_t, seed> {$/;"	c	namespace:sylar::ds
sylar::ds::Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<std::string, seed> {$/;"	c	namespace:sylar::ds
sylar::ds::Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<std::vector<T>, seed> {$/;"	c	namespace:sylar::ds
sylar::ds::Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<uint32_t, seed> {$/;"	c	namespace:sylar::ds
sylar::ds::Murmur3Hash	sylar/sylar/ds/util.h	/^class Murmur3Hash<uint64_t, seed> {$/;"	c	namespace:sylar::ds
sylar::ds::Murmur3Hash64	sylar/sylar/ds/util.h	/^class Murmur3Hash64 {$/;"	c	namespace:sylar::ds
sylar::ds::Murmur3Hash64	sylar/sylar/ds/util.h	/^class Murmur3Hash64<std::string, seed, seed2> {$/;"	c	namespace:sylar::ds
sylar::ds::Murmur3Hash64	sylar/sylar/ds/util.h	/^class Murmur3Hash64<std::vector<T>, seed, seed2> {$/;"	c	namespace:sylar::ds
sylar::ds::Murmur3Hash64::operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const std::vector<T>& data) {$/;"	f	class:sylar::ds::Murmur3Hash64	typeref:typename:uint32_t	access:public	signature:(const std::vector<T> & data)
sylar::ds::Murmur3Hash64::operator ()	sylar/sylar/ds/util.h	/^    uint64_t operator()(const T& data) {$/;"	f	class:sylar::ds::Murmur3Hash64	typeref:typename:uint64_t	access:public	signature:(const T & data)
sylar::ds::Murmur3Hash64::operator ()	sylar/sylar/ds/util.h	/^    uint64_t operator()(const std::string& data) {$/;"	f	class:sylar::ds::Murmur3Hash64	typeref:typename:uint64_t	access:public	signature:(const std::string & data)
sylar::ds::Murmur3Hash::KeyHashType	sylar/sylar/ds/util.h	/^    typedef Murmur3Hash<K, seed> KeyHashType;$/;"	t	class:sylar::ds::Murmur3Hash	typeref:typename:Murmur3Hash<K,seed>	access:public
sylar::ds::Murmur3Hash::hash	sylar/sylar/ds/util.h	/^    KeyHashType hash;$/;"	m	class:sylar::ds::Murmur3Hash	typeref:typename:KeyHashType	access:public
sylar::ds::Murmur3Hash::operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const Pair<K, V>& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const Pair<K,V> & data)
sylar::ds::Murmur3Hash::operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const T& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const T & data)
sylar::ds::Murmur3Hash::operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const int& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const int & data)
sylar::ds::Murmur3Hash::operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const int64_t& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const int64_t & data)
sylar::ds::Murmur3Hash::operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const std::string& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const std::string & data)
sylar::ds::Murmur3Hash::operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const std::vector<T>& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const std::vector<T> & data)
sylar::ds::Murmur3Hash::operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const uint32_t& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const uint32_t & data)
sylar::ds::Murmur3Hash::operator ()	sylar/sylar/ds/util.h	/^    uint32_t operator()(const uint64_t& data) {$/;"	f	class:sylar::ds::Murmur3Hash	typeref:typename:uint32_t	access:public	signature:(const uint64_t & data)
sylar::ds::Pair	sylar/sylar/ds/util.h	/^struct Pair {$/;"	s	namespace:sylar::ds
sylar::ds::Pair::Pair	sylar/sylar/ds/util.h	/^    Pair(const K& k = K(), const V& v = V())$/;"	f	struct:sylar::ds::Pair	access:public	signature:(const K & k=K (),const V & v=V ())
sylar::ds::Pair::first	sylar/sylar/ds/util.h	/^    K first;$/;"	m	struct:sylar::ds::Pair	typeref:typename:K	access:public
sylar::ds::Pair::operator <	sylar/sylar/ds/util.h	/^    bool operator<(const Pair<K, V>& o) const {$/;"	f	struct:sylar::ds::Pair	typeref:typename:bool	access:public	signature:(const Pair<K,V> & o) const
sylar::ds::Pair::operator ==	sylar/sylar/ds/util.h	/^    bool operator==(const Pair<K, V>& o) const {$/;"	f	struct:sylar::ds::Pair	typeref:typename:bool	access:public	signature:(const Pair<K,V> & o) const
sylar::ds::Pair::second	sylar/sylar/ds/util.h	/^    V second;$/;"	m	struct:sylar::ds::Pair	typeref:typename:V	access:public
sylar::ds::PrimeGenerator	sylar/sylar/ds/util.h	/^class PrimeGenerator {$/;"	c	namespace:sylar::ds
sylar::ds::PrimeGenerator::PrimeGenerator	sylar/sylar/ds/util.cc	/^PrimeGenerator::PrimeGenerator()$/;"	f	class:sylar::ds::PrimeGenerator	signature:()
sylar::ds::PrimeGenerator::PrimeGenerator	sylar/sylar/ds/util.h	/^    PrimeGenerator();$/;"	p	class:sylar::ds::PrimeGenerator	access:public	signature:()
sylar::ds::PrimeGenerator::getIndex	sylar/sylar/ds/util.cc	/^uint32_t PrimeGenerator::getIndex() const {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	signature:() const
sylar::ds::PrimeGenerator::getIndex	sylar/sylar/ds/util.h	/^    uint32_t getIndex() const;$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	access:public	signature:() const
sylar::ds::PrimeGenerator::getValue	sylar/sylar/ds/util.cc	/^uint32_t PrimeGenerator::getValue() {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	signature:()
sylar::ds::PrimeGenerator::getValue	sylar/sylar/ds/util.h	/^    uint32_t getValue();$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	access:public	signature:()
sylar::ds::PrimeGenerator::hasNext	sylar/sylar/ds/util.cc	/^bool PrimeGenerator::hasNext() {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:bool	signature:()
sylar::ds::PrimeGenerator::hasNext	sylar/sylar/ds/util.cc	/^bool PrimeGenerator::hasNext(uint32_t dist) {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:bool	signature:(uint32_t dist)
sylar::ds::PrimeGenerator::hasNext	sylar/sylar/ds/util.h	/^    bool hasNext();$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:bool	access:public	signature:()
sylar::ds::PrimeGenerator::hasNext	sylar/sylar/ds/util.h	/^    bool hasNext(uint32_t dist);$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:bool	access:public	signature:(uint32_t dist)
sylar::ds::PrimeGenerator::hasPrev	sylar/sylar/ds/util.cc	/^bool PrimeGenerator::hasPrev() {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:bool	signature:()
sylar::ds::PrimeGenerator::hasPrev	sylar/sylar/ds/util.h	/^    bool hasPrev();$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:bool	access:public	signature:()
sylar::ds::PrimeGenerator::m_cur	sylar/sylar/ds/util.h	/^    const uint32_t* m_cur;$/;"	m	class:sylar::ds::PrimeGenerator	typeref:typename:const uint32_t *	access:private
sylar::ds::PrimeGenerator::nextValue	sylar/sylar/ds/util.cc	/^uint32_t PrimeGenerator::nextValue() {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	signature:()
sylar::ds::PrimeGenerator::nextValue	sylar/sylar/ds/util.h	/^    uint32_t nextValue();$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	access:public	signature:()
sylar::ds::PrimeGenerator::prevValue	sylar/sylar/ds/util.cc	/^uint32_t PrimeGenerator::prevValue() {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	signature:()
sylar::ds::PrimeGenerator::prevValue	sylar/sylar/ds/util.h	/^    uint32_t prevValue();$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	access:public	signature:()
sylar::ds::PrimeGenerator::setIndex	sylar/sylar/ds/util.cc	/^void PrimeGenerator::setIndex(uint32_t idx) {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:void	signature:(uint32_t idx)
sylar::ds::PrimeGenerator::setIndex	sylar/sylar/ds/util.h	/^    void setIndex(uint32_t idx);$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:void	access:public	signature:(uint32_t idx)
sylar::ds::PrimeGenerator::upperValue	sylar/sylar/ds/util.cc	/^uint32_t PrimeGenerator::upperValue(uint32_t v, uint32_t skip) {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	signature:(uint32_t v,uint32_t skip)
sylar::ds::PrimeGenerator::upperValue	sylar/sylar/ds/util.h	/^    uint32_t upperValue(uint32_t v, uint32_t skip = 0);$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	access:public	signature:(uint32_t v,uint32_t skip=0)
sylar::ds::RandomStringGenerator	sylar/sylar/ds/util.h	/^class RandomStringGenerator {$/;"	c	namespace:sylar::ds
sylar::ds::RandomStringGenerator::Gen	sylar/sylar/ds/util.cc	/^std::string RandomStringGenerator::Gen(uint32_t size) {$/;"	f	class:sylar::ds::RandomStringGenerator	typeref:typename:std::string	signature:(uint32_t size)
sylar::ds::RandomStringGenerator::Gen	sylar/sylar/ds/util.h	/^    static std::string Gen(uint32_t size = 10);$/;"	p	class:sylar::ds::RandomStringGenerator	typeref:typename:std::string	access:public	signature:(uint32_t size=10)
sylar::ds::RoaringBitmap	sylar/sylar/ds/roaring_bitmap.h	/^class RoaringBitmap {$/;"	c	namespace:sylar::ds
sylar::ds::RoaringBitmap::RoaringBitmap	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::RoaringBitmap() {$/;"	f	class:sylar::ds::RoaringBitmap	signature:()
sylar::ds::RoaringBitmap::RoaringBitmap	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::RoaringBitmap(const Roaring& b)$/;"	f	class:sylar::ds::RoaringBitmap	signature:(const Roaring & b)
sylar::ds::RoaringBitmap::RoaringBitmap	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::RoaringBitmap(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::RoaringBitmap	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::RoaringBitmap(uint32_t size) {$/;"	f	class:sylar::ds::RoaringBitmap	signature:(uint32_t size)
sylar::ds::RoaringBitmap::RoaringBitmap	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap();$/;"	p	class:sylar::ds::RoaringBitmap	access:public	signature:()
sylar::ds::RoaringBitmap::RoaringBitmap	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap(const Roaring& b);$/;"	p	class:sylar::ds::RoaringBitmap	access:private	signature:(const Roaring & b)
sylar::ds::RoaringBitmap::RoaringBitmap	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap(const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	access:public	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::RoaringBitmap	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap(uint32_t size);$/;"	p	class:sylar::ds::RoaringBitmap	access:public	signature:(uint32_t size)
sylar::ds::RoaringBitmap::any	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::any() const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:() const
sylar::ds::RoaringBitmap::any	sylar/sylar/ds/roaring_bitmap.h	/^    bool any() const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:() const
sylar::ds::RoaringBitmap::begin	sylar/sylar/ds/roaring_bitmap.h	/^    iterator begin() const { return m_bitmap.begin();}$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:iterator	access:public	signature:() const
sylar::ds::RoaringBitmap::compress	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::ptr RoaringBitmap::compress() const{$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap::ptr	signature:() const
sylar::ds::RoaringBitmap::compress	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap::ptr compress() const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap::ptr	access:public	signature:() const
sylar::ds::RoaringBitmap::cross	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::cross(const RoaringBitmap& b) const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:(const RoaringBitmap & b) const
sylar::ds::RoaringBitmap::cross	sylar/sylar/ds/roaring_bitmap.h	/^    bool cross(const RoaringBitmap& b) const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:(const RoaringBitmap & b) const
sylar::ds::RoaringBitmap::end	sylar/sylar/ds/roaring_bitmap.h	/^    iterator end() const { return m_bitmap.end(); }$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:iterator	access:public	signature:() const
sylar::ds::RoaringBitmap::foreach	sylar/sylar/ds/roaring_bitmap.cc	/^void RoaringBitmap::foreach(std::function<bool(uint32_t)> cb) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:void	signature:(std::function<bool (uint32_t)> cb)
sylar::ds::RoaringBitmap::foreach	sylar/sylar/ds/roaring_bitmap.h	/^    void foreach(std::function<bool(uint32_t)> cb);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:void	access:public	signature:(std::function<bool (uint32_t)> cb)
sylar::ds::RoaringBitmap::get	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::get(uint32_t from, uint32_t size, bool v) const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:(uint32_t from,uint32_t size,bool v) const
sylar::ds::RoaringBitmap::get	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::get(uint32_t idx) const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:(uint32_t idx) const
sylar::ds::RoaringBitmap::get	sylar/sylar/ds/roaring_bitmap.h	/^    bool get(uint32_t from, uint32_t size, bool v) const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:(uint32_t from,uint32_t size,bool v) const
sylar::ds::RoaringBitmap::get	sylar/sylar/ds/roaring_bitmap.h	/^    bool get(uint32_t idx) const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:(uint32_t idx) const
sylar::ds::RoaringBitmap::getCompressRate	sylar/sylar/ds/roaring_bitmap.cc	/^float RoaringBitmap::getCompressRate() const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:float	signature:() const
sylar::ds::RoaringBitmap::getCompressRate	sylar/sylar/ds/roaring_bitmap.h	/^    float getCompressRate() const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:float	access:public	signature:() const
sylar::ds::RoaringBitmap::getCount	sylar/sylar/ds/roaring_bitmap.cc	/^uint32_t RoaringBitmap::getCount() const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:uint32_t	signature:() const
sylar::ds::RoaringBitmap::getCount	sylar/sylar/ds/roaring_bitmap.h	/^    uint32_t getCount() const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:uint32_t	access:public	signature:() const
sylar::ds::RoaringBitmap::iterator	sylar/sylar/ds/roaring_bitmap.h	/^    typedef RoaringSetBitForwardIterator iterator;$/;"	t	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringSetBitForwardIterator	access:public
sylar::ds::RoaringBitmap::listPosAsc	sylar/sylar/ds/roaring_bitmap.cc	/^void RoaringBitmap::listPosAsc(std::vector<uint32_t>& pos) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:void	signature:(std::vector<uint32_t> & pos)
sylar::ds::RoaringBitmap::listPosAsc	sylar/sylar/ds/roaring_bitmap.h	/^    void listPosAsc(std::vector<uint32_t>& pos);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:void	access:public	signature:(std::vector<uint32_t> & pos)
sylar::ds::RoaringBitmap::m_bitmap	sylar/sylar/ds/roaring_bitmap.h	/^    Roaring m_bitmap;$/;"	m	class:sylar::ds::RoaringBitmap	typeref:typename:Roaring	access:private
sylar::ds::RoaringBitmap::operator !=	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::operator!= (const RoaringBitmap& b) const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:(const RoaringBitmap & b) const
sylar::ds::RoaringBitmap::operator !=	sylar/sylar/ds/roaring_bitmap.h	/^    bool operator!= (const RoaringBitmap& b) const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:(const RoaringBitmap & b) const
sylar::ds::RoaringBitmap::operator &	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap RoaringBitmap::operator& (const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator &	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap operator& (const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	access:public	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator &=	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap& RoaringBitmap::operator&=(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator &=	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap& operator&=(const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	access:public	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator -	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap RoaringBitmap::operator-(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator -	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap operator- (const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	access:public	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator -=	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap& RoaringBitmap::operator-=(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator -=	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap& operator-=(const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	access:public	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator =	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap& RoaringBitmap::operator=(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator =	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap& operator=(const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	access:public	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator ==	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::operator== (const RoaringBitmap& b) const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:(const RoaringBitmap & b) const
sylar::ds::RoaringBitmap::operator ==	sylar/sylar/ds/roaring_bitmap.h	/^    bool operator== (const RoaringBitmap& b) const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:(const RoaringBitmap & b) const
sylar::ds::RoaringBitmap::operator ^	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap RoaringBitmap::operator^(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator ^	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap operator^ (const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	access:public	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator ^=	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap& RoaringBitmap::operator^=(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator ^=	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap& operator^=(const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	access:public	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator |	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap RoaringBitmap::operator| (const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator |	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap operator| (const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap	access:public	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator |=	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap& RoaringBitmap::operator|=(const RoaringBitmap& b) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::operator |=	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap& operator|=(const RoaringBitmap& b);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap &	access:public	signature:(const RoaringBitmap & b)
sylar::ds::RoaringBitmap::ptr	sylar/sylar/ds/roaring_bitmap.h	/^    typedef std::shared_ptr<RoaringBitmap> ptr;$/;"	t	class:sylar::ds::RoaringBitmap	typeref:typename:std::shared_ptr<RoaringBitmap>	access:public
sylar::ds::RoaringBitmap::rbegin	sylar/sylar/ds/roaring_bitmap.h	/^    reverse_iterator rbegin() const { return m_bitmap.rbegin();}$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:reverse_iterator	access:public	signature:() const
sylar::ds::RoaringBitmap::readFrom	sylar/sylar/ds/roaring_bitmap.cc	/^bool RoaringBitmap::readFrom(sylar::ByteArray::ptr ba) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:bool	signature:(sylar::ByteArray::ptr ba)
sylar::ds::RoaringBitmap::readFrom	sylar/sylar/ds/roaring_bitmap.h	/^    bool readFrom(sylar::ByteArray::ptr ba);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:bool	access:public	signature:(sylar::ByteArray::ptr ba)
sylar::ds::RoaringBitmap::rend	sylar/sylar/ds/roaring_bitmap.h	/^    reverse_iterator rend() const { return m_bitmap.rend();}$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:reverse_iterator	access:public	signature:() const
sylar::ds::RoaringBitmap::reverse_iterator	sylar/sylar/ds/roaring_bitmap.h	/^    typedef RoaringSetBitReverseIterator reverse_iterator;$/;"	t	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringSetBitReverseIterator	access:public
sylar::ds::RoaringBitmap::rforeach	sylar/sylar/ds/roaring_bitmap.cc	/^void RoaringBitmap::rforeach(std::function<bool(uint32_t)> cb) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:void	signature:(std::function<bool (uint32_t)> cb)
sylar::ds::RoaringBitmap::rforeach	sylar/sylar/ds/roaring_bitmap.h	/^    void rforeach(std::function<bool(uint32_t)> cb);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:void	access:public	signature:(std::function<bool (uint32_t)> cb)
sylar::ds::RoaringBitmap::set	sylar/sylar/ds/roaring_bitmap.cc	/^void RoaringBitmap::set(uint32_t from, uint32_t size, bool v) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:void	signature:(uint32_t from,uint32_t size,bool v)
sylar::ds::RoaringBitmap::set	sylar/sylar/ds/roaring_bitmap.cc	/^void RoaringBitmap::set(uint32_t idx, bool v) {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:void	signature:(uint32_t idx,bool v)
sylar::ds::RoaringBitmap::set	sylar/sylar/ds/roaring_bitmap.h	/^    void set(uint32_t from, uint32_t size, bool v);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:void	access:public	signature:(uint32_t from,uint32_t size,bool v)
sylar::ds::RoaringBitmap::set	sylar/sylar/ds/roaring_bitmap.h	/^    void set(uint32_t idx, bool v);$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:void	access:public	signature:(uint32_t idx,bool v)
sylar::ds::RoaringBitmap::toString	sylar/sylar/ds/roaring_bitmap.cc	/^std::string RoaringBitmap::toString() const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:std::string	signature:() const
sylar::ds::RoaringBitmap::toString	sylar/sylar/ds/roaring_bitmap.h	/^    std::string toString() const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:std::string	access:public	signature:() const
sylar::ds::RoaringBitmap::uncompress	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::ptr RoaringBitmap::uncompress() const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap::ptr	signature:() const
sylar::ds::RoaringBitmap::uncompress	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap::ptr uncompress() const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap::ptr	access:public	signature:() const
sylar::ds::RoaringBitmap::writeTo	sylar/sylar/ds/roaring_bitmap.cc	/^void RoaringBitmap::writeTo(sylar::ByteArray::ptr ba) const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:void	signature:(sylar::ByteArray::ptr ba) const
sylar::ds::RoaringBitmap::writeTo	sylar/sylar/ds/roaring_bitmap.h	/^    void writeTo(sylar::ByteArray::ptr ba) const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:void	access:public	signature:(sylar::ByteArray::ptr ba) const
sylar::ds::RoaringBitmap::~RoaringBitmap	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::~RoaringBitmap() {$/;"	f	class:sylar::ds::RoaringBitmap	signature:()
sylar::ds::RoaringBitmap::~RoaringBitmap	sylar/sylar/ds/roaring_bitmap.h	/^    ~RoaringBitmap();$/;"	p	class:sylar::ds::RoaringBitmap	access:public	signature:()
sylar::ds::SortLast	sylar/sylar/ds/util.h	/^void SortLast(const T& data, const int& size) {$/;"	f	namespace:sylar::ds	typeref:typename:void	signature:(const T & data,const int & size)
sylar::ds::StringDict	sylar/sylar/ds/dict.h	/^class StringDict {$/;"	c	namespace:sylar::ds
sylar::ds::StringDict::GetID	sylar/sylar/ds/dict.h	/^    static uint64_t GetID(const char* str) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:(const char * str)
sylar::ds::StringDict::GetID	sylar/sylar/ds/dict.h	/^    static uint64_t GetID(const char* str, const uint32_t& size) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:(const char * str,const uint32_t & size)
sylar::ds::StringDict::GetID	sylar/sylar/ds/dict.h	/^    static uint64_t GetID(const std::string& str) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:(const std::string & str)
sylar::ds::StringDict::dump	sylar/sylar/ds/dict.h	/^    std::ostream& dump(std::ostream& os) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os)
sylar::ds::StringDict::foreach	sylar/sylar/ds/dict.h	/^    void foreach(std::function<bool(const uint64_t& k, const char* v, size_t size)> cb) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:void	access:public	signature:(std::function<bool (const uint64_t & k,const char * v,size_t size)> cb)
sylar::ds::StringDict::get	sylar/sylar/ds/dict.h	/^    std::string get(const uint64_t& id) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:std::string	access:public	signature:(const uint64_t & id)
sylar::ds::StringDict::getRaw	sylar/sylar/ds/dict.h	/^    SharedArray<char> getRaw(const uint64_t& id, bool duplicate = true) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:SharedArray<char>	access:public	signature:(const uint64_t & id,bool duplicate=true)
sylar::ds::StringDict::getTotal	sylar/sylar/ds/dict.h	/^    uint64_t getTotal() { return m_dict.getTotal();}$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:()
sylar::ds::StringDict::m_dict	sylar/sylar/ds/dict.h	/^    Dict<uint64_t, char> m_dict;$/;"	m	class:sylar::ds::StringDict	typeref:typename:Dict<uint64_t,char>	access:private
sylar::ds::StringDict::readFrom	sylar/sylar/ds/dict.h	/^    bool readFrom(std::istream& is, uint64_t speed = -1) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:bool	access:public	signature:(std::istream & is,uint64_t speed=-1)
sylar::ds::StringDict::update	sylar/sylar/ds/dict.h	/^    uint64_t update(const char* str) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:(const char * str)
sylar::ds::StringDict::update	sylar/sylar/ds/dict.h	/^    uint64_t update(const char* str, const uint32_t& size) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:(const char * str,const uint32_t & size)
sylar::ds::StringDict::update	sylar/sylar/ds/dict.h	/^    uint64_t update(const std::string& str) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:(const std::string & str)
sylar::ds::StringDict::writeTo	sylar/sylar/ds/dict.h	/^    bool writeTo(std::ostream& os, uint64_t speed = -1) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:bool	access:public	signature:(std::ostream & os,uint64_t speed=-1)
sylar::ds::TimedCache	sylar/sylar/ds/timed_cache.h	/^class TimedCache {$/;"	c	namespace:sylar::ds
sylar::ds::TimedCache::Item	sylar/sylar/ds/timed_cache.h	/^    struct Item {$/;"	s	class:sylar::ds::TimedCache	access:private
sylar::ds::TimedCache::Item::Item	sylar/sylar/ds/timed_cache.h	/^        Item(const K& k, const V& v, const uint64_t& t)$/;"	f	struct:sylar::ds::TimedCache::Item	access:public	signature:(const K & k,const V & v,const uint64_t & t)
sylar::ds::TimedCache::Item::key	sylar/sylar/ds/timed_cache.h	/^        K key;$/;"	m	struct:sylar::ds::TimedCache::Item	typeref:typename:K	access:public
sylar::ds::TimedCache::Item::operator <	sylar/sylar/ds/timed_cache.h	/^        bool operator< (const Item& oth) const {$/;"	f	struct:sylar::ds::TimedCache::Item	typeref:typename:bool	access:public	signature:(const Item & oth) const
sylar::ds::TimedCache::Item::ts	sylar/sylar/ds/timed_cache.h	/^        uint64_t ts;$/;"	m	struct:sylar::ds::TimedCache::Item	typeref:typename:uint64_t	access:public
sylar::ds::TimedCache::Item::val	sylar/sylar/ds/timed_cache.h	/^        mutable V val;$/;"	m	struct:sylar::ds::TimedCache::Item	typeref:typename:V	access:public
sylar::ds::TimedCache::TimedCache	sylar/sylar/ds/timed_cache.h	/^    TimedCache(size_t max_size = 0, size_t elasticity = 0$/;"	f	class:sylar::ds::TimedCache	access:public	signature:(size_t max_size=0,size_t elasticity=0,CacheStatus * status=nullptr)
sylar::ds::TimedCache::checkTimeout	sylar/sylar/ds/timed_cache.h	/^    size_t checkTimeout(const uint64_t& ts = sylar::GetCurrentMS()) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:public	signature:(const uint64_t & ts=sylar::GetCurrentMS ())
sylar::ds::TimedCache::clear	sylar/sylar/ds/timed_cache.h	/^    bool clear() {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:bool	access:public	signature:()
sylar::ds::TimedCache::del	sylar/sylar/ds/timed_cache.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::TimedCache::empty	sylar/sylar/ds/timed_cache.h	/^    size_t empty() {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:public	signature:()
sylar::ds::TimedCache::exists	sylar/sylar/ds/timed_cache.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::TimedCache::expired	sylar/sylar/ds/timed_cache.h	/^    bool expired(const K& k, const uint64_t& ts) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:bool	access:public	signature:(const K & k,const uint64_t & ts)
sylar::ds::TimedCache::foreach	sylar/sylar/ds/timed_cache.h	/^    void foreach(F& f) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:void	access:public	signature:(F & f)
sylar::ds::TimedCache::get	sylar/sylar/ds/timed_cache.h	/^    V get(const K& k) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:V	access:public	signature:(const K & k)
sylar::ds::TimedCache::get	sylar/sylar/ds/timed_cache.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:bool	access:public	signature:(const K & k,V & v)
sylar::ds::TimedCache::getElasticity	sylar/sylar/ds/timed_cache.h	/^    size_t getElasticity() const { return m_elasticity;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::TimedCache::getMaxAllowedSize	sylar/sylar/ds/timed_cache.h	/^    size_t getMaxAllowedSize() const { return m_maxSize + m_elasticity;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::TimedCache::getMaxSize	sylar/sylar/ds/timed_cache.h	/^    size_t getMaxSize() const { return m_maxSize;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::TimedCache::getStatus	sylar/sylar/ds/timed_cache.h	/^    CacheStatus* getStatus() const { return m_status;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:CacheStatus *	access:public	signature:() const
sylar::ds::TimedCache::item_type	sylar/sylar/ds/timed_cache.h	/^    typedef Item item_type;$/;"	t	class:sylar::ds::TimedCache	typeref:typename:Item	access:public
sylar::ds::TimedCache::m_cache	sylar/sylar/ds/timed_cache.h	/^    map_type m_cache;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:map_type	access:private
sylar::ds::TimedCache::m_cb	sylar/sylar/ds/timed_cache.h	/^    prune_callback m_cb;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:prune_callback	access:private
sylar::ds::TimedCache::m_elasticity	sylar/sylar/ds/timed_cache.h	/^    uint64_t m_elasticity;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:uint64_t	access:private
sylar::ds::TimedCache::m_maxSize	sylar/sylar/ds/timed_cache.h	/^    uint64_t m_maxSize;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:uint64_t	access:private
sylar::ds::TimedCache::m_mutex	sylar/sylar/ds/timed_cache.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:RWMutexType	access:private
sylar::ds::TimedCache::m_status	sylar/sylar/ds/timed_cache.h	/^    CacheStatus* m_status;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:CacheStatus *	access:private
sylar::ds::TimedCache::m_statusOwner	sylar/sylar/ds/timed_cache.h	/^    bool m_statusOwner = false;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:bool	access:private
sylar::ds::TimedCache::m_timed	sylar/sylar/ds/timed_cache.h	/^    set_type m_timed;$/;"	m	class:sylar::ds::TimedCache	typeref:typename:set_type	access:private
sylar::ds::TimedCache::map_type	sylar/sylar/ds/timed_cache.h	/^    typedef std::unordered_map<K, typename set_type::iterator> map_type;$/;"	t	class:sylar::ds::TimedCache	typeref:typename:std::unordered_map<K,typename set_type::iterator>	access:public
sylar::ds::TimedCache::prune	sylar/sylar/ds/timed_cache.h	/^    size_t prune() {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:protected	signature:()
sylar::ds::TimedCache::prune_callback	sylar/sylar/ds/timed_cache.h	/^    typedef std::function<void(const K&, const V&)> prune_callback;$/;"	t	class:sylar::ds::TimedCache	access:public
sylar::ds::TimedCache::ptr	sylar/sylar/ds/timed_cache.h	/^    typedef std::shared_ptr<TimedCache> ptr;$/;"	t	class:sylar::ds::TimedCache	typeref:typename:std::shared_ptr<TimedCache>	access:public
sylar::ds::TimedCache::set	sylar/sylar/ds/timed_cache.h	/^    void set(const K& k, const V& v, uint64_t expired) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:void	access:public	signature:(const K & k,const V & v,uint64_t expired)
sylar::ds::TimedCache::setElasticity	sylar/sylar/ds/timed_cache.h	/^    void setElasticity(const size_t& v) { m_elasticity = v;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:void	access:public	signature:(const size_t & v)
sylar::ds::TimedCache::setMaxSize	sylar/sylar/ds/timed_cache.h	/^    void setMaxSize(const size_t& v) { m_maxSize = v;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:void	access:public	signature:(const size_t & v)
sylar::ds::TimedCache::setPruneCallback	sylar/sylar/ds/timed_cache.h	/^    void setPruneCallback(prune_callback cb) { m_cb = cb;}$/;"	f	class:sylar::ds::TimedCache	typeref:typename:void	access:public	signature:(prune_callback cb)
sylar::ds::TimedCache::setStatus	sylar/sylar/ds/timed_cache.h	/^    void setStatus(CacheStatus* v, bool owner = false) {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:void	access:public	signature:(CacheStatus * v,bool owner=false)
sylar::ds::TimedCache::set_type	sylar/sylar/ds/timed_cache.h	/^    typedef std::set<item_type> set_type;$/;"	t	class:sylar::ds::TimedCache	typeref:typename:std::set<item_type>	access:public
sylar::ds::TimedCache::size	sylar/sylar/ds/timed_cache.h	/^    size_t size() {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:size_t	access:public	signature:()
sylar::ds::TimedCache::toStatusString	sylar/sylar/ds/timed_cache.h	/^    std::string toStatusString() {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:std::string	access:public	signature:()
sylar::ds::TimedCache::~TimedCache	sylar/sylar/ds/timed_cache.h	/^    ~TimedCache() {$/;"	f	class:sylar::ds::TimedCache	access:public	signature:()
sylar::ds::TimedLruCache	sylar/sylar/ds/timed_lru_cache.h	/^class TimedLruCache {$/;"	c	namespace:sylar::ds
sylar::ds::TimedLruCache::Item	sylar/sylar/ds/timed_lru_cache.h	/^    struct Item {$/;"	s	class:sylar::ds::TimedLruCache	access:private
sylar::ds::TimedLruCache::Item::Item	sylar/sylar/ds/timed_lru_cache.h	/^        Item(const K& k, const V& v, const uint64_t& t)$/;"	f	struct:sylar::ds::TimedLruCache::Item	access:public	signature:(const K & k,const V & v,const uint64_t & t)
sylar::ds::TimedLruCache::Item::key	sylar/sylar/ds/timed_lru_cache.h	/^        K key;$/;"	m	struct:sylar::ds::TimedLruCache::Item	typeref:typename:K	access:public
sylar::ds::TimedLruCache::Item::operator <	sylar/sylar/ds/timed_lru_cache.h	/^        bool operator< (const Item& oth) const {$/;"	f	struct:sylar::ds::TimedLruCache::Item	typeref:typename:bool	access:public	signature:(const Item & oth) const
sylar::ds::TimedLruCache::Item::ts	sylar/sylar/ds/timed_lru_cache.h	/^        uint64_t ts;$/;"	m	struct:sylar::ds::TimedLruCache::Item	typeref:typename:uint64_t	access:public
sylar::ds::TimedLruCache::Item::val	sylar/sylar/ds/timed_lru_cache.h	/^        mutable V val;$/;"	m	struct:sylar::ds::TimedLruCache::Item	typeref:typename:V	access:public
sylar::ds::TimedLruCache::ItemTimeOp	sylar/sylar/ds/timed_lru_cache.h	/^    struct ItemTimeOp {$/;"	s	class:sylar::ds::TimedLruCache	access:private
sylar::ds::TimedLruCache::ItemTimeOp::operator ()	sylar/sylar/ds/timed_lru_cache.h	/^        bool operator()(const value_type& a$/;"	f	struct:sylar::ds::TimedLruCache::ItemTimeOp	typeref:typename:bool	access:public	signature:(const value_type & a,const value_type & b) const
sylar::ds::TimedLruCache::TimedLruCache	sylar/sylar/ds/timed_lru_cache.h	/^    TimedLruCache(size_t max_size = 0, size_t elasticity = 0$/;"	f	class:sylar::ds::TimedLruCache	access:public	signature:(size_t max_size=0,size_t elasticity=0,CacheStatus * status=nullptr)
sylar::ds::TimedLruCache::checkTimeout	sylar/sylar/ds/timed_lru_cache.h	/^    size_t checkTimeout(const uint64_t& ts = sylar::GetCurrentMS()) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:public	signature:(const uint64_t & ts=sylar::GetCurrentMS ())
sylar::ds::TimedLruCache::clear	sylar/sylar/ds/timed_lru_cache.h	/^    bool clear() {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:bool	access:public	signature:()
sylar::ds::TimedLruCache::del	sylar/sylar/ds/timed_lru_cache.h	/^    bool del(const K& k) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::TimedLruCache::empty	sylar/sylar/ds/timed_lru_cache.h	/^    bool empty() {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:bool	access:public	signature:()
sylar::ds::TimedLruCache::exists	sylar/sylar/ds/timed_lru_cache.h	/^    bool exists(const K& k) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:bool	access:public	signature:(const K & k)
sylar::ds::TimedLruCache::foreach	sylar/sylar/ds/timed_lru_cache.h	/^    void foreach(F& f) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:void	access:public	signature:(F & f)
sylar::ds::TimedLruCache::get	sylar/sylar/ds/timed_lru_cache.h	/^    V get(const K& k) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:V	access:public	signature:(const K & k)
sylar::ds::TimedLruCache::get	sylar/sylar/ds/timed_lru_cache.h	/^    bool get(const K& k, V& v) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:bool	access:public	signature:(const K & k,V & v)
sylar::ds::TimedLruCache::getElasticity	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getElasticity() const { return m_elasticity;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::TimedLruCache::getMaxAllowedSize	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getMaxAllowedSize() const { return m_maxSize + m_elasticity;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::TimedLruCache::getMaxSize	sylar/sylar/ds/timed_lru_cache.h	/^    size_t getMaxSize() const { return m_maxSize;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:public	signature:() const
sylar::ds::TimedLruCache::getStatus	sylar/sylar/ds/timed_lru_cache.h	/^    CacheStatus* getStatus() const { return m_status;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:CacheStatus *	access:public	signature:() const
sylar::ds::TimedLruCache::item_type	sylar/sylar/ds/timed_lru_cache.h	/^    typedef Item item_type;$/;"	t	class:sylar::ds::TimedLruCache	typeref:typename:Item	access:public
sylar::ds::TimedLruCache::list_type	sylar/sylar/ds/timed_lru_cache.h	/^    typedef std::list<item_type> list_type;$/;"	t	class:sylar::ds::TimedLruCache	typeref:typename:std::list<item_type>	access:public
sylar::ds::TimedLruCache::m_cache	sylar/sylar/ds/timed_lru_cache.h	/^    map_type m_cache;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:map_type	access:private
sylar::ds::TimedLruCache::m_cb	sylar/sylar/ds/timed_lru_cache.h	/^    prune_callback m_cb;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:prune_callback	access:private
sylar::ds::TimedLruCache::m_elasticity	sylar/sylar/ds/timed_lru_cache.h	/^    size_t m_elasticity;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:private
sylar::ds::TimedLruCache::m_keys	sylar/sylar/ds/timed_lru_cache.h	/^    list_type m_keys;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:list_type	access:private
sylar::ds::TimedLruCache::m_maxSize	sylar/sylar/ds/timed_lru_cache.h	/^    size_t m_maxSize;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:private
sylar::ds::TimedLruCache::m_mutex	sylar/sylar/ds/timed_lru_cache.h	/^    MutexType m_mutex;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:MutexType	access:private
sylar::ds::TimedLruCache::m_status	sylar/sylar/ds/timed_lru_cache.h	/^    CacheStatus* m_status = nullptr;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:CacheStatus *	access:private
sylar::ds::TimedLruCache::m_statusOwner	sylar/sylar/ds/timed_lru_cache.h	/^    bool m_statusOwner = false;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:bool	access:private
sylar::ds::TimedLruCache::m_timed	sylar/sylar/ds/timed_lru_cache.h	/^    set_type m_timed;$/;"	m	class:sylar::ds::TimedLruCache	typeref:typename:set_type	access:private
sylar::ds::TimedLruCache::map_type	sylar/sylar/ds/timed_lru_cache.h	/^    typedef std::unordered_map<K, value_type> map_type;$/;"	t	class:sylar::ds::TimedLruCache	typeref:typename:std::unordered_map<K,value_type>	access:public
sylar::ds::TimedLruCache::prune	sylar/sylar/ds/timed_lru_cache.h	/^    size_t prune() {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:protected	signature:()
sylar::ds::TimedLruCache::prune_callback	sylar/sylar/ds/timed_lru_cache.h	/^    typedef std::function<void(const K&, const V&)> prune_callback;$/;"	t	class:sylar::ds::TimedLruCache	access:public
sylar::ds::TimedLruCache::ptr	sylar/sylar/ds/timed_lru_cache.h	/^    typedef std::shared_ptr<TimedLruCache> ptr;$/;"	t	class:sylar::ds::TimedLruCache	typeref:typename:std::shared_ptr<TimedLruCache>	access:public
sylar::ds::TimedLruCache::set	sylar/sylar/ds/timed_lru_cache.h	/^    void set(const K& k, const V& v, uint64_t expired) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:void	access:public	signature:(const K & k,const V & v,uint64_t expired)
sylar::ds::TimedLruCache::setElasticity	sylar/sylar/ds/timed_lru_cache.h	/^    void setElasticity(const size_t& v) { m_elasticity = v;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:void	access:public	signature:(const size_t & v)
sylar::ds::TimedLruCache::setMaxSize	sylar/sylar/ds/timed_lru_cache.h	/^    void setMaxSize(const size_t& v) { m_maxSize = v;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:void	access:public	signature:(const size_t & v)
sylar::ds::TimedLruCache::setPruneCallback	sylar/sylar/ds/timed_lru_cache.h	/^    void setPruneCallback(prune_callback cb) { m_cb = cb;}$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:void	access:public	signature:(prune_callback cb)
sylar::ds::TimedLruCache::setStatus	sylar/sylar/ds/timed_lru_cache.h	/^    void setStatus(CacheStatus* v, bool owner = false) {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:void	access:public	signature:(CacheStatus * v,bool owner=false)
sylar::ds::TimedLruCache::set_type	sylar/sylar/ds/timed_lru_cache.h	/^    typedef std::set<value_type, ItemTimeOp> set_type;$/;"	t	class:sylar::ds::TimedLruCache	typeref:typename:std::set<value_type,ItemTimeOp>	access:public
sylar::ds::TimedLruCache::size	sylar/sylar/ds/timed_lru_cache.h	/^    size_t size() {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:size_t	access:public	signature:()
sylar::ds::TimedLruCache::toStatusString	sylar/sylar/ds/timed_lru_cache.h	/^    std::string toStatusString() {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:std::string	access:public	signature:()
sylar::ds::TimedLruCache::value_type	sylar/sylar/ds/timed_lru_cache.h	/^    typedef typename list_type::iterator value_type;$/;"	t	class:sylar::ds::TimedLruCache	typeref:typename:list_type::iterator	access:public
sylar::ds::TimedLruCache::~TimedLruCache	sylar/sylar/ds/timed_lru_cache.h	/^    ~TimedLruCache() {$/;"	f	class:sylar::ds::TimedLruCache	access:public	signature:()
sylar::ds::basket	sylar/sylar/ds/util.h	/^inline int basket(const int &  n) {$/;"	f	namespace:sylar::ds	typeref:typename:int	signature:(const int & n)
sylar::ds::count_bits	sylar/sylar/ds/bitmap.cc	/^T count_bits(const T& v) {$/;"	f	namespace:sylar::ds	typeref:typename:T	signature:(const T & v)
sylar::ds::count_bits	sylar/sylar/ds/bitmap.cc	/^uint64_t count_bits(const uint64_t& v) {$/;"	f	namespace:sylar::ds	typeref:typename:uint64_t	signature:(const uint64_t & v)
sylar::ds::s_init	sylar/sylar/ds/bitmap.cc	/^static bool s_init = Bitmap::init();$/;"	v	namespace:sylar::ds	typeref:typename:bool	file:
sylar::ds::s_prime_end	sylar/sylar/ds/util.cc	/^static const uint32_t* s_prime_end = s_prime_list + s_prime_size;$/;"	v	namespace:sylar::ds	typeref:typename:const uint32_t *	file:
sylar::ds::s_prime_list	sylar/sylar/ds/util.cc	/^static const uint32_t s_prime_list[] = {$/;"	v	namespace:sylar::ds	typeref:typename:const uint32_t[]	file:
sylar::ds::s_prime_size	sylar/sylar/ds/util.cc	/^static const uint32_t s_prime_size = 1250;$/;"	v	namespace:sylar::ds	typeref:typename:const uint32_t	file:
sylar::fmix32	sylar/sylar/util/hash_util.cc	/^static inline uint32_t fmix32(uint32_t h)$/;"	f	namespace:sylar	typeref:typename:uint32_t	file:	signature:(uint32_t h)
sylar::g_daemon_restart_interval	sylar/sylar/daemon.cc	/^static sylar::ConfigVar<uint32_t>::ptr g_daemon_restart_interval$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<uint32_t>::ptr	file:
sylar::g_fiber_stack_size	sylar/sylar/fiber.cc	/^static ConfigVar<uint32_t>::ptr g_fiber_stack_size =$/;"	v	namespace:sylar	typeref:typename:ConfigVar<uint32_t>::ptr	file:
sylar::g_log_defines	sylar/sylar/log.cc	/^sylar::ConfigVar<std::set<LogDefine> >::ptr g_log_defines =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::set<LogDefine>>::ptr
sylar::g_logger	sylar/sylar/address.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/application.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/bytearray.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/config.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/daemon.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/db/fox_thread.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/db/mysql.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/db/redis.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/db/sqlite3.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/email/smtp.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/env.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/fiber.cc	/^static Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:Logger::ptr	file:
sylar::g_logger	sylar/sylar/iomanager.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/library.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/module.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/rock/rock_protocol.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/rock/rock_server.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/rock/rock_stream.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/scheduler.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/socket.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/streams/async_socket_stream.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/streams/load_balance.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/streams/service_discovery.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/tcp_server.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/thread.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_logger	sylar/sylar/util.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar	typeref:typename:sylar::Logger::ptr	file:
sylar::g_module_path	sylar/sylar/module.cc	/^static sylar::ConfigVar<std::string>::ptr g_module_path$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::string>::ptr	file:
sylar::g_mysql_dbs	sylar/sylar/db/mysql.cc	/^static sylar::ConfigVar<std::map<std::string, std::map<std::string, std::string> > >::ptr g_mysq/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::map<std::string,std::map<std::string,std::string>>>::ptr	file:
sylar::g_redis	sylar/sylar/db/redis.cc	/^static sylar::ConfigVar<std::map<std::string, std::map<std::string, std::string> > >::ptr g_redi/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::map<std::string,std::map<std::string,std::string>>>::ptr	file:
sylar::g_rock_protocol_gzip_min_length	sylar/sylar/rock/rock_protocol.cc	/^static sylar::ConfigVar<uint32_t>::ptr g_rock_protocol_gzip_min_length$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<uint32_t>::ptr	file:
sylar::g_rock_protocol_max_length	sylar/sylar/rock/rock_protocol.cc	/^static sylar::ConfigVar<uint32_t>::ptr g_rock_protocol_max_length$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<uint32_t>::ptr	file:
sylar::g_rock_services	sylar/sylar/rock/rock_stream.cc	/^    ,std::unordered_map<std::string, std::string> > >::ptr g_rock_services =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>::ptr	file:
sylar::g_server_pid_file	sylar/sylar/application.cc	/^static sylar::ConfigVar<std::string>::ptr g_server_pid_file =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::string>::ptr	file:
sylar::g_server_work_path	sylar/sylar/application.cc	/^static sylar::ConfigVar<std::string>::ptr g_server_work_path =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::string>::ptr	file:
sylar::g_servers_conf	sylar/sylar/application.cc	/^static sylar::ConfigVar<std::vector<TcpServerConf> >::ptr g_servers_conf$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::vector<TcpServerConf>>::ptr	file:
sylar::g_service_discovery_zk	sylar/sylar/application.cc	/^static sylar::ConfigVar<std::string>::ptr g_service_discovery_zk =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::string>::ptr	file:
sylar::g_sqlite3_dbs	sylar/sylar/db/sqlite3.cc	/^static sylar::ConfigVar<std::map<std::string, std::map<std::string, std::string> > >::ptr g_sqli/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::map<std::string,std::map<std::string,std::string>>>::ptr	file:
sylar::g_tcp_connect_timeout	sylar/sylar/hook.cc	/^static sylar::ConfigVar<int>::ptr g_tcp_connect_timeout =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<int>::ptr	file:
sylar::g_tcp_server_read_timeout	sylar/sylar/tcp_server.cc	/^static sylar::ConfigVar<uint64_t>::ptr g_tcp_server_read_timeout =$/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<uint64_t>::ptr	file:
sylar::g_thread_info_set	sylar/sylar/db/fox_thread.cc	/^static sylar::ConfigVar<std::map<std::string, std::map<std::string, std::string> > >::ptr g_thre/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::map<std::string,std::map<std::string,std::string>>>::ptr	file:
sylar::g_worker_config	sylar/sylar/worker.cc	/^static sylar::ConfigVar<std::map<std::string, std::map<std::string, std::string> > >::ptr g_work/;"	v	namespace:sylar	typeref:typename:sylar::ConfigVar<std::map<std::string,std::map<std::string,std::string>>>::ptr	file:
sylar::get_value	sylar/sylar/db/redis.cc	/^static std::string get_value(const std::map<std::string, std::string>& m$/;"	f	namespace:sylar	typeref:typename:std::string	file:	signature:(const std::map<std::string,std::string> & m,const std::string & key,const std::string & def="")
sylar::hexstring_from_data	sylar/sylar/util/hash_util.cc	/^hexstring_from_data(const void *data, size_t len) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
sylar::hexstring_from_data	sylar/sylar/util/hash_util.cc	/^hexstring_from_data(const void *data, size_t len, char *output) {$/;"	f	namespace:sylar	typeref:typename:void	signature:(const void * data,size_t len,char * output)
sylar::hexstring_from_data	sylar/sylar/util/hash_util.cc	/^std::string hexstring_from_data(const std::string &data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::hexstring_from_data	sylar/sylar/util/hash_util.h	/^std::string hexstring_from_data(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::hexstring_from_data	sylar/sylar/util/hash_util.h	/^std::string hexstring_from_data(const void *data, size_t len);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
sylar::hexstring_from_data	sylar/sylar/util/hash_util.h	/^void hexstring_from_data(const void *data, size_t len, char *output);$/;"	p	namespace:sylar	typeref:typename:void	signature:(const void * data,size_t len,char * output)
sylar::hmac	sylar/sylar/util/hash_util.cc	/^std::string hmac(const std::string &text, const std::string &key) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
sylar::hmac_md5	sylar/sylar/util/hash_util.cc	/^std::string hmac_md5(const std::string &text, const std::string &key) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
sylar::hmac_md5	sylar/sylar/util/hash_util.h	/^std::string hmac_md5(const std::string &text, const std::string &key);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
sylar::hmac_sha1	sylar/sylar/util/hash_util.cc	/^std::string hmac_sha1(const std::string &text, const std::string &key) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
sylar::hmac_sha1	sylar/sylar/util/hash_util.h	/^std::string hmac_sha1(const std::string &text, const std::string &key);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
sylar::hmac_sha256	sylar/sylar/util/hash_util.cc	/^hmac_sha256(const std::string &text, const std::string &key) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
sylar::hmac_sha256	sylar/sylar/util/hash_util.h	/^std::string hmac_sha256(const std::string &text, const std::string &key);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & text,const std::string & key)
sylar::hook_init	sylar/sylar/hook.cc	/^void hook_init() {$/;"	f	namespace:sylar	typeref:typename:void	signature:()
sylar::http	sylar/sylar/http/http.cc	/^namespace http {$/;"	n	namespace:sylar	file:
sylar::http	sylar/sylar/http/http.h	/^namespace http {$/;"	n	namespace:sylar
sylar::http	sylar/sylar/http/http_connection.cc	/^namespace http {$/;"	n	namespace:sylar	file:
sylar::http	sylar/sylar/http/http_connection.h	/^namespace http {$/;"	n	namespace:sylar
sylar::http	sylar/sylar/http/http_parser.cc	/^namespace http {$/;"	n	namespace:sylar	file:
sylar::http	sylar/sylar/http/http_parser.h	/^namespace http {$/;"	n	namespace:sylar
sylar::http	sylar/sylar/http/http_server.cc	/^namespace http {$/;"	n	namespace:sylar	file:
sylar::http	sylar/sylar/http/http_server.h	/^namespace http {$/;"	n	namespace:sylar
sylar::http	sylar/sylar/http/http_session.cc	/^namespace http {$/;"	n	namespace:sylar	file:
sylar::http	sylar/sylar/http/http_session.h	/^namespace http {$/;"	n	namespace:sylar
sylar::http	sylar/sylar/http/servlet.cc	/^namespace http {$/;"	n	namespace:sylar	file:
sylar::http	sylar/sylar/http/servlet.h	/^namespace http {$/;"	n	namespace:sylar
sylar::http	sylar/sylar/http/servlets/config_servlet.cc	/^namespace http {$/;"	n	namespace:sylar	file:
sylar::http	sylar/sylar/http/servlets/config_servlet.h	/^namespace http {$/;"	n	namespace:sylar
sylar::http	sylar/sylar/http/servlets/status_servlet.cc	/^namespace http {$/;"	n	namespace:sylar	file:
sylar::http	sylar/sylar/http/servlets/status_servlet.h	/^namespace http {$/;"	n	namespace:sylar
sylar::http	sylar/sylar/http/session_data.cc	/^namespace http {$/;"	n	namespace:sylar	file:
sylar::http	sylar/sylar/http/session_data.h	/^namespace http {$/;"	n	namespace:sylar
sylar::http	sylar/sylar/http/ws_connection.cc	/^namespace http {$/;"	n	namespace:sylar	file:
sylar::http	sylar/sylar/http/ws_connection.h	/^namespace http {$/;"	n	namespace:sylar
sylar::http	sylar/sylar/http/ws_server.cc	/^namespace http {$/;"	n	namespace:sylar	file:
sylar::http	sylar/sylar/http/ws_server.h	/^namespace http {$/;"	n	namespace:sylar
sylar::http	sylar/sylar/http/ws_servlet.cc	/^namespace http {$/;"	n	namespace:sylar	file:
sylar::http	sylar/sylar/http/ws_servlet.h	/^namespace http {$/;"	n	namespace:sylar
sylar::http	sylar/sylar/http/ws_session.cc	/^namespace http {$/;"	n	namespace:sylar	file:
sylar::http	sylar/sylar/http/ws_session.h	/^namespace http {$/;"	n	namespace:sylar
sylar::http::CaseInsensitiveLess	sylar/sylar/http/http.h	/^struct CaseInsensitiveLess {$/;"	s	namespace:sylar::http
sylar::http::CaseInsensitiveLess::operator ()	sylar/sylar/http/http.cc	/^bool CaseInsensitiveLess::operator()(const std::string& lhs$/;"	f	class:sylar::http::CaseInsensitiveLess	typeref:typename:bool	signature:(const std::string & lhs,const std::string & rhs) const
sylar::http::CaseInsensitiveLess::operator ()	sylar/sylar/http/http.h	/^    bool operator()(const std::string& lhs, const std::string& rhs) const;$/;"	p	struct:sylar::http::CaseInsensitiveLess	typeref:typename:bool	access:public	signature:(const std::string & lhs,const std::string & rhs) const
sylar::http::CharsToHttpMethod	sylar/sylar/http/http.cc	/^HttpMethod CharsToHttpMethod(const char* m) {$/;"	f	namespace:sylar::http	typeref:typename:HttpMethod	signature:(const char * m)
sylar::http::CharsToHttpMethod	sylar/sylar/http/http.h	/^HttpMethod CharsToHttpMethod(const char* m);$/;"	p	namespace:sylar::http	typeref:typename:HttpMethod	signature:(const char * m)
sylar::http::ConfigServlet	sylar/sylar/http/servlets/config_servlet.h	/^class ConfigServlet : public Servlet {$/;"	c	namespace:sylar::http	inherits:Servlet
sylar::http::ConfigServlet::ConfigServlet	sylar/sylar/http/servlets/config_servlet.cc	/^ConfigServlet::ConfigServlet()$/;"	f	class:sylar::http::ConfigServlet	signature:()
sylar::http::ConfigServlet::ConfigServlet	sylar/sylar/http/servlets/config_servlet.h	/^    ConfigServlet();$/;"	p	class:sylar::http::ConfigServlet	access:public	signature:()
sylar::http::ConfigServlet::handle	sylar/sylar/http/servlets/config_servlet.cc	/^int32_t ConfigServlet::handle(sylar::http::HttpRequest::ptr request$/;"	f	class:sylar::http::ConfigServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
sylar::http::ConfigServlet::handle	sylar/sylar/http/servlets/config_servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	p	class:sylar::http::ConfigServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
sylar::http::FunctionServlet	sylar/sylar/http/servlet.h	/^class FunctionServlet : public Servlet {$/;"	c	namespace:sylar::http	inherits:Servlet
sylar::http::FunctionServlet::FunctionServlet	sylar/sylar/http/servlet.cc	/^FunctionServlet::FunctionServlet(callback cb)$/;"	f	class:sylar::http::FunctionServlet	signature:(callback cb)
sylar::http::FunctionServlet::FunctionServlet	sylar/sylar/http/servlet.h	/^    FunctionServlet(callback cb);$/;"	p	class:sylar::http::FunctionServlet	access:public	signature:(callback cb)
sylar::http::FunctionServlet::callback	sylar/sylar/http/servlet.h	/^                   , sylar::http::HttpSession::ptr session)> callback;$/;"	t	class:sylar::http::FunctionServlet	access:public
sylar::http::FunctionServlet::handle	sylar/sylar/http/servlet.cc	/^int32_t FunctionServlet::handle(sylar::http::HttpRequest::ptr request$/;"	f	class:sylar::http::FunctionServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
sylar::http::FunctionServlet::handle	sylar/sylar/http/servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	p	class:sylar::http::FunctionServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
sylar::http::FunctionServlet::m_cb	sylar/sylar/http/servlet.h	/^    callback m_cb;$/;"	m	class:sylar::http::FunctionServlet	typeref:typename:callback	access:private
sylar::http::FunctionServlet::ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<FunctionServlet> ptr;$/;"	t	class:sylar::http::FunctionServlet	typeref:typename:std::shared_ptr<FunctionServlet>	access:public
sylar::http::FunctionWSServlet	sylar/sylar/http/ws_servlet.h	/^class FunctionWSServlet : public WSServlet {$/;"	c	namespace:sylar::http	inherits:WSServlet
sylar::http::FunctionWSServlet::FunctionWSServlet	sylar/sylar/http/ws_servlet.cc	/^FunctionWSServlet::FunctionWSServlet(callback cb$/;"	f	class:sylar::http::FunctionWSServlet	signature:(callback cb,on_connect_cb connect_cb,on_close_cb close_cb)
sylar::http::FunctionWSServlet::FunctionWSServlet	sylar/sylar/http/ws_servlet.h	/^    FunctionWSServlet(callback cb$/;"	p	class:sylar::http::FunctionWSServlet	access:public	signature:(callback cb,on_connect_cb connect_cb=nullptr,on_close_cb close_cb=nullptr)
sylar::http::FunctionWSServlet::callback	sylar/sylar/http/ws_servlet.h	/^                           ,sylar::http::WSSession::ptr session)> callback;$/;"	t	class:sylar::http::FunctionWSServlet	access:public
sylar::http::FunctionWSServlet::handle	sylar/sylar/http/ws_servlet.cc	/^int32_t FunctionWSServlet::handle(sylar::http::HttpRequest::ptr header$/;"	f	class:sylar::http::FunctionWSServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSFrameMessage::ptr msg,sylar::http::WSSession::ptr session)
sylar::http::FunctionWSServlet::handle	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr header$/;"	p	class:sylar::http::FunctionWSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSFrameMessage::ptr msg,sylar::http::WSSession::ptr session)
sylar::http::FunctionWSServlet::m_callback	sylar/sylar/http/ws_servlet.h	/^    callback m_callback;$/;"	m	class:sylar::http::FunctionWSServlet	typeref:typename:callback	access:protected
sylar::http::FunctionWSServlet::m_onClose	sylar/sylar/http/ws_servlet.h	/^    on_close_cb m_onClose;$/;"	m	class:sylar::http::FunctionWSServlet	typeref:typename:on_close_cb	access:protected
sylar::http::FunctionWSServlet::m_onConnect	sylar/sylar/http/ws_servlet.h	/^    on_connect_cb m_onConnect;$/;"	m	class:sylar::http::FunctionWSServlet	typeref:typename:on_connect_cb	access:protected
sylar::http::FunctionWSServlet::onClose	sylar/sylar/http/ws_servlet.cc	/^int32_t FunctionWSServlet::onClose(sylar::http::HttpRequest::ptr header$/;"	f	class:sylar::http::FunctionWSServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSSession::ptr session)
sylar::http::FunctionWSServlet::onClose	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t onClose(sylar::http::HttpRequest::ptr header$/;"	p	class:sylar::http::FunctionWSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSSession::ptr session)
sylar::http::FunctionWSServlet::onConnect	sylar/sylar/http/ws_servlet.cc	/^int32_t FunctionWSServlet::onConnect(sylar::http::HttpRequest::ptr header$/;"	f	class:sylar::http::FunctionWSServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSSession::ptr session)
sylar::http::FunctionWSServlet::onConnect	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t onConnect(sylar::http::HttpRequest::ptr header$/;"	p	class:sylar::http::FunctionWSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSSession::ptr session)
sylar::http::FunctionWSServlet::on_close_cb	sylar/sylar/http/ws_servlet.h	/^                             ,sylar::http::WSSession::ptr session)> on_close_cb; $/;"	t	class:sylar::http::FunctionWSServlet	access:public
sylar::http::FunctionWSServlet::on_connect_cb	sylar/sylar/http/ws_servlet.h	/^                              ,sylar::http::WSSession::ptr session)> on_connect_cb;$/;"	t	class:sylar::http::FunctionWSServlet	access:public
sylar::http::FunctionWSServlet::ptr	sylar/sylar/http/ws_servlet.h	/^    typedef std::shared_ptr<FunctionWSServlet> ptr;$/;"	t	class:sylar::http::FunctionWSServlet	typeref:typename:std::shared_ptr<FunctionWSServlet>	access:public
sylar::http::HTTP_METHOD_MAP	sylar/sylar/http/http.h	/^    HTTP_METHOD_MAP(XX)$/;"	e	enum:sylar::http::HttpMethod	access:public
sylar::http::HTTP_STATUS_MAP	sylar/sylar/http/http.h	/^    HTTP_STATUS_MAP(XX)$/;"	e	enum:sylar::http::HttpStatus	access:public
sylar::http::HoldServletCreator	sylar/sylar/http/servlet.h	/^class HoldServletCreator : public IServletCreator {$/;"	c	namespace:sylar::http	inherits:IServletCreator
sylar::http::HoldServletCreator::HoldServletCreator	sylar/sylar/http/servlet.h	/^    HoldServletCreator(Servlet::ptr slt)$/;"	f	class:sylar::http::HoldServletCreator	access:public	signature:(Servlet::ptr slt)
sylar::http::HoldServletCreator::get	sylar/sylar/http/servlet.h	/^    Servlet::ptr get() const override {$/;"	f	class:sylar::http::HoldServletCreator	typeref:typename:Servlet::ptr	access:public	signature:() const
sylar::http::HoldServletCreator::getName	sylar/sylar/http/servlet.h	/^    std::string getName() const override {$/;"	f	class:sylar::http::HoldServletCreator	typeref:typename:std::string	access:public	signature:() const
sylar::http::HoldServletCreator::m_servlet	sylar/sylar/http/servlet.h	/^    Servlet::ptr m_servlet;$/;"	m	class:sylar::http::HoldServletCreator	typeref:typename:Servlet::ptr	access:private
sylar::http::HoldServletCreator::ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<HoldServletCreator> ptr;$/;"	t	class:sylar::http::HoldServletCreator	typeref:typename:std::shared_ptr<HoldServletCreator>	access:public
sylar::http::HttpConnection	sylar/sylar/http/http_connection.h	/^class HttpConnection : public SocketStream {$/;"	c	namespace:sylar::http	inherits:SocketStream
sylar::http::HttpConnection::DoGet	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoGet(Uri::ptr uri$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
sylar::http::HttpConnection::DoGet	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoGet(const std::string& url$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
sylar::http::HttpConnection::DoGet	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoGet(Uri::ptr uri$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
sylar::http::HttpConnection::DoGet	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoGet(const std::string& url$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
sylar::http::HttpConnection::DoPost	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoPost(Uri::ptr uri$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
sylar::http::HttpConnection::DoPost	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoPost(const std::string& url$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
sylar::http::HttpConnection::DoPost	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoPost(Uri::ptr uri$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
sylar::http::HttpConnection::DoPost	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoPost(const std::string& url$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
sylar::http::HttpConnection::DoRequest	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoRequest(HttpMethod method$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
sylar::http::HttpConnection::DoRequest	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoRequest(HttpMethod method$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(HttpMethod method,const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
sylar::http::HttpConnection::DoRequest	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnection::DoRequest(HttpRequest::ptr req$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	signature:(HttpRequest::ptr req,Uri::ptr uri,uint64_t timeout_ms)
sylar::http::HttpConnection::DoRequest	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoRequest(HttpMethod method$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
sylar::http::HttpConnection::DoRequest	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoRequest(HttpMethod method$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(HttpMethod method,const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
sylar::http::HttpConnection::DoRequest	sylar/sylar/http/http_connection.h	/^    static HttpResult::ptr DoRequest(HttpRequest::ptr req$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResult::ptr	access:public	signature:(HttpRequest::ptr req,Uri::ptr uri,uint64_t timeout_ms)
sylar::http::HttpConnection::HttpConnection	sylar/sylar/http/http_connection.cc	/^HttpConnection::HttpConnection(Socket::ptr sock, bool owner)$/;"	f	class:sylar::http::HttpConnection	signature:(Socket::ptr sock,bool owner)
sylar::http::HttpConnection::HttpConnection	sylar/sylar/http/http_connection.h	/^    HttpConnection(Socket::ptr sock, bool owner = true);$/;"	p	class:sylar::http::HttpConnection	access:public	signature:(Socket::ptr sock,bool owner=true)
sylar::http::HttpConnection::m_createTime	sylar/sylar/http/http_connection.h	/^    uint64_t m_createTime = 0;$/;"	m	class:sylar::http::HttpConnection	typeref:typename:uint64_t	access:private
sylar::http::HttpConnection::m_request	sylar/sylar/http/http_connection.h	/^    uint64_t m_request = 0;$/;"	m	class:sylar::http::HttpConnection	typeref:typename:uint64_t	access:private
sylar::http::HttpConnection::ptr	sylar/sylar/http/http_connection.h	/^    typedef std::shared_ptr<HttpConnection> ptr;$/;"	t	class:sylar::http::HttpConnection	typeref:typename:std::shared_ptr<HttpConnection>	access:public
sylar::http::HttpConnection::recvResponse	sylar/sylar/http/http_connection.cc	/^HttpResponse::ptr HttpConnection::recvResponse() {$/;"	f	class:sylar::http::HttpConnection	typeref:typename:HttpResponse::ptr	signature:()
sylar::http::HttpConnection::recvResponse	sylar/sylar/http/http_connection.h	/^    HttpResponse::ptr recvResponse();$/;"	p	class:sylar::http::HttpConnection	typeref:typename:HttpResponse::ptr	access:public	signature:()
sylar::http::HttpConnection::sendRequest	sylar/sylar/http/http_connection.cc	/^int HttpConnection::sendRequest(HttpRequest::ptr rsp) {$/;"	f	class:sylar::http::HttpConnection	typeref:typename:int	signature:(HttpRequest::ptr rsp)
sylar::http::HttpConnection::sendRequest	sylar/sylar/http/http_connection.h	/^    int sendRequest(HttpRequest::ptr req);$/;"	p	class:sylar::http::HttpConnection	typeref:typename:int	access:public	signature:(HttpRequest::ptr req)
sylar::http::HttpConnection::~HttpConnection	sylar/sylar/http/http_connection.cc	/^HttpConnection::~HttpConnection() {$/;"	f	class:sylar::http::HttpConnection	signature:()
sylar::http::HttpConnection::~HttpConnection	sylar/sylar/http/http_connection.h	/^    ~HttpConnection();$/;"	p	class:sylar::http::HttpConnection	access:public	signature:()
sylar::http::HttpConnectionPool	sylar/sylar/http/http_connection.h	/^class HttpConnectionPool {$/;"	c	namespace:sylar::http
sylar::http::HttpConnectionPool::Create	sylar/sylar/http/http_connection.cc	/^HttpConnectionPool::ptr HttpConnectionPool::Create(const std::string& uri$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpConnectionPool::ptr	signature:(const std::string & uri,const std::string & vhost,uint32_t max_size,uint32_t max_alive_time,uint32_t max_request)
sylar::http::HttpConnectionPool::Create	sylar/sylar/http/http_connection.h	/^    static HttpConnectionPool::ptr Create(const std::string& uri$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpConnectionPool::ptr	access:public	signature:(const std::string & uri,const std::string & vhost,uint32_t max_size,uint32_t max_alive_time,uint32_t max_request)
sylar::http::HttpConnectionPool::HttpConnectionPool	sylar/sylar/http/http_connection.cc	/^HttpConnectionPool::HttpConnectionPool(const std::string& host$/;"	f	class:sylar::http::HttpConnectionPool	signature:(const std::string & host,const std::string & vhost,uint32_t port,bool is_https,uint32_t max_size,uint32_t max_alive_time,uint32_t max_request)
sylar::http::HttpConnectionPool::HttpConnectionPool	sylar/sylar/http/http_connection.h	/^    HttpConnectionPool(const std::string& host$/;"	p	class:sylar::http::HttpConnectionPool	access:public	signature:(const std::string & host,const std::string & vhost,uint32_t port,bool is_https,uint32_t max_size,uint32_t max_alive_time,uint32_t max_request)
sylar::http::HttpConnectionPool::MutexType	sylar/sylar/http/http_connection.h	/^    typedef Mutex MutexType;$/;"	t	class:sylar::http::HttpConnectionPool	typeref:typename:Mutex	access:public
sylar::http::HttpConnectionPool::ReleasePtr	sylar/sylar/http/http_connection.cc	/^void HttpConnectionPool::ReleasePtr(HttpConnection* ptr, HttpConnectionPool* pool) {$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:void	signature:(HttpConnection * ptr,HttpConnectionPool * pool)
sylar::http::HttpConnectionPool::ReleasePtr	sylar/sylar/http/http_connection.h	/^    static void ReleasePtr(HttpConnection* ptr, HttpConnectionPool* pool);$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:void	access:private	signature:(HttpConnection * ptr,HttpConnectionPool * pool)
sylar::http::HttpConnectionPool::doGet	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doGet(Uri::ptr uri$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
sylar::http::HttpConnectionPool::doGet	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doGet(const std::string& url$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
sylar::http::HttpConnectionPool::doGet	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doGet(Uri::ptr uri$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
sylar::http::HttpConnectionPool::doGet	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doGet(const std::string& url$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
sylar::http::HttpConnectionPool::doPost	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doPost(Uri::ptr uri$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
sylar::http::HttpConnectionPool::doPost	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doPost(const std::string& url$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
sylar::http::HttpConnectionPool::doPost	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doPost(Uri::ptr uri$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
sylar::http::HttpConnectionPool::doPost	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doPost(const std::string& url$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
sylar::http::HttpConnectionPool::doRequest	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doRequest(HttpMethod method$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
sylar::http::HttpConnectionPool::doRequest	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doRequest(HttpMethod method$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(HttpMethod method,const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers,const std::string & body)
sylar::http::HttpConnectionPool::doRequest	sylar/sylar/http/http_connection.cc	/^HttpResult::ptr HttpConnectionPool::doRequest(HttpRequest::ptr req$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	signature:(HttpRequest::ptr req,uint64_t timeout_ms)
sylar::http::HttpConnectionPool::doRequest	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doRequest(HttpMethod method$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(HttpMethod method,Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
sylar::http::HttpConnectionPool::doRequest	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doRequest(HttpMethod method$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(HttpMethod method,const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={} ,const std::string & body="")
sylar::http::HttpConnectionPool::doRequest	sylar/sylar/http/http_connection.h	/^    HttpResult::ptr doRequest(HttpRequest::ptr req$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpResult::ptr	access:public	signature:(HttpRequest::ptr req,uint64_t timeout_ms)
sylar::http::HttpConnectionPool::getConnection	sylar/sylar/http/http_connection.cc	/^HttpConnection::ptr HttpConnectionPool::getConnection() {$/;"	f	class:sylar::http::HttpConnectionPool	typeref:typename:HttpConnection::ptr	signature:()
sylar::http::HttpConnectionPool::getConnection	sylar/sylar/http/http_connection.h	/^    HttpConnection::ptr getConnection();$/;"	p	class:sylar::http::HttpConnectionPool	typeref:typename:HttpConnection::ptr	access:public	signature:()
sylar::http::HttpConnectionPool::m_conns	sylar/sylar/http/http_connection.h	/^    std::list<HttpConnection*> m_conns;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:std::list<HttpConnection * >	access:private
sylar::http::HttpConnectionPool::m_host	sylar/sylar/http/http_connection.h	/^    std::string m_host;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:std::string	access:private
sylar::http::HttpConnectionPool::m_isHttps	sylar/sylar/http/http_connection.h	/^    bool m_isHttps;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:bool	access:private
sylar::http::HttpConnectionPool::m_maxAliveTime	sylar/sylar/http/http_connection.h	/^    uint32_t m_maxAliveTime;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:uint32_t	access:private
sylar::http::HttpConnectionPool::m_maxRequest	sylar/sylar/http/http_connection.h	/^    uint32_t m_maxRequest;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:uint32_t	access:private
sylar::http::HttpConnectionPool::m_maxSize	sylar/sylar/http/http_connection.h	/^    uint32_t m_maxSize;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:uint32_t	access:private
sylar::http::HttpConnectionPool::m_mutex	sylar/sylar/http/http_connection.h	/^    MutexType m_mutex;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:MutexType	access:private
sylar::http::HttpConnectionPool::m_port	sylar/sylar/http/http_connection.h	/^    uint32_t m_port;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:uint32_t	access:private
sylar::http::HttpConnectionPool::m_vhost	sylar/sylar/http/http_connection.h	/^    std::string m_vhost;$/;"	m	class:sylar::http::HttpConnectionPool	typeref:typename:std::string	access:private
sylar::http::HttpConnectionPool::ptr	sylar/sylar/http/http_connection.h	/^    typedef std::shared_ptr<HttpConnectionPool> ptr;$/;"	t	class:sylar::http::HttpConnectionPool	typeref:typename:std::shared_ptr<HttpConnectionPool>	access:public
sylar::http::HttpMethod	sylar/sylar/http/http.h	/^enum class HttpMethod {$/;"	g	namespace:sylar::http
sylar::http::HttpMethodToString	sylar/sylar/http/http.cc	/^const char* HttpMethodToString(const HttpMethod& m) {$/;"	f	namespace:sylar::http	typeref:typename:const char *	signature:(const HttpMethod & m)
sylar::http::HttpMethodToString	sylar/sylar/http/http.h	/^const char* HttpMethodToString(const HttpMethod& m);$/;"	p	namespace:sylar::http	typeref:typename:const char *	signature:(const HttpMethod & m)
sylar::http::HttpRequest	sylar/sylar/http/http.h	/^class HttpRequest {$/;"	c	namespace:sylar::http
sylar::http::HttpRequest::HttpRequest	sylar/sylar/http/http.cc	/^HttpRequest::HttpRequest(uint8_t version, bool close)$/;"	f	class:sylar::http::HttpRequest	signature:(uint8_t version,bool close)
sylar::http::HttpRequest::HttpRequest	sylar/sylar/http/http.h	/^    HttpRequest(uint8_t version = 0x11, bool close = true);$/;"	p	class:sylar::http::HttpRequest	access:public	signature:(uint8_t version=0x11,bool close=true)
sylar::http::HttpRequest::MapType	sylar/sylar/http/http.h	/^    typedef std::map<std::string, std::string, CaseInsensitiveLess> MapType;$/;"	t	class:sylar::http::HttpRequest	typeref:typename:std::map<std::string,std::string,CaseInsensitiveLess>	access:public
sylar::http::HttpRequest::checkGetCookieAs	sylar/sylar/http/http.h	/^    bool checkGetCookieAs(const std::string& key, T& val, const T& def = T()) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:(const std::string & key,T & val,const T & def=T ())
sylar::http::HttpRequest::checkGetHeaderAs	sylar/sylar/http/http.h	/^    bool checkGetHeaderAs(const std::string& key, T& val, const T& def = T()) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:(const std::string & key,T & val,const T & def=T ())
sylar::http::HttpRequest::checkGetParamAs	sylar/sylar/http/http.h	/^    bool checkGetParamAs(const std::string& key, T& val, const T& def = T()) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:(const std::string & key,T & val,const T & def=T ())
sylar::http::HttpRequest::createResponse	sylar/sylar/http/http.cc	/^std::shared_ptr<HttpResponse> HttpRequest::createResponse() {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:std::shared_ptr<HttpResponse>	signature:()
sylar::http::HttpRequest::createResponse	sylar/sylar/http/http.h	/^    std::shared_ptr<HttpResponse> createResponse();$/;"	p	class:sylar::http::HttpRequest	typeref:typename:std::shared_ptr<HttpResponse>	access:public	signature:()
sylar::http::HttpRequest::delCookie	sylar/sylar/http/http.cc	/^void HttpRequest::delCookie(const std::string& key) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:(const std::string & key)
sylar::http::HttpRequest::delCookie	sylar/sylar/http/http.h	/^    void delCookie(const std::string& key);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & key)
sylar::http::HttpRequest::delHeader	sylar/sylar/http/http.cc	/^void HttpRequest::delHeader(const std::string& key) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:(const std::string & key)
sylar::http::HttpRequest::delHeader	sylar/sylar/http/http.h	/^    void delHeader(const std::string& key);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & key)
sylar::http::HttpRequest::delParam	sylar/sylar/http/http.cc	/^void HttpRequest::delParam(const std::string& key) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:(const std::string & key)
sylar::http::HttpRequest::delParam	sylar/sylar/http/http.h	/^    void delParam(const std::string& key);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & key)
sylar::http::HttpRequest::dump	sylar/sylar/http/http.cc	/^std::ostream& HttpRequest::dump(std::ostream& os) const {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:std::ostream &	signature:(std::ostream & os) const
sylar::http::HttpRequest::dump	sylar/sylar/http/http.h	/^    std::ostream& dump(std::ostream& os) const;$/;"	p	class:sylar::http::HttpRequest	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
sylar::http::HttpRequest::getBody	sylar/sylar/http/http.h	/^    const std::string& getBody() const { return m_body;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:const std::string &	access:public	signature:() const
sylar::http::HttpRequest::getCookie	sylar/sylar/http/http.cc	/^std::string HttpRequest::getCookie(const std::string& key$/;"	f	class:sylar::http::HttpRequest	typeref:typename:std::string	signature:(const std::string & key,const std::string & def)
sylar::http::HttpRequest::getCookie	sylar/sylar/http/http.h	/^    std::string getCookie(const std::string& key, const std::string& def = "");$/;"	p	class:sylar::http::HttpRequest	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & def="")
sylar::http::HttpRequest::getCookieAs	sylar/sylar/http/http.h	/^    T getCookieAs(const std::string& key, const T& def = T()) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:T	access:public	signature:(const std::string & key,const T & def=T ())
sylar::http::HttpRequest::getCookies	sylar/sylar/http/http.h	/^    const MapType& getCookies() const { return m_cookies;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:const MapType &	access:public	signature:() const
sylar::http::HttpRequest::getHeader	sylar/sylar/http/http.cc	/^std::string HttpRequest::getHeader(const std::string& key$/;"	f	class:sylar::http::HttpRequest	typeref:typename:std::string	signature:(const std::string & key,const std::string & def) const
sylar::http::HttpRequest::getHeader	sylar/sylar/http/http.h	/^    std::string getHeader(const std::string& key, const std::string& def = "") const;$/;"	p	class:sylar::http::HttpRequest	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & def="") const
sylar::http::HttpRequest::getHeaderAs	sylar/sylar/http/http.h	/^    T getHeaderAs(const std::string& key, const T& def = T()) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:T	access:public	signature:(const std::string & key,const T & def=T ())
sylar::http::HttpRequest::getHeaders	sylar/sylar/http/http.h	/^    const MapType& getHeaders() const { return m_headers;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:const MapType &	access:public	signature:() const
sylar::http::HttpRequest::getMethod	sylar/sylar/http/http.h	/^    HttpMethod getMethod() const { return m_method;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:HttpMethod	access:public	signature:() const
sylar::http::HttpRequest::getParam	sylar/sylar/http/http.cc	/^std::string HttpRequest::getParam(const std::string& key$/;"	f	class:sylar::http::HttpRequest	typeref:typename:std::string	signature:(const std::string & key,const std::string & def)
sylar::http::HttpRequest::getParam	sylar/sylar/http/http.h	/^    std::string getParam(const std::string& key, const std::string& def = "");$/;"	p	class:sylar::http::HttpRequest	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & def="")
sylar::http::HttpRequest::getParamAs	sylar/sylar/http/http.h	/^    T getParamAs(const std::string& key, const T& def = T()) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:T	access:public	signature:(const std::string & key,const T & def=T ())
sylar::http::HttpRequest::getParams	sylar/sylar/http/http.h	/^    const MapType& getParams() const { return m_params;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:const MapType &	access:public	signature:() const
sylar::http::HttpRequest::getPath	sylar/sylar/http/http.h	/^    const std::string& getPath() const { return m_path;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:const std::string &	access:public	signature:() const
sylar::http::HttpRequest::getQuery	sylar/sylar/http/http.h	/^    const std::string& getQuery() const { return m_query;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:const std::string &	access:public	signature:() const
sylar::http::HttpRequest::getVersion	sylar/sylar/http/http.h	/^    uint8_t getVersion() const { return m_version;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:uint8_t	access:public	signature:() const
sylar::http::HttpRequest::hasCookie	sylar/sylar/http/http.cc	/^bool HttpRequest::hasCookie(const std::string& key, std::string* val) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	signature:(const std::string & key,std::string * val)
sylar::http::HttpRequest::hasCookie	sylar/sylar/http/http.h	/^    bool hasCookie(const std::string& key, std::string* val = nullptr);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:(const std::string & key,std::string * val=nullptr)
sylar::http::HttpRequest::hasHeader	sylar/sylar/http/http.cc	/^bool HttpRequest::hasHeader(const std::string& key, std::string* val) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	signature:(const std::string & key,std::string * val)
sylar::http::HttpRequest::hasHeader	sylar/sylar/http/http.h	/^    bool hasHeader(const std::string& key, std::string* val = nullptr);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:(const std::string & key,std::string * val=nullptr)
sylar::http::HttpRequest::hasParam	sylar/sylar/http/http.cc	/^bool HttpRequest::hasParam(const std::string& key, std::string* val) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	signature:(const std::string & key,std::string * val)
sylar::http::HttpRequest::hasParam	sylar/sylar/http/http.h	/^    bool hasParam(const std::string& key, std::string* val = nullptr);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:(const std::string & key,std::string * val=nullptr)
sylar::http::HttpRequest::init	sylar/sylar/http/http.cc	/^void HttpRequest::init() {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:()
sylar::http::HttpRequest::init	sylar/sylar/http/http.h	/^    void init();$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:()
sylar::http::HttpRequest::initBodyParam	sylar/sylar/http/http.cc	/^void HttpRequest::initBodyParam() {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:()
sylar::http::HttpRequest::initBodyParam	sylar/sylar/http/http.h	/^    void initBodyParam();$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:()
sylar::http::HttpRequest::initCookies	sylar/sylar/http/http.cc	/^void HttpRequest::initCookies() {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:()
sylar::http::HttpRequest::initCookies	sylar/sylar/http/http.h	/^    void initCookies();$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:()
sylar::http::HttpRequest::initParam	sylar/sylar/http/http.cc	/^void HttpRequest::initParam() {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:()
sylar::http::HttpRequest::initParam	sylar/sylar/http/http.h	/^    void initParam();$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:()
sylar::http::HttpRequest::initQueryParam	sylar/sylar/http/http.cc	/^void HttpRequest::initQueryParam() {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:()
sylar::http::HttpRequest::initQueryParam	sylar/sylar/http/http.h	/^    void initQueryParam();$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:()
sylar::http::HttpRequest::isClose	sylar/sylar/http/http.h	/^    bool isClose() const { return m_close;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:() const
sylar::http::HttpRequest::isWebsocket	sylar/sylar/http/http.h	/^    bool isWebsocket() const { return m_websocket;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:bool	access:public	signature:() const
sylar::http::HttpRequest::m_body	sylar/sylar/http/http.h	/^    std::string m_body;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:std::string	access:private
sylar::http::HttpRequest::m_close	sylar/sylar/http/http.h	/^    bool m_close;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:bool	access:private
sylar::http::HttpRequest::m_cookies	sylar/sylar/http/http.h	/^    MapType m_cookies;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:MapType	access:private
sylar::http::HttpRequest::m_fragment	sylar/sylar/http/http.h	/^    std::string m_fragment;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:std::string	access:private
sylar::http::HttpRequest::m_headers	sylar/sylar/http/http.h	/^    MapType m_headers;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:MapType	access:private
sylar::http::HttpRequest::m_method	sylar/sylar/http/http.h	/^    HttpMethod m_method;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:HttpMethod	access:private
sylar::http::HttpRequest::m_params	sylar/sylar/http/http.h	/^    MapType m_params;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:MapType	access:private
sylar::http::HttpRequest::m_parserParamFlag	sylar/sylar/http/http.h	/^    uint8_t m_parserParamFlag;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:uint8_t	access:private
sylar::http::HttpRequest::m_path	sylar/sylar/http/http.h	/^    std::string m_path;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:std::string	access:private
sylar::http::HttpRequest::m_query	sylar/sylar/http/http.h	/^    std::string m_query;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:std::string	access:private
sylar::http::HttpRequest::m_version	sylar/sylar/http/http.h	/^    uint8_t m_version;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:uint8_t	access:private
sylar::http::HttpRequest::m_websocket	sylar/sylar/http/http.h	/^    bool m_websocket;$/;"	m	class:sylar::http::HttpRequest	typeref:typename:bool	access:private
sylar::http::HttpRequest::ptr	sylar/sylar/http/http.h	/^    typedef std::shared_ptr<HttpRequest> ptr;$/;"	t	class:sylar::http::HttpRequest	typeref:typename:std::shared_ptr<HttpRequest>	access:public
sylar::http::HttpRequest::setBody	sylar/sylar/http/http.h	/^    void setBody(const std::string& v) { m_body = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::http::HttpRequest::setClose	sylar/sylar/http/http.h	/^    void setClose(bool v) { m_close = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(bool v)
sylar::http::HttpRequest::setCookie	sylar/sylar/http/http.cc	/^void HttpRequest::setCookie(const std::string& key, const std::string& val) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:(const std::string & key,const std::string & val)
sylar::http::HttpRequest::setCookie	sylar/sylar/http/http.h	/^    void setCookie(const std::string& key, const std::string& val);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val)
sylar::http::HttpRequest::setCookies	sylar/sylar/http/http.h	/^    void setCookies(const MapType& v) { m_cookies = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const MapType & v)
sylar::http::HttpRequest::setFragment	sylar/sylar/http/http.h	/^    void setFragment(const std::string& v) { m_fragment = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::http::HttpRequest::setHeader	sylar/sylar/http/http.cc	/^void HttpRequest::setHeader(const std::string& key, const std::string& val) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:(const std::string & key,const std::string & val)
sylar::http::HttpRequest::setHeader	sylar/sylar/http/http.h	/^    void setHeader(const std::string& key, const std::string& val);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val)
sylar::http::HttpRequest::setHeaders	sylar/sylar/http/http.h	/^    void setHeaders(const MapType& v) { m_headers = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const MapType & v)
sylar::http::HttpRequest::setMethod	sylar/sylar/http/http.h	/^    void setMethod(HttpMethod v) { m_method = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(HttpMethod v)
sylar::http::HttpRequest::setParam	sylar/sylar/http/http.cc	/^void HttpRequest::setParam(const std::string& key, const std::string& val) {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	signature:(const std::string & key,const std::string & val)
sylar::http::HttpRequest::setParam	sylar/sylar/http/http.h	/^    void setParam(const std::string& key, const std::string& val);$/;"	p	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val)
sylar::http::HttpRequest::setParams	sylar/sylar/http/http.h	/^    void setParams(const MapType& v) { m_params = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const MapType & v)
sylar::http::HttpRequest::setPath	sylar/sylar/http/http.h	/^    void setPath(const std::string& v) { m_path = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::http::HttpRequest::setQuery	sylar/sylar/http/http.h	/^    void setQuery(const std::string& v) { m_query = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::http::HttpRequest::setVersion	sylar/sylar/http/http.h	/^    void setVersion(uint8_t v) { m_version = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(uint8_t v)
sylar::http::HttpRequest::setWebsocket	sylar/sylar/http/http.h	/^    void setWebsocket(bool v) { m_websocket = v;}$/;"	f	class:sylar::http::HttpRequest	typeref:typename:void	access:public	signature:(bool v)
sylar::http::HttpRequest::toString	sylar/sylar/http/http.cc	/^std::string HttpRequest::toString() const {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:std::string	signature:() const
sylar::http::HttpRequest::toString	sylar/sylar/http/http.h	/^    std::string toString() const;$/;"	p	class:sylar::http::HttpRequest	typeref:typename:std::string	access:public	signature:() const
sylar::http::HttpRequestParser	sylar/sylar/http/http_parser.h	/^class HttpRequestParser {$/;"	c	namespace:sylar::http
sylar::http::HttpRequestParser::GetHttpRequestBufferSize	sylar/sylar/http/http_parser.cc	/^uint64_t HttpRequestParser::GetHttpRequestBufferSize() {$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:uint64_t	signature:()
sylar::http::HttpRequestParser::GetHttpRequestBufferSize	sylar/sylar/http/http_parser.h	/^    static uint64_t GetHttpRequestBufferSize();$/;"	p	class:sylar::http::HttpRequestParser	typeref:typename:uint64_t	access:public	signature:()
sylar::http::HttpRequestParser::GetHttpRequestMaxBodySize	sylar/sylar/http/http_parser.cc	/^uint64_t HttpRequestParser::GetHttpRequestMaxBodySize() {$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:uint64_t	signature:()
sylar::http::HttpRequestParser::GetHttpRequestMaxBodySize	sylar/sylar/http/http_parser.h	/^    static uint64_t GetHttpRequestMaxBodySize();$/;"	p	class:sylar::http::HttpRequestParser	typeref:typename:uint64_t	access:public	signature:()
sylar::http::HttpRequestParser::HttpRequestParser	sylar/sylar/http/http_parser.cc	/^HttpRequestParser::HttpRequestParser()$/;"	f	class:sylar::http::HttpRequestParser	signature:()
sylar::http::HttpRequestParser::HttpRequestParser	sylar/sylar/http/http_parser.h	/^    HttpRequestParser();$/;"	p	class:sylar::http::HttpRequestParser	access:public	signature:()
sylar::http::HttpRequestParser::execute	sylar/sylar/http/http_parser.cc	/^size_t HttpRequestParser::execute(char* data, size_t len) {$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:size_t	signature:(char * data,size_t len)
sylar::http::HttpRequestParser::execute	sylar/sylar/http/http_parser.h	/^    size_t execute(char* data, size_t len);$/;"	p	class:sylar::http::HttpRequestParser	typeref:typename:size_t	access:public	signature:(char * data,size_t len)
sylar::http::HttpRequestParser::getContentLength	sylar/sylar/http/http_parser.cc	/^uint64_t HttpRequestParser::getContentLength() {$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:uint64_t	signature:()
sylar::http::HttpRequestParser::getContentLength	sylar/sylar/http/http_parser.h	/^    uint64_t getContentLength();$/;"	p	class:sylar::http::HttpRequestParser	typeref:typename:uint64_t	access:public	signature:()
sylar::http::HttpRequestParser::getData	sylar/sylar/http/http_parser.h	/^    HttpRequest::ptr getData() const { return m_data;}$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:HttpRequest::ptr	access:public	signature:() const
sylar::http::HttpRequestParser::getParser	sylar/sylar/http/http_parser.h	/^    const http_parser& getParser() const { return m_parser;}$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:const http_parser &	access:public	signature:() const
sylar::http::HttpRequestParser::hasError	sylar/sylar/http/http_parser.cc	/^int HttpRequestParser::hasError() {$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:int	signature:()
sylar::http::HttpRequestParser::hasError	sylar/sylar/http/http_parser.h	/^    int hasError(); $/;"	p	class:sylar::http::HttpRequestParser	typeref:typename:int	access:public	signature:()
sylar::http::HttpRequestParser::isFinished	sylar/sylar/http/http_parser.cc	/^int HttpRequestParser::isFinished() {$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:int	signature:()
sylar::http::HttpRequestParser::isFinished	sylar/sylar/http/http_parser.h	/^    int isFinished();$/;"	p	class:sylar::http::HttpRequestParser	typeref:typename:int	access:public	signature:()
sylar::http::HttpRequestParser::m_data	sylar/sylar/http/http_parser.h	/^    HttpRequest::ptr m_data;$/;"	m	class:sylar::http::HttpRequestParser	typeref:typename:HttpRequest::ptr	access:private
sylar::http::HttpRequestParser::m_error	sylar/sylar/http/http_parser.h	/^    int m_error;$/;"	m	class:sylar::http::HttpRequestParser	typeref:typename:int	access:private
sylar::http::HttpRequestParser::m_parser	sylar/sylar/http/http_parser.h	/^    http_parser m_parser;$/;"	m	class:sylar::http::HttpRequestParser	typeref:typename:http_parser	access:private
sylar::http::HttpRequestParser::ptr	sylar/sylar/http/http_parser.h	/^    typedef std::shared_ptr<HttpRequestParser> ptr;$/;"	t	class:sylar::http::HttpRequestParser	typeref:typename:std::shared_ptr<HttpRequestParser>	access:public
sylar::http::HttpRequestParser::setError	sylar/sylar/http/http_parser.h	/^    void setError(int v) { m_error = v;}$/;"	f	class:sylar::http::HttpRequestParser	typeref:typename:void	access:public	signature:(int v)
sylar::http::HttpResponse	sylar/sylar/http/http.h	/^class HttpResponse {$/;"	c	namespace:sylar::http
sylar::http::HttpResponse::HttpResponse	sylar/sylar/http/http.cc	/^HttpResponse::HttpResponse(uint8_t version, bool close)$/;"	f	class:sylar::http::HttpResponse	signature:(uint8_t version,bool close)
sylar::http::HttpResponse::HttpResponse	sylar/sylar/http/http.h	/^    HttpResponse(uint8_t version = 0x11, bool close = true);$/;"	p	class:sylar::http::HttpResponse	access:public	signature:(uint8_t version=0x11,bool close=true)
sylar::http::HttpResponse::MapType	sylar/sylar/http/http.h	/^    typedef std::map<std::string, std::string, CaseInsensitiveLess> MapType;$/;"	t	class:sylar::http::HttpResponse	typeref:typename:std::map<std::string,std::string,CaseInsensitiveLess>	access:public
sylar::http::HttpResponse::checkGetHeaderAs	sylar/sylar/http/http.h	/^    bool checkGetHeaderAs(const std::string& key, T& val, const T& def = T()) {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:bool	access:public	signature:(const std::string & key,T & val,const T & def=T ())
sylar::http::HttpResponse::delHeader	sylar/sylar/http/http.cc	/^void HttpResponse::delHeader(const std::string& key) {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	signature:(const std::string & key)
sylar::http::HttpResponse::delHeader	sylar/sylar/http/http.h	/^    void delHeader(const std::string& key);$/;"	p	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const std::string & key)
sylar::http::HttpResponse::dump	sylar/sylar/http/http.cc	/^std::ostream& HttpResponse::dump(std::ostream& os) const {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:std::ostream &	signature:(std::ostream & os) const
sylar::http::HttpResponse::dump	sylar/sylar/http/http.h	/^    std::ostream& dump(std::ostream& os) const;$/;"	p	class:sylar::http::HttpResponse	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os) const
sylar::http::HttpResponse::getBody	sylar/sylar/http/http.h	/^    const std::string& getBody() const { return m_body;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:const std::string &	access:public	signature:() const
sylar::http::HttpResponse::getHeader	sylar/sylar/http/http.cc	/^std::string HttpResponse::getHeader(const std::string& key, const std::string& def) const {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:std::string	signature:(const std::string & key,const std::string & def) const
sylar::http::HttpResponse::getHeader	sylar/sylar/http/http.h	/^    std::string getHeader(const std::string& key, const std::string& def = "") const;$/;"	p	class:sylar::http::HttpResponse	typeref:typename:std::string	access:public	signature:(const std::string & key,const std::string & def="") const
sylar::http::HttpResponse::getHeaderAs	sylar/sylar/http/http.h	/^    T getHeaderAs(const std::string& key, const T& def = T()) {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:T	access:public	signature:(const std::string & key,const T & def=T ())
sylar::http::HttpResponse::getHeaders	sylar/sylar/http/http.h	/^    const MapType& getHeaders() const { return m_headers;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:const MapType &	access:public	signature:() const
sylar::http::HttpResponse::getReason	sylar/sylar/http/http.h	/^    const std::string& getReason() const { return m_reason;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:const std::string &	access:public	signature:() const
sylar::http::HttpResponse::getStatus	sylar/sylar/http/http.h	/^    HttpStatus getStatus() const { return m_status;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:HttpStatus	access:public	signature:() const
sylar::http::HttpResponse::getVersion	sylar/sylar/http/http.h	/^    uint8_t getVersion() const { return m_version;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:uint8_t	access:public	signature:() const
sylar::http::HttpResponse::isClose	sylar/sylar/http/http.h	/^    bool isClose() const { return m_close;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:bool	access:public	signature:() const
sylar::http::HttpResponse::isWebsocket	sylar/sylar/http/http.h	/^    bool isWebsocket() const { return m_websocket;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:bool	access:public	signature:() const
sylar::http::HttpResponse::m_body	sylar/sylar/http/http.h	/^    std::string m_body;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:std::string	access:private
sylar::http::HttpResponse::m_close	sylar/sylar/http/http.h	/^    bool m_close;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:bool	access:private
sylar::http::HttpResponse::m_cookies	sylar/sylar/http/http.h	/^    std::vector<std::string> m_cookies;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:std::vector<std::string>	access:private
sylar::http::HttpResponse::m_headers	sylar/sylar/http/http.h	/^    MapType m_headers;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:MapType	access:private
sylar::http::HttpResponse::m_reason	sylar/sylar/http/http.h	/^    std::string m_reason;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:std::string	access:private
sylar::http::HttpResponse::m_status	sylar/sylar/http/http.h	/^    HttpStatus m_status;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:HttpStatus	access:private
sylar::http::HttpResponse::m_version	sylar/sylar/http/http.h	/^    uint8_t m_version;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:uint8_t	access:private
sylar::http::HttpResponse::m_websocket	sylar/sylar/http/http.h	/^    bool m_websocket;$/;"	m	class:sylar::http::HttpResponse	typeref:typename:bool	access:private
sylar::http::HttpResponse::ptr	sylar/sylar/http/http.h	/^    typedef std::shared_ptr<HttpResponse> ptr;$/;"	t	class:sylar::http::HttpResponse	typeref:typename:std::shared_ptr<HttpResponse>	access:public
sylar::http::HttpResponse::setBody	sylar/sylar/http/http.h	/^    void setBody(const std::string& v) { m_body = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::http::HttpResponse::setClose	sylar/sylar/http/http.h	/^    void setClose(bool v) { m_close = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(bool v)
sylar::http::HttpResponse::setCookie	sylar/sylar/http/http.cc	/^void HttpResponse::setCookie(const std::string& key, const std::string& val,$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	signature:(const std::string & key,const std::string & val,time_t expired,const std::string & path,const std::string & domain,bool secure)
sylar::http::HttpResponse::setCookie	sylar/sylar/http/http.h	/^    void setCookie(const std::string& key, const std::string& val,$/;"	p	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val,time_t expired=0,const std::string & path="",const std::string & domain="",bool secure=false)
sylar::http::HttpResponse::setHeader	sylar/sylar/http/http.cc	/^void HttpResponse::setHeader(const std::string& key, const std::string& val) {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	signature:(const std::string & key,const std::string & val)
sylar::http::HttpResponse::setHeader	sylar/sylar/http/http.h	/^    void setHeader(const std::string& key, const std::string& val);$/;"	p	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const std::string & key,const std::string & val)
sylar::http::HttpResponse::setHeaders	sylar/sylar/http/http.h	/^    void setHeaders(const MapType& v) { m_headers = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const MapType & v)
sylar::http::HttpResponse::setReason	sylar/sylar/http/http.h	/^    void setReason(const std::string& v) { m_reason = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::http::HttpResponse::setRedirect	sylar/sylar/http/http.cc	/^void HttpResponse::setRedirect(const std::string& uri) {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	signature:(const std::string & uri)
sylar::http::HttpResponse::setRedirect	sylar/sylar/http/http.h	/^    void setRedirect(const std::string& uri);$/;"	p	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(const std::string & uri)
sylar::http::HttpResponse::setStatus	sylar/sylar/http/http.h	/^    void setStatus(HttpStatus v) { m_status = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(HttpStatus v)
sylar::http::HttpResponse::setVersion	sylar/sylar/http/http.h	/^    void setVersion(uint8_t v) { m_version = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(uint8_t v)
sylar::http::HttpResponse::setWebsocket	sylar/sylar/http/http.h	/^    void setWebsocket(bool v) { m_websocket = v;}$/;"	f	class:sylar::http::HttpResponse	typeref:typename:void	access:public	signature:(bool v)
sylar::http::HttpResponse::toString	sylar/sylar/http/http.cc	/^std::string HttpResponse::toString() const {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:std::string	signature:() const
sylar::http::HttpResponse::toString	sylar/sylar/http/http.h	/^    std::string toString() const;$/;"	p	class:sylar::http::HttpResponse	typeref:typename:std::string	access:public	signature:() const
sylar::http::HttpResponseParser	sylar/sylar/http/http_parser.h	/^class HttpResponseParser {$/;"	c	namespace:sylar::http
sylar::http::HttpResponseParser::GetHttpResponseBufferSize	sylar/sylar/http/http_parser.cc	/^uint64_t HttpResponseParser::GetHttpResponseBufferSize() {$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:uint64_t	signature:()
sylar::http::HttpResponseParser::GetHttpResponseBufferSize	sylar/sylar/http/http_parser.h	/^    static uint64_t GetHttpResponseBufferSize();$/;"	p	class:sylar::http::HttpResponseParser	typeref:typename:uint64_t	access:public	signature:()
sylar::http::HttpResponseParser::GetHttpResponseMaxBodySize	sylar/sylar/http/http_parser.cc	/^uint64_t HttpResponseParser::GetHttpResponseMaxBodySize() {$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:uint64_t	signature:()
sylar::http::HttpResponseParser::GetHttpResponseMaxBodySize	sylar/sylar/http/http_parser.h	/^    static uint64_t GetHttpResponseMaxBodySize();$/;"	p	class:sylar::http::HttpResponseParser	typeref:typename:uint64_t	access:public	signature:()
sylar::http::HttpResponseParser::HttpResponseParser	sylar/sylar/http/http_parser.cc	/^HttpResponseParser::HttpResponseParser()$/;"	f	class:sylar::http::HttpResponseParser	signature:()
sylar::http::HttpResponseParser::HttpResponseParser	sylar/sylar/http/http_parser.h	/^    HttpResponseParser();$/;"	p	class:sylar::http::HttpResponseParser	access:public	signature:()
sylar::http::HttpResponseParser::execute	sylar/sylar/http/http_parser.cc	/^size_t HttpResponseParser::execute(char* data, size_t len, bool chunck) {$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:size_t	signature:(char * data,size_t len,bool chunck)
sylar::http::HttpResponseParser::execute	sylar/sylar/http/http_parser.h	/^    size_t execute(char* data, size_t len, bool chunck);$/;"	p	class:sylar::http::HttpResponseParser	typeref:typename:size_t	access:public	signature:(char * data,size_t len,bool chunck)
sylar::http::HttpResponseParser::getContentLength	sylar/sylar/http/http_parser.cc	/^uint64_t HttpResponseParser::getContentLength() {$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:uint64_t	signature:()
sylar::http::HttpResponseParser::getContentLength	sylar/sylar/http/http_parser.h	/^    uint64_t getContentLength();$/;"	p	class:sylar::http::HttpResponseParser	typeref:typename:uint64_t	access:public	signature:()
sylar::http::HttpResponseParser::getData	sylar/sylar/http/http_parser.h	/^    HttpResponse::ptr getData() const { return m_data;}$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:HttpResponse::ptr	access:public	signature:() const
sylar::http::HttpResponseParser::getParser	sylar/sylar/http/http_parser.h	/^    const httpclient_parser& getParser() const { return m_parser;}$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:const httpclient_parser &	access:public	signature:() const
sylar::http::HttpResponseParser::hasError	sylar/sylar/http/http_parser.cc	/^int HttpResponseParser::hasError() {$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:int	signature:()
sylar::http::HttpResponseParser::hasError	sylar/sylar/http/http_parser.h	/^    int hasError(); $/;"	p	class:sylar::http::HttpResponseParser	typeref:typename:int	access:public	signature:()
sylar::http::HttpResponseParser::isFinished	sylar/sylar/http/http_parser.cc	/^int HttpResponseParser::isFinished() {$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:int	signature:()
sylar::http::HttpResponseParser::isFinished	sylar/sylar/http/http_parser.h	/^    int isFinished();$/;"	p	class:sylar::http::HttpResponseParser	typeref:typename:int	access:public	signature:()
sylar::http::HttpResponseParser::m_data	sylar/sylar/http/http_parser.h	/^    HttpResponse::ptr m_data;$/;"	m	class:sylar::http::HttpResponseParser	typeref:typename:HttpResponse::ptr	access:private
sylar::http::HttpResponseParser::m_error	sylar/sylar/http/http_parser.h	/^    int m_error;$/;"	m	class:sylar::http::HttpResponseParser	typeref:typename:int	access:private
sylar::http::HttpResponseParser::m_parser	sylar/sylar/http/http_parser.h	/^    httpclient_parser m_parser;$/;"	m	class:sylar::http::HttpResponseParser	typeref:typename:httpclient_parser	access:private
sylar::http::HttpResponseParser::ptr	sylar/sylar/http/http_parser.h	/^    typedef std::shared_ptr<HttpResponseParser> ptr;$/;"	t	class:sylar::http::HttpResponseParser	typeref:typename:std::shared_ptr<HttpResponseParser>	access:public
sylar::http::HttpResponseParser::setError	sylar/sylar/http/http_parser.h	/^    void setError(int v) { m_error = v;}$/;"	f	class:sylar::http::HttpResponseParser	typeref:typename:void	access:public	signature:(int v)
sylar::http::HttpResult	sylar/sylar/http/http_connection.h	/^struct HttpResult {$/;"	s	namespace:sylar::http
sylar::http::HttpResult::CONNECT_FAIL	sylar/sylar/http/http_connection.h	/^        CONNECT_FAIL = 3,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
sylar::http::HttpResult::CREATE_SOCKET_ERROR	sylar/sylar/http/http_connection.h	/^        CREATE_SOCKET_ERROR = 7,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
sylar::http::HttpResult::Error	sylar/sylar/http/http_connection.h	/^    enum class Error {$/;"	g	struct:sylar::http::HttpResult	access:public
sylar::http::HttpResult::HttpResult	sylar/sylar/http/http_connection.h	/^    HttpResult(int _result$/;"	f	struct:sylar::http::HttpResult	access:public	signature:(int _result,HttpResponse::ptr _response,const std::string & _error)
sylar::http::HttpResult::INVALID_HOST	sylar/sylar/http/http_connection.h	/^        INVALID_HOST = 2,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
sylar::http::HttpResult::INVALID_URL	sylar/sylar/http/http_connection.h	/^        INVALID_URL = 1,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
sylar::http::HttpResult::OK	sylar/sylar/http/http_connection.h	/^        OK = 0,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
sylar::http::HttpResult::POOL_GET_CONNECTION	sylar/sylar/http/http_connection.h	/^        POOL_GET_CONNECTION = 8,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
sylar::http::HttpResult::POOL_INVALID_CONNECTION	sylar/sylar/http/http_connection.h	/^        POOL_INVALID_CONNECTION = 9,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
sylar::http::HttpResult::SEND_CLOSE_BY_PEER	sylar/sylar/http/http_connection.h	/^        SEND_CLOSE_BY_PEER = 4,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
sylar::http::HttpResult::SEND_SOCKET_ERROR	sylar/sylar/http/http_connection.h	/^        SEND_SOCKET_ERROR = 5,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
sylar::http::HttpResult::TIMEOUT	sylar/sylar/http/http_connection.h	/^        TIMEOUT = 6,$/;"	e	enum:sylar::http::HttpResult::Error	access:public
sylar::http::HttpResult::error	sylar/sylar/http/http_connection.h	/^    std::string error;$/;"	m	struct:sylar::http::HttpResult	typeref:typename:std::string	access:public
sylar::http::HttpResult::ptr	sylar/sylar/http/http_connection.h	/^    typedef std::shared_ptr<HttpResult> ptr;$/;"	t	struct:sylar::http::HttpResult	typeref:typename:std::shared_ptr<HttpResult>	access:public
sylar::http::HttpResult::response	sylar/sylar/http/http_connection.h	/^    HttpResponse::ptr response;$/;"	m	struct:sylar::http::HttpResult	typeref:typename:HttpResponse::ptr	access:public
sylar::http::HttpResult::result	sylar/sylar/http/http_connection.h	/^    int result;$/;"	m	struct:sylar::http::HttpResult	typeref:typename:int	access:public
sylar::http::HttpResult::toString	sylar/sylar/http/http_connection.cc	/^std::string HttpResult::toString() const {$/;"	f	class:sylar::http::HttpResult	typeref:typename:std::string	signature:() const
sylar::http::HttpResult::toString	sylar/sylar/http/http_connection.h	/^    std::string toString() const;$/;"	p	struct:sylar::http::HttpResult	typeref:typename:std::string	access:public	signature:() const
sylar::http::HttpServer	sylar/sylar/http/http_server.h	/^class HttpServer : public TcpServer {$/;"	c	namespace:sylar::http	inherits:TcpServer
sylar::http::HttpServer::HttpServer	sylar/sylar/http/http_server.cc	/^HttpServer::HttpServer(bool keepalive$/;"	f	class:sylar::http::HttpServer	signature:(bool keepalive,sylar::IOManager * worker,sylar::IOManager * io_worker,sylar::IOManager * accept_worker)
sylar::http::HttpServer::HttpServer	sylar/sylar/http/http_server.h	/^    HttpServer(bool keepalive = false$/;"	p	class:sylar::http::HttpServer	access:public	signature:(bool keepalive=false,sylar::IOManager * worker=sylar::IOManager::GetThis (),sylar::IOManager * io_worker=sylar::IOManager::GetThis (),sylar::IOManager * accept_worker=sylar::IOManager::GetThis ())
sylar::http::HttpServer::getServletDispatch	sylar/sylar/http/http_server.h	/^    ServletDispatch::ptr getServletDispatch() const { return m_dispatch;}$/;"	f	class:sylar::http::HttpServer	typeref:typename:ServletDispatch::ptr	access:public	signature:() const
sylar::http::HttpServer::handleClient	sylar/sylar/http/http_server.cc	/^void HttpServer::handleClient(Socket::ptr client) {$/;"	f	class:sylar::http::HttpServer	typeref:typename:void	signature:(Socket::ptr client)
sylar::http::HttpServer::handleClient	sylar/sylar/http/http_server.h	/^    virtual void handleClient(Socket::ptr client) override;$/;"	p	class:sylar::http::HttpServer	typeref:typename:void	access:protected	signature:(Socket::ptr client)
sylar::http::HttpServer::m_dispatch	sylar/sylar/http/http_server.h	/^    ServletDispatch::ptr m_dispatch;$/;"	m	class:sylar::http::HttpServer	typeref:typename:ServletDispatch::ptr	access:private
sylar::http::HttpServer::m_isKeepalive	sylar/sylar/http/http_server.h	/^    bool m_isKeepalive;$/;"	m	class:sylar::http::HttpServer	typeref:typename:bool	access:private
sylar::http::HttpServer::ptr	sylar/sylar/http/http_server.h	/^    typedef std::shared_ptr<HttpServer> ptr;$/;"	t	class:sylar::http::HttpServer	typeref:typename:std::shared_ptr<HttpServer>	access:public
sylar::http::HttpServer::setName	sylar/sylar/http/http_server.cc	/^void HttpServer::setName(const std::string& v) {$/;"	f	class:sylar::http::HttpServer	typeref:typename:void	signature:(const std::string & v)
sylar::http::HttpServer::setName	sylar/sylar/http/http_server.h	/^    virtual void setName(const std::string& v) override;$/;"	p	class:sylar::http::HttpServer	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::http::HttpServer::setServletDispatch	sylar/sylar/http/http_server.h	/^    void setServletDispatch(ServletDispatch::ptr v) { m_dispatch = v;}$/;"	f	class:sylar::http::HttpServer	typeref:typename:void	access:public	signature:(ServletDispatch::ptr v)
sylar::http::HttpSession	sylar/sylar/http/http_session.h	/^class HttpSession : public SocketStream {$/;"	c	namespace:sylar::http	inherits:SocketStream
sylar::http::HttpSession::HttpSession	sylar/sylar/http/http_session.cc	/^HttpSession::HttpSession(Socket::ptr sock, bool owner)$/;"	f	class:sylar::http::HttpSession	signature:(Socket::ptr sock,bool owner)
sylar::http::HttpSession::HttpSession	sylar/sylar/http/http_session.h	/^    HttpSession(Socket::ptr sock, bool owner = true);$/;"	p	class:sylar::http::HttpSession	access:public	signature:(Socket::ptr sock,bool owner=true)
sylar::http::HttpSession::ptr	sylar/sylar/http/http_session.h	/^    typedef std::shared_ptr<HttpSession> ptr;$/;"	t	class:sylar::http::HttpSession	typeref:typename:std::shared_ptr<HttpSession>	access:public
sylar::http::HttpSession::recvRequest	sylar/sylar/http/http_session.cc	/^HttpRequest::ptr HttpSession::recvRequest() {$/;"	f	class:sylar::http::HttpSession	typeref:typename:HttpRequest::ptr	signature:()
sylar::http::HttpSession::recvRequest	sylar/sylar/http/http_session.h	/^    HttpRequest::ptr recvRequest();$/;"	p	class:sylar::http::HttpSession	typeref:typename:HttpRequest::ptr	access:public	signature:()
sylar::http::HttpSession::sendResponse	sylar/sylar/http/http_session.cc	/^int HttpSession::sendResponse(HttpResponse::ptr rsp) {$/;"	f	class:sylar::http::HttpSession	typeref:typename:int	signature:(HttpResponse::ptr rsp)
sylar::http::HttpSession::sendResponse	sylar/sylar/http/http_session.h	/^    int sendResponse(HttpResponse::ptr rsp);$/;"	p	class:sylar::http::HttpSession	typeref:typename:int	access:public	signature:(HttpResponse::ptr rsp)
sylar::http::HttpStatus	sylar/sylar/http/http.h	/^enum class HttpStatus {$/;"	g	namespace:sylar::http
sylar::http::HttpStatusToString	sylar/sylar/http/http.cc	/^const char* HttpStatusToString(const HttpStatus& s) {$/;"	f	namespace:sylar::http	typeref:typename:const char *	signature:(const HttpStatus & s)
sylar::http::HttpStatusToString	sylar/sylar/http/http.h	/^const char* HttpStatusToString(const HttpStatus& s);$/;"	p	namespace:sylar::http	typeref:typename:const char *	signature:(const HttpStatus & s)
sylar::http::IServletCreator	sylar/sylar/http/servlet.h	/^class IServletCreator {$/;"	c	namespace:sylar::http
sylar::http::IServletCreator::get	sylar/sylar/http/servlet.h	/^    virtual Servlet::ptr get() const = 0;$/;"	p	class:sylar::http::IServletCreator	typeref:typename:Servlet::ptr	access:public	signature:() const
sylar::http::IServletCreator::getName	sylar/sylar/http/servlet.h	/^    virtual std::string getName() const = 0;$/;"	p	class:sylar::http::IServletCreator	typeref:typename:std::string	access:public	signature:() const
sylar::http::IServletCreator::ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<IServletCreator> ptr;$/;"	t	class:sylar::http::IServletCreator	typeref:typename:std::shared_ptr<IServletCreator>	access:public
sylar::http::IServletCreator::~IServletCreator	sylar/sylar/http/servlet.h	/^    virtual ~IServletCreator() {}$/;"	f	class:sylar::http::IServletCreator	access:public	signature:()
sylar::http::NotFoundServlet	sylar/sylar/http/servlet.h	/^class NotFoundServlet : public Servlet {$/;"	c	namespace:sylar::http	inherits:Servlet
sylar::http::NotFoundServlet::NotFoundServlet	sylar/sylar/http/servlet.cc	/^NotFoundServlet::NotFoundServlet(const std::string& name)$/;"	f	class:sylar::http::NotFoundServlet	signature:(const std::string & name)
sylar::http::NotFoundServlet::NotFoundServlet	sylar/sylar/http/servlet.h	/^    NotFoundServlet(const std::string& name);$/;"	p	class:sylar::http::NotFoundServlet	access:public	signature:(const std::string & name)
sylar::http::NotFoundServlet::handle	sylar/sylar/http/servlet.cc	/^int32_t NotFoundServlet::handle(sylar::http::HttpRequest::ptr request$/;"	f	class:sylar::http::NotFoundServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
sylar::http::NotFoundServlet::handle	sylar/sylar/http/servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	p	class:sylar::http::NotFoundServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
sylar::http::NotFoundServlet::m_content	sylar/sylar/http/servlet.h	/^    std::string m_content;$/;"	m	class:sylar::http::NotFoundServlet	typeref:typename:std::string	access:private
sylar::http::NotFoundServlet::m_name	sylar/sylar/http/servlet.h	/^    std::string m_name;$/;"	m	class:sylar::http::NotFoundServlet	typeref:typename:std::string	access:private
sylar::http::NotFoundServlet::ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<NotFoundServlet> ptr;$/;"	t	class:sylar::http::NotFoundServlet	typeref:typename:std::shared_ptr<NotFoundServlet>	access:public
sylar::http::Servlet	sylar/sylar/http/servlet.h	/^class Servlet {$/;"	c	namespace:sylar::http
sylar::http::Servlet::Servlet	sylar/sylar/http/servlet.h	/^    Servlet(const std::string& name)$/;"	f	class:sylar::http::Servlet	access:public	signature:(const std::string & name)
sylar::http::Servlet::getName	sylar/sylar/http/servlet.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::http::Servlet	typeref:typename:const std::string &	access:public	signature:() const
sylar::http::Servlet::handle	sylar/sylar/http/servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	p	class:sylar::http::Servlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
sylar::http::Servlet::m_name	sylar/sylar/http/servlet.h	/^    std::string m_name;$/;"	m	class:sylar::http::Servlet	typeref:typename:std::string	access:protected
sylar::http::Servlet::ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<Servlet> ptr;$/;"	t	class:sylar::http::Servlet	typeref:typename:std::shared_ptr<Servlet>	access:public
sylar::http::Servlet::~Servlet	sylar/sylar/http/servlet.h	/^    virtual ~Servlet() {}$/;"	f	class:sylar::http::Servlet	access:public	signature:()
sylar::http::ServletCreator	sylar/sylar/http/servlet.h	/^class ServletCreator : public IServletCreator {$/;"	c	namespace:sylar::http	inherits:IServletCreator
sylar::http::ServletCreator::ServletCreator	sylar/sylar/http/servlet.h	/^    ServletCreator() {$/;"	f	class:sylar::http::ServletCreator	access:public	signature:()
sylar::http::ServletCreator::get	sylar/sylar/http/servlet.h	/^    Servlet::ptr get() const override {$/;"	f	class:sylar::http::ServletCreator	typeref:typename:Servlet::ptr	access:public	signature:() const
sylar::http::ServletCreator::getName	sylar/sylar/http/servlet.h	/^    std::string getName() const override {$/;"	f	class:sylar::http::ServletCreator	typeref:typename:std::string	access:public	signature:() const
sylar::http::ServletCreator::ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<ServletCreator> ptr;$/;"	t	class:sylar::http::ServletCreator	typeref:typename:std::shared_ptr<ServletCreator>	access:public
sylar::http::ServletDispatch	sylar/sylar/http/servlet.h	/^class ServletDispatch : public Servlet {$/;"	c	namespace:sylar::http	inherits:Servlet
sylar::http::ServletDispatch::RWMutexType	sylar/sylar/http/servlet.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::http::ServletDispatch	typeref:typename:RWMutex	access:public
sylar::http::ServletDispatch::ServletDispatch	sylar/sylar/http/servlet.cc	/^ServletDispatch::ServletDispatch()$/;"	f	class:sylar::http::ServletDispatch	signature:()
sylar::http::ServletDispatch::ServletDispatch	sylar/sylar/http/servlet.h	/^    ServletDispatch();$/;"	p	class:sylar::http::ServletDispatch	access:public	signature:()
sylar::http::ServletDispatch::addGlobServlet	sylar/sylar/http/servlet.cc	/^void ServletDispatch::addGlobServlet(const std::string& uri$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri,FunctionServlet::callback cb)
sylar::http::ServletDispatch::addGlobServlet	sylar/sylar/http/servlet.cc	/^void ServletDispatch::addGlobServlet(const std::string& uri$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri,Servlet::ptr slt)
sylar::http::ServletDispatch::addGlobServlet	sylar/sylar/http/servlet.h	/^    void addGlobServlet(const std::string& uri, FunctionServlet::callback cb);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,FunctionServlet::callback cb)
sylar::http::ServletDispatch::addGlobServlet	sylar/sylar/http/servlet.h	/^    void addGlobServlet(const std::string& uri, Servlet::ptr slt);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,Servlet::ptr slt)
sylar::http::ServletDispatch::addGlobServletCreator	sylar/sylar/http/servlet.cc	/^void ServletDispatch::addGlobServletCreator(const std::string& uri, IServletCreator::ptr creator/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri,IServletCreator::ptr creator)
sylar::http::ServletDispatch::addGlobServletCreator	sylar/sylar/http/servlet.h	/^    void addGlobServletCreator(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri)
sylar::http::ServletDispatch::addGlobServletCreator	sylar/sylar/http/servlet.h	/^    void addGlobServletCreator(const std::string& uri, IServletCreator::ptr creator);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,IServletCreator::ptr creator)
sylar::http::ServletDispatch::addServlet	sylar/sylar/http/servlet.cc	/^void ServletDispatch::addServlet(const std::string& uri$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri,FunctionServlet::callback cb)
sylar::http::ServletDispatch::addServlet	sylar/sylar/http/servlet.cc	/^void ServletDispatch::addServlet(const std::string& uri, Servlet::ptr slt) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri,Servlet::ptr slt)
sylar::http::ServletDispatch::addServlet	sylar/sylar/http/servlet.h	/^    void addServlet(const std::string& uri, FunctionServlet::callback cb);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,FunctionServlet::callback cb)
sylar::http::ServletDispatch::addServlet	sylar/sylar/http/servlet.h	/^    void addServlet(const std::string& uri, Servlet::ptr slt);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,Servlet::ptr slt)
sylar::http::ServletDispatch::addServletCreator	sylar/sylar/http/servlet.cc	/^void ServletDispatch::addServletCreator(const std::string& uri, IServletCreator::ptr creator) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri,IServletCreator::ptr creator)
sylar::http::ServletDispatch::addServletCreator	sylar/sylar/http/servlet.h	/^    void addServletCreator(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri)
sylar::http::ServletDispatch::addServletCreator	sylar/sylar/http/servlet.h	/^    void addServletCreator(const std::string& uri, IServletCreator::ptr creator);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,IServletCreator::ptr creator)
sylar::http::ServletDispatch::delGlobServlet	sylar/sylar/http/servlet.cc	/^void ServletDispatch::delGlobServlet(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri)
sylar::http::ServletDispatch::delGlobServlet	sylar/sylar/http/servlet.h	/^    void delGlobServlet(const std::string& uri);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri)
sylar::http::ServletDispatch::delServlet	sylar/sylar/http/servlet.cc	/^void ServletDispatch::delServlet(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(const std::string & uri)
sylar::http::ServletDispatch::delServlet	sylar/sylar/http/servlet.h	/^    void delServlet(const std::string& uri);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri)
sylar::http::ServletDispatch::getDefault	sylar/sylar/http/servlet.h	/^    Servlet::ptr getDefault() const { return m_default;}$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	access:public	signature:() const
sylar::http::ServletDispatch::getGlobServlet	sylar/sylar/http/servlet.cc	/^Servlet::ptr ServletDispatch::getGlobServlet(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	signature:(const std::string & uri)
sylar::http::ServletDispatch::getGlobServlet	sylar/sylar/http/servlet.h	/^    Servlet::ptr getGlobServlet(const std::string& uri);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	access:public	signature:(const std::string & uri)
sylar::http::ServletDispatch::getMatchedServlet	sylar/sylar/http/servlet.cc	/^Servlet::ptr ServletDispatch::getMatchedServlet(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	signature:(const std::string & uri)
sylar::http::ServletDispatch::getMatchedServlet	sylar/sylar/http/servlet.h	/^    Servlet::ptr getMatchedServlet(const std::string& uri);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	access:public	signature:(const std::string & uri)
sylar::http::ServletDispatch::getServlet	sylar/sylar/http/servlet.cc	/^Servlet::ptr ServletDispatch::getServlet(const std::string& uri) {$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	signature:(const std::string & uri)
sylar::http::ServletDispatch::getServlet	sylar/sylar/http/servlet.h	/^    Servlet::ptr getServlet(const std::string& uri);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	access:public	signature:(const std::string & uri)
sylar::http::ServletDispatch::handle	sylar/sylar/http/servlet.cc	/^int32_t ServletDispatch::handle(sylar::http::HttpRequest::ptr request$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
sylar::http::ServletDispatch::handle	sylar/sylar/http/servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
sylar::http::ServletDispatch::listAllGlobServletCreator	sylar/sylar/http/servlet.cc	/^void ServletDispatch::listAllGlobServletCreator(std::map<std::string, IServletCreator::ptr>& inf/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(std::map<std::string,IServletCreator::ptr> & infos)
sylar::http::ServletDispatch::listAllGlobServletCreator	sylar/sylar/http/servlet.h	/^    void listAllGlobServletCreator(std::map<std::string, IServletCreator::ptr>& infos);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(std::map<std::string,IServletCreator::ptr> & infos)
sylar::http::ServletDispatch::listAllServletCreator	sylar/sylar/http/servlet.cc	/^void ServletDispatch::listAllServletCreator(std::map<std::string, IServletCreator::ptr>& infos) /;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	signature:(std::map<std::string,IServletCreator::ptr> & infos)
sylar::http::ServletDispatch::listAllServletCreator	sylar/sylar/http/servlet.h	/^    void listAllServletCreator(std::map<std::string, IServletCreator::ptr>& infos);$/;"	p	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(std::map<std::string,IServletCreator::ptr> & infos)
sylar::http::ServletDispatch::m_datas	sylar/sylar/http/servlet.h	/^    std::unordered_map<std::string, IServletCreator::ptr> m_datas;$/;"	m	class:sylar::http::ServletDispatch	typeref:typename:std::unordered_map<std::string,IServletCreator::ptr>	access:private
sylar::http::ServletDispatch::m_default	sylar/sylar/http/servlet.h	/^    Servlet::ptr m_default;$/;"	m	class:sylar::http::ServletDispatch	typeref:typename:Servlet::ptr	access:private
sylar::http::ServletDispatch::m_globs	sylar/sylar/http/servlet.h	/^    std::vector<std::pair<std::string, IServletCreator::ptr> > m_globs;$/;"	m	class:sylar::http::ServletDispatch	typeref:typename:std::vector<std::pair<std::string,IServletCreator::ptr>>	access:private
sylar::http::ServletDispatch::m_mutex	sylar/sylar/http/servlet.h	/^    RWMutexType m_mutex;$/;"	m	class:sylar::http::ServletDispatch	typeref:typename:RWMutexType	access:private
sylar::http::ServletDispatch::ptr	sylar/sylar/http/servlet.h	/^    typedef std::shared_ptr<ServletDispatch> ptr;$/;"	t	class:sylar::http::ServletDispatch	typeref:typename:std::shared_ptr<ServletDispatch>	access:public
sylar::http::ServletDispatch::setDefault	sylar/sylar/http/servlet.h	/^    void setDefault(Servlet::ptr v) { m_default = v;}$/;"	f	class:sylar::http::ServletDispatch	typeref:typename:void	access:public	signature:(Servlet::ptr v)
sylar::http::SessionData	sylar/sylar/http/session_data.h	/^class SessionData {$/;"	c	namespace:sylar::http
sylar::http::SessionData::SessionData	sylar/sylar/http/session_data.cc	/^SessionData::SessionData(bool auto_gen)$/;"	f	class:sylar::http::SessionData	signature:(bool auto_gen)
sylar::http::SessionData::SessionData	sylar/sylar/http/session_data.h	/^    SessionData(bool auto_gen = false);$/;"	p	class:sylar::http::SessionData	access:public	signature:(bool auto_gen=false)
sylar::http::SessionData::del	sylar/sylar/http/session_data.cc	/^void SessionData::del(const std::string& key) {$/;"	f	class:sylar::http::SessionData	typeref:typename:void	signature:(const std::string & key)
sylar::http::SessionData::del	sylar/sylar/http/session_data.h	/^    void del(const std::string& key);$/;"	p	class:sylar::http::SessionData	typeref:typename:void	access:public	signature:(const std::string & key)
sylar::http::SessionData::getData	sylar/sylar/http/session_data.h	/^    T getData(const std::string& key, const T& def = T()) {$/;"	f	class:sylar::http::SessionData	typeref:typename:T	access:public	signature:(const std::string & key,const T & def=T ())
sylar::http::SessionData::getId	sylar/sylar/http/session_data.h	/^    const std::string& getId() const { return m_id;}$/;"	f	class:sylar::http::SessionData	typeref:typename:const std::string &	access:public	signature:() const
sylar::http::SessionData::getLastAccessTime	sylar/sylar/http/session_data.h	/^    uint64_t getLastAccessTime() const { return m_lastAccessTime;}$/;"	f	class:sylar::http::SessionData	typeref:typename:uint64_t	access:public	signature:() const
sylar::http::SessionData::has	sylar/sylar/http/session_data.cc	/^bool SessionData::has(const std::string& key) {$/;"	f	class:sylar::http::SessionData	typeref:typename:bool	signature:(const std::string & key)
sylar::http::SessionData::has	sylar/sylar/http/session_data.h	/^    bool has(const std::string& key);$/;"	p	class:sylar::http::SessionData	typeref:typename:bool	access:public	signature:(const std::string & key)
sylar::http::SessionData::m_datas	sylar/sylar/http/session_data.h	/^    std::unordered_map<std::string, boost::any> m_datas;$/;"	m	class:sylar::http::SessionData	typeref:typename:std::unordered_map<std::string,boost::any>	access:private
sylar::http::SessionData::m_id	sylar/sylar/http/session_data.h	/^    std::string m_id;$/;"	m	class:sylar::http::SessionData	typeref:typename:std::string	access:private
sylar::http::SessionData::m_lastAccessTime	sylar/sylar/http/session_data.h	/^    uint64_t m_lastAccessTime;$/;"	m	class:sylar::http::SessionData	typeref:typename:uint64_t	access:private
sylar::http::SessionData::m_mutex	sylar/sylar/http/session_data.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::http::SessionData	typeref:typename:sylar::RWMutex	access:private
sylar::http::SessionData::ptr	sylar/sylar/http/session_data.h	/^    typedef std::shared_ptr<SessionData> ptr;$/;"	t	class:sylar::http::SessionData	typeref:typename:std::shared_ptr<SessionData>	access:public
sylar::http::SessionData::setData	sylar/sylar/http/session_data.h	/^    void setData(const std::string& key, const T& v) {$/;"	f	class:sylar::http::SessionData	typeref:typename:void	access:public	signature:(const std::string & key,const T & v)
sylar::http::SessionData::setId	sylar/sylar/http/session_data.h	/^    void setId(const std::string& val) { m_id = val;}$/;"	f	class:sylar::http::SessionData	typeref:typename:void	access:public	signature:(const std::string & val)
sylar::http::SessionData::setLastAccessTime	sylar/sylar/http/session_data.h	/^    void setLastAccessTime(uint64_t v) { m_lastAccessTime = v;}$/;"	f	class:sylar::http::SessionData	typeref:typename:void	access:public	signature:(uint64_t v)
sylar::http::SessionDataManager	sylar/sylar/http/session_data.h	/^class SessionDataManager {$/;"	c	namespace:sylar::http
sylar::http::SessionDataManager::add	sylar/sylar/http/session_data.cc	/^void SessionDataManager::add(SessionData::ptr info) {$/;"	f	class:sylar::http::SessionDataManager	typeref:typename:void	signature:(SessionData::ptr info)
sylar::http::SessionDataManager::add	sylar/sylar/http/session_data.h	/^    void add(SessionData::ptr info);$/;"	p	class:sylar::http::SessionDataManager	typeref:typename:void	access:public	signature:(SessionData::ptr info)
sylar::http::SessionDataManager::check	sylar/sylar/http/session_data.cc	/^void SessionDataManager::check(int64_t ts) {$/;"	f	class:sylar::http::SessionDataManager	typeref:typename:void	signature:(int64_t ts)
sylar::http::SessionDataManager::check	sylar/sylar/http/session_data.h	/^    void check(int64_t ts = 3600);$/;"	p	class:sylar::http::SessionDataManager	typeref:typename:void	access:public	signature:(int64_t ts=3600)
sylar::http::SessionDataManager::del	sylar/sylar/http/session_data.cc	/^void SessionDataManager::del(const std::string& id) {$/;"	f	class:sylar::http::SessionDataManager	typeref:typename:void	signature:(const std::string & id)
sylar::http::SessionDataManager::del	sylar/sylar/http/session_data.h	/^    void del(const std::string& id);$/;"	p	class:sylar::http::SessionDataManager	typeref:typename:void	access:public	signature:(const std::string & id)
sylar::http::SessionDataManager::get	sylar/sylar/http/session_data.cc	/^SessionData::ptr SessionDataManager::get(const std::string& id) {$/;"	f	class:sylar::http::SessionDataManager	typeref:typename:SessionData::ptr	signature:(const std::string & id)
sylar::http::SessionDataManager::get	sylar/sylar/http/session_data.h	/^    SessionData::ptr get(const std::string& id);$/;"	p	class:sylar::http::SessionDataManager	typeref:typename:SessionData::ptr	access:public	signature:(const std::string & id)
sylar::http::SessionDataManager::m_datas	sylar/sylar/http/session_data.h	/^    std::unordered_map<std::string, SessionData::ptr> m_datas;$/;"	m	class:sylar::http::SessionDataManager	typeref:typename:std::unordered_map<std::string,SessionData::ptr>	access:private
sylar::http::SessionDataManager::m_mutex	sylar/sylar/http/session_data.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::http::SessionDataManager	typeref:typename:sylar::RWMutex	access:private
sylar::http::SessionDataMgr	sylar/sylar/http/session_data.h	/^typedef sylar::Singleton<SessionDataManager> SessionDataMgr;$/;"	t	namespace:sylar::http	typeref:typename:sylar::Singleton<SessionDataManager>
sylar::http::StatusServlet	sylar/sylar/http/servlets/status_servlet.h	/^class StatusServlet : public Servlet {$/;"	c	namespace:sylar::http	inherits:Servlet
sylar::http::StatusServlet::StatusServlet	sylar/sylar/http/servlets/status_servlet.cc	/^StatusServlet::StatusServlet()$/;"	f	class:sylar::http::StatusServlet	signature:()
sylar::http::StatusServlet::StatusServlet	sylar/sylar/http/servlets/status_servlet.h	/^    StatusServlet();$/;"	p	class:sylar::http::StatusServlet	access:public	signature:()
sylar::http::StatusServlet::handle	sylar/sylar/http/servlets/status_servlet.cc	/^int32_t StatusServlet::handle(sylar::http::HttpRequest::ptr request$/;"	f	class:sylar::http::StatusServlet	typeref:typename:int32_t	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
sylar::http::StatusServlet::handle	sylar/sylar/http/servlets/status_servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	p	class:sylar::http::StatusServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
sylar::http::StringToHttpMethod	sylar/sylar/http/http.cc	/^HttpMethod StringToHttpMethod(const std::string& m) {$/;"	f	namespace:sylar::http	typeref:typename:HttpMethod	signature:(const std::string & m)
sylar::http::StringToHttpMethod	sylar/sylar/http/http.h	/^HttpMethod StringToHttpMethod(const std::string& m);$/;"	p	namespace:sylar::http	typeref:typename:HttpMethod	signature:(const std::string & m)
sylar::http::WSConnection	sylar/sylar/http/ws_connection.h	/^class WSConnection : public HttpConnection {$/;"	c	namespace:sylar::http	inherits:HttpConnection
sylar::http::WSConnection::Create	sylar/sylar/http/ws_connection.cc	/^std::pair<HttpResult::ptr, WSConnection::ptr> WSConnection::Create(Uri::ptr uri$/;"	f	class:sylar::http::WSConnection	typeref:typename:std::pair<HttpResult::ptr,WSConnection::ptr>	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers)
sylar::http::WSConnection::Create	sylar/sylar/http/ws_connection.cc	/^std::pair<HttpResult::ptr, WSConnection::ptr> WSConnection::Create(const std::string& url$/;"	f	class:sylar::http::WSConnection	typeref:typename:std::pair<HttpResult::ptr,WSConnection::ptr>	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers)
sylar::http::WSConnection::Create	sylar/sylar/http/ws_connection.h	/^    static std::pair<HttpResult::ptr, WSConnection::ptr> Create(Uri::ptr uri$/;"	p	class:sylar::http::WSConnection	typeref:typename:std::pair<HttpResult::ptr,WSConnection::ptr>	access:public	signature:(Uri::ptr uri,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={})
sylar::http::WSConnection::Create	sylar/sylar/http/ws_connection.h	/^    static std::pair<HttpResult::ptr, WSConnection::ptr> Create(const std::string& url$/;"	p	class:sylar::http::WSConnection	typeref:typename:std::pair<HttpResult::ptr,WSConnection::ptr>	access:public	signature:(const std::string & url,uint64_t timeout_ms,const std::map<std::string,std::string> & headers={})
sylar::http::WSConnection::WSConnection	sylar/sylar/http/ws_connection.cc	/^WSConnection::WSConnection(Socket::ptr sock, bool owner) $/;"	f	class:sylar::http::WSConnection	signature:(Socket::ptr sock,bool owner)
sylar::http::WSConnection::WSConnection	sylar/sylar/http/ws_connection.h	/^    WSConnection(Socket::ptr sock, bool owner = true);$/;"	p	class:sylar::http::WSConnection	access:public	signature:(Socket::ptr sock,bool owner=true)
sylar::http::WSConnection::ping	sylar/sylar/http/ws_connection.cc	/^int32_t WSConnection::ping() {$/;"	f	class:sylar::http::WSConnection	typeref:typename:int32_t	signature:()
sylar::http::WSConnection::ping	sylar/sylar/http/ws_connection.h	/^    int32_t ping();$/;"	p	class:sylar::http::WSConnection	typeref:typename:int32_t	access:public	signature:()
sylar::http::WSConnection::pong	sylar/sylar/http/ws_connection.cc	/^int32_t WSConnection::pong() {$/;"	f	class:sylar::http::WSConnection	typeref:typename:int32_t	signature:()
sylar::http::WSConnection::pong	sylar/sylar/http/ws_connection.h	/^    int32_t pong();$/;"	p	class:sylar::http::WSConnection	typeref:typename:int32_t	access:public	signature:()
sylar::http::WSConnection::ptr	sylar/sylar/http/ws_connection.h	/^    typedef std::shared_ptr<WSConnection> ptr;$/;"	t	class:sylar::http::WSConnection	typeref:typename:std::shared_ptr<WSConnection>	access:public
sylar::http::WSConnection::recvMessage	sylar/sylar/http/ws_connection.cc	/^WSFrameMessage::ptr WSConnection::recvMessage() {$/;"	f	class:sylar::http::WSConnection	typeref:typename:WSFrameMessage::ptr	signature:()
sylar::http::WSConnection::recvMessage	sylar/sylar/http/ws_connection.h	/^    WSFrameMessage::ptr recvMessage();$/;"	p	class:sylar::http::WSConnection	typeref:typename:WSFrameMessage::ptr	access:public	signature:()
sylar::http::WSConnection::sendMessage	sylar/sylar/http/ws_connection.cc	/^int32_t WSConnection::sendMessage(WSFrameMessage::ptr msg, bool fin) {$/;"	f	class:sylar::http::WSConnection	typeref:typename:int32_t	signature:(WSFrameMessage::ptr msg,bool fin)
sylar::http::WSConnection::sendMessage	sylar/sylar/http/ws_connection.cc	/^int32_t WSConnection::sendMessage(const std::string& msg, int32_t opcode, bool fin) {$/;"	f	class:sylar::http::WSConnection	typeref:typename:int32_t	signature:(const std::string & msg,int32_t opcode,bool fin)
sylar::http::WSConnection::sendMessage	sylar/sylar/http/ws_connection.h	/^    int32_t sendMessage(WSFrameMessage::ptr msg, bool fin = true);$/;"	p	class:sylar::http::WSConnection	typeref:typename:int32_t	access:public	signature:(WSFrameMessage::ptr msg,bool fin=true)
sylar::http::WSConnection::sendMessage	sylar/sylar/http/ws_connection.h	/^    int32_t sendMessage(const std::string& msg, int32_t opcode = WSFrameHead::TEXT_FRAME, bool f/;"	p	class:sylar::http::WSConnection	typeref:typename:int32_t	access:public	signature:(const std::string & msg,int32_t opcode=WSFrameHead::TEXT_FRAME,bool fin=true)
sylar::http::WSFrameHead	sylar/sylar/http/ws_session.h	/^struct WSFrameHead {$/;"	s	namespace:sylar::http
sylar::http::WSFrameHead::BIN_FRAME	sylar/sylar/http/ws_session.h	/^        BIN_FRAME = 2,$/;"	e	enum:sylar::http::WSFrameHead::OPCODE	access:public
sylar::http::WSFrameHead::CLOSE	sylar/sylar/http/ws_session.h	/^        CLOSE = 8,$/;"	e	enum:sylar::http::WSFrameHead::OPCODE	access:public
sylar::http::WSFrameHead::CONTINUE	sylar/sylar/http/ws_session.h	/^        CONTINUE = 0,$/;"	e	enum:sylar::http::WSFrameHead::OPCODE	access:public
sylar::http::WSFrameHead::OPCODE	sylar/sylar/http/ws_session.h	/^    enum OPCODE {$/;"	g	struct:sylar::http::WSFrameHead	access:public
sylar::http::WSFrameHead::PING	sylar/sylar/http/ws_session.h	/^        PING = 0x9,$/;"	e	enum:sylar::http::WSFrameHead::OPCODE	access:public
sylar::http::WSFrameHead::PONG	sylar/sylar/http/ws_session.h	/^        PONG = 0xA$/;"	e	enum:sylar::http::WSFrameHead::OPCODE	access:public
sylar::http::WSFrameHead::TEXT_FRAME	sylar/sylar/http/ws_session.h	/^        TEXT_FRAME = 1,$/;"	e	enum:sylar::http::WSFrameHead::OPCODE	access:public
sylar::http::WSFrameHead::fin	sylar/sylar/http/ws_session.h	/^    bool fin: 1;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:bool:1	access:public
sylar::http::WSFrameHead::mask	sylar/sylar/http/ws_session.h	/^    bool mask: 1;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:bool:1	access:public
sylar::http::WSFrameHead::opcode	sylar/sylar/http/ws_session.h	/^    uint32_t opcode: 4;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:uint32_t:4	access:public
sylar::http::WSFrameHead::payload	sylar/sylar/http/ws_session.h	/^    uint32_t payload: 7;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:uint32_t:7	access:public
sylar::http::WSFrameHead::rsv1	sylar/sylar/http/ws_session.h	/^    bool rsv1: 1;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:bool:1	access:public
sylar::http::WSFrameHead::rsv2	sylar/sylar/http/ws_session.h	/^    bool rsv2: 1;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:bool:1	access:public
sylar::http::WSFrameHead::rsv3	sylar/sylar/http/ws_session.h	/^    bool rsv3: 1;$/;"	m	struct:sylar::http::WSFrameHead	typeref:typename:bool:1	access:public
sylar::http::WSFrameHead::toString	sylar/sylar/http/ws_session.cc	/^std::string WSFrameHead::toString() const {$/;"	f	class:sylar::http::WSFrameHead	typeref:typename:std::string	signature:() const
sylar::http::WSFrameHead::toString	sylar/sylar/http/ws_session.h	/^    std::string toString() const;$/;"	p	struct:sylar::http::WSFrameHead	typeref:typename:std::string	access:public	signature:() const
sylar::http::WSFrameMessage	sylar/sylar/http/ws_session.h	/^class WSFrameMessage {$/;"	c	namespace:sylar::http
sylar::http::WSFrameMessage::WSFrameMessage	sylar/sylar/http/ws_session.cc	/^WSFrameMessage::WSFrameMessage(int opcode, const std::string& data)$/;"	f	class:sylar::http::WSFrameMessage	signature:(int opcode,const std::string & data)
sylar::http::WSFrameMessage::WSFrameMessage	sylar/sylar/http/ws_session.h	/^    WSFrameMessage(int opcode = 0, const std::string& data = "");$/;"	p	class:sylar::http::WSFrameMessage	access:public	signature:(int opcode=0,const std::string & data="")
sylar::http::WSFrameMessage::getData	sylar/sylar/http/ws_session.h	/^    const std::string& getData() const { return m_data;}$/;"	f	class:sylar::http::WSFrameMessage	typeref:typename:const std::string &	access:public	signature:() const
sylar::http::WSFrameMessage::getData	sylar/sylar/http/ws_session.h	/^    std::string& getData() { return m_data;}$/;"	f	class:sylar::http::WSFrameMessage	typeref:typename:std::string &	access:public	signature:()
sylar::http::WSFrameMessage::getOpcode	sylar/sylar/http/ws_session.h	/^    int getOpcode() const { return m_opcode;}$/;"	f	class:sylar::http::WSFrameMessage	typeref:typename:int	access:public	signature:() const
sylar::http::WSFrameMessage::m_data	sylar/sylar/http/ws_session.h	/^    std::string m_data;$/;"	m	class:sylar::http::WSFrameMessage	typeref:typename:std::string	access:private
sylar::http::WSFrameMessage::m_opcode	sylar/sylar/http/ws_session.h	/^    int m_opcode;$/;"	m	class:sylar::http::WSFrameMessage	typeref:typename:int	access:private
sylar::http::WSFrameMessage::ptr	sylar/sylar/http/ws_session.h	/^    typedef std::shared_ptr<WSFrameMessage> ptr;$/;"	t	class:sylar::http::WSFrameMessage	typeref:typename:std::shared_ptr<WSFrameMessage>	access:public
sylar::http::WSFrameMessage::setData	sylar/sylar/http/ws_session.h	/^    void setData(const std::string& v) { m_data = v;}$/;"	f	class:sylar::http::WSFrameMessage	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::http::WSFrameMessage::setOpcode	sylar/sylar/http/ws_session.h	/^    void setOpcode(int v) { m_opcode = v;}$/;"	f	class:sylar::http::WSFrameMessage	typeref:typename:void	access:public	signature:(int v)
sylar::http::WSPing	sylar/sylar/http/ws_session.cc	/^int32_t WSPing(Stream* stream) {$/;"	f	namespace:sylar::http	typeref:typename:int32_t	signature:(Stream * stream)
sylar::http::WSPing	sylar/sylar/http/ws_session.h	/^int32_t WSPing(Stream* stream);$/;"	p	namespace:sylar::http	typeref:typename:int32_t	signature:(Stream * stream)
sylar::http::WSPong	sylar/sylar/http/ws_session.cc	/^int32_t WSPong(Stream* stream) {$/;"	f	namespace:sylar::http	typeref:typename:int32_t	signature:(Stream * stream)
sylar::http::WSPong	sylar/sylar/http/ws_session.h	/^int32_t WSPong(Stream* stream);$/;"	p	namespace:sylar::http	typeref:typename:int32_t	signature:(Stream * stream)
sylar::http::WSRecvMessage	sylar/sylar/http/ws_session.cc	/^WSFrameMessage::ptr WSRecvMessage(Stream* stream, bool client) {$/;"	f	namespace:sylar::http	typeref:typename:WSFrameMessage::ptr	signature:(Stream * stream,bool client)
sylar::http::WSRecvMessage	sylar/sylar/http/ws_session.h	/^WSFrameMessage::ptr WSRecvMessage(Stream* stream, bool client);$/;"	p	namespace:sylar::http	typeref:typename:WSFrameMessage::ptr	signature:(Stream * stream,bool client)
sylar::http::WSSendMessage	sylar/sylar/http/ws_session.cc	/^int32_t WSSendMessage(Stream* stream, WSFrameMessage::ptr msg, bool client, bool fin) {$/;"	f	namespace:sylar::http	typeref:typename:int32_t	signature:(Stream * stream,WSFrameMessage::ptr msg,bool client,bool fin)
sylar::http::WSSendMessage	sylar/sylar/http/ws_session.h	/^int32_t WSSendMessage(Stream* stream, WSFrameMessage::ptr msg, bool client, bool fin);$/;"	p	namespace:sylar::http	typeref:typename:int32_t	signature:(Stream * stream,WSFrameMessage::ptr msg,bool client,bool fin)
sylar::http::WSServer	sylar/sylar/http/ws_server.h	/^class WSServer : public TcpServer {$/;"	c	namespace:sylar::http	inherits:TcpServer
sylar::http::WSServer::WSServer	sylar/sylar/http/ws_server.cc	/^WSServer::WSServer(sylar::IOManager* worker, sylar::IOManager* io_worker, sylar::IOManager* acce/;"	f	class:sylar::http::WSServer	signature:(sylar::IOManager * worker,sylar::IOManager * io_worker,sylar::IOManager * accept_worker)
sylar::http::WSServer::WSServer	sylar/sylar/http/ws_server.h	/^    WSServer(sylar::IOManager* worker = sylar::IOManager::GetThis()$/;"	p	class:sylar::http::WSServer	access:public	signature:(sylar::IOManager * worker=sylar::IOManager::GetThis (),sylar::IOManager * io_worker=sylar::IOManager::GetThis (),sylar::IOManager * accept_worker=sylar::IOManager::GetThis ())
sylar::http::WSServer::getWSServletDispatch	sylar/sylar/http/ws_server.h	/^    WSServletDispatch::ptr getWSServletDispatch() const { return m_dispatch;}$/;"	f	class:sylar::http::WSServer	typeref:typename:WSServletDispatch::ptr	access:public	signature:() const
sylar::http::WSServer::handleClient	sylar/sylar/http/ws_server.cc	/^void WSServer::handleClient(Socket::ptr client) {$/;"	f	class:sylar::http::WSServer	typeref:typename:void	signature:(Socket::ptr client)
sylar::http::WSServer::handleClient	sylar/sylar/http/ws_server.h	/^    virtual void handleClient(Socket::ptr client) override;$/;"	p	class:sylar::http::WSServer	typeref:typename:void	access:protected	signature:(Socket::ptr client)
sylar::http::WSServer::m_dispatch	sylar/sylar/http/ws_server.h	/^    WSServletDispatch::ptr m_dispatch;$/;"	m	class:sylar::http::WSServer	typeref:typename:WSServletDispatch::ptr	access:protected
sylar::http::WSServer::ptr	sylar/sylar/http/ws_server.h	/^    typedef std::shared_ptr<WSServer> ptr;$/;"	t	class:sylar::http::WSServer	typeref:typename:std::shared_ptr<WSServer>	access:public
sylar::http::WSServer::setWSServletDispatch	sylar/sylar/http/ws_server.h	/^    void setWSServletDispatch(WSServletDispatch::ptr v) { m_dispatch = v;}$/;"	f	class:sylar::http::WSServer	typeref:typename:void	access:public	signature:(WSServletDispatch::ptr v)
sylar::http::WSServlet	sylar/sylar/http/ws_servlet.h	/^class WSServlet : public Servlet {$/;"	c	namespace:sylar::http	inherits:Servlet
sylar::http::WSServlet::WSServlet	sylar/sylar/http/ws_servlet.h	/^    WSServlet(const std::string& name)$/;"	f	class:sylar::http::WSServlet	access:public	signature:(const std::string & name)
sylar::http::WSServlet::getName	sylar/sylar/http/ws_servlet.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::http::WSServlet	typeref:typename:const std::string &	access:public	signature:() const
sylar::http::WSServlet::handle	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr header$/;"	p	class:sylar::http::WSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSFrameMessage::ptr msg,sylar::http::WSSession::ptr session)
sylar::http::WSServlet::handle	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t handle(sylar::http::HttpRequest::ptr request$/;"	f	class:sylar::http::WSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr request,sylar::http::HttpResponse::ptr response,sylar::http::HttpSession::ptr session)
sylar::http::WSServlet::m_name	sylar/sylar/http/ws_servlet.h	/^    std::string m_name;$/;"	m	class:sylar::http::WSServlet	typeref:typename:std::string	access:protected
sylar::http::WSServlet::onClose	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t onClose(sylar::http::HttpRequest::ptr header$/;"	p	class:sylar::http::WSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSSession::ptr session)
sylar::http::WSServlet::onConnect	sylar/sylar/http/ws_servlet.h	/^    virtual int32_t onConnect(sylar::http::HttpRequest::ptr header$/;"	p	class:sylar::http::WSServlet	typeref:typename:int32_t	access:public	signature:(sylar::http::HttpRequest::ptr header,sylar::http::WSSession::ptr session)
sylar::http::WSServlet::ptr	sylar/sylar/http/ws_servlet.h	/^    typedef std::shared_ptr<WSServlet> ptr;$/;"	t	class:sylar::http::WSServlet	typeref:typename:std::shared_ptr<WSServlet>	access:public
sylar::http::WSServlet::~WSServlet	sylar/sylar/http/ws_servlet.h	/^    virtual ~WSServlet() {}$/;"	f	class:sylar::http::WSServlet	access:public	signature:()
sylar::http::WSServletDispatch	sylar/sylar/http/ws_servlet.h	/^class WSServletDispatch : public ServletDispatch {$/;"	c	namespace:sylar::http	inherits:ServletDispatch
sylar::http::WSServletDispatch::RWMutexType	sylar/sylar/http/ws_servlet.h	/^    typedef RWMutex RWMutexType;$/;"	t	class:sylar::http::WSServletDispatch	typeref:typename:RWMutex	access:public
sylar::http::WSServletDispatch::WSServletDispatch	sylar/sylar/http/ws_servlet.cc	/^WSServletDispatch::WSServletDispatch() {$/;"	f	class:sylar::http::WSServletDispatch	signature:()
sylar::http::WSServletDispatch::WSServletDispatch	sylar/sylar/http/ws_servlet.h	/^    WSServletDispatch();$/;"	p	class:sylar::http::WSServletDispatch	access:public	signature:()
sylar::http::WSServletDispatch::addGlobServlet	sylar/sylar/http/ws_servlet.cc	/^void WSServletDispatch::addGlobServlet(const std::string& uri$/;"	f	class:sylar::http::WSServletDispatch	typeref:typename:void	signature:(const std::string & uri,FunctionWSServlet::callback cb,FunctionWSServlet::on_connect_cb connect_cb,FunctionWSServlet::on_close_cb close_cb)
sylar::http::WSServletDispatch::addGlobServlet	sylar/sylar/http/ws_servlet.h	/^    void addGlobServlet(const std::string& uri$/;"	p	class:sylar::http::WSServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,FunctionWSServlet::callback cb,FunctionWSServlet::on_connect_cb connect_cb=nullptr,FunctionWSServlet::on_close_cb close_cb=nullptr)
sylar::http::WSServletDispatch::addServlet	sylar/sylar/http/ws_servlet.cc	/^void WSServletDispatch::addServlet(const std::string& uri$/;"	f	class:sylar::http::WSServletDispatch	typeref:typename:void	signature:(const std::string & uri,FunctionWSServlet::callback cb,FunctionWSServlet::on_connect_cb connect_cb,FunctionWSServlet::on_close_cb close_cb)
sylar::http::WSServletDispatch::addServlet	sylar/sylar/http/ws_servlet.h	/^    void addServlet(const std::string& uri$/;"	p	class:sylar::http::WSServletDispatch	typeref:typename:void	access:public	signature:(const std::string & uri,FunctionWSServlet::callback cb,FunctionWSServlet::on_connect_cb connect_cb=nullptr,FunctionWSServlet::on_close_cb close_cb=nullptr)
sylar::http::WSServletDispatch::getWSServlet	sylar/sylar/http/ws_servlet.cc	/^WSServlet::ptr WSServletDispatch::getWSServlet(const std::string& uri) {$/;"	f	class:sylar::http::WSServletDispatch	typeref:typename:WSServlet::ptr	signature:(const std::string & uri)
sylar::http::WSServletDispatch::getWSServlet	sylar/sylar/http/ws_servlet.h	/^    WSServlet::ptr getWSServlet(const std::string& uri);$/;"	p	class:sylar::http::WSServletDispatch	typeref:typename:WSServlet::ptr	access:public	signature:(const std::string & uri)
sylar::http::WSServletDispatch::ptr	sylar/sylar/http/ws_servlet.h	/^    typedef std::shared_ptr<WSServletDispatch> ptr;$/;"	t	class:sylar::http::WSServletDispatch	typeref:typename:std::shared_ptr<WSServletDispatch>	access:public
sylar::http::WSSession	sylar/sylar/http/ws_session.h	/^class WSSession : public HttpSession {$/;"	c	namespace:sylar::http	inherits:HttpSession
sylar::http::WSSession::WSSession	sylar/sylar/http/ws_session.cc	/^WSSession::WSSession(Socket::ptr sock, bool owner)$/;"	f	class:sylar::http::WSSession	signature:(Socket::ptr sock,bool owner)
sylar::http::WSSession::WSSession	sylar/sylar/http/ws_session.h	/^    WSSession(Socket::ptr sock, bool owner = true);$/;"	p	class:sylar::http::WSSession	access:public	signature:(Socket::ptr sock,bool owner=true)
sylar::http::WSSession::handleClientShake	sylar/sylar/http/ws_session.h	/^    bool handleClientShake();$/;"	p	class:sylar::http::WSSession	typeref:typename:bool	access:private	signature:()
sylar::http::WSSession::handleServerShake	sylar/sylar/http/ws_session.h	/^    bool handleServerShake();$/;"	p	class:sylar::http::WSSession	typeref:typename:bool	access:private	signature:()
sylar::http::WSSession::handleShake	sylar/sylar/http/ws_session.cc	/^HttpRequest::ptr WSSession::handleShake() {$/;"	f	class:sylar::http::WSSession	typeref:typename:HttpRequest::ptr	signature:()
sylar::http::WSSession::handleShake	sylar/sylar/http/ws_session.h	/^    HttpRequest::ptr handleShake();$/;"	p	class:sylar::http::WSSession	typeref:typename:HttpRequest::ptr	access:public	signature:()
sylar::http::WSSession::ping	sylar/sylar/http/ws_session.cc	/^int32_t WSSession::ping() {$/;"	f	class:sylar::http::WSSession	typeref:typename:int32_t	signature:()
sylar::http::WSSession::ping	sylar/sylar/http/ws_session.h	/^    int32_t ping();$/;"	p	class:sylar::http::WSSession	typeref:typename:int32_t	access:public	signature:()
sylar::http::WSSession::pong	sylar/sylar/http/ws_session.cc	/^int32_t WSSession::pong() {$/;"	f	class:sylar::http::WSSession	typeref:typename:int32_t	signature:()
sylar::http::WSSession::pong	sylar/sylar/http/ws_session.h	/^    int32_t pong();$/;"	p	class:sylar::http::WSSession	typeref:typename:int32_t	access:public	signature:()
sylar::http::WSSession::ptr	sylar/sylar/http/ws_session.h	/^    typedef std::shared_ptr<WSSession> ptr;$/;"	t	class:sylar::http::WSSession	typeref:typename:std::shared_ptr<WSSession>	access:public
sylar::http::WSSession::recvMessage	sylar/sylar/http/ws_session.cc	/^WSFrameMessage::ptr WSSession::recvMessage() {$/;"	f	class:sylar::http::WSSession	typeref:typename:WSFrameMessage::ptr	signature:()
sylar::http::WSSession::recvMessage	sylar/sylar/http/ws_session.h	/^    WSFrameMessage::ptr recvMessage();$/;"	p	class:sylar::http::WSSession	typeref:typename:WSFrameMessage::ptr	access:public	signature:()
sylar::http::WSSession::sendMessage	sylar/sylar/http/ws_session.cc	/^int32_t WSSession::sendMessage(WSFrameMessage::ptr msg, bool fin) {$/;"	f	class:sylar::http::WSSession	typeref:typename:int32_t	signature:(WSFrameMessage::ptr msg,bool fin)
sylar::http::WSSession::sendMessage	sylar/sylar/http/ws_session.cc	/^int32_t WSSession::sendMessage(const std::string& msg, int32_t opcode, bool fin) {$/;"	f	class:sylar::http::WSSession	typeref:typename:int32_t	signature:(const std::string & msg,int32_t opcode,bool fin)
sylar::http::WSSession::sendMessage	sylar/sylar/http/ws_session.h	/^    int32_t sendMessage(WSFrameMessage::ptr msg, bool fin = true);$/;"	p	class:sylar::http::WSSession	typeref:typename:int32_t	access:public	signature:(WSFrameMessage::ptr msg,bool fin=true)
sylar::http::WSSession::sendMessage	sylar/sylar/http/ws_session.h	/^    int32_t sendMessage(const std::string& msg, int32_t opcode = WSFrameHead::TEXT_FRAME, bool f/;"	p	class:sylar::http::WSSession	typeref:typename:int32_t	access:public	signature:(const std::string & msg,int32_t opcode=WSFrameHead::TEXT_FRAME,bool fin=true)
sylar::http::__anon90b2dfe80110	sylar/sylar/http/http_parser.cc	/^namespace {$/;"	n	namespace:sylar::http	file:
sylar::http::__anon90b2dfe80110::_RequestSizeIniter	sylar/sylar/http/http_parser.cc	/^struct _RequestSizeIniter {$/;"	s	namespace:sylar::http::__anon90b2dfe80110	file:
sylar::http::__anon90b2dfe80110::_RequestSizeIniter::_RequestSizeIniter	sylar/sylar/http/http_parser.cc	/^    _RequestSizeIniter() {$/;"	f	struct:sylar::http::__anon90b2dfe80110::_RequestSizeIniter	file:	access:public	signature:()
sylar::http::__anon90b2dfe80110::_init	sylar/sylar/http/http_parser.cc	/^static _RequestSizeIniter _init;$/;"	v	namespace:sylar::http::__anon90b2dfe80110	typeref:typename:_RequestSizeIniter	file:
sylar::http::checkGetAs	sylar/sylar/http/http.h	/^bool checkGetAs(const MapType& m, const std::string& key, T& val, const T& def = T()) {$/;"	f	namespace:sylar::http	typeref:typename:bool	signature:(const MapType & m,const std::string & key,T & val,const T & def=T ())
sylar::http::format_used_time	sylar/sylar/http/servlets/status_servlet.cc	/^std::string format_used_time(int64_t ts) {$/;"	f	namespace:sylar::http	typeref:typename:std::string	signature:(int64_t ts)
sylar::http::g_http_request_buffer_size	sylar/sylar/http/http_parser.cc	/^static sylar::ConfigVar<uint64_t>::ptr g_http_request_buffer_size =$/;"	v	namespace:sylar::http	typeref:typename:sylar::ConfigVar<uint64_t>::ptr	file:
sylar::http::g_http_request_max_body_size	sylar/sylar/http/http_parser.cc	/^static sylar::ConfigVar<uint64_t>::ptr g_http_request_max_body_size =$/;"	v	namespace:sylar::http	typeref:typename:sylar::ConfigVar<uint64_t>::ptr	file:
sylar::http::g_http_response_buffer_size	sylar/sylar/http/http_parser.cc	/^static sylar::ConfigVar<uint64_t>::ptr g_http_response_buffer_size =$/;"	v	namespace:sylar::http	typeref:typename:sylar::ConfigVar<uint64_t>::ptr	file:
sylar::http::g_http_response_max_body_size	sylar/sylar/http/http_parser.cc	/^static sylar::ConfigVar<uint64_t>::ptr g_http_response_max_body_size =$/;"	v	namespace:sylar::http	typeref:typename:sylar::ConfigVar<uint64_t>::ptr	file:
sylar::http::g_logger	sylar/sylar/http/http_connection.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::http	typeref:typename:sylar::Logger::ptr	file:
sylar::http::g_logger	sylar/sylar/http/http_parser.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::http	typeref:typename:sylar::Logger::ptr	file:
sylar::http::g_logger	sylar/sylar/http/http_server.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::http	typeref:typename:sylar::Logger::ptr	file:
sylar::http::g_logger	sylar/sylar/http/ws_server.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::http	typeref:typename:sylar::Logger::ptr	file:
sylar::http::g_logger	sylar/sylar/http/ws_session.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::http	typeref:typename:sylar::Logger::ptr	file:
sylar::http::g_websocket_message_max_size	sylar/sylar/http/ws_session.cc	/^sylar::ConfigVar<uint32_t>::ptr g_websocket_message_max_size$/;"	v	namespace:sylar::http	typeref:typename:sylar::ConfigVar<uint32_t>::ptr
sylar::http::getAs	sylar/sylar/http/http.h	/^T getAs(const MapType& m, const std::string& key, const T& def = T()) {$/;"	f	namespace:sylar::http	typeref:typename:T	signature:(const MapType & m,const std::string & key,const T & def=T ())
sylar::http::on_request_fragment	sylar/sylar/http/http_parser.cc	/^void on_request_fragment(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
sylar::http::on_request_header_done	sylar/sylar/http/http_parser.cc	/^void on_request_header_done(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
sylar::http::on_request_http_field	sylar/sylar/http/http_parser.cc	/^void on_request_http_field(void *data, const char *field, size_t flen$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * field,size_t flen,const char * value,size_t vlen)
sylar::http::on_request_method	sylar/sylar/http/http_parser.cc	/^void on_request_method(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
sylar::http::on_request_path	sylar/sylar/http/http_parser.cc	/^void on_request_path(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
sylar::http::on_request_query	sylar/sylar/http/http_parser.cc	/^void on_request_query(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
sylar::http::on_request_uri	sylar/sylar/http/http_parser.cc	/^void on_request_uri(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
sylar::http::on_request_version	sylar/sylar/http/http_parser.cc	/^void on_request_version(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
sylar::http::on_response_chunk	sylar/sylar/http/http_parser.cc	/^void on_response_chunk(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
sylar::http::on_response_header_done	sylar/sylar/http/http_parser.cc	/^void on_response_header_done(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
sylar::http::on_response_http_field	sylar/sylar/http/http_parser.cc	/^void on_response_http_field(void *data, const char *field, size_t flen$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * field,size_t flen,const char * value,size_t vlen)
sylar::http::on_response_last_chunk	sylar/sylar/http/http_parser.cc	/^void on_response_last_chunk(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
sylar::http::on_response_reason	sylar/sylar/http/http_parser.cc	/^void on_response_reason(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
sylar::http::on_response_status	sylar/sylar/http/http_parser.cc	/^void on_response_status(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
sylar::http::on_response_version	sylar/sylar/http/http_parser.cc	/^void on_response_version(void *data, const char *at, size_t length) {$/;"	f	namespace:sylar::http	typeref:typename:void	signature:(void * data,const char * at,size_t length)
sylar::http::operator <<	sylar/sylar/http/http.cc	/^std::ostream& operator<<(std::ostream& os, const HttpRequest& req) {$/;"	f	namespace:sylar::http	typeref:typename:std::ostream &	signature:(std::ostream & os,const HttpRequest & req)
sylar::http::operator <<	sylar/sylar/http/http.cc	/^std::ostream& operator<<(std::ostream& os, const HttpResponse& rsp) {$/;"	f	namespace:sylar::http	typeref:typename:std::ostream &	signature:(std::ostream & os,const HttpResponse & rsp)
sylar::http::operator <<	sylar/sylar/http/http.h	/^std::ostream& operator<<(std::ostream& os, const HttpRequest& req);$/;"	p	namespace:sylar::http	typeref:typename:std::ostream &	signature:(std::ostream & os,const HttpRequest & req)
sylar::http::operator <<	sylar/sylar/http/http.h	/^std::ostream& operator<<(std::ostream& os, const HttpResponse& rsp);$/;"	p	namespace:sylar::http	typeref:typename:std::ostream &	signature:(std::ostream & os,const HttpResponse & rsp)
sylar::http::s_http_request_buffer_size	sylar/sylar/http/http_parser.cc	/^static uint64_t s_http_request_buffer_size = 0;$/;"	v	namespace:sylar::http	typeref:typename:uint64_t	file:
sylar::http::s_http_request_max_body_size	sylar/sylar/http/http_parser.cc	/^static uint64_t s_http_request_max_body_size = 0;$/;"	v	namespace:sylar::http	typeref:typename:uint64_t	file:
sylar::http::s_http_response_buffer_size	sylar/sylar/http/http_parser.cc	/^static uint64_t s_http_response_buffer_size = 0;$/;"	v	namespace:sylar::http	typeref:typename:uint64_t	file:
sylar::http::s_http_response_max_body_size	sylar/sylar/http/http_parser.cc	/^static uint64_t s_http_response_max_body_size = 0;$/;"	v	namespace:sylar::http	typeref:typename:uint64_t	file:
sylar::http::s_method_string	sylar/sylar/http/http.cc	/^static const char* s_method_string[] = {$/;"	v	namespace:sylar::http	typeref:typename:const char * []	file:
sylar::is_hook_enable	sylar/sylar/hook.cc	/^bool is_hook_enable() {$/;"	f	namespace:sylar	typeref:typename:bool	signature:()
sylar::is_hook_enable	sylar/sylar/hook.h	/^    bool is_hook_enable();$/;"	p	namespace:sylar	typeref:typename:bool	signature:()
sylar::md5	sylar/sylar/util/hash_util.cc	/^std::string md5(const std::string &data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::md5	sylar/sylar/util/hash_util.h	/^std::string md5(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::md5sum	sylar/sylar/util/hash_util.cc	/^std::string md5sum(const std::string &data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::md5sum	sylar/sylar/util/hash_util.cc	/^std::string md5sum(const void *data, size_t len) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
sylar::md5sum	sylar/sylar/util/hash_util.h	/^std::string md5sum(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::md5sum	sylar/sylar/util/hash_util.h	/^std::string md5sum(const void *data, size_t len);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
sylar::murmur3_hash	sylar/sylar/util/hash_util.cc	/^uint32_t murmur3_hash(const char * str, const uint32_t & seed) {$/;"	f	namespace:sylar	typeref:typename:uint32_t	signature:(const char * str,const uint32_t & seed)
sylar::murmur3_hash	sylar/sylar/util/hash_util.cc	/^uint32_t murmur3_hash(const void* data, const uint32_t& size, const uint32_t & seed) {$/;"	f	namespace:sylar	typeref:typename:uint32_t	signature:(const void * data,const uint32_t & size,const uint32_t & seed)
sylar::murmur3_hash	sylar/sylar/util/hash_util.h	/^uint32_t murmur3_hash(const char * str, const uint32_t & seed = 1060627423);$/;"	p	namespace:sylar	typeref:typename:uint32_t	signature:(const char * str,const uint32_t & seed=1060627423)
sylar::murmur3_hash	sylar/sylar/util/hash_util.h	/^uint32_t murmur3_hash(const void* str, const uint32_t& size, const uint32_t & seed = 1060627423)/;"	p	namespace:sylar	typeref:typename:uint32_t	signature:(const void * str,const uint32_t & size,const uint32_t & seed=1060627423)
sylar::murmur3_hash64	sylar/sylar/util/hash_util.cc	/^uint64_t murmur3_hash64(const char * str, const uint32_t & seed, const uint32_t& seed2) {$/;"	f	namespace:sylar	typeref:typename:uint64_t	signature:(const char * str,const uint32_t & seed,const uint32_t & seed2)
sylar::murmur3_hash64	sylar/sylar/util/hash_util.cc	/^uint64_t murmur3_hash64(const void* str, const uint32_t& size,  const uint32_t & seed, const uin/;"	f	namespace:sylar	typeref:typename:uint64_t	signature:(const void * str,const uint32_t & size,const uint32_t & seed,const uint32_t & seed2)
sylar::murmur3_hash64	sylar/sylar/util/hash_util.h	/^uint64_t murmur3_hash64(const char * str, const uint32_t & seed = 1060627423, const uint32_t& se/;"	p	namespace:sylar	typeref:typename:uint64_t	signature:(const char * str,const uint32_t & seed=1060627423,const uint32_t & seed2=1050126127)
sylar::murmur3_hash64	sylar/sylar/util/hash_util.h	/^uint64_t murmur3_hash64(const void* str, const uint32_t& size,  const uint32_t & seed = 10606274/;"	p	namespace:sylar	typeref:typename:uint64_t	signature:(const void * str,const uint32_t & size,const uint32_t & seed=1060627423,const uint32_t & seed2=1050126127)
sylar::my_mysql_query	sylar/sylar/db/mysql.cc	/^static MYSQL_RES* my_mysql_query(MYSQL* mysql, const char* sql) {$/;"	f	namespace:sylar	typeref:typename:MYSQL_RES *	file:	signature:(MYSQL * mysql,const char * sql)
sylar::mysql_init	sylar/sylar/db/mysql.cc	/^static MYSQL* mysql_init(std::map<std::string, std::string>& params,$/;"	f	namespace:sylar	typeref:typename:MYSQL *	file:	signature:(std::map<std::string,std::string> & params,const int & timeout)
sylar::mysql_time_to_time_t	sylar/sylar/db/mysql.cc	/^bool mysql_time_to_time_t(const MYSQL_TIME& mt, time_t& ts) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(const MYSQL_TIME & mt,time_t & ts)
sylar::mysql_time_to_time_t	sylar/sylar/db/mysql.h	/^bool mysql_time_to_time_t(const MYSQL_TIME& mt, time_t& ts);$/;"	p	namespace:sylar	typeref:typename:bool	signature:(const MYSQL_TIME & mt,time_t & ts)
sylar::nop	sylar/sylar/util.h	/^void nop(T*) {}$/;"	f	namespace:sylar	typeref:typename:void	signature:(T *)
sylar::ns	sylar/sylar/ns/name_server_module.cc	/^namespace ns {$/;"	n	namespace:sylar	file:
sylar::ns	sylar/sylar/ns/name_server_module.h	/^namespace ns {$/;"	n	namespace:sylar
sylar::ns	sylar/sylar/ns/ns_client.cc	/^namespace ns {$/;"	n	namespace:sylar	file:
sylar::ns	sylar/sylar/ns/ns_client.h	/^namespace ns {$/;"	n	namespace:sylar
sylar::ns	sylar/sylar/ns/ns_protobuf.pb.cc	/^namespace ns {$/;"	n	namespace:sylar	file:
sylar::ns	sylar/sylar/ns/ns_protobuf.pb.h	/^namespace ns {$/;"	n	namespace:sylar
sylar::ns	sylar/sylar/ns/ns_protocol.cc	/^namespace ns {$/;"	n	namespace:sylar	file:
sylar::ns	sylar/sylar/ns/ns_protocol.h	/^namespace ns {$/;"	n	namespace:sylar
sylar::ns::NODE_CHANGE	sylar/sylar/ns/ns_protocol.h	/^    NODE_CHANGE = 0x10001,$/;"	e	enum:sylar::ns::NSNotify	access:public
sylar::ns::NSClient	sylar/sylar/ns/ns_client.h	/^class NSClient : public RockConnection {$/;"	c	namespace:sylar::ns	inherits:RockConnection
sylar::ns::NSClient::NSClient	sylar/sylar/ns/ns_client.cc	/^NSClient::NSClient() {$/;"	f	class:sylar::ns::NSClient	signature:()
sylar::ns::NSClient::NSClient	sylar/sylar/ns/ns_client.h	/^    NSClient();$/;"	p	class:sylar::ns::NSClient	access:public	signature:()
sylar::ns::NSClient::addQueryDomain	sylar/sylar/ns/ns_client.cc	/^void NSClient::addQueryDomain(const std::string& domain) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:(const std::string & domain)
sylar::ns::NSClient::addQueryDomain	sylar/sylar/ns/ns_client.h	/^    void addQueryDomain(const std::string& domain);$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:public	signature:(const std::string & domain)
sylar::ns::NSClient::delQueryDomain	sylar/sylar/ns/ns_client.cc	/^void NSClient::delQueryDomain(const std::string& domain) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:(const std::string & domain)
sylar::ns::NSClient::delQueryDomain	sylar/sylar/ns/ns_client.h	/^    void delQueryDomain(const std::string& domain);$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:public	signature:(const std::string & domain)
sylar::ns::NSClient::getDomains	sylar/sylar/ns/ns_client.h	/^    NSDomainSet::ptr getDomains() const { return m_domains;}$/;"	f	class:sylar::ns::NSClient	typeref:typename:NSDomainSet::ptr	access:public	signature:() const
sylar::ns::NSClient::getQueryDomains	sylar/sylar/ns/ns_client.cc	/^const std::set<std::string>& NSClient::getQueryDomains() {$/;"	f	class:sylar::ns::NSClient	typeref:typename:const std::set<std::string> &	signature:()
sylar::ns::NSClient::getQueryDomains	sylar/sylar/ns/ns_client.h	/^    const std::set<std::string>& getQueryDomains();$/;"	p	class:sylar::ns::NSClient	typeref:typename:const std::set<std::string> &	access:public	signature:()
sylar::ns::NSClient::hasQueryDomain	sylar/sylar/ns/ns_client.cc	/^bool NSClient::hasQueryDomain(const std::string& domain) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:bool	signature:(const std::string & domain)
sylar::ns::NSClient::hasQueryDomain	sylar/sylar/ns/ns_client.h	/^    bool hasQueryDomain(const std::string& domain);$/;"	p	class:sylar::ns::NSClient	typeref:typename:bool	access:public	signature:(const std::string & domain)
sylar::ns::NSClient::init	sylar/sylar/ns/ns_client.cc	/^void NSClient::init() {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:()
sylar::ns::NSClient::init	sylar/sylar/ns/ns_client.h	/^    void init();$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:public	signature:()
sylar::ns::NSClient::m_domains	sylar/sylar/ns/ns_client.h	/^    NSDomainSet::ptr m_domains;$/;"	m	class:sylar::ns::NSClient	typeref:typename:NSDomainSet::ptr	access:private
sylar::ns::NSClient::m_mutex	sylar/sylar/ns/ns_client.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ns::NSClient	typeref:typename:sylar::RWMutex	access:private
sylar::ns::NSClient::m_queryDomains	sylar/sylar/ns/ns_client.h	/^    std::set<std::string> m_queryDomains;$/;"	m	class:sylar::ns::NSClient	typeref:typename:std::set<std::string>	access:private
sylar::ns::NSClient::m_sn	sylar/sylar/ns/ns_client.h	/^    uint32_t m_sn = 0;$/;"	m	class:sylar::ns::NSClient	typeref:typename:uint32_t	access:private
sylar::ns::NSClient::m_timer	sylar/sylar/ns/ns_client.h	/^    sylar::Timer::ptr m_timer;$/;"	m	class:sylar::ns::NSClient	typeref:typename:sylar::Timer::ptr	access:private
sylar::ns::NSClient::onConnect	sylar/sylar/ns/ns_client.cc	/^bool NSClient::onConnect(sylar::AsyncSocketStream::ptr stream) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:bool	signature:(sylar::AsyncSocketStream::ptr stream)
sylar::ns::NSClient::onConnect	sylar/sylar/ns/ns_client.h	/^    bool onConnect(sylar::AsyncSocketStream::ptr stream);$/;"	p	class:sylar::ns::NSClient	typeref:typename:bool	access:private	signature:(sylar::AsyncSocketStream::ptr stream)
sylar::ns::NSClient::onDisconnect	sylar/sylar/ns/ns_client.cc	/^void NSClient::onDisconnect(sylar::AsyncSocketStream::ptr stream) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:(sylar::AsyncSocketStream::ptr stream)
sylar::ns::NSClient::onDisconnect	sylar/sylar/ns/ns_client.h	/^    void onDisconnect(sylar::AsyncSocketStream::ptr stream);$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:private	signature:(sylar::AsyncSocketStream::ptr stream)
sylar::ns::NSClient::onNotify	sylar/sylar/ns/ns_client.cc	/^bool NSClient::onNotify(sylar::RockNotify::ptr nty,sylar::RockStream::ptr stream) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:bool	signature:(sylar::RockNotify::ptr nty,sylar::RockStream::ptr stream)
sylar::ns::NSClient::onNotify	sylar/sylar/ns/ns_client.h	/^    bool onNotify(sylar::RockNotify::ptr ,sylar::RockStream::ptr);$/;"	p	class:sylar::ns::NSClient	typeref:typename:bool	access:private	signature:(sylar::RockNotify::ptr,sylar::RockStream::ptr)
sylar::ns::NSClient::onQueryDomainChange	sylar/sylar/ns/ns_client.cc	/^void NSClient::onQueryDomainChange() {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:()
sylar::ns::NSClient::onQueryDomainChange	sylar/sylar/ns/ns_client.h	/^    void onQueryDomainChange();$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:private	signature:()
sylar::ns::NSClient::onTimer	sylar/sylar/ns/ns_client.cc	/^void NSClient::onTimer() {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:()
sylar::ns::NSClient::onTimer	sylar/sylar/ns/ns_client.h	/^    void onTimer();$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:private	signature:()
sylar::ns::NSClient::ptr	sylar/sylar/ns/ns_client.h	/^    typedef std::shared_ptr<NSClient> ptr;$/;"	t	class:sylar::ns::NSClient	typeref:typename:std::shared_ptr<NSClient>	access:public
sylar::ns::NSClient::query	sylar/sylar/ns/ns_client.cc	/^RockResult::ptr NSClient::query() {$/;"	f	class:sylar::ns::NSClient	typeref:typename:RockResult::ptr	signature:()
sylar::ns::NSClient::query	sylar/sylar/ns/ns_client.h	/^    RockResult::ptr query();$/;"	p	class:sylar::ns::NSClient	typeref:typename:RockResult::ptr	access:public	signature:()
sylar::ns::NSClient::setQueryDomains	sylar/sylar/ns/ns_client.cc	/^void NSClient::setQueryDomains(const std::set<std::string>& v) {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:(const std::set<std::string> & v)
sylar::ns::NSClient::setQueryDomains	sylar/sylar/ns/ns_client.h	/^    void setQueryDomains(const std::set<std::string>& v);$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:public	signature:(const std::set<std::string> & v)
sylar::ns::NSClient::uninit	sylar/sylar/ns/ns_client.cc	/^void NSClient::uninit() {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:()
sylar::ns::NSClient::uninit	sylar/sylar/ns/ns_client.h	/^    void uninit();$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:public	signature:()
sylar::ns::NSClient::~NSClient	sylar/sylar/ns/ns_client.cc	/^NSClient::~NSClient() {$/;"	f	class:sylar::ns::NSClient	signature:()
sylar::ns::NSClient::~NSClient	sylar/sylar/ns/ns_client.h	/^    ~NSClient();$/;"	p	class:sylar::ns::NSClient	access:public	signature:()
sylar::ns::NSClientInfo	sylar/sylar/ns/name_server_module.h	/^class NSClientInfo {$/;"	c	namespace:sylar::ns
sylar::ns::NSClientInfo::m_domain2cmds	sylar/sylar/ns/name_server_module.h	/^    std::map<std::string, std::set<uint32_t> > m_domain2cmds;$/;"	m	class:sylar::ns::NSClientInfo	typeref:typename:std::map<std::string,std::set<uint32_t>>	access:private
sylar::ns::NSClientInfo::m_node	sylar/sylar/ns/name_server_module.h	/^    NSNode::ptr m_node;$/;"	m	class:sylar::ns::NSClientInfo	typeref:typename:NSNode::ptr	access:private
sylar::ns::NSClientInfo::ptr	sylar/sylar/ns/name_server_module.h	/^    typedef std::shared_ptr<NSClientInfo> ptr;$/;"	t	class:sylar::ns::NSClientInfo	typeref:typename:std::shared_ptr<NSClientInfo>	access:public
sylar::ns::NSCommand	sylar/sylar/ns/ns_protocol.h	/^enum class NSCommand {$/;"	g	namespace:sylar::ns
sylar::ns::NSDomain	sylar/sylar/ns/ns_protocol.h	/^class NSDomain {$/;"	c	namespace:sylar::ns
sylar::ns::NSDomain::NSDomain	sylar/sylar/ns/ns_protocol.h	/^    NSDomain(const std::string& domain)$/;"	f	class:sylar::ns::NSDomain	access:public	signature:(const std::string & domain)
sylar::ns::NSDomain::add	sylar/sylar/ns/ns_protocol.cc	/^void NSDomain::add(NSNodeSet::ptr info) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:void	signature:(NSNodeSet::ptr info)
sylar::ns::NSDomain::add	sylar/sylar/ns/ns_protocol.cc	/^void NSDomain::add(uint32_t cmd, NSNode::ptr info) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:void	signature:(uint32_t cmd,NSNode::ptr info)
sylar::ns::NSDomain::add	sylar/sylar/ns/ns_protocol.h	/^    void add(NSNodeSet::ptr info);$/;"	p	class:sylar::ns::NSDomain	typeref:typename:void	access:public	signature:(NSNodeSet::ptr info)
sylar::ns::NSDomain::add	sylar/sylar/ns/ns_protocol.h	/^    void add(uint32_t cmd, NSNode::ptr info);$/;"	p	class:sylar::ns::NSDomain	typeref:typename:void	access:public	signature:(uint32_t cmd,NSNode::ptr info)
sylar::ns::NSDomain::del	sylar/sylar/ns/ns_protocol.cc	/^NSNode::ptr NSDomain::del(uint32_t cmd, uint64_t id) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:NSNode::ptr	signature:(uint32_t cmd,uint64_t id)
sylar::ns::NSDomain::del	sylar/sylar/ns/ns_protocol.cc	/^void NSDomain::del(uint32_t cmd) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:void	signature:(uint32_t cmd)
sylar::ns::NSDomain::del	sylar/sylar/ns/ns_protocol.h	/^    NSNode::ptr del(uint32_t cmd, uint64_t id);$/;"	p	class:sylar::ns::NSDomain	typeref:typename:NSNode::ptr	access:public	signature:(uint32_t cmd,uint64_t id)
sylar::ns::NSDomain::del	sylar/sylar/ns/ns_protocol.h	/^    void del(uint32_t cmd);$/;"	p	class:sylar::ns::NSDomain	typeref:typename:void	access:public	signature:(uint32_t cmd)
sylar::ns::NSDomain::dump	sylar/sylar/ns/ns_protocol.cc	/^std::ostream& NSDomain::dump(std::ostream& os, const std::string& prefix) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:std::ostream &	signature:(std::ostream & os,const std::string & prefix)
sylar::ns::NSDomain::dump	sylar/sylar/ns/ns_protocol.h	/^    std::ostream& dump(std::ostream& os, const std::string& prefix = "");$/;"	p	class:sylar::ns::NSDomain	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os,const std::string & prefix="")
sylar::ns::NSDomain::get	sylar/sylar/ns/ns_protocol.cc	/^NSNodeSet::ptr NSDomain::get(uint32_t cmd) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:NSNodeSet::ptr	signature:(uint32_t cmd)
sylar::ns::NSDomain::get	sylar/sylar/ns/ns_protocol.h	/^    NSNodeSet::ptr get(uint32_t cmd);$/;"	p	class:sylar::ns::NSDomain	typeref:typename:NSNodeSet::ptr	access:public	signature:(uint32_t cmd)
sylar::ns::NSDomain::getDomain	sylar/sylar/ns/ns_protocol.h	/^    const std::string& getDomain() const { return m_domain;}$/;"	f	class:sylar::ns::NSDomain	typeref:typename:const std::string &	access:public	signature:() const
sylar::ns::NSDomain::listAll	sylar/sylar/ns/ns_protocol.cc	/^void NSDomain::listAll(std::vector<NSNodeSet::ptr>& infos) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:void	signature:(std::vector<NSNodeSet::ptr> & infos)
sylar::ns::NSDomain::listAll	sylar/sylar/ns/ns_protocol.h	/^    void listAll(std::vector<NSNodeSet::ptr>& infos);$/;"	p	class:sylar::ns::NSDomain	typeref:typename:void	access:public	signature:(std::vector<NSNodeSet::ptr> & infos)
sylar::ns::NSDomain::m_datas	sylar/sylar/ns/ns_protocol.h	/^    std::map<uint32_t, NSNodeSet::ptr> m_datas;$/;"	m	class:sylar::ns::NSDomain	typeref:typename:std::map<uint32_t,NSNodeSet::ptr>	access:private
sylar::ns::NSDomain::m_domain	sylar/sylar/ns/ns_protocol.h	/^    std::string m_domain;$/;"	m	class:sylar::ns::NSDomain	typeref:typename:std::string	access:private
sylar::ns::NSDomain::m_mutex	sylar/sylar/ns/ns_protocol.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ns::NSDomain	typeref:typename:sylar::RWMutex	access:private
sylar::ns::NSDomain::ptr	sylar/sylar/ns/ns_protocol.h	/^    typedef std::shared_ptr<NSDomain> ptr;$/;"	t	class:sylar::ns::NSDomain	typeref:typename:std::shared_ptr<NSDomain>	access:public
sylar::ns::NSDomain::setDomain	sylar/sylar/ns/ns_protocol.h	/^    void setDomain(const std::string& v) { m_domain = v;}$/;"	f	class:sylar::ns::NSDomain	typeref:typename:void	access:public	signature:(const std::string & v)
sylar::ns::NSDomain::size	sylar/sylar/ns/ns_protocol.cc	/^size_t NSDomain::size() {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:size_t	signature:()
sylar::ns::NSDomain::size	sylar/sylar/ns/ns_protocol.h	/^    size_t size();$/;"	p	class:sylar::ns::NSDomain	typeref:typename:size_t	access:public	signature:()
sylar::ns::NSDomain::toString	sylar/sylar/ns/ns_protocol.cc	/^std::string NSDomain::toString(const std::string& prefix) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:std::string	signature:(const std::string & prefix)
sylar::ns::NSDomain::toString	sylar/sylar/ns/ns_protocol.h	/^    std::string toString(const std::string& prefix = "");$/;"	p	class:sylar::ns::NSDomain	typeref:typename:std::string	access:public	signature:(const std::string & prefix="")
sylar::ns::NSDomainSet	sylar/sylar/ns/ns_protocol.h	/^class NSDomainSet {$/;"	c	namespace:sylar::ns
sylar::ns::NSDomainSet::add	sylar/sylar/ns/ns_protocol.cc	/^void NSDomainSet::add(NSDomain::ptr info) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:void	signature:(NSDomain::ptr info)
sylar::ns::NSDomainSet::add	sylar/sylar/ns/ns_protocol.h	/^    void add(NSDomain::ptr info);$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:void	access:public	signature:(NSDomain::ptr info)
sylar::ns::NSDomainSet::del	sylar/sylar/ns/ns_protocol.cc	/^void NSDomainSet::del(const std::string& domain) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:void	signature:(const std::string & domain)
sylar::ns::NSDomainSet::del	sylar/sylar/ns/ns_protocol.cc	/^void NSDomainSet::del(const std::string& domain, uint32_t cmd, uint64_t id) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:void	signature:(const std::string & domain,uint32_t cmd,uint64_t id)
sylar::ns::NSDomainSet::del	sylar/sylar/ns/ns_protocol.h	/^    void del(const std::string& domain);$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:void	access:public	signature:(const std::string & domain)
sylar::ns::NSDomainSet::del	sylar/sylar/ns/ns_protocol.h	/^    void del(const std::string& domain, uint32_t cmd, uint64_t id);$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:void	access:public	signature:(const std::string & domain,uint32_t cmd,uint64_t id)
sylar::ns::NSDomainSet::dump	sylar/sylar/ns/ns_protocol.cc	/^std::ostream& NSDomainSet::dump(std::ostream& os, const std::string& prefix) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:std::ostream &	signature:(std::ostream & os,const std::string & prefix)
sylar::ns::NSDomainSet::dump	sylar/sylar/ns/ns_protocol.h	/^    std::ostream& dump(std::ostream& os, const std::string& prefix = "");$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os,const std::string & prefix="")
sylar::ns::NSDomainSet::get	sylar/sylar/ns/ns_protocol.cc	/^NSDomain::ptr NSDomainSet::get(const std::string& domain, bool auto_create) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:NSDomain::ptr	signature:(const std::string & domain,bool auto_create)
sylar::ns::NSDomainSet::get	sylar/sylar/ns/ns_protocol.h	/^    NSDomain::ptr get(const std::string& domain, bool auto_create = false);$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:NSDomain::ptr	access:public	signature:(const std::string & domain,bool auto_create=false)
sylar::ns::NSDomainSet::listAll	sylar/sylar/ns/ns_protocol.cc	/^void NSDomainSet::listAll(std::vector<NSDomain::ptr>& infos) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:void	signature:(std::vector<NSDomain::ptr> & infos)
sylar::ns::NSDomainSet::listAll	sylar/sylar/ns/ns_protocol.h	/^    void listAll(std::vector<NSDomain::ptr>& infos);$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:void	access:public	signature:(std::vector<NSDomain::ptr> & infos)
sylar::ns::NSDomainSet::m_datas	sylar/sylar/ns/ns_protocol.h	/^    std::map<std::string, NSDomain::ptr> m_datas;$/;"	m	class:sylar::ns::NSDomainSet	typeref:typename:std::map<std::string,NSDomain::ptr>	access:private
sylar::ns::NSDomainSet::m_mutex	sylar/sylar/ns/ns_protocol.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ns::NSDomainSet	typeref:typename:sylar::RWMutex	access:private
sylar::ns::NSDomainSet::ptr	sylar/sylar/ns/ns_protocol.h	/^    typedef std::shared_ptr<NSDomainSet> ptr;$/;"	t	class:sylar::ns::NSDomainSet	typeref:typename:std::shared_ptr<NSDomainSet>	access:public
sylar::ns::NSDomainSet::swap	sylar/sylar/ns/ns_protocol.cc	/^void NSDomainSet::swap(NSDomainSet& ds) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:void	signature:(NSDomainSet & ds)
sylar::ns::NSDomainSet::swap	sylar/sylar/ns/ns_protocol.h	/^    void swap(NSDomainSet& ds);$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:void	access:public	signature:(NSDomainSet & ds)
sylar::ns::NSDomainSet::toString	sylar/sylar/ns/ns_protocol.cc	/^std::string NSDomainSet::toString(const std::string& prefix) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:std::string	signature:(const std::string & prefix)
sylar::ns::NSDomainSet::toString	sylar/sylar/ns/ns_protocol.h	/^    std::string toString(const std::string& prefix = "");$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:std::string	access:public	signature:(const std::string & prefix="")
sylar::ns::NSNode	sylar/sylar/ns/ns_protocol.h	/^class NSNode {$/;"	c	namespace:sylar::ns
sylar::ns::NSNode::GetID	sylar/sylar/ns/ns_protocol.cc	/^uint64_t NSNode::GetID(const std::string& ip, uint16_t port) {$/;"	f	class:sylar::ns::NSNode	typeref:typename:uint64_t	signature:(const std::string & ip,uint16_t port)
sylar::ns::NSNode::GetID	sylar/sylar/ns/ns_protocol.h	/^    static uint64_t GetID(const std::string& ip, uint16_t port);$/;"	p	class:sylar::ns::NSNode	typeref:typename:uint64_t	access:public	signature:(const std::string & ip,uint16_t port)
sylar::ns::NSNode::NSNode	sylar/sylar/ns/ns_protocol.cc	/^NSNode::NSNode(const std::string& ip, uint16_t port, uint32_t weight)$/;"	f	class:sylar::ns::NSNode	signature:(const std::string & ip,uint16_t port,uint32_t weight)
sylar::ns::NSNode::NSNode	sylar/sylar/ns/ns_protocol.h	/^    NSNode(const std::string& ip, uint16_t port, uint32_t weight);$/;"	p	class:sylar::ns::NSNode	access:public	signature:(const std::string & ip,uint16_t port,uint32_t weight)
sylar::ns::NSNode::dump	sylar/sylar/ns/ns_protocol.cc	/^std::ostream& NSNode::dump(std::ostream& os, const std::string& prefix) {$/;"	f	class:sylar::ns::NSNode	typeref:typename:std::ostream &	signature:(std::ostream & os,const std::string & prefix)
sylar::ns::NSNode::dump	sylar/sylar/ns/ns_protocol.h	/^    std::ostream& dump(std::ostream& os, const std::string& prefix = "");$/;"	p	class:sylar::ns::NSNode	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os,const std::string & prefix="")
sylar::ns::NSNode::getId	sylar/sylar/ns/ns_protocol.h	/^    uint64_t getId() const { return m_id;}$/;"	f	class:sylar::ns::NSNode	typeref:typename:uint64_t	access:public	signature:() const
sylar::ns::NSNode::getIp	sylar/sylar/ns/ns_protocol.h	/^    const std::string& getIp() const { return m_ip;}$/;"	f	class:sylar::ns::NSNode	typeref:typename:const std::string &	access:public	signature:() const
sylar::ns::NSNode::getPort	sylar/sylar/ns/ns_protocol.h	/^    uint16_t getPort() const { return m_port;}$/;"	f	class:sylar::ns::NSNode	typeref:typename:uint16_t	access:public	signature:() const
sylar::ns::NSNode::getWeight	sylar/sylar/ns/ns_protocol.h	/^    uint32_t getWeight() const { return m_weight;}$/;"	f	class:sylar::ns::NSNode	typeref:typename:uint32_t	access:public	signature:() const
sylar::ns::NSNode::m_id	sylar/sylar/ns/ns_protocol.h	/^    uint64_t m_id;$/;"	m	class:sylar::ns::NSNode	typeref:typename:uint64_t	access:private
sylar::ns::NSNode::m_ip	sylar/sylar/ns/ns_protocol.h	/^    std::string m_ip;$/;"	m	class:sylar::ns::NSNode	typeref:typename:std::string	access:private
sylar::ns::NSNode::m_port	sylar/sylar/ns/ns_protocol.h	/^    uint16_t m_port;$/;"	m	class:sylar::ns::NSNode	typeref:typename:uint16_t	access:private
sylar::ns::NSNode::m_weight	sylar/sylar/ns/ns_protocol.h	/^    uint32_t m_weight;$/;"	m	class:sylar::ns::NSNode	typeref:typename:uint32_t	access:private
sylar::ns::NSNode::ptr	sylar/sylar/ns/ns_protocol.h	/^    typedef std::shared_ptr<NSNode> ptr;$/;"	t	class:sylar::ns::NSNode	typeref:typename:std::shared_ptr<NSNode>	access:public
sylar::ns::NSNode::setWeight	sylar/sylar/ns/ns_protocol.h	/^    void setWeight(uint32_t v) { m_weight = v;}$/;"	f	class:sylar::ns::NSNode	typeref:typename:void	access:public	signature:(uint32_t v)
sylar::ns::NSNode::toString	sylar/sylar/ns/ns_protocol.cc	/^std::string NSNode::toString(const std::string& prefix) {$/;"	f	class:sylar::ns::NSNode	typeref:typename:std::string	signature:(const std::string & prefix)
sylar::ns::NSNode::toString	sylar/sylar/ns/ns_protocol.h	/^    std::string toString(const std::string& prefix = "");$/;"	p	class:sylar::ns::NSNode	typeref:typename:std::string	access:public	signature:(const std::string & prefix="")
sylar::ns::NSNodeSet	sylar/sylar/ns/ns_protocol.h	/^class NSNodeSet {$/;"	c	namespace:sylar::ns
sylar::ns::NSNodeSet::NSNodeSet	sylar/sylar/ns/ns_protocol.cc	/^NSNodeSet::NSNodeSet(uint32_t cmd)$/;"	f	class:sylar::ns::NSNodeSet	signature:(uint32_t cmd)
sylar::ns::NSNodeSet::NSNodeSet	sylar/sylar/ns/ns_protocol.h	/^    NSNodeSet(uint32_t cmd);$/;"	p	class:sylar::ns::NSNodeSet	access:public	signature:(uint32_t cmd)
sylar::ns::NSNodeSet::add	sylar/sylar/ns/ns_protocol.cc	/^void NSNodeSet::add(NSNode::ptr info) {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:void	signature:(NSNode::ptr info)
sylar::ns::NSNodeSet::add	sylar/sylar/ns/ns_protocol.h	/^    void add(NSNode::ptr info);$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:void	access:public	signature:(NSNode::ptr info)
sylar::ns::NSNodeSet::del	sylar/sylar/ns/ns_protocol.cc	/^NSNode::ptr NSNodeSet::del(uint64_t id) {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:NSNode::ptr	signature:(uint64_t id)
sylar::ns::NSNodeSet::del	sylar/sylar/ns/ns_protocol.h	/^    NSNode::ptr del(uint64_t id);$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:NSNode::ptr	access:public	signature:(uint64_t id)
sylar::ns::NSNodeSet::dump	sylar/sylar/ns/ns_protocol.cc	/^std::ostream& NSNodeSet::dump(std::ostream& os, const std::string& prefix) {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:std::ostream &	signature:(std::ostream & os,const std::string & prefix)
sylar::ns::NSNodeSet::dump	sylar/sylar/ns/ns_protocol.h	/^    std::ostream& dump(std::ostream& os, const std::string& prefix = "");$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:std::ostream &	access:public	signature:(std::ostream & os,const std::string & prefix="")
sylar::ns::NSNodeSet::get	sylar/sylar/ns/ns_protocol.cc	/^NSNode::ptr NSNodeSet::get(uint64_t id) {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:NSNode::ptr	signature:(uint64_t id)
sylar::ns::NSNodeSet::get	sylar/sylar/ns/ns_protocol.h	/^    NSNode::ptr get(uint64_t id);$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:NSNode::ptr	access:public	signature:(uint64_t id)
sylar::ns::NSNodeSet::getCmd	sylar/sylar/ns/ns_protocol.h	/^    uint32_t getCmd() const { return m_cmd;}$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:uint32_t	access:public	signature:() const
sylar::ns::NSNodeSet::listAll	sylar/sylar/ns/ns_protocol.cc	/^void NSNodeSet::listAll(std::vector<NSNode::ptr>& infos) {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:void	signature:(std::vector<NSNode::ptr> & infos)
sylar::ns::NSNodeSet::listAll	sylar/sylar/ns/ns_protocol.h	/^    void listAll(std::vector<NSNode::ptr>& infos);$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:void	access:public	signature:(std::vector<NSNode::ptr> & infos)
sylar::ns::NSNodeSet::m_cmd	sylar/sylar/ns/ns_protocol.h	/^    uint32_t m_cmd;$/;"	m	class:sylar::ns::NSNodeSet	typeref:typename:uint32_t	access:private
sylar::ns::NSNodeSet::m_datas	sylar/sylar/ns/ns_protocol.h	/^    std::map<uint64_t, NSNode::ptr> m_datas;$/;"	m	class:sylar::ns::NSNodeSet	typeref:typename:std::map<uint64_t,NSNode::ptr>	access:private
sylar::ns::NSNodeSet::m_mutex	sylar/sylar/ns/ns_protocol.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ns::NSNodeSet	typeref:typename:sylar::RWMutex	access:private
sylar::ns::NSNodeSet::ptr	sylar/sylar/ns/ns_protocol.h	/^    typedef std::shared_ptr<NSNodeSet> ptr;$/;"	t	class:sylar::ns::NSNodeSet	typeref:typename:std::shared_ptr<NSNodeSet>	access:public
sylar::ns::NSNodeSet::setCmd	sylar/sylar/ns/ns_protocol.h	/^    void setCmd(uint32_t v) { m_cmd = v;}$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:void	access:public	signature:(uint32_t v)
sylar::ns::NSNodeSet::size	sylar/sylar/ns/ns_protocol.cc	/^size_t NSNodeSet::size() {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:size_t	signature:()
sylar::ns::NSNodeSet::size	sylar/sylar/ns/ns_protocol.h	/^    size_t size();$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:size_t	access:public	signature:()
sylar::ns::NSNodeSet::toString	sylar/sylar/ns/ns_protocol.cc	/^std::string NSNodeSet::toString(const std::string& prefix) {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:std::string	signature:(const std::string & prefix)
sylar::ns::NSNodeSet::toString	sylar/sylar/ns/ns_protocol.h	/^    std::string toString(const std::string& prefix = "");$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:std::string	access:public	signature:(const std::string & prefix="")
sylar::ns::NSNotify	sylar/sylar/ns/ns_protocol.h	/^enum class NSNotify {$/;"	g	namespace:sylar::ns
sylar::ns::NameServerModule	sylar/sylar/ns/name_server_module.h	/^class NameServerModule : public RockModule {$/;"	c	namespace:sylar::ns	inherits:RockModule
sylar::ns::NameServerModule::NameServerModule	sylar/sylar/ns/name_server_module.cc	/^NameServerModule::NameServerModule()$/;"	f	class:sylar::ns::NameServerModule	signature:()
sylar::ns::NameServerModule::NameServerModule	sylar/sylar/ns/name_server_module.h	/^    NameServerModule();$/;"	p	class:sylar::ns::NameServerModule	access:public	signature:()
sylar::ns::NameServerModule::doNotify	sylar/sylar/ns/name_server_module.cc	/^void NameServerModule::doNotify(std::set<std::string>& domains, std::shared_ptr<NotifyMessage> n/;"	f	class:sylar::ns::NameServerModule	typeref:typename:void	signature:(std::set<std::string> & domains,std::shared_ptr<NotifyMessage> nty)
sylar::ns::NameServerModule::doNotify	sylar/sylar/ns/name_server_module.h	/^    void doNotify(std::set<std::string>& domains, std::shared_ptr<NotifyMessage> nty);$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:void	access:private	signature:(std::set<std::string> & domains,std::shared_ptr<NotifyMessage> nty)
sylar::ns::NameServerModule::get	sylar/sylar/ns/name_server_module.cc	/^NSClientInfo::ptr NameServerModule::get(sylar::RockStream::ptr rs) {$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:NSClientInfo::ptr	signature:(sylar::RockStream::ptr rs)
sylar::ns::NameServerModule::get	sylar/sylar/ns/name_server_module.h	/^    NSClientInfo::ptr get(sylar::RockStream::ptr rs);$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:NSClientInfo::ptr	access:private	signature:(sylar::RockStream::ptr rs)
sylar::ns::NameServerModule::getStreams	sylar/sylar/ns/name_server_module.cc	/^std::set<sylar::RockStream::ptr> NameServerModule::getStreams(const std::string& domain) {$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:std::set<sylar::RockStream::ptr>	signature:(const std::string & domain)
sylar::ns::NameServerModule::getStreams	sylar/sylar/ns/name_server_module.h	/^    std::set<sylar::RockStream::ptr> getStreams(const std::string& domain);$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:std::set<sylar::RockStream::ptr>	access:private	signature:(const std::string & domain)
sylar::ns::NameServerModule::handleQuery	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::handleQuery(sylar::RockRequest::ptr request$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
sylar::ns::NameServerModule::handleQuery	sylar/sylar/ns/name_server_module.h	/^    bool handleQuery(sylar::RockRequest::ptr request$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:private	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
sylar::ns::NameServerModule::handleRegister	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::handleRegister(sylar::RockRequest::ptr request$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
sylar::ns::NameServerModule::handleRegister	sylar/sylar/ns/name_server_module.h	/^    bool handleRegister(sylar::RockRequest::ptr request$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:private	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
sylar::ns::NameServerModule::handleRockNotify	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::handleRockNotify(sylar::RockNotify::ptr notify$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::RockNotify::ptr notify,sylar::RockStream::ptr stream)
sylar::ns::NameServerModule::handleRockNotify	sylar/sylar/ns/name_server_module.h	/^    virtual bool handleRockNotify(sylar::RockNotify::ptr notify$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:public	signature:(sylar::RockNotify::ptr notify,sylar::RockStream::ptr stream)
sylar::ns::NameServerModule::handleRockRequest	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::handleRockRequest(sylar::RockRequest::ptr request$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
sylar::ns::NameServerModule::handleRockRequest	sylar/sylar/ns/name_server_module.h	/^    virtual bool handleRockRequest(sylar::RockRequest::ptr request$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:public	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
sylar::ns::NameServerModule::handleTick	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::handleTick(sylar::RockRequest::ptr request$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
sylar::ns::NameServerModule::handleTick	sylar/sylar/ns/name_server_module.h	/^    bool handleTick(sylar::RockRequest::ptr request$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:private	signature:(sylar::RockRequest::ptr request,sylar::RockResponse::ptr response,sylar::RockStream::ptr stream)
sylar::ns::NameServerModule::m_domainToSessions	sylar/sylar/ns/name_server_module.h	/^    std::map<std::string, std::set<sylar::RockStream::ptr> > m_domainToSessions;$/;"	m	class:sylar::ns::NameServerModule	typeref:typename:std::map<std::string,std::set<sylar::RockStream::ptr>>	access:private
sylar::ns::NameServerModule::m_domains	sylar/sylar/ns/name_server_module.h	/^    NSDomainSet::ptr m_domains;$/;"	m	class:sylar::ns::NameServerModule	typeref:typename:NSDomainSet::ptr	access:private
sylar::ns::NameServerModule::m_mutex	sylar/sylar/ns/name_server_module.h	/^    sylar::RWMutex m_mutex;$/;"	m	class:sylar::ns::NameServerModule	typeref:typename:sylar::RWMutex	access:private
sylar::ns::NameServerModule::m_queryDomains	sylar/sylar/ns/name_server_module.h	/^    std::map<sylar::RockStream::ptr, std::set<std::string> > m_queryDomains;$/;"	m	class:sylar::ns::NameServerModule	typeref:typename:std::map<sylar::RockStream::ptr,std::set<std::string>>	access:private
sylar::ns::NameServerModule::m_sessions	sylar/sylar/ns/name_server_module.h	/^    std::map<sylar::RockStream::ptr, NSClientInfo::ptr> m_sessions;$/;"	m	class:sylar::ns::NameServerModule	typeref:typename:std::map<sylar::RockStream::ptr,NSClientInfo::ptr>	access:private
sylar::ns::NameServerModule::onConnect	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::onConnect(sylar::Stream::ptr stream) {$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::Stream::ptr stream)
sylar::ns::NameServerModule::onConnect	sylar/sylar/ns/name_server_module.h	/^    virtual bool onConnect(sylar::Stream::ptr stream) override;$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:public	signature:(sylar::Stream::ptr stream)
sylar::ns::NameServerModule::onDisconnect	sylar/sylar/ns/name_server_module.cc	/^bool NameServerModule::onDisconnect(sylar::Stream::ptr stream) {$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:bool	signature:(sylar::Stream::ptr stream)
sylar::ns::NameServerModule::onDisconnect	sylar/sylar/ns/name_server_module.h	/^    virtual bool onDisconnect(sylar::Stream::ptr stream) override;$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:bool	access:public	signature:(sylar::Stream::ptr stream)
sylar::ns::NameServerModule::ptr	sylar/sylar/ns/name_server_module.h	/^    typedef std::shared_ptr<NameServerModule> ptr;$/;"	t	class:sylar::ns::NameServerModule	typeref:typename:std::shared_ptr<NameServerModule>	access:public
sylar::ns::NameServerModule::set	sylar/sylar/ns/name_server_module.cc	/^void NameServerModule::set(sylar::RockStream::ptr rs, NSClientInfo::ptr new_value) {$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:void	signature:(sylar::RockStream::ptr rs,NSClientInfo::ptr new_value)
sylar::ns::NameServerModule::set	sylar/sylar/ns/name_server_module.h	/^    void set(sylar::RockStream::ptr rs, NSClientInfo::ptr info);$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:void	access:private	signature:(sylar::RockStream::ptr rs,NSClientInfo::ptr info)
sylar::ns::NameServerModule::setQueryDomain	sylar/sylar/ns/name_server_module.cc	/^void NameServerModule::setQueryDomain(sylar::RockStream::ptr rs, const std::set<std::string>& ds/;"	f	class:sylar::ns::NameServerModule	typeref:typename:void	signature:(sylar::RockStream::ptr rs,const std::set<std::string> & ds)
sylar::ns::NameServerModule::setQueryDomain	sylar/sylar/ns/name_server_module.h	/^    void setQueryDomain(sylar::RockStream::ptr rs, const std::set<std::string>& ds);$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:void	access:private	signature:(sylar::RockStream::ptr rs,const std::set<std::string> & ds)
sylar::ns::NameServerModule::statusString	sylar/sylar/ns/name_server_module.cc	/^std::string NameServerModule::statusString() {$/;"	f	class:sylar::ns::NameServerModule	typeref:typename:std::string	signature:()
sylar::ns::NameServerModule::statusString	sylar/sylar/ns/name_server_module.h	/^    virtual std::string statusString() override;$/;"	p	class:sylar::ns::NameServerModule	typeref:typename:std::string	access:public	signature:()
sylar::ns::Node	sylar/sylar/ns/ns_protobuf.pb.h	/^class Node final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
sylar::ns::Node::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(void * object)
sylar::ns::Node::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(void * object)
sylar::ns::Node::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t Node::ByteSizeLong() const {$/;"	f	class:sylar::ns::Node	typeref:typename:size_t	signature:() const
sylar::ns::Node::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::Node	typeref:typename:size_t	access:public	signature:() const
sylar::ns::Node::Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::Clear() {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:()
sylar::ns::Node::Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::Node	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
sylar::ns::Node::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::CopyFrom(const Node& from) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(const Node & from)
sylar::ns::Node::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const Node& from);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(const Node & from)
sylar::ns::Node::DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::Node	typeref:typename:void	access:private
sylar::ns::Node::FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::Node	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
sylar::ns::Node::GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::Node	typeref:typename:int	access:public	signature:() const
sylar::ns::Node::GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_da/;"	f	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
sylar::ns::Node::GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
sylar::ns::Node::GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::Node::GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {$/;"	f	class:sylar::ns::Node	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
sylar::ns::Node::GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
sylar::ns::Node::InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::Node	typeref:typename:void	access:private
sylar::ns::Node::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::InternalSwap(Node* other) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(Node * other)
sylar::ns::Node::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(Node* other);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(Node * other)
sylar::ns::Node::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool Node::IsInitialized() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
sylar::ns::Node::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:public	signature:() const
sylar::ns::Node::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::MergeFrom(const Node& from) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(const Node & from)
sylar::ns::Node::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const Node& from);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(const Node & from)
sylar::ns::Node::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::Node::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::Node::New	sylar/sylar/ns/ns_protobuf.pb.h	/^  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::Node	typeref:typename:Node *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
sylar::ns::Node::Node	sylar/sylar/ns/ns_protobuf.pb.cc	/^Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::Node	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
sylar::ns::Node::Node	sylar/sylar/ns/ns_protobuf.pb.cc	/^Node::Node(const Node& from)$/;"	f	class:sylar::ns::Node	signature:(const Node & from)
sylar::ns::Node::Node	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr Node::Node($/;"	f	class:sylar::ns::Node	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::Node::Node	sylar/sylar/ns/ns_protobuf.pb.h	/^  Node(Node&& from) noexcept$/;"	f	class:sylar::ns::Node	access:public	signature:(Node && from)
sylar::ns::Node::Node	sylar/sylar/ns/ns_protobuf.pb.h	/^  Node(const Node& from);$/;"	p	class:sylar::ns::Node	access:public	signature:(const Node & from)
sylar::ns::Node::Node	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::Node	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
sylar::ns::Node::Node	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::Node	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::Node::Node	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline Node() : Node(nullptr) {}$/;"	f	class:sylar::ns::Node	access:public	signature:()
sylar::ns::Node::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
sylar::ns::Node::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
sylar::ns::Node::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void Node::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(int size) const
sylar::ns::Node::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(int size) const
sylar::ns::Node::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void Node::SharedCtor() {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:()
sylar::ns::Node::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:()
sylar::ns::Node::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void Node::SharedDtor() {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:()
sylar::ns::Node::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:()
sylar::ns::Node::Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(Node* other) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(Node * other)
sylar::ns::Node::UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(Node* other) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(Node * other)
sylar::ns::Node::_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class Node::_Internal {$/;"	c	class:sylar::ns::Node	file:
sylar::ns::Node::_Internal::HasBits	sylar/sylar/ns/ns_protobuf.pb.cc	/^  using HasBits = decltype(std::declval<Node>()._has_bits_);$/;"	t	class:sylar::ns::Node::_Internal	file:	access:public
sylar::ns::Node::_Internal::set_has_ip	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_ip(HasBits* has_bits) {$/;"	f	class:sylar::ns::Node::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
sylar::ns::Node::_Internal::set_has_port	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_port(HasBits* has_bits) {$/;"	f	class:sylar::ns::Node::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
sylar::ns::Node::_Internal::set_has_weight	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_weight(HasBits* has_bits) {$/;"	f	class:sylar::ns::Node::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
sylar::ns::Node::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContex/;"	f	class:sylar::ns::Node	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::Node::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::Node	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::Node::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* Node::_InternalSerialize($/;"	f	class:sylar::ns::Node	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::Node::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::Node	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::Node::__anond0e9e3700103	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::Node	typeref:typename:int	access:public
sylar::ns::Node::_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {$/;"	m	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
sylar::ns::Node::_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::Node	typeref:typename:const ClassData	access:public
sylar::ns::Node::_internal_has_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_ip() const;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:private	signature:() const
sylar::ns::Node::_internal_has_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool Node::_internal_has_ip() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
sylar::ns::Node::_internal_has_port	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_port() const;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:private	signature:() const
sylar::ns::Node::_internal_has_port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool Node::_internal_has_port() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
sylar::ns::Node::_internal_has_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_weight() const;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:private	signature:() const
sylar::ns::Node::_internal_has_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool Node::_internal_has_weight() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
sylar::ns::Node::_internal_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& _internal_ip() const;$/;"	p	class:sylar::ns::Node	typeref:typename:const std::string &	access:private	signature:() const
sylar::ns::Node::_internal_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& Node::_internal_ip() const {$/;"	f	class:sylar::ns::Node	typeref:typename:const std::string &	signature:() const
sylar::ns::Node::_internal_mutable_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* _internal_mutable_ip();$/;"	p	class:sylar::ns::Node	typeref:typename:std::string *	access:private	signature:()
sylar::ns::Node::_internal_mutable_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* Node::_internal_mutable_ip() {$/;"	f	class:sylar::ns::Node	typeref:typename:std::string *	signature:()
sylar::ns::Node::_internal_port	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t _internal_port() const;$/;"	p	class:sylar::ns::Node	typeref:typename:uint32_t	access:private	signature:() const
sylar::ns::Node::_internal_port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t Node::_internal_port() const {$/;"	f	class:sylar::ns::Node	typeref:typename:uint32_t	signature:() const
sylar::ns::Node::_internal_set_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);$/;"	p	class:sylar::ns::Node	typeref:typename:PROTOBUF_ALWAYS_INLINE void	access:private	signature:(const std::string & value)
sylar::ns::Node::_internal_set_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::_internal_set_ip(const std::string& value) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(const std::string & value)
sylar::ns::Node::_internal_set_port	sylar/sylar/ns/ns_protobuf.pb.h	/^  void _internal_set_port(uint32_t value);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(uint32_t value)
sylar::ns::Node::_internal_set_port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::_internal_set_port(uint32_t value) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(uint32_t value)
sylar::ns::Node::_internal_set_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  void _internal_set_weight(uint32_t value);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:private	signature:(uint32_t value)
sylar::ns::Node::_internal_set_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::_internal_set_weight(uint32_t value) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(uint32_t value)
sylar::ns::Node::_internal_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t _internal_weight() const;$/;"	p	class:sylar::ns::Node	typeref:typename:uint32_t	access:private	signature:() const
sylar::ns::Node::_internal_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t Node::_internal_weight() const {$/;"	f	class:sylar::ns::Node	typeref:typename:uint32_t	signature:() const
sylar::ns::Node::clear_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_ip();$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:()
sylar::ns::Node::clear_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::clear_ip() {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:()
sylar::ns::Node::clear_port	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_port();$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:()
sylar::ns::Node::clear_port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::clear_port() {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:()
sylar::ns::Node::clear_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_weight();$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:()
sylar::ns::Node::clear_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::clear_weight() {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:()
sylar::ns::Node::default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const Node& default_instance() {$/;"	f	class:sylar::ns::Node	typeref:typename:const Node &	access:public	signature:()
sylar::ns::Node::descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::Node::has_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_ip() const;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:public	signature:() const
sylar::ns::Node::has_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool Node::has_ip() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
sylar::ns::Node::has_port	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_port() const;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:public	signature:() const
sylar::ns::Node::has_port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool Node::has_port() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
sylar::ns::Node::has_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_weight() const;$/;"	p	class:sylar::ns::Node	typeref:typename:bool	access:public	signature:() const
sylar::ns::Node::has_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool Node::has_weight() const {$/;"	f	class:sylar::ns::Node	typeref:typename:bool	signature:() const
sylar::ns::Node::internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const Node* internal_default_instance() {$/;"	f	class:sylar::ns::Node	typeref:typename:const Node *	access:public	signature:()
sylar::ns::Node::ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& ip() const;$/;"	p	class:sylar::ns::Node	typeref:typename:const std::string &	access:public	signature:() const
sylar::ns::Node::ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& Node::ip() const {$/;"	f	class:sylar::ns::Node	typeref:typename:const std::string &	signature:() const
sylar::ns::Node::kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::Node	typeref:typename:int	access:public
sylar::ns::Node::kIpFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kIpFieldNumber = 1,$/;"	e	enum:sylar::ns::Node::__anond0e9e3700103	access:public
sylar::ns::Node::kPortFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kPortFieldNumber = 2,$/;"	e	enum:sylar::ns::Node::__anond0e9e3700103	access:public
sylar::ns::Node::kWeightFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kWeightFieldNumber = 3,$/;"	e	enum:sylar::ns::Node::__anond0e9e3700103	access:public
sylar::ns::Node::mutable_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* mutable_ip();$/;"	p	class:sylar::ns::Node	typeref:typename:std::string *	access:public	signature:()
sylar::ns::Node::mutable_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* Node::mutable_ip() {$/;"	f	class:sylar::ns::Node	typeref:typename:std::string *	signature:()
sylar::ns::Node::mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::Node	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
sylar::ns::Node::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline Node& operator=(Node&& from) noexcept {$/;"	f	class:sylar::ns::Node	typeref:typename:Node &	access:public	signature:(Node && from)
sylar::ns::Node::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline Node& operator=(const Node& from) {$/;"	f	class:sylar::ns::Node	typeref:typename:Node &	access:public	signature:(const Node & from)
sylar::ns::Node::port	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t port() const;$/;"	p	class:sylar::ns::Node	typeref:typename:uint32_t	access:public	signature:() const
sylar::ns::Node::port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t Node::port() const {$/;"	f	class:sylar::ns::Node	typeref:typename:uint32_t	signature:() const
sylar::ns::Node::port_	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t port_;$/;"	m	class:sylar::ns::Node	typeref:typename:uint32_t	access:private
sylar::ns::Node::release_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_NODISCARD std::string* release_ip();$/;"	p	class:sylar::ns::Node	typeref:typename:PROTOBUF_NODISCARD std::string *	access:public	signature:()
sylar::ns::Node::release_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* Node::release_ip() {$/;"	f	class:sylar::ns::Node	typeref:typename:std::string *	signature:()
sylar::ns::Node::set_allocated_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_allocated_ip(std::string* ip);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(std::string * ip)
sylar::ns::Node::set_allocated_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::set_allocated_ip(std::string* ip) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(std::string * ip)
sylar::ns::Node::set_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_ip(ArgT0&& arg0, ArgT... args);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(ArgT0 && arg0,ArgT...args)
sylar::ns::Node::set_ip	sylar/sylar/ns/ns_protobuf.pb.h	/^void Node::set_ip(ArgT0&& arg0, ArgT... args) {$/;"	f	class:sylar::ns::Node	typeref:typename:PROTOBUF_ALWAYS_INLINE void	signature:(ArgT0 && arg0,ArgT...args)
sylar::ns::Node::set_port	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_port(uint32_t value);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(uint32_t value)
sylar::ns::Node::set_port	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::set_port(uint32_t value) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(uint32_t value)
sylar::ns::Node::set_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_weight(uint32_t value);$/;"	p	class:sylar::ns::Node	typeref:typename:void	access:public	signature:(uint32_t value)
sylar::ns::Node::set_weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void Node::set_weight(uint32_t value) {$/;"	f	class:sylar::ns::Node	typeref:typename:void	signature:(uint32_t value)
sylar::ns::Node::unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
sylar::ns::Node::weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t weight() const;$/;"	p	class:sylar::ns::Node	typeref:typename:uint32_t	access:public	signature:() const
sylar::ns::Node::weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t Node::weight() const {$/;"	f	class:sylar::ns::Node	typeref:typename:uint32_t	signature:() const
sylar::ns::Node::weight_	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t weight_;$/;"	m	class:sylar::ns::Node	typeref:typename:uint32_t	access:private
sylar::ns::Node::~Node	sylar/sylar/ns/ns_protobuf.pb.cc	/^Node::~Node() {$/;"	f	class:sylar::ns::Node	signature:()
sylar::ns::NodeDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct NodeDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
sylar::ns::NodeDefaultTypeInternal::NodeDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr NodeDefaultTypeInternal()$/;"	f	struct:sylar::ns::NodeDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::NodeDefaultTypeInternal::__anonee26512e010a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::NodeDefaultTypeInternal	file:	access:public
sylar::ns::NodeDefaultTypeInternal::__anonee26512e010a::_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    Node _instance;$/;"	m	union:sylar::ns::NodeDefaultTypeInternal::__anonee26512e010a	typeref:typename:Node	file:	access:public
sylar::ns::NodeDefaultTypeInternal::~NodeDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~NodeDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::NodeDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::NodeInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^class NodeInfo final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
sylar::ns::NodeInfo::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(void * object)
sylar::ns::NodeInfo::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:(void * object)
sylar::ns::NodeInfo::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t NodeInfo::ByteSizeLong() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:size_t	signature:() const
sylar::ns::NodeInfo::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:size_t	access:public	signature:() const
sylar::ns::NodeInfo::Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::Clear() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:()
sylar::ns::NodeInfo::Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
sylar::ns::NodeInfo::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::CopyFrom(const NodeInfo& from) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(const NodeInfo & from)
sylar::ns::NodeInfo::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const NodeInfo& from);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(const NodeInfo & from)
sylar::ns::NodeInfo::DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::NodeInfo	typeref:typename:void	access:private
sylar::ns::NodeInfo::FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
sylar::ns::NodeInfo::GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:int	access:public	signature:() const
sylar::ns::NodeInfo::GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfo::GetClassData() const { return &_clas/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
sylar::ns::NodeInfo::GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
sylar::ns::NodeInfo::GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::NodeInfo::GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
sylar::ns::NodeInfo::GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
sylar::ns::NodeInfo::InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::NodeInfo	typeref:typename:void	access:private
sylar::ns::NodeInfo::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::InternalSwap(NodeInfo* other) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(NodeInfo * other)
sylar::ns::NodeInfo::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(NodeInfo* other);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:(NodeInfo * other)
sylar::ns::NodeInfo::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool NodeInfo::IsInitialized() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:bool	signature:() const
sylar::ns::NodeInfo::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:bool	access:public	signature:() const
sylar::ns::NodeInfo::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::MergeFrom(const NodeInfo& from) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(const NodeInfo & from)
sylar::ns::NodeInfo::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const NodeInfo& from);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(const NodeInfo & from)
sylar::ns::NodeInfo::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::NodeInfo::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::NodeInfo::New	sylar/sylar/ns/ns_protobuf.pb.h	/^  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:NodeInfo *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
sylar::ns::NodeInfo::NodeInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^NodeInfo::NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::NodeInfo	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
sylar::ns::NodeInfo::NodeInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^NodeInfo::NodeInfo(const NodeInfo& from)$/;"	f	class:sylar::ns::NodeInfo	signature:(const NodeInfo & from)
sylar::ns::NodeInfo::NodeInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr NodeInfo::NodeInfo($/;"	f	class:sylar::ns::NodeInfo	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::NodeInfo::NodeInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  NodeInfo(NodeInfo&& from) noexcept$/;"	f	class:sylar::ns::NodeInfo	access:public	signature:(NodeInfo && from)
sylar::ns::NodeInfo::NodeInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  NodeInfo(const NodeInfo& from);$/;"	p	class:sylar::ns::NodeInfo	access:public	signature:(const NodeInfo & from)
sylar::ns::NodeInfo::NodeInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::NodeInfo	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
sylar::ns::NodeInfo::NodeInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr NodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::NodeInfo	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::NodeInfo::NodeInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline NodeInfo() : NodeInfo(nullptr) {}$/;"	f	class:sylar::ns::NodeInfo	access:public	signature:()
sylar::ns::NodeInfo::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
sylar::ns::NodeInfo::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
sylar::ns::NodeInfo::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NodeInfo::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(int size) const
sylar::ns::NodeInfo::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:(int size) const
sylar::ns::NodeInfo::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void NodeInfo::SharedCtor() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:()
sylar::ns::NodeInfo::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:()
sylar::ns::NodeInfo::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void NodeInfo::SharedDtor() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:()
sylar::ns::NodeInfo::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:()
sylar::ns::NodeInfo::Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(NodeInfo* other) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(NodeInfo * other)
sylar::ns::NodeInfo::UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(NodeInfo* other) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(NodeInfo * other)
sylar::ns::NodeInfo::_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class NodeInfo::_Internal {$/;"	c	class:sylar::ns::NodeInfo	file:
sylar::ns::NodeInfo::_Internal::HasBits	sylar/sylar/ns/ns_protobuf.pb.cc	/^  using HasBits = decltype(std::declval<NodeInfo>()._has_bits_);$/;"	t	class:sylar::ns::NodeInfo::_Internal	file:	access:public
sylar::ns::NodeInfo::_Internal::set_has_cmd	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_cmd(HasBits* has_bits) {$/;"	f	class:sylar::ns::NodeInfo::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
sylar::ns::NodeInfo::_Internal::set_has_domain	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_domain(HasBits* has_bits) {$/;"	f	class:sylar::ns::NodeInfo::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
sylar::ns::NodeInfo::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseCo/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::NodeInfo::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::NodeInfo::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* NodeInfo::_InternalSerialize($/;"	f	class:sylar::ns::NodeInfo	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::NodeInfo::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::NodeInfo	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::NodeInfo::__anond0e9e3700503	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::NodeInfo	typeref:typename:int	access:public
sylar::ns::NodeInfo::_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfo::_class_data_ = {$/;"	m	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
sylar::ns::NodeInfo::_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::NodeInfo	typeref:typename:const ClassData	access:public
sylar::ns::NodeInfo::_internal_add_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* NodeInfo::_internal_add_nodes() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::sylar::ns::Node *	signature:()
sylar::ns::NodeInfo::_internal_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t _internal_cmd() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:uint32_t	access:private	signature:() const
sylar::ns::NodeInfo::_internal_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t NodeInfo::_internal_cmd() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:uint32_t	signature:() const
sylar::ns::NodeInfo::_internal_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& _internal_domain() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const std::string &	access:private	signature:() const
sylar::ns::NodeInfo::_internal_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& NodeInfo::_internal_domain() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const std::string &	signature:() const
sylar::ns::NodeInfo::_internal_has_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_cmd() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:bool	access:private	signature:() const
sylar::ns::NodeInfo::_internal_has_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool NodeInfo::_internal_has_cmd() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:bool	signature:() const
sylar::ns::NodeInfo::_internal_has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_domain() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:bool	access:private	signature:() const
sylar::ns::NodeInfo::_internal_has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool NodeInfo::_internal_has_domain() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:bool	signature:() const
sylar::ns::NodeInfo::_internal_mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* _internal_mutable_domain();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:std::string *	access:private	signature:()
sylar::ns::NodeInfo::_internal_mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* NodeInfo::_internal_mutable_domain() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:std::string *	signature:()
sylar::ns::NodeInfo::_internal_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::Node& _internal_nodes(int index) const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const::sylar::ns::Node &	access:private	signature:(int index) const
sylar::ns::NodeInfo::_internal_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::Node& NodeInfo::_internal_nodes(int index) const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::sylar::ns::Node &	signature:(int index) const
sylar::ns::NodeInfo::_internal_nodes_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_nodes_size() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:int	access:private	signature:() const
sylar::ns::NodeInfo::_internal_nodes_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int NodeInfo::_internal_nodes_size() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:int	signature:() const
sylar::ns::NodeInfo::_internal_set_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  void _internal_set_cmd(uint32_t value);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:private	signature:(uint32_t value)
sylar::ns::NodeInfo::_internal_set_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::_internal_set_cmd(uint32_t value) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(uint32_t value)
sylar::ns::NodeInfo::_internal_set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:PROTOBUF_ALWAYS_INLINE void	access:private	signature:(const std::string & value)
sylar::ns::NodeInfo::_internal_set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::_internal_set_domain(const std::string& value) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(const std::string & value)
sylar::ns::NodeInfo::add_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* NodeInfo::add_nodes() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::sylar::ns::Node *	signature:()
sylar::ns::NodeInfo::clear_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_cmd();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:()
sylar::ns::NodeInfo::clear_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::clear_cmd() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:()
sylar::ns::NodeInfo::clear_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_domain();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:()
sylar::ns::NodeInfo::clear_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::clear_domain() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:()
sylar::ns::NodeInfo::clear_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_nodes();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:()
sylar::ns::NodeInfo::clear_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::clear_nodes() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:()
sylar::ns::NodeInfo::cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t cmd() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:uint32_t	access:public	signature:() const
sylar::ns::NodeInfo::cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t NodeInfo::cmd() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:uint32_t	signature:() const
sylar::ns::NodeInfo::cmd_	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t cmd_;$/;"	m	class:sylar::ns::NodeInfo	typeref:typename:uint32_t	access:private
sylar::ns::NodeInfo::default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const NodeInfo& default_instance() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const NodeInfo &	access:public	signature:()
sylar::ns::NodeInfo::descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::NodeInfo::domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& domain() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const std::string &	access:public	signature:() const
sylar::ns::NodeInfo::domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& NodeInfo::domain() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const std::string &	signature:() const
sylar::ns::NodeInfo::has_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_cmd() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:bool	access:public	signature:() const
sylar::ns::NodeInfo::has_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool NodeInfo::has_cmd() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:bool	signature:() const
sylar::ns::NodeInfo::has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_domain() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:bool	access:public	signature:() const
sylar::ns::NodeInfo::has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool NodeInfo::has_domain() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:bool	signature:() const
sylar::ns::NodeInfo::internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const NodeInfo* internal_default_instance() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const NodeInfo *	access:public	signature:()
sylar::ns::NodeInfo::kCmdFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kCmdFieldNumber = 2,$/;"	e	enum:sylar::ns::NodeInfo::__anond0e9e3700503	access:public
sylar::ns::NodeInfo::kDomainFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kDomainFieldNumber = 1,$/;"	e	enum:sylar::ns::NodeInfo::__anond0e9e3700503	access:public
sylar::ns::NodeInfo::kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::NodeInfo	typeref:typename:int	access:public
sylar::ns::NodeInfo::kNodesFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kNodesFieldNumber = 3,$/;"	e	enum:sylar::ns::NodeInfo::__anond0e9e3700503	access:public
sylar::ns::NodeInfo::mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* mutable_domain();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:std::string *	access:public	signature:()
sylar::ns::NodeInfo::mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* NodeInfo::mutable_domain() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:std::string *	signature:()
sylar::ns::NodeInfo::mutable_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^NodeInfo::mutable_nodes() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::Node> *	signature:()
sylar::ns::NodeInfo::mutable_nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* NodeInfo::mutable_nodes(int index) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::sylar::ns::Node *	signature:(int index)
sylar::ns::NodeInfo::mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
sylar::ns::NodeInfo::nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^      nodes() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::Node> &	access:public	signature:() const
sylar::ns::NodeInfo::nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::Node& nodes(int index) const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:const::sylar::ns::Node &	access:public	signature:(int index) const
sylar::ns::NodeInfo::nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^NodeInfo::nodes() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::Node> &	signature:() const
sylar::ns::NodeInfo::nodes	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::Node& NodeInfo::nodes(int index) const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::sylar::ns::Node &	signature:(int index) const
sylar::ns::NodeInfo::nodes_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int nodes_size() const;$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:int	access:public	signature:() const
sylar::ns::NodeInfo::nodes_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int NodeInfo::nodes_size() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:int	signature:() const
sylar::ns::NodeInfo::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline NodeInfo& operator=(NodeInfo&& from) noexcept {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:NodeInfo &	access:public	signature:(NodeInfo && from)
sylar::ns::NodeInfo::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline NodeInfo& operator=(const NodeInfo& from) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:NodeInfo &	access:public	signature:(const NodeInfo & from)
sylar::ns::NodeInfo::release_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_NODISCARD std::string* release_domain();$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:PROTOBUF_NODISCARD std::string *	access:public	signature:()
sylar::ns::NodeInfo::release_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* NodeInfo::release_domain() {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:std::string *	signature:()
sylar::ns::NodeInfo::set_allocated_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_allocated_domain(std::string* domain);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(std::string * domain)
sylar::ns::NodeInfo::set_allocated_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::set_allocated_domain(std::string* domain) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(std::string * domain)
sylar::ns::NodeInfo::set_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_cmd(uint32_t value);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(uint32_t value)
sylar::ns::NodeInfo::set_cmd	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NodeInfo::set_cmd(uint32_t value) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:void	signature:(uint32_t value)
sylar::ns::NodeInfo::set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_domain(ArgT0&& arg0, ArgT... args);$/;"	p	class:sylar::ns::NodeInfo	typeref:typename:void	access:public	signature:(ArgT0 && arg0,ArgT...args)
sylar::ns::NodeInfo::set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^void NodeInfo::set_domain(ArgT0&& arg0, ArgT... args) {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:PROTOBUF_ALWAYS_INLINE void	signature:(ArgT0 && arg0,ArgT...args)
sylar::ns::NodeInfo::unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
sylar::ns::NodeInfo::~NodeInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^NodeInfo::~NodeInfo() {$/;"	f	class:sylar::ns::NodeInfo	signature:()
sylar::ns::NodeInfoDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct NodeInfoDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
sylar::ns::NodeInfoDefaultTypeInternal::NodeInfoDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr NodeInfoDefaultTypeInternal()$/;"	f	struct:sylar::ns::NodeInfoDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::NodeInfoDefaultTypeInternal::__anonee26512e050a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::NodeInfoDefaultTypeInternal	file:	access:public
sylar::ns::NodeInfoDefaultTypeInternal::__anonee26512e050a::_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    NodeInfo _instance;$/;"	m	union:sylar::ns::NodeInfoDefaultTypeInternal::__anonee26512e050a	typeref:typename:NodeInfo	file:	access:public
sylar::ns::NodeInfoDefaultTypeInternal::~NodeInfoDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~NodeInfoDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::NodeInfoDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.h	/^class NotifyMessage final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
sylar::ns::NotifyMessage::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(void * object)
sylar::ns::NotifyMessage::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:(void * object)
sylar::ns::NotifyMessage::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t NotifyMessage::ByteSizeLong() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:size_t	signature:() const
sylar::ns::NotifyMessage::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:size_t	access:public	signature:() const
sylar::ns::NotifyMessage::Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::Clear() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:()
sylar::ns::NotifyMessage::Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
sylar::ns::NotifyMessage::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::CopyFrom(const NotifyMessage& from) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(const NotifyMessage & from)
sylar::ns::NotifyMessage::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const NotifyMessage& from);$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:public	signature:(const NotifyMessage & from)
sylar::ns::NotifyMessage::DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private
sylar::ns::NotifyMessage::FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
sylar::ns::NotifyMessage::GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:int	access:public	signature:() const
sylar::ns::NotifyMessage::GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyMessage::GetClassData() const { return &/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
sylar::ns::NotifyMessage::GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
sylar::ns::NotifyMessage::GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::NotifyMessage::GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata NotifyMessage::GetMetadata() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
sylar::ns::NotifyMessage::GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
sylar::ns::NotifyMessage::InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private
sylar::ns::NotifyMessage::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::InternalSwap(NotifyMessage* other) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(NotifyMessage * other)
sylar::ns::NotifyMessage::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(NotifyMessage* other);$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:(NotifyMessage * other)
sylar::ns::NotifyMessage::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool NotifyMessage::IsInitialized() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:bool	signature:() const
sylar::ns::NotifyMessage::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:bool	access:public	signature:() const
sylar::ns::NotifyMessage::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::MergeFrom(const NotifyMessage& from) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(const NotifyMessage & from)
sylar::ns::NotifyMessage::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const NotifyMessage& from);$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:public	signature:(const NotifyMessage & from)
sylar::ns::NotifyMessage::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::NotifyMessage::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::NotifyMessage::New	sylar/sylar/ns/ns_protobuf.pb.h	/^  NotifyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:NotifyMessage *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
sylar::ns::NotifyMessage::NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.cc	/^NotifyMessage::NotifyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::NotifyMessage	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
sylar::ns::NotifyMessage::NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.cc	/^NotifyMessage::NotifyMessage(const NotifyMessage& from)$/;"	f	class:sylar::ns::NotifyMessage	signature:(const NotifyMessage & from)
sylar::ns::NotifyMessage::NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr NotifyMessage::NotifyMessage($/;"	f	class:sylar::ns::NotifyMessage	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::NotifyMessage::NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.h	/^  NotifyMessage(NotifyMessage&& from) noexcept$/;"	f	class:sylar::ns::NotifyMessage	access:public	signature:(NotifyMessage && from)
sylar::ns::NotifyMessage::NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.h	/^  NotifyMessage(const NotifyMessage& from);$/;"	p	class:sylar::ns::NotifyMessage	access:public	signature:(const NotifyMessage & from)
sylar::ns::NotifyMessage::NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit NotifyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::NotifyMessage	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
sylar::ns::NotifyMessage::NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr NotifyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::NotifyMessage	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::NotifyMessage::NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline NotifyMessage() : NotifyMessage(nullptr) {}$/;"	f	class:sylar::ns::NotifyMessage	access:public	signature:()
sylar::ns::NotifyMessage::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
sylar::ns::NotifyMessage::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
sylar::ns::NotifyMessage::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void NotifyMessage::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:(int size) const
sylar::ns::NotifyMessage::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:(int size) const
sylar::ns::NotifyMessage::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void NotifyMessage::SharedCtor() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:()
sylar::ns::NotifyMessage::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:()
sylar::ns::NotifyMessage::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void NotifyMessage::SharedDtor() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:()
sylar::ns::NotifyMessage::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:private	signature:()
sylar::ns::NotifyMessage::Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(NotifyMessage* other) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	access:public	signature:(NotifyMessage * other)
sylar::ns::NotifyMessage::UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(NotifyMessage* other) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	access:public	signature:(NotifyMessage * other)
sylar::ns::NotifyMessage::_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class NotifyMessage::_Internal {$/;"	c	class:sylar::ns::NotifyMessage	file:
sylar::ns::NotifyMessage::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* NotifyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::Pa/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::NotifyMessage::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::NotifyMessage::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* NotifyMessage::_InternalSerialize($/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::NotifyMessage::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::NotifyMessage::__anond0e9e3700703	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::NotifyMessage	typeref:typename:int	access:public
sylar::ns::NotifyMessage::_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyMessage::_class_data_ = {$/;"	m	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
sylar::ns::NotifyMessage::_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::NotifyMessage	typeref:typename:const ClassData	access:public
sylar::ns::NotifyMessage::_internal_add_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* NotifyMessage::_internal_add_dels() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::sylar::ns::NodeInfo *	signature:()
sylar::ns::NotifyMessage::_internal_add_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* NotifyMessage::_internal_add_updates() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::sylar::ns::NodeInfo *	signature:()
sylar::ns::NotifyMessage::_internal_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::NodeInfo& _internal_dels(int index) const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	access:private	signature:(int index) const
sylar::ns::NotifyMessage::_internal_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::NodeInfo& NotifyMessage::_internal_dels(int index) const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	signature:(int index) const
sylar::ns::NotifyMessage::_internal_dels_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_dels_size() const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:int	access:private	signature:() const
sylar::ns::NotifyMessage::_internal_dels_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int NotifyMessage::_internal_dels_size() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:int	signature:() const
sylar::ns::NotifyMessage::_internal_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::NodeInfo& _internal_updates(int index) const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	access:private	signature:(int index) const
sylar::ns::NotifyMessage::_internal_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::NodeInfo& NotifyMessage::_internal_updates(int index) const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	signature:(int index) const
sylar::ns::NotifyMessage::_internal_updates_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_updates_size() const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:int	access:private	signature:() const
sylar::ns::NotifyMessage::_internal_updates_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int NotifyMessage::_internal_updates_size() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:int	signature:() const
sylar::ns::NotifyMessage::add_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* NotifyMessage::add_dels() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::sylar::ns::NodeInfo *	signature:()
sylar::ns::NotifyMessage::add_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* NotifyMessage::add_updates() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::sylar::ns::NodeInfo *	signature:()
sylar::ns::NotifyMessage::clear_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_dels();$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:public	signature:()
sylar::ns::NotifyMessage::clear_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NotifyMessage::clear_dels() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:()
sylar::ns::NotifyMessage::clear_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_updates();$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:void	access:public	signature:()
sylar::ns::NotifyMessage::clear_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void NotifyMessage::clear_updates() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:void	signature:()
sylar::ns::NotifyMessage::default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const NotifyMessage& default_instance() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const NotifyMessage &	access:public	signature:()
sylar::ns::NotifyMessage::dels	sylar/sylar/ns/ns_protobuf.pb.h	/^      dels() const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> &	access:public	signature:() const
sylar::ns::NotifyMessage::dels	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::NodeInfo& dels(int index) const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	access:public	signature:(int index) const
sylar::ns::NotifyMessage::dels	sylar/sylar/ns/ns_protobuf.pb.h	/^NotifyMessage::dels() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> &	signature:() const
sylar::ns::NotifyMessage::dels	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::NodeInfo& NotifyMessage::dels(int index) const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	signature:(int index) const
sylar::ns::NotifyMessage::dels_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int dels_size() const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:int	access:public	signature:() const
sylar::ns::NotifyMessage::dels_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int NotifyMessage::dels_size() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:int	signature:() const
sylar::ns::NotifyMessage::descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::NotifyMessage::internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const NotifyMessage* internal_default_instance() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const NotifyMessage *	access:public	signature:()
sylar::ns::NotifyMessage::kDelsFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kDelsFieldNumber = 1,$/;"	e	enum:sylar::ns::NotifyMessage::__anond0e9e3700703	access:public
sylar::ns::NotifyMessage::kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::NotifyMessage	typeref:typename:int	access:public
sylar::ns::NotifyMessage::kUpdatesFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kUpdatesFieldNumber = 2,$/;"	e	enum:sylar::ns::NotifyMessage::__anond0e9e3700703	access:public
sylar::ns::NotifyMessage::mutable_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^NotifyMessage::mutable_dels() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> *	signature:()
sylar::ns::NotifyMessage::mutable_dels	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* NotifyMessage::mutable_dels(int index) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::sylar::ns::NodeInfo *	signature:(int index)
sylar::ns::NotifyMessage::mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
sylar::ns::NotifyMessage::mutable_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^NotifyMessage::mutable_updates() {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> *	signature:()
sylar::ns::NotifyMessage::mutable_updates	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* NotifyMessage::mutable_updates(int index) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:::sylar::ns::NodeInfo *	signature:(int index)
sylar::ns::NotifyMessage::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline NotifyMessage& operator=(NotifyMessage&& from) noexcept {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:NotifyMessage &	access:public	signature:(NotifyMessage && from)
sylar::ns::NotifyMessage::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline NotifyMessage& operator=(const NotifyMessage& from) {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:NotifyMessage &	access:public	signature:(const NotifyMessage & from)
sylar::ns::NotifyMessage::unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
sylar::ns::NotifyMessage::updates	sylar/sylar/ns/ns_protobuf.pb.h	/^      updates() const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> &	access:public	signature:() const
sylar::ns::NotifyMessage::updates	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::NodeInfo& updates(int index) const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	access:public	signature:(int index) const
sylar::ns::NotifyMessage::updates	sylar/sylar/ns/ns_protobuf.pb.h	/^NotifyMessage::updates() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> &	signature:() const
sylar::ns::NotifyMessage::updates	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::NodeInfo& NotifyMessage::updates(int index) const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	signature:(int index) const
sylar::ns::NotifyMessage::updates_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int updates_size() const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:int	access:public	signature:() const
sylar::ns::NotifyMessage::updates_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int NotifyMessage::updates_size() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:int	signature:() const
sylar::ns::NotifyMessage::~NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.cc	/^NotifyMessage::~NotifyMessage() {$/;"	f	class:sylar::ns::NotifyMessage	signature:()
sylar::ns::NotifyMessageDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct NotifyMessageDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
sylar::ns::NotifyMessageDefaultTypeInternal::NotifyMessageDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr NotifyMessageDefaultTypeInternal()$/;"	f	struct:sylar::ns::NotifyMessageDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::NotifyMessageDefaultTypeInternal::__anonee26512e070a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::NotifyMessageDefaultTypeInternal	file:	access:public
sylar::ns::NotifyMessageDefaultTypeInternal::__anonee26512e070a::_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    NotifyMessage _instance;$/;"	m	union:sylar::ns::NotifyMessageDefaultTypeInternal::__anonee26512e070a	typeref:typename:NotifyMessage	file:	access:public
sylar::ns::NotifyMessageDefaultTypeInternal::~NotifyMessageDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~NotifyMessageDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::NotifyMessageDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::QUERY	sylar/sylar/ns/ns_protocol.h	/^    QUERY           = 0x10002,$/;"	e	enum:sylar::ns::NSCommand	access:public
sylar::ns::QUERY_BLACKLIST	sylar/sylar/ns/ns_protocol.h	/^    QUERY_BLACKLIST = 0x10004,$/;"	e	enum:sylar::ns::NSCommand	access:public
sylar::ns::QueryRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^class QueryRequest final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
sylar::ns::QueryRequest::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(void * object)
sylar::ns::QueryRequest::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:(void * object)
sylar::ns::QueryRequest::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t QueryRequest::ByteSizeLong() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:size_t	signature:() const
sylar::ns::QueryRequest::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:size_t	access:public	signature:() const
sylar::ns::QueryRequest::Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::Clear() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:()
sylar::ns::QueryRequest::Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
sylar::ns::QueryRequest::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::CopyFrom(const QueryRequest& from) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(const QueryRequest & from)
sylar::ns::QueryRequest::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const QueryRequest& from);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(const QueryRequest & from)
sylar::ns::QueryRequest::DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::QueryRequest	typeref:typename:void	access:private
sylar::ns::QueryRequest::FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
sylar::ns::QueryRequest::GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:int	access:public	signature:() const
sylar::ns::QueryRequest::GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryRequest::GetClassData() const { return &_/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
sylar::ns::QueryRequest::GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
sylar::ns::QueryRequest::GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::QueryRequest::GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata QueryRequest::GetMetadata() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
sylar::ns::QueryRequest::GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
sylar::ns::QueryRequest::InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::QueryRequest	typeref:typename:void	access:private
sylar::ns::QueryRequest::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::InternalSwap(QueryRequest* other) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(QueryRequest * other)
sylar::ns::QueryRequest::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(QueryRequest* other);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:(QueryRequest * other)
sylar::ns::QueryRequest::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool QueryRequest::IsInitialized() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:bool	signature:() const
sylar::ns::QueryRequest::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:bool	access:public	signature:() const
sylar::ns::QueryRequest::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::MergeFrom(const QueryRequest& from) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(const QueryRequest & from)
sylar::ns::QueryRequest::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const QueryRequest& from);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(const QueryRequest & from)
sylar::ns::QueryRequest::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::QueryRequest::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::QueryRequest::New	sylar/sylar/ns/ns_protobuf.pb.h	/^  QueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:QueryRequest *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
sylar::ns::QueryRequest::QueryRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^QueryRequest::QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::QueryRequest	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
sylar::ns::QueryRequest::QueryRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^QueryRequest::QueryRequest(const QueryRequest& from)$/;"	f	class:sylar::ns::QueryRequest	signature:(const QueryRequest & from)
sylar::ns::QueryRequest::QueryRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr QueryRequest::QueryRequest($/;"	f	class:sylar::ns::QueryRequest	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::QueryRequest::QueryRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  QueryRequest(QueryRequest&& from) noexcept$/;"	f	class:sylar::ns::QueryRequest	access:public	signature:(QueryRequest && from)
sylar::ns::QueryRequest::QueryRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  QueryRequest(const QueryRequest& from);$/;"	p	class:sylar::ns::QueryRequest	access:public	signature:(const QueryRequest & from)
sylar::ns::QueryRequest::QueryRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::QueryRequest	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
sylar::ns::QueryRequest::QueryRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr QueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::QueryRequest	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::QueryRequest::QueryRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline QueryRequest() : QueryRequest(nullptr) {}$/;"	f	class:sylar::ns::QueryRequest	access:public	signature:()
sylar::ns::QueryRequest::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
sylar::ns::QueryRequest::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
sylar::ns::QueryRequest::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryRequest::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(int size) const
sylar::ns::QueryRequest::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:(int size) const
sylar::ns::QueryRequest::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void QueryRequest::SharedCtor() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:()
sylar::ns::QueryRequest::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:()
sylar::ns::QueryRequest::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void QueryRequest::SharedDtor() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:()
sylar::ns::QueryRequest::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:private	signature:()
sylar::ns::QueryRequest::Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(QueryRequest* other) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(QueryRequest * other)
sylar::ns::QueryRequest::UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(QueryRequest* other) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(QueryRequest * other)
sylar::ns::QueryRequest::_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class QueryRequest::_Internal {$/;"	c	class:sylar::ns::QueryRequest	file:
sylar::ns::QueryRequest::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* QueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::Par/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::QueryRequest::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::QueryRequest	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::QueryRequest::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* QueryRequest::_InternalSerialize($/;"	f	class:sylar::ns::QueryRequest	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::QueryRequest::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::QueryRequest	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::QueryRequest::__anond0e9e3700403	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::QueryRequest	typeref:typename:int	access:public
sylar::ns::QueryRequest::_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryRequest::_class_data_ = {$/;"	m	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
sylar::ns::QueryRequest::_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::QueryRequest	typeref:typename:const ClassData	access:public
sylar::ns::QueryRequest::_internal_add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* _internal_add_domains();$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:std::string *	access:private	signature:()
sylar::ns::QueryRequest::_internal_add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* QueryRequest::_internal_add_domains() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:std::string *	signature:()
sylar::ns::QueryRequest::_internal_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& _internal_domains(int index) const;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:const std::string &	access:private	signature:(int index) const
sylar::ns::QueryRequest::_internal_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& QueryRequest::_internal_domains(int index) const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const std::string &	signature:(int index) const
sylar::ns::QueryRequest::_internal_domains_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_domains_size() const;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:int	access:private	signature:() const
sylar::ns::QueryRequest::_internal_domains_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int QueryRequest::_internal_domains_size() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:int	signature:() const
sylar::ns::QueryRequest::add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* add_domains();$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:std::string *	access:public	signature:()
sylar::ns::QueryRequest::add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void add_domains(const char* value);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(const char * value)
sylar::ns::QueryRequest::add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void add_domains(const char* value, size_t size);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(const char * value,size_t size)
sylar::ns::QueryRequest::add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void add_domains(const std::string& value);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(const std::string & value)
sylar::ns::QueryRequest::add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void add_domains(std::string&& value);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(std::string && value)
sylar::ns::QueryRequest::add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* QueryRequest::add_domains() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:std::string *	signature:()
sylar::ns::QueryRequest::add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::add_domains(const char* value) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(const char * value)
sylar::ns::QueryRequest::add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::add_domains(const char* value, size_t size) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(const char * value,size_t size)
sylar::ns::QueryRequest::add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::add_domains(const std::string& value) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(const std::string & value)
sylar::ns::QueryRequest::add_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::add_domains(std::string&& value) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(std::string && value)
sylar::ns::QueryRequest::clear_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_domains();$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:()
sylar::ns::QueryRequest::clear_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::clear_domains() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:()
sylar::ns::QueryRequest::default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const QueryRequest& default_instance() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const QueryRequest &	access:public	signature:()
sylar::ns::QueryRequest::descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::QueryRequest::domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& domains() const;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &	access:public	signature:() const
sylar::ns::QueryRequest::domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& domains(int index) const;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:const std::string &	access:public	signature:(int index) const
sylar::ns::QueryRequest::domains	sylar/sylar/ns/ns_protobuf.pb.h	/^QueryRequest::domains() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &	signature:() const
sylar::ns::QueryRequest::domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& QueryRequest::domains(int index) const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const std::string &	signature:(int index) const
sylar::ns::QueryRequest::domains_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int domains_size() const;$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:int	access:public	signature:() const
sylar::ns::QueryRequest::domains_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int QueryRequest::domains_size() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:int	signature:() const
sylar::ns::QueryRequest::internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const QueryRequest* internal_default_instance() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const QueryRequest *	access:public	signature:()
sylar::ns::QueryRequest::kDomainsFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kDomainsFieldNumber = 1,$/;"	e	enum:sylar::ns::QueryRequest::__anond0e9e3700403	access:public
sylar::ns::QueryRequest::kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::QueryRequest	typeref:typename:int	access:public
sylar::ns::QueryRequest::mutable_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* mutable_domains(int index);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:std::string *	access:public	signature:(int index)
sylar::ns::QueryRequest::mutable_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^QueryRequest::mutable_domains() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> *	signature:()
sylar::ns::QueryRequest::mutable_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* QueryRequest::mutable_domains(int index) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:std::string *	signature:(int index)
sylar::ns::QueryRequest::mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
sylar::ns::QueryRequest::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline QueryRequest& operator=(QueryRequest&& from) noexcept {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:QueryRequest &	access:public	signature:(QueryRequest && from)
sylar::ns::QueryRequest::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline QueryRequest& operator=(const QueryRequest& from) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:QueryRequest &	access:public	signature:(const QueryRequest & from)
sylar::ns::QueryRequest::set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_domains(int index, const char* value);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(int index,const char * value)
sylar::ns::QueryRequest::set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_domains(int index, const char* value, size_t size);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(int index,const char * value,size_t size)
sylar::ns::QueryRequest::set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_domains(int index, const std::string& value);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(int index,const std::string & value)
sylar::ns::QueryRequest::set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_domains(int index, std::string&& value);$/;"	p	class:sylar::ns::QueryRequest	typeref:typename:void	access:public	signature:(int index,std::string && value)
sylar::ns::QueryRequest::set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::set_domains(int index, const char* value) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(int index,const char * value)
sylar::ns::QueryRequest::set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::set_domains(int index, const char* value, size_t size) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(int index,const char * value,size_t size)
sylar::ns::QueryRequest::set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::set_domains(int index, const std::string& value) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(int index,const std::string & value)
sylar::ns::QueryRequest::set_domains	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryRequest::set_domains(int index, std::string&& value) {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:void	signature:(int index,std::string && value)
sylar::ns::QueryRequest::unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
sylar::ns::QueryRequest::~QueryRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^QueryRequest::~QueryRequest() {$/;"	f	class:sylar::ns::QueryRequest	signature:()
sylar::ns::QueryRequestDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct QueryRequestDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
sylar::ns::QueryRequestDefaultTypeInternal::QueryRequestDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr QueryRequestDefaultTypeInternal()$/;"	f	struct:sylar::ns::QueryRequestDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::QueryRequestDefaultTypeInternal::__anonee26512e040a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::QueryRequestDefaultTypeInternal	file:	access:public
sylar::ns::QueryRequestDefaultTypeInternal::__anonee26512e040a::_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    QueryRequest _instance;$/;"	m	union:sylar::ns::QueryRequestDefaultTypeInternal::__anonee26512e040a	typeref:typename:QueryRequest	file:	access:public
sylar::ns::QueryRequestDefaultTypeInternal::~QueryRequestDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~QueryRequestDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::QueryRequestDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::QueryResponse	sylar/sylar/ns/ns_protobuf.pb.h	/^class QueryResponse final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
sylar::ns::QueryResponse::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(void * object)
sylar::ns::QueryResponse::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:(void * object)
sylar::ns::QueryResponse::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t QueryResponse::ByteSizeLong() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:size_t	signature:() const
sylar::ns::QueryResponse::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:size_t	access:public	signature:() const
sylar::ns::QueryResponse::Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::Clear() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:()
sylar::ns::QueryResponse::Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
sylar::ns::QueryResponse::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::CopyFrom(const QueryResponse& from) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(const QueryResponse & from)
sylar::ns::QueryResponse::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const QueryResponse& from);$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:public	signature:(const QueryResponse & from)
sylar::ns::QueryResponse::DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::QueryResponse	typeref:typename:void	access:private
sylar::ns::QueryResponse::FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
sylar::ns::QueryResponse::GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:int	access:public	signature:() const
sylar::ns::QueryResponse::GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryResponse::GetClassData() const { return &/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
sylar::ns::QueryResponse::GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
sylar::ns::QueryResponse::GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::QueryResponse::GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata QueryResponse::GetMetadata() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
sylar::ns::QueryResponse::GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
sylar::ns::QueryResponse::InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::QueryResponse	typeref:typename:void	access:private
sylar::ns::QueryResponse::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::InternalSwap(QueryResponse* other) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(QueryResponse * other)
sylar::ns::QueryResponse::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(QueryResponse* other);$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:(QueryResponse * other)
sylar::ns::QueryResponse::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool QueryResponse::IsInitialized() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:bool	signature:() const
sylar::ns::QueryResponse::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:bool	access:public	signature:() const
sylar::ns::QueryResponse::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::MergeFrom(const QueryResponse& from) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(const QueryResponse & from)
sylar::ns::QueryResponse::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const QueryResponse& from);$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:public	signature:(const QueryResponse & from)
sylar::ns::QueryResponse::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::QueryResponse::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::QueryResponse::New	sylar/sylar/ns/ns_protobuf.pb.h	/^  QueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:QueryResponse *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
sylar::ns::QueryResponse::QueryResponse	sylar/sylar/ns/ns_protobuf.pb.cc	/^QueryResponse::QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::QueryResponse	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
sylar::ns::QueryResponse::QueryResponse	sylar/sylar/ns/ns_protobuf.pb.cc	/^QueryResponse::QueryResponse(const QueryResponse& from)$/;"	f	class:sylar::ns::QueryResponse	signature:(const QueryResponse & from)
sylar::ns::QueryResponse::QueryResponse	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr QueryResponse::QueryResponse($/;"	f	class:sylar::ns::QueryResponse	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::QueryResponse::QueryResponse	sylar/sylar/ns/ns_protobuf.pb.h	/^  QueryResponse(QueryResponse&& from) noexcept$/;"	f	class:sylar::ns::QueryResponse	access:public	signature:(QueryResponse && from)
sylar::ns::QueryResponse::QueryResponse	sylar/sylar/ns/ns_protobuf.pb.h	/^  QueryResponse(const QueryResponse& from);$/;"	p	class:sylar::ns::QueryResponse	access:public	signature:(const QueryResponse & from)
sylar::ns::QueryResponse::QueryResponse	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::QueryResponse	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
sylar::ns::QueryResponse::QueryResponse	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr QueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::QueryResponse	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::QueryResponse::QueryResponse	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline QueryResponse() : QueryResponse(nullptr) {}$/;"	f	class:sylar::ns::QueryResponse	access:public	signature:()
sylar::ns::QueryResponse::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
sylar::ns::QueryResponse::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
sylar::ns::QueryResponse::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void QueryResponse::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:(int size) const
sylar::ns::QueryResponse::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:(int size) const
sylar::ns::QueryResponse::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void QueryResponse::SharedCtor() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:()
sylar::ns::QueryResponse::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:()
sylar::ns::QueryResponse::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void QueryResponse::SharedDtor() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:()
sylar::ns::QueryResponse::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:private	signature:()
sylar::ns::QueryResponse::Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(QueryResponse* other) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	access:public	signature:(QueryResponse * other)
sylar::ns::QueryResponse::UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(QueryResponse* other) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	access:public	signature:(QueryResponse * other)
sylar::ns::QueryResponse::_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class QueryResponse::_Internal {$/;"	c	class:sylar::ns::QueryResponse	file:
sylar::ns::QueryResponse::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* QueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::Pa/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::QueryResponse::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::QueryResponse	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::QueryResponse::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* QueryResponse::_InternalSerialize($/;"	f	class:sylar::ns::QueryResponse	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::QueryResponse::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::QueryResponse	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::QueryResponse::__anond0e9e3700603	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::QueryResponse	typeref:typename:int	access:public
sylar::ns::QueryResponse::_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryResponse::_class_data_ = {$/;"	m	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
sylar::ns::QueryResponse::_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::QueryResponse	typeref:typename:const ClassData	access:public
sylar::ns::QueryResponse::_internal_add_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* QueryResponse::_internal_add_infos() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::sylar::ns::NodeInfo *	signature:()
sylar::ns::QueryResponse::_internal_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::NodeInfo& _internal_infos(int index) const;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:const::sylar::ns::NodeInfo &	access:private	signature:(int index) const
sylar::ns::QueryResponse::_internal_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::NodeInfo& QueryResponse::_internal_infos(int index) const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::sylar::ns::NodeInfo &	signature:(int index) const
sylar::ns::QueryResponse::_internal_infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_infos_size() const;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:int	access:private	signature:() const
sylar::ns::QueryResponse::_internal_infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int QueryResponse::_internal_infos_size() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:int	signature:() const
sylar::ns::QueryResponse::add_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* QueryResponse::add_infos() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::sylar::ns::NodeInfo *	signature:()
sylar::ns::QueryResponse::clear_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_infos();$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:void	access:public	signature:()
sylar::ns::QueryResponse::clear_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void QueryResponse::clear_infos() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:void	signature:()
sylar::ns::QueryResponse::default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const QueryResponse& default_instance() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const QueryResponse &	access:public	signature:()
sylar::ns::QueryResponse::descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::QueryResponse::infos	sylar/sylar/ns/ns_protobuf.pb.h	/^      infos() const;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> &	access:public	signature:() const
sylar::ns::QueryResponse::infos	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::NodeInfo& infos(int index) const;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:const::sylar::ns::NodeInfo &	access:public	signature:(int index) const
sylar::ns::QueryResponse::infos	sylar/sylar/ns/ns_protobuf.pb.h	/^QueryResponse::infos() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> &	signature:() const
sylar::ns::QueryResponse::infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::NodeInfo& QueryResponse::infos(int index) const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::sylar::ns::NodeInfo &	signature:(int index) const
sylar::ns::QueryResponse::infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int infos_size() const;$/;"	p	class:sylar::ns::QueryResponse	typeref:typename:int	access:public	signature:() const
sylar::ns::QueryResponse::infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int QueryResponse::infos_size() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:int	signature:() const
sylar::ns::QueryResponse::internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const QueryResponse* internal_default_instance() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const QueryResponse *	access:public	signature:()
sylar::ns::QueryResponse::kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::QueryResponse	typeref:typename:int	access:public
sylar::ns::QueryResponse::kInfosFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kInfosFieldNumber = 1,$/;"	e	enum:sylar::ns::QueryResponse::__anond0e9e3700603	access:public
sylar::ns::QueryResponse::mutable_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^QueryResponse::mutable_infos() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> *	signature:()
sylar::ns::QueryResponse::mutable_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::NodeInfo* QueryResponse::mutable_infos(int index) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::sylar::ns::NodeInfo *	signature:(int index)
sylar::ns::QueryResponse::mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
sylar::ns::QueryResponse::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline QueryResponse& operator=(QueryResponse&& from) noexcept {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:QueryResponse &	access:public	signature:(QueryResponse && from)
sylar::ns::QueryResponse::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline QueryResponse& operator=(const QueryResponse& from) {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:QueryResponse &	access:public	signature:(const QueryResponse & from)
sylar::ns::QueryResponse::unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
sylar::ns::QueryResponse::~QueryResponse	sylar/sylar/ns/ns_protobuf.pb.cc	/^QueryResponse::~QueryResponse() {$/;"	f	class:sylar::ns::QueryResponse	signature:()
sylar::ns::QueryResponseDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct QueryResponseDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
sylar::ns::QueryResponseDefaultTypeInternal::QueryResponseDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr QueryResponseDefaultTypeInternal()$/;"	f	struct:sylar::ns::QueryResponseDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::QueryResponseDefaultTypeInternal::__anonee26512e060a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::QueryResponseDefaultTypeInternal	file:	access:public
sylar::ns::QueryResponseDefaultTypeInternal::__anonee26512e060a::_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    QueryResponse _instance;$/;"	m	union:sylar::ns::QueryResponseDefaultTypeInternal::__anonee26512e060a	typeref:typename:QueryResponse	file:	access:public
sylar::ns::QueryResponseDefaultTypeInternal::~QueryResponseDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~QueryResponseDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::QueryResponseDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::REGISTER	sylar/sylar/ns/ns_protocol.h	/^    REGISTER        = 0x10001,$/;"	e	enum:sylar::ns::NSCommand	access:public
sylar::ns::RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^class RegisterInfo final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
sylar::ns::RegisterInfo::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(void * object)
sylar::ns::RegisterInfo::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:(void * object)
sylar::ns::RegisterInfo::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t RegisterInfo::ByteSizeLong() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:size_t	signature:() const
sylar::ns::RegisterInfo::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:size_t	access:public	signature:() const
sylar::ns::RegisterInfo::Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::Clear() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:()
sylar::ns::RegisterInfo::Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
sylar::ns::RegisterInfo::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::CopyFrom(const RegisterInfo& from) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(const RegisterInfo & from)
sylar::ns::RegisterInfo::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const RegisterInfo& from);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(const RegisterInfo & from)
sylar::ns::RegisterInfo::DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private
sylar::ns::RegisterInfo::FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
sylar::ns::RegisterInfo::GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:int	access:public	signature:() const
sylar::ns::RegisterInfo::GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterInfo::GetClassData() const { return &_/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
sylar::ns::RegisterInfo::GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
sylar::ns::RegisterInfo::GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::RegisterInfo::GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata RegisterInfo::GetMetadata() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
sylar::ns::RegisterInfo::GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
sylar::ns::RegisterInfo::InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private
sylar::ns::RegisterInfo::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::InternalSwap(RegisterInfo* other) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(RegisterInfo * other)
sylar::ns::RegisterInfo::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(RegisterInfo* other);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:(RegisterInfo * other)
sylar::ns::RegisterInfo::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool RegisterInfo::IsInitialized() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:bool	signature:() const
sylar::ns::RegisterInfo::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:bool	access:public	signature:() const
sylar::ns::RegisterInfo::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::MergeFrom(const RegisterInfo& from) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(const RegisterInfo & from)
sylar::ns::RegisterInfo::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const RegisterInfo& from);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(const RegisterInfo & from)
sylar::ns::RegisterInfo::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::RegisterInfo::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::RegisterInfo::New	sylar/sylar/ns/ns_protobuf.pb.h	/^  RegisterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:RegisterInfo *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
sylar::ns::RegisterInfo::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
sylar::ns::RegisterInfo::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
sylar::ns::RegisterInfo::RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterInfo::RegisterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::RegisterInfo	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
sylar::ns::RegisterInfo::RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterInfo::RegisterInfo(const RegisterInfo& from)$/;"	f	class:sylar::ns::RegisterInfo	signature:(const RegisterInfo & from)
sylar::ns::RegisterInfo::RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr RegisterInfo::RegisterInfo($/;"	f	class:sylar::ns::RegisterInfo	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::RegisterInfo::RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  RegisterInfo(RegisterInfo&& from) noexcept$/;"	f	class:sylar::ns::RegisterInfo	access:public	signature:(RegisterInfo && from)
sylar::ns::RegisterInfo::RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  RegisterInfo(const RegisterInfo& from);$/;"	p	class:sylar::ns::RegisterInfo	access:public	signature:(const RegisterInfo & from)
sylar::ns::RegisterInfo::RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit RegisterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::RegisterInfo	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
sylar::ns::RegisterInfo::RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr RegisterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::RegisterInfo	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::RegisterInfo::RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline RegisterInfo() : RegisterInfo(nullptr) {}$/;"	f	class:sylar::ns::RegisterInfo	access:public	signature:()
sylar::ns::RegisterInfo::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterInfo::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(int size) const
sylar::ns::RegisterInfo::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:(int size) const
sylar::ns::RegisterInfo::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void RegisterInfo::SharedCtor() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:()
sylar::ns::RegisterInfo::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:()
sylar::ns::RegisterInfo::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void RegisterInfo::SharedDtor() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:()
sylar::ns::RegisterInfo::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:()
sylar::ns::RegisterInfo::Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(RegisterInfo* other) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(RegisterInfo * other)
sylar::ns::RegisterInfo::UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(RegisterInfo* other) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(RegisterInfo * other)
sylar::ns::RegisterInfo::_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class RegisterInfo::_Internal {$/;"	c	class:sylar::ns::RegisterInfo	file:
sylar::ns::RegisterInfo::_Internal::HasBits	sylar/sylar/ns/ns_protobuf.pb.cc	/^  using HasBits = decltype(std::declval<RegisterInfo>()._has_bits_);$/;"	t	class:sylar::ns::RegisterInfo::_Internal	file:	access:public
sylar::ns::RegisterInfo::_Internal::node	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static const ::sylar::ns::Node& node(const RegisterInfo* msg);$/;"	p	class:sylar::ns::RegisterInfo::_Internal	typeref:typename:const::sylar::ns::Node &	file:	access:public	signature:(const RegisterInfo * msg)
sylar::ns::RegisterInfo::_Internal::node	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterInfo::_Internal::node(const RegisterInfo* msg) {$/;"	f	class:sylar::ns::RegisterInfo::_Internal	typeref:typename:const::sylar::ns::Node &	signature:(const RegisterInfo * msg)
sylar::ns::RegisterInfo::_Internal::set_has_domain	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_domain(HasBits* has_bits) {$/;"	f	class:sylar::ns::RegisterInfo::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
sylar::ns::RegisterInfo::_Internal::set_has_node	sylar/sylar/ns/ns_protobuf.pb.cc	/^  static void set_has_node(HasBits* has_bits) {$/;"	f	class:sylar::ns::RegisterInfo::_Internal	typeref:typename:void	file:	access:public	signature:(HasBits * has_bits)
sylar::ns::RegisterInfo::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* RegisterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::Par/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::RegisterInfo::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::RegisterInfo::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* RegisterInfo::_InternalSerialize($/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::RegisterInfo::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::RegisterInfo::__anond0e9e3700203	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::RegisterInfo	typeref:typename:int	access:public
sylar::ns::RegisterInfo::_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterInfo::_class_data_ = {$/;"	m	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
sylar::ns::RegisterInfo::_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::RegisterInfo	typeref:typename:const ClassData	access:public
sylar::ns::RegisterInfo::_internal_add_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^  void _internal_add_cmds(uint32_t value);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:private	signature:(uint32_t value)
sylar::ns::RegisterInfo::_internal_add_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::_internal_add_cmds(uint32_t value) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(uint32_t value)
sylar::ns::RegisterInfo::_internal_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^      _internal_cmds() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedField<uint32_t> &	access:private	signature:() const
sylar::ns::RegisterInfo::_internal_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t _internal_cmds(int index) const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:uint32_t	access:private	signature:(int index) const
sylar::ns::RegisterInfo::_internal_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^RegisterInfo::_internal_cmds() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedField<uint32_t> &	signature:() const
sylar::ns::RegisterInfo::_internal_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t RegisterInfo::_internal_cmds(int index) const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:uint32_t	signature:(int index) const
sylar::ns::RegisterInfo::_internal_cmds_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_cmds_size() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:int	access:private	signature:() const
sylar::ns::RegisterInfo::_internal_cmds_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int RegisterInfo::_internal_cmds_size() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:int	signature:() const
sylar::ns::RegisterInfo::_internal_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& _internal_domain() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const std::string &	access:private	signature:() const
sylar::ns::RegisterInfo::_internal_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& RegisterInfo::_internal_domain() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const std::string &	signature:() const
sylar::ns::RegisterInfo::_internal_has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_domain() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:bool	access:private	signature:() const
sylar::ns::RegisterInfo::_internal_has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool RegisterInfo::_internal_has_domain() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:bool	signature:() const
sylar::ns::RegisterInfo::_internal_has_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool _internal_has_node() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:bool	access:private	signature:() const
sylar::ns::RegisterInfo::_internal_has_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool RegisterInfo::_internal_has_node() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:bool	signature:() const
sylar::ns::RegisterInfo::_internal_mutable_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^RegisterInfo::_internal_mutable_cmds() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedField<uint32_t> *	signature:()
sylar::ns::RegisterInfo::_internal_mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* _internal_mutable_domain();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:std::string *	access:private	signature:()
sylar::ns::RegisterInfo::_internal_mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* RegisterInfo::_internal_mutable_domain() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:std::string *	signature:()
sylar::ns::RegisterInfo::_internal_mutable_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* RegisterInfo::_internal_mutable_node() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::sylar::ns::Node *	signature:()
sylar::ns::RegisterInfo::_internal_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::Node& _internal_node() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const::sylar::ns::Node &	access:private	signature:() const
sylar::ns::RegisterInfo::_internal_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::Node& RegisterInfo::_internal_node() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::sylar::ns::Node &	signature:() const
sylar::ns::RegisterInfo::_internal_set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:PROTOBUF_ALWAYS_INLINE void	access:private	signature:(const std::string & value)
sylar::ns::RegisterInfo::_internal_set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::_internal_set_domain(const std::string& value) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(const std::string & value)
sylar::ns::RegisterInfo::add_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^  void add_cmds(uint32_t value);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(uint32_t value)
sylar::ns::RegisterInfo::add_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::add_cmds(uint32_t value) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(uint32_t value)
sylar::ns::RegisterInfo::clear_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_cmds();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:()
sylar::ns::RegisterInfo::clear_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::clear_cmds() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:()
sylar::ns::RegisterInfo::clear_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_domain();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:()
sylar::ns::RegisterInfo::clear_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::clear_domain() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:()
sylar::ns::RegisterInfo::clear_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_node();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:()
sylar::ns::RegisterInfo::clear_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::clear_node() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:()
sylar::ns::RegisterInfo::cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^      cmds() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedField<uint32_t> &	access:public	signature:() const
sylar::ns::RegisterInfo::cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t cmds(int index) const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:uint32_t	access:public	signature:(int index) const
sylar::ns::RegisterInfo::cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^RegisterInfo::cmds() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedField<uint32_t> &	signature:() const
sylar::ns::RegisterInfo::cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t RegisterInfo::cmds(int index) const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:uint32_t	signature:(int index) const
sylar::ns::RegisterInfo::cmds_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int cmds_size() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:int	access:public	signature:() const
sylar::ns::RegisterInfo::cmds_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int RegisterInfo::cmds_size() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:int	signature:() const
sylar::ns::RegisterInfo::default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const RegisterInfo& default_instance() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const RegisterInfo &	access:public	signature:()
sylar::ns::RegisterInfo::descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::RegisterInfo::domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  const std::string& domain() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const std::string &	access:public	signature:() const
sylar::ns::RegisterInfo::domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const std::string& RegisterInfo::domain() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const std::string &	signature:() const
sylar::ns::RegisterInfo::has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_domain() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:bool	access:public	signature:() const
sylar::ns::RegisterInfo::has_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool RegisterInfo::has_domain() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:bool	signature:() const
sylar::ns::RegisterInfo::has_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool has_node() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:bool	access:public	signature:() const
sylar::ns::RegisterInfo::has_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline bool RegisterInfo::has_node() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:bool	signature:() const
sylar::ns::RegisterInfo::internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const RegisterInfo* internal_default_instance() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const RegisterInfo *	access:public	signature:()
sylar::ns::RegisterInfo::kCmdsFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kCmdsFieldNumber = 2,$/;"	e	enum:sylar::ns::RegisterInfo::__anond0e9e3700203	access:public
sylar::ns::RegisterInfo::kDomainFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kDomainFieldNumber = 1,$/;"	e	enum:sylar::ns::RegisterInfo::__anond0e9e3700203	access:public
sylar::ns::RegisterInfo::kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::RegisterInfo	typeref:typename:int	access:public
sylar::ns::RegisterInfo::kNodeFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kNodeFieldNumber = 3,$/;"	e	enum:sylar::ns::RegisterInfo::__anond0e9e3700203	access:public
sylar::ns::RegisterInfo::mutable_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^RegisterInfo::mutable_cmds() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedField<uint32_t> *	signature:()
sylar::ns::RegisterInfo::mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  std::string* mutable_domain();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:std::string *	access:public	signature:()
sylar::ns::RegisterInfo::mutable_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* RegisterInfo::mutable_domain() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:std::string *	signature:()
sylar::ns::RegisterInfo::mutable_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* RegisterInfo::mutable_node() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::sylar::ns::Node *	signature:()
sylar::ns::RegisterInfo::mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
sylar::ns::RegisterInfo::node	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::Node& node() const;$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:const::sylar::ns::Node &	access:public	signature:() const
sylar::ns::RegisterInfo::node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::Node& RegisterInfo::node() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::sylar::ns::Node &	signature:() const
sylar::ns::RegisterInfo::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline RegisterInfo& operator=(RegisterInfo&& from) noexcept {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:RegisterInfo &	access:public	signature:(RegisterInfo && from)
sylar::ns::RegisterInfo::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline RegisterInfo& operator=(const RegisterInfo& from) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:RegisterInfo &	access:public	signature:(const RegisterInfo & from)
sylar::ns::RegisterInfo::release_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_NODISCARD std::string* release_domain();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:PROTOBUF_NODISCARD std::string *	access:public	signature:()
sylar::ns::RegisterInfo::release_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline std::string* RegisterInfo::release_domain() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:std::string *	signature:()
sylar::ns::RegisterInfo::release_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_NODISCARD ::sylar::ns::Node* release_node();$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:PROTOBUF_NODISCARD::sylar::ns::Node *	access:public	signature:()
sylar::ns::RegisterInfo::release_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* RegisterInfo::release_node() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::sylar::ns::Node *	signature:()
sylar::ns::RegisterInfo::set_allocated_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_allocated_domain(std::string* domain);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(std::string * domain)
sylar::ns::RegisterInfo::set_allocated_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::set_allocated_domain(std::string* domain) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(std::string * domain)
sylar::ns::RegisterInfo::set_allocated_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_allocated_node(::sylar::ns::Node* node);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(::sylar::ns::Node * node)
sylar::ns::RegisterInfo::set_allocated_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::set_allocated_node(::sylar::ns::Node* node) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(::sylar::ns::Node * node)
sylar::ns::RegisterInfo::set_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_cmds(int index, uint32_t value);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(int index,uint32_t value)
sylar::ns::RegisterInfo::set_cmds	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::set_cmds(int index, uint32_t value) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(int index,uint32_t value)
sylar::ns::RegisterInfo::set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^  void set_domain(ArgT0&& arg0, ArgT... args);$/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(ArgT0 && arg0,ArgT...args)
sylar::ns::RegisterInfo::set_domain	sylar/sylar/ns/ns_protobuf.pb.h	/^void RegisterInfo::set_domain(ArgT0&& arg0, ArgT... args) {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:PROTOBUF_ALWAYS_INLINE void	signature:(ArgT0 && arg0,ArgT...args)
sylar::ns::RegisterInfo::unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
sylar::ns::RegisterInfo::unsafe_arena_release_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* RegisterInfo::unsafe_arena_release_node() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::sylar::ns::Node *	signature:()
sylar::ns::RegisterInfo::unsafe_arena_set_allocated_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  void unsafe_arena_set_allocated_node($/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(::sylar::ns::Node * node)
sylar::ns::RegisterInfo::unsafe_arena_set_allocated_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::unsafe_arena_set_allocated_node($/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(::sylar::ns::Node * node)
sylar::ns::RegisterInfo::~RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterInfo::~RegisterInfo() {$/;"	f	class:sylar::ns::RegisterInfo	signature:()
sylar::ns::RegisterInfoDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct RegisterInfoDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
sylar::ns::RegisterInfoDefaultTypeInternal::RegisterInfoDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr RegisterInfoDefaultTypeInternal()$/;"	f	struct:sylar::ns::RegisterInfoDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::RegisterInfoDefaultTypeInternal::__anonee26512e020a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::RegisterInfoDefaultTypeInternal	file:	access:public
sylar::ns::RegisterInfoDefaultTypeInternal::__anonee26512e020a::_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    RegisterInfo _instance;$/;"	m	union:sylar::ns::RegisterInfoDefaultTypeInternal::__anonee26512e020a	typeref:typename:RegisterInfo	file:	access:public
sylar::ns::RegisterInfoDefaultTypeInternal::~RegisterInfoDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~RegisterInfoDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::RegisterInfoDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^class RegisterRequest final :$/;"	c	namespace:sylar::ns	inherits:::PROTOBUF_NAMESPACE_ID::Message
sylar::ns::RegisterRequest::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::ArenaDtor(void* object) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(void * object)
sylar::ns::RegisterRequest::ArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void ArenaDtor(void* object);$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:(void * object)
sylar::ns::RegisterRequest::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.cc	/^size_t RegisterRequest::ByteSizeLong() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:size_t	signature:() const
sylar::ns::RegisterRequest::ByteSizeLong	sylar/sylar/ns/ns_protobuf.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:size_t	access:public	signature:() const
sylar::ns::RegisterRequest::Clear	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::Clear() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:()
sylar::ns::RegisterRequest::Clear	sylar/sylar/ns/ns_protobuf.pb.h	/^  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:PROTOBUF_ATTRIBUTE_REINITIALIZES void	access:public	signature:()
sylar::ns::RegisterRequest::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::CopyFrom(const RegisterRequest& from) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(const RegisterRequest & from)
sylar::ns::RegisterRequest::CopyFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void CopyFrom(const RegisterRequest& from);$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:public	signature:(const RegisterRequest & from)
sylar::ns::RegisterRequest::DestructorSkippable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void DestructorSkippable_;$/;"	t	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private
sylar::ns::RegisterRequest::FullMessageName	sylar/sylar/ns/ns_protobuf.pb.h	/^  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::StringPiece	access:private	signature:()
sylar::ns::RegisterRequest::GetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:int	access:public	signature:() const
sylar::ns::RegisterRequest::GetClassData	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterRequest::GetClassData() const { return/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	signature:() const
sylar::ns::RegisterRequest::GetClassData	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData *	access:public	signature:() const
sylar::ns::RegisterRequest::GetDescriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::RegisterRequest::GetMetadata	sylar/sylar/ns/ns_protobuf.pb.cc	/^::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::Metadata	signature:() const
sylar::ns::RegisterRequest::GetReflection	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Reflection *	access:public	signature:()
sylar::ns::RegisterRequest::InternalArenaConstructable_	sylar/sylar/ns/ns_protobuf.pb.h	/^  typedef void InternalArenaConstructable_;$/;"	t	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private
sylar::ns::RegisterRequest::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::InternalSwap(RegisterRequest* other) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(RegisterRequest * other)
sylar::ns::RegisterRequest::InternalSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void InternalSwap(RegisterRequest* other);$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:(RegisterRequest * other)
sylar::ns::RegisterRequest::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.cc	/^bool RegisterRequest::IsInitialized() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:bool	signature:() const
sylar::ns::RegisterRequest::IsInitialized	sylar/sylar/ns/ns_protobuf.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:bool	access:public	signature:() const
sylar::ns::RegisterRequest::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::MergeFrom(const RegisterRequest& from) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(const RegisterRequest & from)
sylar::ns::RegisterRequest::MergeFrom	sylar/sylar/ns/ns_protobuf.pb.h	/^  void MergeFrom(const RegisterRequest& from);$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:public	signature:(const RegisterRequest & from)
sylar::ns::RegisterRequest::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::RegisterRequest::MergeImpl	sylar/sylar/ns/ns_protobuf.pb.h	/^  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Mes/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Message * to,const::PROTOBUF_NAMESPACE_ID::Message & from)
sylar::ns::RegisterRequest::New	sylar/sylar/ns/ns_protobuf.pb.h	/^  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:RegisterRequest *	access:public	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena=nullptr) const
sylar::ns::RegisterRequest::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(::PROTOBUF_NAMESPACE_ID::Arena *)
sylar::ns::RegisterRequest::RegisterArenaDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena)
sylar::ns::RegisterRequest::RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	f	class:sylar::ns::RegisterRequest	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned)
sylar::ns::RegisterRequest::RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterRequest::RegisterRequest(const RegisterRequest& from)$/;"	f	class:sylar::ns::RegisterRequest	signature:(const RegisterRequest & from)
sylar::ns::RegisterRequest::RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^constexpr RegisterRequest::RegisterRequest($/;"	f	class:sylar::ns::RegisterRequest	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::RegisterRequest::RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  RegisterRequest(RegisterRequest&& from) noexcept$/;"	f	class:sylar::ns::RegisterRequest	access:public	signature:(RegisterRequest && from)
sylar::ns::RegisterRequest::RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  RegisterRequest(const RegisterRequest& from);$/;"	p	class:sylar::ns::RegisterRequest	access:public	signature:(const RegisterRequest & from)
sylar::ns::RegisterRequest::RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,$/;"	p	class:sylar::ns::RegisterRequest	access:protected	signature:(::PROTOBUF_NAMESPACE_ID::Arena * arena,bool is_message_owned=false)
sylar::ns::RegisterRequest::RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  explicit constexpr RegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);$/;"	p	class:sylar::ns::RegisterRequest	access:public	signature:(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
sylar::ns::RegisterRequest::RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline RegisterRequest() : RegisterRequest(nullptr) {}$/;"	f	class:sylar::ns::RegisterRequest	access:public	signature:()
sylar::ns::RegisterRequest::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.cc	/^void RegisterRequest::SetCachedSize(int size) const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:(int size) const
sylar::ns::RegisterRequest::SetCachedSize	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:(int size) const
sylar::ns::RegisterRequest::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void RegisterRequest::SharedCtor() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:()
sylar::ns::RegisterRequest::SharedCtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedCtor();$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:()
sylar::ns::RegisterRequest::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.cc	/^inline void RegisterRequest::SharedDtor() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:()
sylar::ns::RegisterRequest::SharedDtor	sylar/sylar/ns/ns_protobuf.pb.h	/^  void SharedDtor();$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:private	signature:()
sylar::ns::RegisterRequest::Swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline void Swap(RegisterRequest* other) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	access:public	signature:(RegisterRequest * other)
sylar::ns::RegisterRequest::UnsafeArenaSwap	sylar/sylar/ns/ns_protobuf.pb.h	/^  void UnsafeArenaSwap(RegisterRequest* other) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	access:public	signature:(RegisterRequest * other)
sylar::ns::RegisterRequest::_Internal	sylar/sylar/ns/ns_protobuf.pb.cc	/^class RegisterRequest::_Internal {$/;"	c	class:sylar::ns::RegisterRequest	file:
sylar::ns::RegisterRequest::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.cc	/^const char* RegisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const char *	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::RegisterRequest::_InternalParse	sylar/sylar/ns/ns_protobuf.pb.h	/^  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* c/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:const char *	access:public	signature:(const char * ptr,::PROTOBUF_NAMESPACE_ID::internal::ParseContext * ctx)
sylar::ns::RegisterRequest::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.cc	/^uint8_t* RegisterRequest::_InternalSerialize($/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:uint8_t *	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::RegisterRequest::_InternalSerialize	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint8_t* _InternalSerialize($/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:uint8_t *	access:public	signature:(uint8_t * target,::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const
sylar::ns::RegisterRequest::__anond0e9e3700303	sylar/sylar/ns/ns_protobuf.pb.h	/^  enum : int {$/;"	g	class:sylar::ns::RegisterRequest	typeref:typename:int	access:public
sylar::ns::RegisterRequest::_class_data_	sylar/sylar/ns/ns_protobuf.pb.cc	/^const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterRequest::_class_data_ = {$/;"	m	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Message::ClassData
sylar::ns::RegisterRequest::_class_data_	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ClassData _class_data_;$/;"	m	class:sylar::ns::RegisterRequest	typeref:typename:const ClassData	access:public
sylar::ns::RegisterRequest::_internal_add_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::RegisterInfo* RegisterRequest::_internal_add_infos() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::sylar::ns::RegisterInfo *	signature:()
sylar::ns::RegisterRequest::_internal_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::RegisterInfo& _internal_infos(int index) const;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:const::sylar::ns::RegisterInfo &	access:private	signature:(int index) const
sylar::ns::RegisterRequest::_internal_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::RegisterInfo& RegisterRequest::_internal_infos(int index) const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::sylar::ns::RegisterInfo &	signature:(int index) const
sylar::ns::RegisterRequest::_internal_infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int _internal_infos_size() const;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:int	access:private	signature:() const
sylar::ns::RegisterRequest::_internal_infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int RegisterRequest::_internal_infos_size() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:int	signature:() const
sylar::ns::RegisterRequest::add_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::RegisterInfo* RegisterRequest::add_infos() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::sylar::ns::RegisterInfo *	signature:()
sylar::ns::RegisterRequest::clear_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^  void clear_infos();$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:void	access:public	signature:()
sylar::ns::RegisterRequest::clear_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterRequest::clear_infos() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:void	signature:()
sylar::ns::RegisterRequest::default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const RegisterRequest& default_instance() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const RegisterRequest &	access:public	signature:()
sylar::ns::RegisterRequest::descriptor	sylar/sylar/ns/ns_protobuf.pb.h	/^  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::Descriptor *	access:public	signature:()
sylar::ns::RegisterRequest::infos	sylar/sylar/ns/ns_protobuf.pb.h	/^      infos() const;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::RegisterInfo> &	access:public	signature:() const
sylar::ns::RegisterRequest::infos	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::RegisterInfo& infos(int index) const;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:const::sylar::ns::RegisterInfo &	access:public	signature:(int index) const
sylar::ns::RegisterRequest::infos	sylar/sylar/ns/ns_protobuf.pb.h	/^RegisterRequest::infos() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::RegisterInfo> &	signature:() const
sylar::ns::RegisterRequest::infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::RegisterInfo& RegisterRequest::infos(int index) const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::sylar::ns::RegisterInfo &	signature:(int index) const
sylar::ns::RegisterRequest::infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int infos_size() const;$/;"	p	class:sylar::ns::RegisterRequest	typeref:typename:int	access:public	signature:() const
sylar::ns::RegisterRequest::infos_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int RegisterRequest::infos_size() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:int	signature:() const
sylar::ns::RegisterRequest::internal_default_instance	sylar/sylar/ns/ns_protobuf.pb.h	/^  static inline const RegisterRequest* internal_default_instance() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const RegisterRequest *	access:public	signature:()
sylar::ns::RegisterRequest::kIndexInFileMessages	sylar/sylar/ns/ns_protobuf.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:sylar::ns::RegisterRequest	typeref:typename:int	access:public
sylar::ns::RegisterRequest::kInfosFieldNumber	sylar/sylar/ns/ns_protobuf.pb.h	/^    kInfosFieldNumber = 1,$/;"	e	enum:sylar::ns::RegisterRequest::__anond0e9e3700303	access:public
sylar::ns::RegisterRequest::mutable_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^RegisterRequest::mutable_infos() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::RegisterInfo> *	signature:()
sylar::ns::RegisterRequest::mutable_infos	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::RegisterInfo* RegisterRequest::mutable_infos(int index) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::sylar::ns::RegisterInfo *	signature:(int index)
sylar::ns::RegisterRequest::mutable_unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *	access:public	signature:()
sylar::ns::RegisterRequest::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:RegisterRequest &	access:public	signature:(RegisterRequest && from)
sylar::ns::RegisterRequest::operator =	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline RegisterRequest& operator=(const RegisterRequest& from) {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:RegisterRequest &	access:public	signature:(const RegisterRequest & from)
sylar::ns::RegisterRequest::unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
sylar::ns::RegisterRequest::~RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterRequest::~RegisterRequest() {$/;"	f	class:sylar::ns::RegisterRequest	signature:()
sylar::ns::RegisterRequestDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^struct RegisterRequestDefaultTypeInternal {$/;"	s	namespace:sylar::ns	file:
sylar::ns::RegisterRequestDefaultTypeInternal::RegisterRequestDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  constexpr RegisterRequestDefaultTypeInternal()$/;"	f	struct:sylar::ns::RegisterRequestDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::RegisterRequestDefaultTypeInternal::__anonee26512e030a	sylar/sylar/ns/ns_protobuf.pb.cc	/^  union {$/;"	u	struct:sylar::ns::RegisterRequestDefaultTypeInternal	file:	access:public
sylar::ns::RegisterRequestDefaultTypeInternal::__anonee26512e030a::_instance	sylar/sylar/ns/ns_protobuf.pb.cc	/^    RegisterRequest _instance;$/;"	m	union:sylar::ns::RegisterRequestDefaultTypeInternal::__anonee26512e030a	typeref:typename:RegisterRequest	file:	access:public
sylar::ns::RegisterRequestDefaultTypeInternal::~RegisterRequestDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~RegisterRequestDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::RegisterRequestDefaultTypeInternal	file:	access:public	signature:()
sylar::ns::SET_BLACKLIST	sylar/sylar/ns/ns_protocol.h	/^    SET_BLACKLIST   = 0x10003,$/;"	e	enum:sylar::ns::NSCommand	access:public
sylar::ns::TICK	sylar/sylar/ns/ns_protocol.h	/^    TICK            = 0x10005,$/;"	e	enum:sylar::ns::NSCommand	access:public
sylar::ns::_NodeInfo_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfoDefaultTypeInternal _NodeInfo_default_i/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfoDefaultTypeInternal
sylar::ns::_Node_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeDefaultTypeInternal _Node_default_instance_/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeDefaultTypeInternal
sylar::ns::_NotifyMessage_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotifyMessageDefaultTypeInternal _NotifyMessage/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotifyMessageDefaultTypeInternal
sylar::ns::_QueryRequest_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryRequestDefaultTypeInternal _QueryRequest_d/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryRequestDefaultTypeInternal
sylar::ns::_QueryResponse_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryResponseDefaultTypeInternal _QueryResponse/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryResponseDefaultTypeInternal
sylar::ns::_RegisterInfo_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterInfoDefaultTypeInternal _RegisterInfo_d/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterInfoDefaultTypeInternal
sylar::ns::_RegisterRequest_default_instance_	sylar/sylar/ns/ns_protobuf.pb.cc	/^PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterRequestDefaultTypeInternal _RegisterReq/;"	v	namespace:sylar::ns	typeref:typename:PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterRequestDefaultTypeInternal
sylar::ns::diff	sylar/sylar/ns/name_server_module.cc	/^void diff(const std::map<std::string, std::set<uint32_t> >& old_value,$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(const std::map<std::string,std::set<uint32_t>> & old_value,const std::map<std::string,std::set<uint32_t>> & new_value,std::map<std::string,std::set<uint32_t>> & dels,std::map<std::string,std::set<uint32_t>> & news,std::map<std::string,std::set<uint32_t>> & comms)
sylar::ns::g_logger	sylar/sylar/ns/name_server_module.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::ns	typeref:typename:sylar::Logger::ptr	file:
sylar::ns::g_logger	sylar/sylar/ns/ns_client.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("system");$/;"	v	namespace:sylar::ns	typeref:typename:sylar::Logger::ptr	file:
sylar::ns::s_on_connect	sylar/sylar/ns/name_server_module.cc	/^uint64_t s_on_connect = 0;$/;"	v	namespace:sylar::ns	typeref:typename:uint64_t
sylar::ns::s_on_disconnect	sylar/sylar/ns/name_server_module.cc	/^uint64_t s_on_disconnect = 0;$/;"	v	namespace:sylar::ns	typeref:typename:uint64_t
sylar::ns::s_request_count	sylar/sylar/ns/name_server_module.cc	/^uint64_t s_request_count = 0;$/;"	v	namespace:sylar::ns	typeref:typename:uint64_t
sylar::ns::swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(Node& a, Node& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(Node & a,Node & b)
sylar::ns::swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(NodeInfo& a, NodeInfo& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(NodeInfo & a,NodeInfo & b)
sylar::ns::swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(NotifyMessage& a, NotifyMessage& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(NotifyMessage & a,NotifyMessage & b)
sylar::ns::swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(QueryRequest& a, QueryRequest& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(QueryRequest & a,QueryRequest & b)
sylar::ns::swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(QueryResponse& a, QueryResponse& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(QueryResponse & a,QueryResponse & b)
sylar::ns::swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(RegisterInfo& a, RegisterInfo& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(RegisterInfo & a,RegisterInfo & b)
sylar::ns::swap	sylar/sylar/ns/ns_protobuf.pb.h	/^  friend void swap(RegisterRequest& a, RegisterRequest& b) {$/;"	f	namespace:sylar::ns	typeref:typename:void	signature:(RegisterRequest & a,RegisterRequest & b)
sylar::operator <<	sylar/sylar/address.cc	/^std::ostream& operator<<(std::ostream& os, const Address& addr) {$/;"	f	namespace:sylar	typeref:typename:std::ostream &	signature:(std::ostream & os,const Address & addr)
sylar::operator <<	sylar/sylar/address.h	/^std::ostream& operator<<(std::ostream& os, const Address& addr);$/;"	p	namespace:sylar	typeref:typename:std::ostream &	signature:(std::ostream & os,const Address & addr)
sylar::operator <<	sylar/sylar/iomanager.cc	/^static std::ostream& operator<< (std::ostream& os, EPOLL_EVENTS events) {$/;"	f	namespace:sylar	typeref:typename:std::ostream &	file:	signature:(std::ostream & os,EPOLL_EVENTS events)
sylar::operator <<	sylar/sylar/iomanager.cc	/^static std::ostream& operator<< (std::ostream& os, const EpollCtlOp& op) {$/;"	f	namespace:sylar	typeref:typename:std::ostream &	file:	signature:(std::ostream & os,const EpollCtlOp & op)
sylar::operator <<	sylar/sylar/socket.cc	/^std::ostream& operator<<(std::ostream& os, const Socket& sock) {$/;"	f	namespace:sylar	typeref:typename:std::ostream &	signature:(std::ostream & os,const Socket & sock)
sylar::operator <<	sylar/sylar/socket.h	/^std::ostream& operator<<(std::ostream& os, const Socket& sock);$/;"	p	namespace:sylar	typeref:typename:std::ostream &	signature:(std::ostream & os,const Socket & sock)
sylar::orm	sylar/sylar/orm/column.cc	/^namespace orm {$/;"	n	namespace:sylar	file:
sylar::orm	sylar/sylar/orm/column.h	/^namespace orm {$/;"	n	namespace:sylar
sylar::orm	sylar/sylar/orm/index.cc	/^namespace orm {$/;"	n	namespace:sylar	file:
sylar::orm	sylar/sylar/orm/index.h	/^namespace orm {$/;"	n	namespace:sylar
sylar::orm	sylar/sylar/orm/table.cc	/^namespace orm {$/;"	n	namespace:sylar	file:
sylar::orm	sylar/sylar/orm/table.h	/^namespace orm {$/;"	n	namespace:sylar
sylar::orm	sylar/sylar/orm/util.cc	/^namespace orm {$/;"	n	namespace:sylar	file:
sylar::orm	sylar/sylar/orm/util.h	/^namespace orm {$/;"	n	namespace:sylar
sylar::orm::Column	sylar/sylar/orm/column.h	/^class Column {$/;"	c	namespace:sylar::orm
sylar::orm::Column::ParseType	sylar/sylar/orm/column.cc	/^Column::Type Column::ParseType(const std::string& v) {$/;"	f	class:sylar::orm::Column	typeref:typename:Column::Type	signature:(const std::string & v)
sylar::orm::Column::ParseType	sylar/sylar/orm/column.h	/^    static Type ParseType(const std::string& v);$/;"	p	class:sylar::orm::Column	typeref:typename:Type	access:public	signature:(const std::string & v)
sylar::orm::Column::TYPE_BLOB	sylar/sylar/orm/column.h	/^        TYPE_BLOB,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_DOUBLE	sylar/sylar/orm/column.h	/^        TYPE_DOUBLE,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_FLOAT	sylar/sylar/orm/column.h	/^        TYPE_FLOAT,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_INT16	sylar/sylar/orm/column.h	/^        TYPE_INT16,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_INT32	sylar/sylar/orm/column.h	/^        TYPE_INT32,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_INT64	sylar/sylar/orm/column.h	/^        TYPE_INT64,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_INT8	sylar/sylar/orm/column.h	/^        TYPE_INT8,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_NULL	sylar/sylar/orm/column.h	/^        TYPE_NULL = 0,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_STRING	sylar/sylar/orm/column.h	/^        TYPE_STRING,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_TEXT	sylar/sylar/orm/column.h	/^        TYPE_TEXT,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_TIMESTAMP	sylar/sylar/orm/column.h	/^        TYPE_TIMESTAMP$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_UINT16	sylar/sylar/orm/column.h	/^        TYPE_UINT16,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_UINT32	sylar/sylar/orm/column.h	/^        TYPE_UINT32,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_UINT64	sylar/sylar/orm/column.h	/^        TYPE_UINT64,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::TYPE_UINT8	sylar/sylar/orm/column.h	/^        TYPE_UINT8,$/;"	e	enum:sylar::orm::Column::Type	access:public
sylar::orm::Column::Type	sylar/sylar/orm/column.h	/^    enum Type {$/;"	g	class:sylar::orm::Column	access:public
sylar::orm::Column::TypeToString	sylar/sylar/orm/column.cc	/^std::string Column::TypeToString(Type type) {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:(Type type)
sylar::orm::Column::TypeToString	sylar/sylar/orm/column.h	/^    static std::string TypeToString(Type type);$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:(Type type)
sylar::orm::Column::getBindString	sylar/sylar/orm/column.cc	/^std::string Column::getBindString() {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:()
sylar::orm::Column::getBindString	sylar/sylar/orm/column.h	/^    std::string getBindString();$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
sylar::orm::Column::getDType	sylar/sylar/orm/column.h	/^    Type getDType() const { return m_dtype;}$/;"	f	class:sylar::orm::Column	typeref:typename:Type	access:public	signature:() const
sylar::orm::Column::getDTypeString	sylar/sylar/orm/column.h	/^    std::string getDTypeString() { return TypeToString(m_dtype);}$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
sylar::orm::Column::getDefault	sylar/sylar/orm/column.h	/^    const std::string& getDefault() const { return m_default;}$/;"	f	class:sylar::orm::Column	typeref:typename:const std::string &	access:public	signature:() const
sylar::orm::Column::getDefaultValueString	sylar/sylar/orm/column.cc	/^std::string Column::getDefaultValueString() {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:()
sylar::orm::Column::getDefaultValueString	sylar/sylar/orm/column.h	/^    std::string getDefaultValueString();$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
sylar::orm::Column::getDesc	sylar/sylar/orm/column.h	/^    const std::string& getDesc() const { return m_desc;}$/;"	f	class:sylar::orm::Column	typeref:typename:const std::string &	access:public	signature:() const
sylar::orm::Column::getGetFunDefine	sylar/sylar/orm/column.cc	/^std::string Column::getGetFunDefine() const {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:() const
sylar::orm::Column::getGetFunDefine	sylar/sylar/orm/column.h	/^    std::string getGetFunDefine() const;$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:() const
sylar::orm::Column::getGetString	sylar/sylar/orm/column.cc	/^std::string Column::getGetString() {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:()
sylar::orm::Column::getGetString	sylar/sylar/orm/column.h	/^    std::string getGetString();$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
sylar::orm::Column::getIndex	sylar/sylar/orm/column.h	/^    int getIndex() const { return m_index;}$/;"	f	class:sylar::orm::Column	typeref:typename:int	access:public	signature:() const
sylar::orm::Column::getMemberDefine	sylar/sylar/orm/column.cc	/^std::string Column::getMemberDefine() const {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:() const
sylar::orm::Column::getMemberDefine	sylar/sylar/orm/column.h	/^    std::string getMemberDefine() const;$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:() const
sylar::orm::Column::getMySQLTypeString	sylar/sylar/orm/column.cc	/^std::string Column::getMySQLTypeString() {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:()
sylar::orm::Column::getMySQLTypeString	sylar/sylar/orm/column.h	/^    std::string getMySQLTypeString();$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
sylar::orm::Column::getName	sylar/sylar/orm/column.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::orm::Column	typeref:typename:const std::string &	access:public	signature:() const
sylar::orm::Column::getSQLite3Default	sylar/sylar/orm/column.cc	/^std::string Column::getSQLite3Default() {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:()
sylar::orm::Column::getSQLite3Default	sylar/sylar/orm/column.h	/^    std::string getSQLite3Default();$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
sylar::orm::Column::getSQLite3TypeString	sylar/sylar/orm/column.cc	/^std::string Column::getSQLite3TypeString() {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:()
sylar::orm::Column::getSQLite3TypeString	sylar/sylar/orm/column.h	/^    std::string getSQLite3TypeString();$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:()
sylar::orm::Column::getSetFunDefine	sylar/sylar/orm/column.cc	/^std::string Column::getSetFunDefine() const {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:() const
sylar::orm::Column::getSetFunDefine	sylar/sylar/orm/column.h	/^    std::string getSetFunDefine() const;$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:() const
sylar::orm::Column::getSetFunImpl	sylar/sylar/orm/column.cc	/^std::string Column::getSetFunImpl(const std::string& class_name, int idx) const {$/;"	f	class:sylar::orm::Column	typeref:typename:std::string	signature:(const std::string & class_name,int idx) const
sylar::orm::Column::getSetFunImpl	sylar/sylar/orm/column.h	/^    std::string getSetFunImpl(const std::string& class_name, int idx) const;$/;"	p	class:sylar::orm::Column	typeref:typename:std::string	access:public	signature:(const std::string & class_name,int idx) const
sylar::orm::Column::getType	sylar/sylar/orm/column.h	/^    const std::string& getType() const { return m_type;}$/;"	f	class:sylar::orm::Column	typeref:typename:const std::string &	access:public	signature:() const
sylar::orm::Column::getUpdate	sylar/sylar/orm/column.h	/^    const std::string& getUpdate() const { return m_update;}$/;"	f	class:sylar::orm::Column	typeref:typename:const std::string &	access:public	signature:() const
sylar::orm::Column::init	sylar/sylar/orm/column.cc	/^bool Column::init(const tinyxml2::XMLElement& node) {$/;"	f	class:sylar::orm::Column	typeref:typename:bool	signature:(const tinyxml2::XMLElement & node)
sylar::orm::Column::init	sylar/sylar/orm/column.h	/^    bool init(const tinyxml2::XMLElement& node);$/;"	p	class:sylar::orm::Column	typeref:typename:bool	access:public	signature:(const tinyxml2::XMLElement & node)
sylar::orm::Column::isAutoIncrement	sylar/sylar/orm/column.h	/^    bool isAutoIncrement() const { return m_autoIncrement;}$/;"	f	class:sylar::orm::Column	typeref:typename:bool	access:public	signature:() const
sylar::orm::Column::m_autoIncrement	sylar/sylar/orm/column.h	/^    bool m_autoIncrement;$/;"	m	class:sylar::orm::Column	typeref:typename:bool	access:private
sylar::orm::Column::m_default	sylar/sylar/orm/column.h	/^    std::string m_default;$/;"	m	class:sylar::orm::Column	typeref:typename:std::string	access:private
sylar::orm::Column::m_desc	sylar/sylar/orm/column.h	/^    std::string m_desc;$/;"	m	class:sylar::orm::Column	typeref:typename:std::string	access:private
sylar::orm::Column::m_dtype	sylar/sylar/orm/column.h	/^    Type m_dtype;$/;"	m	class:sylar::orm::Column	typeref:typename:Type	access:private
sylar::orm::Column::m_index	sylar/sylar/orm/column.h	/^    int m_index;$/;"	m	class:sylar::orm::Column	typeref:typename:int	access:private
sylar::orm::Column::m_length	sylar/sylar/orm/column.h	/^    int m_length;$/;"	m	class:sylar::orm::Column	typeref:typename:int	access:private
sylar::orm::Column::m_name	sylar/sylar/orm/column.h	/^    std::string m_name;$/;"	m	class:sylar::orm::Column	typeref:typename:std::string	access:private
sylar::orm::Column::m_type	sylar/sylar/orm/column.h	/^    std::string m_type;$/;"	m	class:sylar::orm::Column	typeref:typename:std::string	access:private
sylar::orm::Column::m_update	sylar/sylar/orm/column.h	/^    std::string m_update;$/;"	m	class:sylar::orm::Column	typeref:typename:std::string	access:private
sylar::orm::Column::ptr	sylar/sylar/orm/column.h	/^    typedef std::shared_ptr<Column> ptr;$/;"	t	class:sylar::orm::Column	typeref:typename:std::shared_ptr<Column>	access:public
sylar::orm::GetAsClassName	sylar/sylar/orm/util.cc	/^std::string GetAsClassName(const std::string& v) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
sylar::orm::GetAsClassName	sylar/sylar/orm/util.h	/^std::string GetAsClassName(const std::string& v);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
sylar::orm::GetAsDefineMacro	sylar/sylar/orm/util.cc	/^std::string GetAsDefineMacro(const std::string& v) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
sylar::orm::GetAsDefineMacro	sylar/sylar/orm/util.h	/^std::string GetAsDefineMacro(const std::string& v);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
sylar::orm::GetAsGetFunName	sylar/sylar/orm/util.cc	/^std::string GetAsGetFunName(const std::string& v) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
sylar::orm::GetAsGetFunName	sylar/sylar/orm/util.h	/^std::string GetAsGetFunName(const std::string& v);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
sylar::orm::GetAsMemberName	sylar/sylar/orm/util.cc	/^std::string GetAsMemberName(const std::string& v) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
sylar::orm::GetAsMemberName	sylar/sylar/orm/util.h	/^std::string GetAsMemberName(const std::string& v);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
sylar::orm::GetAsSetFunName	sylar/sylar/orm/util.cc	/^std::string GetAsSetFunName(const std::string& v) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
sylar::orm::GetAsSetFunName	sylar/sylar/orm/util.h	/^std::string GetAsSetFunName(const std::string& v);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
sylar::orm::GetAsVariable	sylar/sylar/orm/util.cc	/^std::string GetAsVariable(const std::string& v) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
sylar::orm::GetAsVariable	sylar/sylar/orm/util.h	/^std::string GetAsVariable(const std::string& v);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const std::string & v)
sylar::orm::Index	sylar/sylar/orm/index.h	/^class Index {$/;"	c	namespace:sylar::orm
sylar::orm::Index::ParseType	sylar/sylar/orm/index.cc	/^Index::Type Index::ParseType(const std::string& v) {$/;"	f	class:sylar::orm::Index	typeref:typename:Index::Type	signature:(const std::string & v)
sylar::orm::Index::ParseType	sylar/sylar/orm/index.h	/^    static Type ParseType(const std::string& v);$/;"	p	class:sylar::orm::Index	typeref:typename:Type	access:public	signature:(const std::string & v)
sylar::orm::Index::TYPE_INDEX	sylar/sylar/orm/index.h	/^        TYPE_INDEX$/;"	e	enum:sylar::orm::Index::Type	access:public
sylar::orm::Index::TYPE_NULL	sylar/sylar/orm/index.h	/^        TYPE_NULL = 0,$/;"	e	enum:sylar::orm::Index::Type	access:public
sylar::orm::Index::TYPE_PK	sylar/sylar/orm/index.h	/^        TYPE_PK,$/;"	e	enum:sylar::orm::Index::Type	access:public
sylar::orm::Index::TYPE_UNIQ	sylar/sylar/orm/index.h	/^        TYPE_UNIQ,$/;"	e	enum:sylar::orm::Index::Type	access:public
sylar::orm::Index::Type	sylar/sylar/orm/index.h	/^    enum Type {$/;"	g	class:sylar::orm::Index	access:public
sylar::orm::Index::TypeToString	sylar/sylar/orm/index.cc	/^std::string Index::TypeToString(Type v) {$/;"	f	class:sylar::orm::Index	typeref:typename:std::string	signature:(Type v)
sylar::orm::Index::TypeToString	sylar/sylar/orm/index.h	/^    static std::string TypeToString(Type v);$/;"	p	class:sylar::orm::Index	typeref:typename:std::string	access:public	signature:(Type v)
sylar::orm::Index::getCols	sylar/sylar/orm/index.h	/^    const std::vector<std::string>& getCols() const { return m_cols;}$/;"	f	class:sylar::orm::Index	typeref:typename:const std::vector<std::string> &	access:public	signature:() const
sylar::orm::Index::getDType	sylar/sylar/orm/index.h	/^    Type getDType() const { return m_dtype;}$/;"	f	class:sylar::orm::Index	typeref:typename:Type	access:public	signature:() const
sylar::orm::Index::getDesc	sylar/sylar/orm/index.h	/^    const std::string& getDesc() const { return m_desc;}$/;"	f	class:sylar::orm::Index	typeref:typename:const std::string &	access:public	signature:() const
sylar::orm::Index::getName	sylar/sylar/orm/index.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::orm::Index	typeref:typename:const std::string &	access:public	signature:() const
sylar::orm::Index::getType	sylar/sylar/orm/index.h	/^    const std::string& getType() const { return m_type;}$/;"	f	class:sylar::orm::Index	typeref:typename:const std::string &	access:public	signature:() const
sylar::orm::Index::init	sylar/sylar/orm/index.cc	/^bool Index::init(const tinyxml2::XMLElement& node) {$/;"	f	class:sylar::orm::Index	typeref:typename:bool	signature:(const tinyxml2::XMLElement & node)
sylar::orm::Index::init	sylar/sylar/orm/index.h	/^    bool init(const tinyxml2::XMLElement& node);$/;"	p	class:sylar::orm::Index	typeref:typename:bool	access:public	signature:(const tinyxml2::XMLElement & node)
sylar::orm::Index::isPK	sylar/sylar/orm/index.h	/^    bool isPK() const { return m_type == "pk";}$/;"	f	class:sylar::orm::Index	typeref:typename:bool	access:public	signature:() const
sylar::orm::Index::m_cols	sylar/sylar/orm/index.h	/^    std::vector<std::string> m_cols;$/;"	m	class:sylar::orm::Index	typeref:typename:std::vector<std::string>	access:private
sylar::orm::Index::m_desc	sylar/sylar/orm/index.h	/^    std::string m_desc;$/;"	m	class:sylar::orm::Index	typeref:typename:std::string	access:private
sylar::orm::Index::m_dtype	sylar/sylar/orm/index.h	/^    Type m_dtype;$/;"	m	class:sylar::orm::Index	typeref:typename:Type	access:private
sylar::orm::Index::m_name	sylar/sylar/orm/index.h	/^    std::string m_name;$/;"	m	class:sylar::orm::Index	typeref:typename:std::string	access:private
sylar::orm::Index::m_type	sylar/sylar/orm/index.h	/^    std::string m_type;$/;"	m	class:sylar::orm::Index	typeref:typename:std::string	access:private
sylar::orm::Index::ptr	sylar/sylar/orm/index.h	/^    typedef std::shared_ptr<Index> ptr;$/;"	t	class:sylar::orm::Index	typeref:typename:std::shared_ptr<Index>	access:public
sylar::orm::Table	sylar/sylar/orm/table.h	/^class Table {$/;"	c	namespace:sylar::orm
sylar::orm::Table::DBType	sylar/sylar/orm/table.h	/^    enum DBType {$/;"	g	class:sylar::orm::Table	access:private
sylar::orm::Table::TYPE_MYSQL	sylar/sylar/orm/table.h	/^        TYPE_MYSQL = 2$/;"	e	enum:sylar::orm::Table::DBType	access:public
sylar::orm::Table::TYPE_SQLITE3	sylar/sylar/orm/table.h	/^        TYPE_SQLITE3 = 1,$/;"	e	enum:sylar::orm::Table::DBType	access:public
sylar::orm::Table::gen	sylar/sylar/orm/table.cc	/^void Table::gen(const std::string& path) {$/;"	f	class:sylar::orm::Table	typeref:typename:void	signature:(const std::string & path)
sylar::orm::Table::gen	sylar/sylar/orm/table.h	/^    void gen(const std::string& path);$/;"	p	class:sylar::orm::Table	typeref:typename:void	access:public	signature:(const std::string & path)
sylar::orm::Table::genToDeleteSQL	sylar/sylar/orm/table.cc	/^std::string Table::genToDeleteSQL(const std::string& class_name) {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:(const std::string & class_name)
sylar::orm::Table::genToDeleteSQL	sylar/sylar/orm/table.h	/^    std::string genToDeleteSQL(const std::string& class_name);$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:private	signature:(const std::string & class_name)
sylar::orm::Table::genToInsertSQL	sylar/sylar/orm/table.cc	/^std::string Table::genToInsertSQL(const std::string& class_name) {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:(const std::string & class_name)
sylar::orm::Table::genToInsertSQL	sylar/sylar/orm/table.h	/^    std::string genToInsertSQL(const std::string& class_name);$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:private	signature:(const std::string & class_name)
sylar::orm::Table::genToStringInc	sylar/sylar/orm/table.cc	/^std::string Table::genToStringInc() {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:()
sylar::orm::Table::genToStringInc	sylar/sylar/orm/table.h	/^    std::string genToStringInc();$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:private	signature:()
sylar::orm::Table::genToStringSrc	sylar/sylar/orm/table.cc	/^std::string Table::genToStringSrc(const std::string& class_name) {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:(const std::string & class_name)
sylar::orm::Table::genToStringSrc	sylar/sylar/orm/table.h	/^    std::string genToStringSrc(const std::string& class_name);$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:private	signature:(const std::string & class_name)
sylar::orm::Table::genToUpdateSQL	sylar/sylar/orm/table.cc	/^std::string Table::genToUpdateSQL(const std::string& class_name) {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:(const std::string & class_name)
sylar::orm::Table::genToUpdateSQL	sylar/sylar/orm/table.h	/^    std::string genToUpdateSQL(const std::string& class_name);$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:private	signature:(const std::string & class_name)
sylar::orm::Table::genWhere	sylar/sylar/orm/table.cc	/^std::string Table::genWhere() const {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:() const
sylar::orm::Table::genWhere	sylar/sylar/orm/table.h	/^    std::string genWhere() const;$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:private	signature:() const
sylar::orm::Table::gen_dao_inc	sylar/sylar/orm/table.cc	/^void Table::gen_dao_inc(std::ofstream& ofs) {$/;"	f	class:sylar::orm::Table	typeref:typename:void	signature:(std::ofstream & ofs)
sylar::orm::Table::gen_dao_inc	sylar/sylar/orm/table.h	/^    void gen_dao_inc(std::ofstream& ofs);$/;"	p	class:sylar::orm::Table	typeref:typename:void	access:private	signature:(std::ofstream & ofs)
sylar::orm::Table::gen_dao_src	sylar/sylar/orm/table.cc	/^void Table::gen_dao_src(std::ofstream& ofs) {$/;"	f	class:sylar::orm::Table	typeref:typename:void	signature:(std::ofstream & ofs)
sylar::orm::Table::gen_dao_src	sylar/sylar/orm/table.h	/^    void gen_dao_src(std::ofstream& ofs);$/;"	p	class:sylar::orm::Table	typeref:typename:void	access:private	signature:(std::ofstream & ofs)
sylar::orm::Table::gen_inc	sylar/sylar/orm/table.cc	/^void Table::gen_inc(const std::string& path) {$/;"	f	class:sylar::orm::Table	typeref:typename:void	signature:(const std::string & path)
sylar::orm::Table::gen_inc	sylar/sylar/orm/table.h	/^    void gen_inc(const std::string& path);$/;"	p	class:sylar::orm::Table	typeref:typename:void	access:private	signature:(const std::string & path)
sylar::orm::Table::gen_src	sylar/sylar/orm/table.cc	/^void Table::gen_src(const std::string& path) {$/;"	f	class:sylar::orm::Table	typeref:typename:void	signature:(const std::string & path)
sylar::orm::Table::gen_src	sylar/sylar/orm/table.h	/^    void gen_src(const std::string& path);$/;"	p	class:sylar::orm::Table	typeref:typename:void	access:private	signature:(const std::string & path)
sylar::orm::Table::getCol	sylar/sylar/orm/table.cc	/^Column::ptr Table::getCol(const std::string& name) const {$/;"	f	class:sylar::orm::Table	typeref:typename:Column::ptr	signature:(const std::string & name) const
sylar::orm::Table::getCol	sylar/sylar/orm/table.h	/^    Column::ptr getCol(const std::string& name) const;$/;"	p	class:sylar::orm::Table	typeref:typename:Column::ptr	access:private	signature:(const std::string & name) const
sylar::orm::Table::getCols	sylar/sylar/orm/table.h	/^    const std::vector<Column::ptr>& getCols() const { return m_cols;}$/;"	f	class:sylar::orm::Table	typeref:typename:const std::vector<Column::ptr> &	access:public	signature:() const
sylar::orm::Table::getDesc	sylar/sylar/orm/table.h	/^    const std::string& getDesc() const { return m_desc;}$/;"	f	class:sylar::orm::Table	typeref:typename:const std::string &	access:public	signature:() const
sylar::orm::Table::getFilename	sylar/sylar/orm/table.cc	/^std::string Table::getFilename() const {$/;"	f	class:sylar::orm::Table	typeref:typename:std::string	signature:() const
sylar::orm::Table::getFilename	sylar/sylar/orm/table.h	/^    std::string getFilename() const;$/;"	p	class:sylar::orm::Table	typeref:typename:std::string	access:public	signature:() const
sylar::orm::Table::getIdxs	sylar/sylar/orm/table.h	/^    const std::vector<Index::ptr>& getIdxs() const { return  m_idxs;}$/;"	f	class:sylar::orm::Table	typeref:typename:const std::vector<Index::ptr> &	access:public	signature:() const
sylar::orm::Table::getName	sylar/sylar/orm/table.h	/^    const std::string& getName() const { return m_name;}$/;"	f	class:sylar::orm::Table	typeref:typename:const std::string &	access:public	signature:() const
sylar::orm::Table::getNamespace	sylar/sylar/orm/table.h	/^    const std::string& getNamespace() const { return m_namespace;}$/;"	f	class:sylar::orm::Table	typeref:typename:const std::string &	access:public	signature:() const
sylar::orm::Table::getPKs	sylar/sylar/orm/table.cc	/^std::vector<Column::ptr> Table::getPKs() const {$/;"	f	class:sylar::orm::Table	typeref:typename:std::vector<Column::ptr>	signature:() const
sylar::orm::Table::getPKs	sylar/sylar/orm/table.h	/^    std::vector<Column::ptr> getPKs() const;$/;"	p	class:sylar::orm::Table	typeref:typename:std::vector<Column::ptr>	access:private	signature:() const
sylar::orm::Table::init	sylar/sylar/orm/table.cc	/^bool Table::init(const tinyxml2::XMLElement& node) {$/;"	f	class:sylar::orm::Table	typeref:typename:bool	signature:(const tinyxml2::XMLElement & node)
sylar::orm::Table::init	sylar/sylar/orm/table.h	/^    bool init(const tinyxml2::XMLElement& node);$/;"	p	class:sylar::orm::Table	typeref:typename:bool	access:public	signature:(const tinyxml2::XMLElement & node)
sylar::orm::Table::m_cols	sylar/sylar/orm/table.h	/^    std::vector<Column::ptr> m_cols;$/;"	m	class:sylar::orm::Table	typeref:typename:std::vector<Column::ptr>	access:private
sylar::orm::Table::m_dbclass	sylar/sylar/orm/table.h	/^    std::string m_dbclass = "sylar::IDB";$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
sylar::orm::Table::m_desc	sylar/sylar/orm/table.h	/^    std::string m_desc;$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
sylar::orm::Table::m_idxs	sylar/sylar/orm/table.h	/^    std::vector<Index::ptr> m_idxs;$/;"	m	class:sylar::orm::Table	typeref:typename:std::vector<Index::ptr>	access:private
sylar::orm::Table::m_name	sylar/sylar/orm/table.h	/^    std::string m_name;$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
sylar::orm::Table::m_namespace	sylar/sylar/orm/table.h	/^    std::string m_namespace;$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
sylar::orm::Table::m_queryclass	sylar/sylar/orm/table.h	/^    std::string m_queryclass = "sylar::IDB";$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
sylar::orm::Table::m_subfix	sylar/sylar/orm/table.h	/^    std::string m_subfix = "_info";$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
sylar::orm::Table::m_type	sylar/sylar/orm/table.h	/^    DBType m_type = TYPE_SQLITE3;$/;"	m	class:sylar::orm::Table	typeref:typename:DBType	access:private
sylar::orm::Table::m_updateclass	sylar/sylar/orm/table.h	/^    std::string m_updateclass = "sylar::IDB";$/;"	m	class:sylar::orm::Table	typeref:typename:std::string	access:private
sylar::orm::Table::ptr	sylar/sylar/orm/table.h	/^    typedef std::shared_ptr<Table> ptr;$/;"	t	class:sylar::orm::Table	typeref:typename:std::shared_ptr<Table>	access:public
sylar::orm::XmlToString	sylar/sylar/orm/util.cc	/^std::string XmlToString(const tinyxml2::XMLNode& node) {$/;"	f	namespace:sylar::orm	typeref:typename:std::string	signature:(const tinyxml2::XMLNode & node)
sylar::orm::XmlToString	sylar/sylar/orm/util.h	/^std::string XmlToString(const tinyxml2::XMLNode& node);$/;"	p	namespace:sylar::orm	typeref:typename:std::string	signature:(const tinyxml2::XMLNode & node)
sylar::orm::g_logger	sylar/sylar/orm/column.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("orm");$/;"	v	namespace:sylar::orm	typeref:typename:sylar::Logger::ptr	file:
sylar::orm::g_logger	sylar/sylar/orm/index.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("orm");$/;"	v	namespace:sylar::orm	typeref:typename:sylar::Logger::ptr	file:
sylar::orm::g_logger	sylar/sylar/orm/table.cc	/^static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME("orm");$/;"	v	namespace:sylar::orm	typeref:typename:sylar::Logger::ptr	file:
sylar::orm::is_exists	sylar/sylar/orm/table.cc	/^bool is_exists(const V& v, const T& t) {$/;"	f	namespace:sylar::orm	typeref:typename:bool	signature:(const V & v,const T & t)
sylar::quick_hash	sylar/sylar/util/hash_util.cc	/^uint32_t quick_hash(const char * str) {$/;"	f	namespace:sylar	typeref:typename:uint32_t	signature:(const char * str)
sylar::quick_hash	sylar/sylar/util/hash_util.cc	/^uint32_t quick_hash(const void* tmp, uint32_t size) {$/;"	f	namespace:sylar	typeref:typename:uint32_t	signature:(const void * tmp,uint32_t size)
sylar::quick_hash	sylar/sylar/util/hash_util.h	/^uint32_t quick_hash(const char * str);$/;"	p	namespace:sylar	typeref:typename:uint32_t	signature:(const char * str)
sylar::quick_hash	sylar/sylar/util/hash_util.h	/^uint32_t quick_hash(const void* str, uint32_t size);$/;"	p	namespace:sylar	typeref:typename:uint32_t	signature:(const void * str,uint32_t size)
sylar::random_string	sylar/sylar/util/hash_util.cc	/^std::string random_string(size_t len, const std::string& chars) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(size_t len,const std::string & chars)
sylar::random_string	sylar/sylar/util/hash_util.h	/^std::string random_string(size_t len$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(size_t len,const std::string & chars="")
sylar::real_daemon	sylar/sylar/daemon.cc	/^static int real_daemon(int argc, char** argv,$/;"	f	namespace:sylar	typeref:typename:int	file:	signature:(int argc,char ** argv,std::function<int (int argc,char ** argv)> main_cb)
sylar::real_start	sylar/sylar/daemon.cc	/^static int real_start(int argc, char** argv,$/;"	f	namespace:sylar	typeref:typename:int	file:	signature:(int argc,char ** argv,std::function<int (int argc,char ** argv)> main_cb)
sylar::replace	sylar/sylar/util/hash_util.cc	/^std::string replace(const std::string &str1, char find, char replaceWith) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & str1,char find,char replaceWith)
sylar::replace	sylar/sylar/util/hash_util.cc	/^std::string replace(const std::string &str1, char find, const std::string &replaceWith) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & str1,char find,const std::string & replaceWith)
sylar::replace	sylar/sylar/util/hash_util.cc	/^std::string replace(const std::string &str1, const std::string &find, const std::string &replace/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & str1,const std::string & find,const std::string & replaceWith)
sylar::replace	sylar/sylar/util/hash_util.h	/^std::string replace(const std::string &str, char find, char replaceWith);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & str,char find,char replaceWith)
sylar::replace	sylar/sylar/util/hash_util.h	/^std::string replace(const std::string &str, char find, const std::string &replaceWith);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & str,char find,const std::string & replaceWith)
sylar::replace	sylar/sylar/util/hash_util.h	/^std::string replace(const std::string &str, const std::string &find, const std::string &replaceW/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & str,const std::string & find,const std::string & replaceWith)
sylar::s_connect_timeout	sylar/sylar/hook.cc	/^static uint64_t s_connect_timeout = -1;$/;"	v	namespace:sylar	typeref:typename:uint64_t	file:
sylar::s_fiber_count	sylar/sylar/fiber.cc	/^static std::atomic<uint64_t> s_fiber_count {0};$/;"	v	namespace:sylar	typeref:typename:std::atomic<uint64_t>	file:
sylar::s_fiber_id	sylar/sylar/fiber.cc	/^static std::atomic<uint64_t> s_fiber_id {0};$/;"	v	namespace:sylar	typeref:typename:std::atomic<uint64_t>	file:
sylar::s_file2modifytime	sylar/sylar/config.cc	/^static std::map<std::string, uint64_t> s_file2modifytime;$/;"	v	namespace:sylar	typeref:typename:std::map<std::string,uint64_t>	file:
sylar::s_hook_initer	sylar/sylar/hook.cc	/^static _HookIniter s_hook_initer;$/;"	v	namespace:sylar	typeref:typename:_HookIniter	file:
sylar::s_mutex	sylar/sylar/config.cc	/^static sylar::Mutex s_mutex;$/;"	v	namespace:sylar	typeref:typename:sylar::Mutex	file:
sylar::s_rock_magic	sylar/sylar/rock/rock_protocol.cc	/^static const uint8_t s_rock_magic[2] = {0xab, 0xcd};$/;"	v	namespace:sylar	typeref:typename:const uint8_t[2]	file:
sylar::s_thread	sylar/sylar/db/fox_thread.cc	/^thread_local FoxThread* s_thread = nullptr;$/;"	v	namespace:sylar	typeref:typename:thread_local FoxThread *
sylar::s_thread_mutex	sylar/sylar/db/fox_thread.cc	/^static RWMutex s_thread_mutex;$/;"	v	namespace:sylar	typeref:typename:RWMutex	file:
sylar::s_thread_names	sylar/sylar/db/fox_thread.cc	/^static std::map<uint64_t, std::string> s_thread_names;$/;"	v	namespace:sylar	typeref:typename:std::map<uint64_t,std::string>	file:
sylar::serialize_message	sylar/sylar/util.cc	/^static void serialize_message(const google::protobuf::Message& message, Json::Value& jnode) {$/;"	f	namespace:sylar	typeref:typename:void	file:	signature:(const google::protobuf::Message & message,Json::Value & jnode)
sylar::serialize_unknowfieldset	sylar/sylar/util.cc	/^static void serialize_unknowfieldset(const google::protobuf::UnknownFieldSet& ufs, Json::Value& /;"	f	namespace:sylar	typeref:typename:void	file:	signature:(const google::protobuf::UnknownFieldSet & ufs,Json::Value & jnode)
sylar::set_hook_enable	sylar/sylar/hook.cc	/^void set_hook_enable(bool flag) {$/;"	f	namespace:sylar	typeref:typename:void	signature:(bool flag)
sylar::set_hook_enable	sylar/sylar/hook.h	/^    void set_hook_enable(bool flag);$/;"	p	namespace:sylar	typeref:typename:void	signature:(bool flag)
sylar::sha0sum	sylar/sylar/util/hash_util.cc	/^std::string sha0sum(const std::string & data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::sha0sum	sylar/sylar/util/hash_util.cc	/^std::string sha0sum(const void *data, size_t len) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
sylar::sha0sum	sylar/sylar/util/hash_util.h	/^std::string sha0sum(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::sha0sum	sylar/sylar/util/hash_util.h	/^std::string sha0sum(const void *data, size_t len);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
sylar::sha1	sylar/sylar/util/hash_util.cc	/^std::string sha1(const std::string &data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::sha1	sylar/sylar/util/hash_util.h	/^std::string sha1(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::sha1sum	sylar/sylar/util/hash_util.cc	/^std::string sha1sum(const std::string &data) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::sha1sum	sylar/sylar/util/hash_util.cc	/^std::string sha1sum(const void *data, size_t len) {$/;"	f	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
sylar::sha1sum	sylar/sylar/util/hash_util.h	/^std::string sha1sum(const std::string &data);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const std::string & data)
sylar::sha1sum	sylar/sylar/util/hash_util.h	/^std::string sha1sum(const void *data, size_t len);$/;"	p	namespace:sylar	typeref:typename:std::string	signature:(const void * data,size_t len)
sylar::split	sylar/sylar/util/hash_util.cc	/^std::vector<std::string> split(const std::string &str, char delim, size_t max) {$/;"	f	namespace:sylar	typeref:typename:std::vector<std::string>	signature:(const std::string & str,char delim,size_t max)
sylar::split	sylar/sylar/util/hash_util.cc	/^std::vector<std::string> split(const std::string &str, const char *delims, size_t max) {$/;"	f	namespace:sylar	typeref:typename:std::vector<std::string>	signature:(const std::string & str,const char * delims,size_t max)
sylar::split	sylar/sylar/util/hash_util.h	/^std::vector<std::string> split(const std::string &str, char delim, size_t max = ~0);$/;"	p	namespace:sylar	typeref:typename:std::vector<std::string>	signature:(const std::string & str,char delim,size_t max=~0)
sylar::split	sylar/sylar/util/hash_util.h	/^std::vector<std::string> split(const std::string &str, const char *delims, size_t max = ~0);$/;"	p	namespace:sylar	typeref:typename:std::vector<std::string>	signature:(const std::string & str,const char * delims,size_t max=~0)
sylar::start_daemon	sylar/sylar/daemon.cc	/^int start_daemon(int argc, char** argv$/;"	f	namespace:sylar	typeref:typename:int	signature:(int argc,char ** argv,std::function<int (int argc,char ** argv)> main_cb,bool is_daemon)
sylar::start_daemon	sylar/sylar/daemon.h	/^int start_daemon(int argc, char** argv$/;"	p	namespace:sylar	typeref:typename:int	signature:(int argc,char ** argv,std::function<int (int argc,char ** argv)> main_cb,bool is_daemon)
sylar::t_fiber	sylar/sylar/fiber.cc	/^static thread_local Fiber* t_fiber = nullptr;$/;"	v	namespace:sylar	typeref:typename:thread_local Fiber *	file:
sylar::t_hook_enable	sylar/sylar/hook.cc	/^static thread_local bool t_hook_enable = false;$/;"	v	namespace:sylar	typeref:typename:thread_local bool	file:
sylar::t_scheduler	sylar/sylar/scheduler.cc	/^static thread_local Scheduler* t_scheduler = nullptr;$/;"	v	namespace:sylar	typeref:typename:thread_local Scheduler *	file:
sylar::t_scheduler_fiber	sylar/sylar/scheduler.cc	/^static thread_local Fiber* t_scheduler_fiber = nullptr;$/;"	v	namespace:sylar	typeref:typename:thread_local Fiber *	file:
sylar::t_thread	sylar/sylar/thread.cc	/^static thread_local Thread* t_thread = nullptr;$/;"	v	namespace:sylar	typeref:typename:thread_local Thread *	file:
sylar::t_threadFiber	sylar/sylar/fiber.cc	/^static thread_local Fiber::ptr t_threadFiber = nullptr;$/;"	v	namespace:sylar	typeref:typename:thread_local Fiber::ptr	file:
sylar::t_thread_name	sylar/sylar/thread.cc	/^static thread_local std::string t_thread_name = "UNKNOW";$/;"	v	namespace:sylar	typeref:typename:thread_local std::string	file:
sylar::time_t_to_mysql_time	sylar/sylar/db/mysql.cc	/^bool time_t_to_mysql_time(const time_t& ts, MYSQL_TIME& mt) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(const time_t & ts,MYSQL_TIME & mt)
sylar::time_t_to_mysql_time	sylar/sylar/db/mysql.h	/^bool time_t_to_mysql_time(const time_t& ts, MYSQL_TIME& mt);$/;"	p	namespace:sylar	typeref:typename:bool	signature:(const time_t & ts,MYSQL_TIME & mt)
sylar::uri_chars	sylar/sylar/util.cc	/^static const char uri_chars[256] = {$/;"	v	namespace:sylar	typeref:typename:const char[256]	file:
sylar::uri_parser_en_main	sylar/sylar/uri.rl.cc	/^static const int uri_parser_en_main = 451;$/;"	v	namespace:sylar	typeref:typename:const int	file:
sylar::uri_parser_error	sylar/sylar/uri.rl.cc	/^static const int uri_parser_error = 0;$/;"	v	namespace:sylar	typeref:typename:const int	file:
sylar::uri_parser_first_final	sylar/sylar/uri.rl.cc	/^static const int uri_parser_first_final = 451;$/;"	v	namespace:sylar	typeref:typename:const int	file:
sylar::uri_parser_start	sylar/sylar/uri.rl.cc	/^static const int uri_parser_start = 451;$/;"	v	namespace:sylar	typeref:typename:const int	file:
sylar::xdigit_chars	sylar/sylar/util.cc	/^static const char xdigit_chars[256] = {$/;"	v	namespace:sylar	typeref:typename:const char[256]	file:
sylar::xorStruct	sylar/sylar/util/hash_util.cc	/^struct xorStruct {$/;"	s	namespace:sylar	file:
sylar::xorStruct::m_value	sylar/sylar/util/hash_util.cc	/^    char m_value;$/;"	m	struct:sylar::xorStruct	typeref:typename:char	file:	access:public
sylar::xorStruct::operator ()	sylar/sylar/util/hash_util.cc	/^    char operator()(char in) const { return in ^ m_value; }$/;"	f	struct:sylar::xorStruct	typeref:typename:char	file:	access:public	signature:(char in) const
sylar::xorStruct::xorStruct	sylar/sylar/util/hash_util.cc	/^    xorStruct(char value) : m_value(value) {}$/;"	f	struct:sylar::xorStruct	file:	access:public	signature:(char value)
sylar_add_executable	sylar/cmake/utils.cmake	/^function(sylar_add_executable targetname srcs depends libs)$/;"	f
t_fiber	sylar/sylar/fiber.cc	/^static thread_local Fiber* t_fiber = nullptr;$/;"	v	namespace:sylar	typeref:typename:thread_local Fiber *	file:
t_hook_enable	sylar/sylar/hook.cc	/^static thread_local bool t_hook_enable = false;$/;"	v	namespace:sylar	typeref:typename:thread_local bool	file:
t_scheduler	sylar/sylar/scheduler.cc	/^static thread_local Scheduler* t_scheduler = nullptr;$/;"	v	namespace:sylar	typeref:typename:thread_local Scheduler *	file:
t_scheduler_fiber	sylar/sylar/scheduler.cc	/^static thread_local Fiber* t_scheduler_fiber = nullptr;$/;"	v	namespace:sylar	typeref:typename:thread_local Fiber *	file:
t_thread	sylar/sylar/thread.cc	/^static thread_local Thread* t_thread = nullptr;$/;"	v	namespace:sylar	typeref:typename:thread_local Thread *	file:
t_threadFiber	sylar/sylar/fiber.cc	/^static thread_local Fiber::ptr t_threadFiber = nullptr;$/;"	v	namespace:sylar	typeref:typename:thread_local Fiber::ptr	file:
t_thread_name	sylar/sylar/thread.cc	/^static thread_local std::string t_thread_name = "UNKNOW";$/;"	v	namespace:sylar	typeref:typename:thread_local std::string	file:
tellmeall	sylar/sylar/ds/roaring.h	/^static inline void tellmeall() {$/;"	f	typeref:typename:void	signature:()
test	sylar/sylar/test.proto	/^package test;$/;"	p
test	sylar/tests/test_address.cc	/^void test() {$/;"	f	typeref:typename:void	signature:()
test	sylar/tests/test_array.cc	/^void test() {$/;"	f	typeref:typename:void	signature:()
test	sylar/tests/test_bytearray.cc	/^void test() {$/;"	f	typeref:typename:void	signature:()
test	sylar/tests/test_dict.cc	/^void test() {$/;"	f	typeref:typename:void	signature:()
test	sylar/tests/test_email.cc	/^void test() {$/;"	f	typeref:typename:void	signature:()
test	sylar/tests/test_hashmap.cc	/^void test() {$/;"	f	typeref:typename:void	signature:()
test	sylar/tests/test_hashmultimap.cc	/^void test() {$/;"	f	typeref:typename:void	signature:()
test1	sylar/tests/test_iomanager.cc	/^void test1() {$/;"	f	typeref:typename:void	signature:()
test2	sylar/tests/test_socket.cc	/^void test2() {$/;"	f	typeref:typename:void	signature:()
test_aes256cbc	sylar/tests/test_crypto.cc	/^void test_aes256cbc() {$/;"	f	typeref:typename:void	signature:()
test_aes256ecb	sylar/tests/test_crypto.cc	/^void test_aes256ecb() {$/;"	f	typeref:typename:void	signature:()
test_and	sylar/tests/test_bitmap.cc	/^void test_and() {$/;"	f	typeref:typename:void	signature:()
test_array	build/Makefile	/^test_array: cmake_check_build_system$/;"	t
test_array	build/sylar/Makefile	/^test_array: sylar\/CMakeFiles\/test_array.dir\/rule$/;"	t
test_array/fast	build/Makefile	/^test_array\/fast:$/;"	t
test_array/fast	build/sylar/Makefile	/^test_array\/fast:$/;"	t
test_assert	sylar/tests/test_util.cc	/^void test_assert() {$/;"	f	typeref:typename:void	signature:()
test_batch	sylar/tests/test_sqlite3.cc	/^void test_batch(sylar::SQLite3::ptr db) {$/;"	f	typeref:typename:void	signature:(sylar::SQLite3::ptr db)
test_bitmap	build/Makefile	/^test_bitmap: cmake_check_build_system$/;"	t
test_bitmap	build/sylar/Makefile	/^test_bitmap: sylar\/CMakeFiles\/test_bitmap.dir\/rule$/;"	t
test_bitmap/fast	build/Makefile	/^test_bitmap\/fast:$/;"	t
test_bitmap/fast	build/sylar/Makefile	/^test_bitmap\/fast:$/;"	t
test_class	sylar/tests/test_config.cc	/^void test_class() {$/;"	f	typeref:typename:void	signature:()
test_config	sylar/tests/test_config.cc	/^void test_config() {$/;"	f	typeref:typename:void	signature:()
test_crypto	build/Makefile	/^test_crypto: cmake_check_build_system$/;"	t
test_crypto	build/sylar/Makefile	/^test_crypto: sylar\/CMakeFiles\/test_crypto.dir\/rule$/;"	t
test_crypto/fast	build/Makefile	/^test_crypto\/fast:$/;"	t
test_crypto/fast	build/sylar/Makefile	/^test_crypto\/fast:$/;"	t
test_data	sylar/tests/test_http_connection.cc	/^void test_data() {$/;"	f	typeref:typename:void	signature:()
test_deflate	sylar/tests/test_zlib_stream.cc	/^void test_deflate() {$/;"	f	typeref:typename:void	signature:()
test_dict	build/Makefile	/^test_dict: cmake_check_build_system$/;"	t
test_dict	build/sylar/Makefile	/^test_dict: sylar\/CMakeFiles\/test_dict.dir\/rule$/;"	t
test_dict/fast	build/Makefile	/^test_dict\/fast:$/;"	t
test_dict/fast	build/sylar/Makefile	/^test_dict\/fast:$/;"	t
test_email	build/Makefile	/^test_email: cmake_check_build_system$/;"	t
test_email	build/sylar/Makefile	/^test_email: sylar\/CMakeFiles\/test_email.dir\/rule$/;"	t
test_email/fast	build/Makefile	/^test_email\/fast:$/;"	t
test_email/fast	build/sylar/Makefile	/^test_email\/fast:$/;"	t
test_fiber	sylar/tests/test_fiber.cc	/^void test_fiber() {$/;"	f	typeref:typename:void	signature:()
test_fiber	sylar/tests/test_iomanager.cc	/^void test_fiber() {$/;"	f	typeref:typename:void	signature:()
test_fiber	sylar/tests/test_scheduler.cc	/^void test_fiber() {$/;"	f	typeref:typename:void	signature:()
test_gzip	sylar/tests/test_zlib_stream.cc	/^void test_gzip() {$/;"	f	typeref:typename:void	signature:()
test_hash_lru	sylar/tests/test_lru.cc	/^void test_hash_lru() {$/;"	f	typeref:typename:void	signature:()
test_hash_timed_cache	sylar/tests/test_timed_cache.cc	/^void test_hash_timed_cache() {$/;"	f	typeref:typename:void	signature:()
test_hash_timed_lru_cache	sylar/tests/test_timed_lru_cache.cc	/^void test_hash_timed_lru_cache() {$/;"	f	typeref:typename:void	signature:()
test_hashmap	build/Makefile	/^test_hashmap: cmake_check_build_system$/;"	t
test_hashmap	build/sylar/Makefile	/^test_hashmap: sylar\/CMakeFiles\/test_hashmap.dir\/rule$/;"	t
test_hashmap/fast	build/Makefile	/^test_hashmap\/fast:$/;"	t
test_hashmap/fast	build/sylar/Makefile	/^test_hashmap\/fast:$/;"	t
test_hashmultimap	build/Makefile	/^test_hashmultimap: cmake_check_build_system$/;"	t
test_hashmultimap	build/sylar/Makefile	/^test_hashmultimap: sylar\/CMakeFiles\/test_hashmultimap.dir\/rule$/;"	t
test_hashmultimap/fast	build/Makefile	/^test_hashmultimap\/fast:$/;"	t
test_hashmultimap/fast	build/sylar/Makefile	/^test_hashmultimap\/fast:$/;"	t
test_https	sylar/tests/test_http_connection.cc	/^void test_https() {$/;"	f	typeref:typename:void	signature:()
test_iface	sylar/tests/test_address.cc	/^void test_iface() {$/;"	f	typeref:typename:void	signature:()
test_ipv4	sylar/tests/test_address.cc	/^void test_ipv4() {$/;"	f	typeref:typename:void	signature:()
test_loadconf	sylar/tests/test_config.cc	/^void test_loadconf() {$/;"	f	typeref:typename:void	signature:()
test_log	sylar/tests/test_config.cc	/^void test_log() {$/;"	f	typeref:typename:void	signature:()
test_lru	sylar/tests/test_lru.cc	/^void test_lru() {$/;"	f	typeref:typename:void	signature:()
test_module	build/Makefile	/^test_module: cmake_check_build_system$/;"	t
test_module	build/sylar/Makefile	/^test_module: sylar\/CMakeFiles\/test_module.dir\/rule$/;"	t
test_module	sylar/CMakeLists.txt	/^add_library(test_module SHARED tests\/test_module.cc)$/;"	t
test_module/fast	build/Makefile	/^test_module\/fast:$/;"	t
test_module/fast	build/sylar/Makefile	/^test_module\/fast:$/;"	t
test_mysql	build/Makefile	/^test_mysql: cmake_check_build_system$/;"	t
test_mysql	build/sylar/Makefile	/^test_mysql: sylar\/CMakeFiles\/test_mysql.dir\/rule$/;"	t
test_mysql/fast	build/Makefile	/^test_mysql\/fast:$/;"	t
test_mysql/fast	build/sylar/Makefile	/^test_mysql\/fast:$/;"	t
test_nameserver	build/Makefile	/^test_nameserver: cmake_check_build_system$/;"	t
test_nameserver	build/sylar/Makefile	/^test_nameserver: sylar\/CMakeFiles\/test_nameserver.dir\/rule$/;"	t
test_nameserver/fast	build/Makefile	/^test_nameserver\/fast:$/;"	t
test_nameserver/fast	build/sylar/Makefile	/^test_nameserver\/fast:$/;"	t
test_one	sylar/tests/test_crypto.cc	/^void test_one() {$/;"	f	typeref:typename:void	signature:()
test_or	sylar/tests/test_bitmap.cc	/^void test_or() {$/;"	f	typeref:typename:void	signature:()
test_parser	sylar/tests/test_http_connection.cc	/^void test_parser() {$/;"	f	typeref:typename:void	signature:()
test_pool	sylar/tests/test_http_connection.cc	/^void test_pool() {$/;"	f	typeref:typename:void	signature:()
test_request	sylar/tests/test_http.cc	/^void test_request() {$/;"	f	typeref:typename:void	signature:()
test_request	sylar/tests/test_http_parser.cc	/^void test_request() {$/;"	f	typeref:typename:void	signature:()
test_request_data	sylar/tests/test_http_parser.cc	/^const char test_request_data[] = "POST \/ HTTP\/1.1\\r\\n"$/;"	v	typeref:typename:const char[]
test_response	sylar/tests/test_http.cc	/^void test_response() {$/;"	f	typeref:typename:void	signature:()
test_response	sylar/tests/test_http_parser.cc	/^void test_response() {$/;"	f	typeref:typename:void	signature:()
test_response_data	sylar/tests/test_http_parser.cc	/^const char test_response_data[] = "HTTP\/1.1 200 OK\\r\\n"$/;"	v	typeref:typename:const char[]
test_roaring_bitmap	sylar/tests/test_bitmap.cc	/^void test_roaring_bitmap() {$/;"	f	typeref:typename:void	signature:()
test_rock	build/Makefile	/^test_rock: cmake_check_build_system$/;"	t
test_rock	build/sylar/Makefile	/^test_rock: sylar\/CMakeFiles\/test_rock.dir\/rule$/;"	t
test_rock/fast	build/Makefile	/^test_rock\/fast:$/;"	t
test_rock/fast	build/sylar/Makefile	/^test_rock\/fast:$/;"	t
test_rsa	sylar/tests/test_crypto.cc	/^void test_rsa() {$/;"	f	typeref:typename:void	signature:()
test_service_discovery	build/Makefile	/^test_service_discovery: cmake_check_build_system$/;"	t
test_service_discovery	build/sylar/Makefile	/^test_service_discovery: sylar\/CMakeFiles\/test_service_discovery.dir\/rule$/;"	t
test_service_discovery/fast	build/Makefile	/^test_service_discovery\/fast:$/;"	t
test_service_discovery/fast	build/sylar/Makefile	/^test_service_discovery\/fast:$/;"	t
test_sleep	sylar/tests/test_hook.cc	/^void test_sleep() {$/;"	f	typeref:typename:void	signature:()
test_sock	sylar/tests/test_hook.cc	/^void test_sock() {$/;"	f	typeref:typename:void	signature:()
test_socket	sylar/tests/test_socket.cc	/^void test_socket() {$/;"	f	typeref:typename:void	signature:()
test_sqlite3	build/Makefile	/^test_sqlite3: cmake_check_build_system$/;"	t
test_sqlite3	build/sylar/Makefile	/^test_sqlite3: sylar\/CMakeFiles\/test_sqlite3.dir\/rule$/;"	t
test_sqlite3/fast	build/Makefile	/^test_sqlite3\/fast:$/;"	t
test_sqlite3/fast	build/sylar/Makefile	/^test_sqlite3\/fast:$/;"	t
test_timed_cache	sylar/tests/test_timed_cache.cc	/^void test_timed_cache() {$/;"	f	typeref:typename:void	signature:()
test_timed_lru_cache	sylar/tests/test_timed_lru_cache.cc	/^void test_timed_lru_cache() {$/;"	f	typeref:typename:void	signature:()
test_timer	sylar/tests/test_iomanager.cc	/^void test_timer() {$/;"	f	typeref:typename:void	signature:()
test_uncompress	sylar/tests/test_bitmap.cc	/^void test_uncompress() {$/;"	f	typeref:typename:void	signature:()
test_uncompress2	sylar/tests/test_bitmap.cc	/^void test_uncompress2() {$/;"	f	typeref:typename:void	signature:()
test_uncompress3	sylar/tests/test_bitmap.cc	/^void test_uncompress3() {$/;"	f	typeref:typename:void	signature:()
test_uncompress4	sylar/tests/test_bitmap.cc	/^void test_uncompress4() {$/;"	f	typeref:typename:void	signature:()
test_util	build/Makefile	/^test_util: cmake_check_build_system$/;"	t
test_util	build/sylar/Makefile	/^test_util: sylar\/CMakeFiles\/test_util.dir\/rule$/;"	t
test_util/fast	build/Makefile	/^test_util\/fast:$/;"	t
test_util/fast	build/sylar/Makefile	/^test_util\/fast:$/;"	t
test_yaml	sylar/tests/test_config.cc	/^void test_yaml() {$/;"	f	typeref:typename:void	signature:()
test_zkclient	build/Makefile	/^test_zkclient: cmake_check_build_system$/;"	t
test_zkclient	build/sylar/Makefile	/^test_zkclient: sylar\/CMakeFiles\/test_zkclient.dir\/rule$/;"	t
test_zkclient/fast	build/Makefile	/^test_zkclient\/fast:$/;"	t
test_zkclient/fast	build/sylar/Makefile	/^test_zkclient\/fast:$/;"	t
test_zlib	sylar/tests/test_zlib_stream.cc	/^void test_zlib() {$/;"	f	typeref:typename:void	signature:()
tests/test_array.cc.i	build/sylar/Makefile	/^tests\/test_array.cc.i:$/;"	t
tests/test_array.cc.o	build/sylar/Makefile	/^tests\/test_array.cc.o:$/;"	t
tests/test_array.cc.s	build/sylar/Makefile	/^tests\/test_array.cc.s:$/;"	t
tests/test_array.i	build/sylar/Makefile	/^tests\/test_array.i: tests\/test_array.cc.i$/;"	t
tests/test_array.o	build/sylar/Makefile	/^tests\/test_array.o: tests\/test_array.cc.o$/;"	t
tests/test_array.s	build/sylar/Makefile	/^tests\/test_array.s: tests\/test_array.cc.s$/;"	t
tests/test_bitmap.cc.i	build/sylar/Makefile	/^tests\/test_bitmap.cc.i:$/;"	t
tests/test_bitmap.cc.o	build/sylar/Makefile	/^tests\/test_bitmap.cc.o:$/;"	t
tests/test_bitmap.cc.s	build/sylar/Makefile	/^tests\/test_bitmap.cc.s:$/;"	t
tests/test_bitmap.i	build/sylar/Makefile	/^tests\/test_bitmap.i: tests\/test_bitmap.cc.i$/;"	t
tests/test_bitmap.o	build/sylar/Makefile	/^tests\/test_bitmap.o: tests\/test_bitmap.cc.o$/;"	t
tests/test_bitmap.s	build/sylar/Makefile	/^tests\/test_bitmap.s: tests\/test_bitmap.cc.s$/;"	t
tests/test_crypto.cc.i	build/sylar/Makefile	/^tests\/test_crypto.cc.i:$/;"	t
tests/test_crypto.cc.o	build/sylar/Makefile	/^tests\/test_crypto.cc.o:$/;"	t
tests/test_crypto.cc.s	build/sylar/Makefile	/^tests\/test_crypto.cc.s:$/;"	t
tests/test_crypto.i	build/sylar/Makefile	/^tests\/test_crypto.i: tests\/test_crypto.cc.i$/;"	t
tests/test_crypto.o	build/sylar/Makefile	/^tests\/test_crypto.o: tests\/test_crypto.cc.o$/;"	t
tests/test_crypto.s	build/sylar/Makefile	/^tests\/test_crypto.s: tests\/test_crypto.cc.s$/;"	t
tests/test_dict.cc.i	build/sylar/Makefile	/^tests\/test_dict.cc.i:$/;"	t
tests/test_dict.cc.o	build/sylar/Makefile	/^tests\/test_dict.cc.o:$/;"	t
tests/test_dict.cc.s	build/sylar/Makefile	/^tests\/test_dict.cc.s:$/;"	t
tests/test_dict.i	build/sylar/Makefile	/^tests\/test_dict.i: tests\/test_dict.cc.i$/;"	t
tests/test_dict.o	build/sylar/Makefile	/^tests\/test_dict.o: tests\/test_dict.cc.o$/;"	t
tests/test_dict.s	build/sylar/Makefile	/^tests\/test_dict.s: tests\/test_dict.cc.s$/;"	t
tests/test_email.cc.i	build/sylar/Makefile	/^tests\/test_email.cc.i:$/;"	t
tests/test_email.cc.o	build/sylar/Makefile	/^tests\/test_email.cc.o:$/;"	t
tests/test_email.cc.s	build/sylar/Makefile	/^tests\/test_email.cc.s:$/;"	t
tests/test_email.i	build/sylar/Makefile	/^tests\/test_email.i: tests\/test_email.cc.i$/;"	t
tests/test_email.o	build/sylar/Makefile	/^tests\/test_email.o: tests\/test_email.cc.o$/;"	t
tests/test_email.s	build/sylar/Makefile	/^tests\/test_email.s: tests\/test_email.cc.s$/;"	t
tests/test_hashmap.cc.i	build/sylar/Makefile	/^tests\/test_hashmap.cc.i:$/;"	t
tests/test_hashmap.cc.o	build/sylar/Makefile	/^tests\/test_hashmap.cc.o:$/;"	t
tests/test_hashmap.cc.s	build/sylar/Makefile	/^tests\/test_hashmap.cc.s:$/;"	t
tests/test_hashmap.i	build/sylar/Makefile	/^tests\/test_hashmap.i: tests\/test_hashmap.cc.i$/;"	t
tests/test_hashmap.o	build/sylar/Makefile	/^tests\/test_hashmap.o: tests\/test_hashmap.cc.o$/;"	t
tests/test_hashmap.s	build/sylar/Makefile	/^tests\/test_hashmap.s: tests\/test_hashmap.cc.s$/;"	t
tests/test_hashmultimap.cc.i	build/sylar/Makefile	/^tests\/test_hashmultimap.cc.i:$/;"	t
tests/test_hashmultimap.cc.o	build/sylar/Makefile	/^tests\/test_hashmultimap.cc.o:$/;"	t
tests/test_hashmultimap.cc.s	build/sylar/Makefile	/^tests\/test_hashmultimap.cc.s:$/;"	t
tests/test_hashmultimap.i	build/sylar/Makefile	/^tests\/test_hashmultimap.i: tests\/test_hashmultimap.cc.i$/;"	t
tests/test_hashmultimap.o	build/sylar/Makefile	/^tests\/test_hashmultimap.o: tests\/test_hashmultimap.cc.o$/;"	t
tests/test_hashmultimap.s	build/sylar/Makefile	/^tests\/test_hashmultimap.s: tests\/test_hashmultimap.cc.s$/;"	t
tests/test_module.cc.i	build/sylar/Makefile	/^tests\/test_module.cc.i:$/;"	t
tests/test_module.cc.o	build/sylar/Makefile	/^tests\/test_module.cc.o:$/;"	t
tests/test_module.cc.s	build/sylar/Makefile	/^tests\/test_module.cc.s:$/;"	t
tests/test_module.i	build/sylar/Makefile	/^tests\/test_module.i: tests\/test_module.cc.i$/;"	t
tests/test_module.o	build/sylar/Makefile	/^tests\/test_module.o: tests\/test_module.cc.o$/;"	t
tests/test_module.s	build/sylar/Makefile	/^tests\/test_module.s: tests\/test_module.cc.s$/;"	t
tests/test_mysql.cc.i	build/sylar/Makefile	/^tests\/test_mysql.cc.i:$/;"	t
tests/test_mysql.cc.o	build/sylar/Makefile	/^tests\/test_mysql.cc.o:$/;"	t
tests/test_mysql.cc.s	build/sylar/Makefile	/^tests\/test_mysql.cc.s:$/;"	t
tests/test_mysql.i	build/sylar/Makefile	/^tests\/test_mysql.i: tests\/test_mysql.cc.i$/;"	t
tests/test_mysql.o	build/sylar/Makefile	/^tests\/test_mysql.o: tests\/test_mysql.cc.o$/;"	t
tests/test_mysql.s	build/sylar/Makefile	/^tests\/test_mysql.s: tests\/test_mysql.cc.s$/;"	t
tests/test_nameserver.cc.i	build/sylar/Makefile	/^tests\/test_nameserver.cc.i:$/;"	t
tests/test_nameserver.cc.o	build/sylar/Makefile	/^tests\/test_nameserver.cc.o:$/;"	t
tests/test_nameserver.cc.s	build/sylar/Makefile	/^tests\/test_nameserver.cc.s:$/;"	t
tests/test_nameserver.i	build/sylar/Makefile	/^tests\/test_nameserver.i: tests\/test_nameserver.cc.i$/;"	t
tests/test_nameserver.o	build/sylar/Makefile	/^tests\/test_nameserver.o: tests\/test_nameserver.cc.o$/;"	t
tests/test_nameserver.s	build/sylar/Makefile	/^tests\/test_nameserver.s: tests\/test_nameserver.cc.s$/;"	t
tests/test_rock.cc.i	build/sylar/Makefile	/^tests\/test_rock.cc.i:$/;"	t
tests/test_rock.cc.o	build/sylar/Makefile	/^tests\/test_rock.cc.o:$/;"	t
tests/test_rock.cc.s	build/sylar/Makefile	/^tests\/test_rock.cc.s:$/;"	t
tests/test_rock.i	build/sylar/Makefile	/^tests\/test_rock.i: tests\/test_rock.cc.i$/;"	t
tests/test_rock.o	build/sylar/Makefile	/^tests\/test_rock.o: tests\/test_rock.cc.o$/;"	t
tests/test_rock.s	build/sylar/Makefile	/^tests\/test_rock.s: tests\/test_rock.cc.s$/;"	t
tests/test_service_discovery.cc.i	build/sylar/Makefile	/^tests\/test_service_discovery.cc.i:$/;"	t
tests/test_service_discovery.cc.o	build/sylar/Makefile	/^tests\/test_service_discovery.cc.o:$/;"	t
tests/test_service_discovery.cc.s	build/sylar/Makefile	/^tests\/test_service_discovery.cc.s:$/;"	t
tests/test_service_discovery.i	build/sylar/Makefile	/^tests\/test_service_discovery.i: tests\/test_service_discovery.cc.i$/;"	t
tests/test_service_discovery.o	build/sylar/Makefile	/^tests\/test_service_discovery.o: tests\/test_service_discovery.cc.o$/;"	t
tests/test_service_discovery.s	build/sylar/Makefile	/^tests\/test_service_discovery.s: tests\/test_service_discovery.cc.s$/;"	t
tests/test_sqlite3.cc.i	build/sylar/Makefile	/^tests\/test_sqlite3.cc.i:$/;"	t
tests/test_sqlite3.cc.o	build/sylar/Makefile	/^tests\/test_sqlite3.cc.o:$/;"	t
tests/test_sqlite3.cc.s	build/sylar/Makefile	/^tests\/test_sqlite3.cc.s:$/;"	t
tests/test_sqlite3.i	build/sylar/Makefile	/^tests\/test_sqlite3.i: tests\/test_sqlite3.cc.i$/;"	t
tests/test_sqlite3.o	build/sylar/Makefile	/^tests\/test_sqlite3.o: tests\/test_sqlite3.cc.o$/;"	t
tests/test_sqlite3.s	build/sylar/Makefile	/^tests\/test_sqlite3.s: tests\/test_sqlite3.cc.s$/;"	t
tests/test_util.cc.i	build/sylar/Makefile	/^tests\/test_util.cc.i:$/;"	t
tests/test_util.cc.o	build/sylar/Makefile	/^tests\/test_util.cc.o:$/;"	t
tests/test_util.cc.s	build/sylar/Makefile	/^tests\/test_util.cc.s:$/;"	t
tests/test_util.i	build/sylar/Makefile	/^tests\/test_util.i: tests\/test_util.cc.i$/;"	t
tests/test_util.o	build/sylar/Makefile	/^tests\/test_util.o: tests\/test_util.cc.o$/;"	t
tests/test_util.s	build/sylar/Makefile	/^tests\/test_util.s: tests\/test_util.cc.s$/;"	t
tests/test_zookeeper.cc.i	build/sylar/Makefile	/^tests\/test_zookeeper.cc.i:$/;"	t
tests/test_zookeeper.cc.o	build/sylar/Makefile	/^tests\/test_zookeeper.cc.o:$/;"	t
tests/test_zookeeper.cc.s	build/sylar/Makefile	/^tests\/test_zookeeper.cc.s:$/;"	t
tests/test_zookeeper.i	build/sylar/Makefile	/^tests\/test_zookeeper.i: tests\/test_zookeeper.cc.i$/;"	t
tests/test_zookeeper.o	build/sylar/Makefile	/^tests\/test_zookeeper.o: tests\/test_zookeeper.cc.o$/;"	t
tests/test_zookeeper.s	build/sylar/Makefile	/^tests\/test_zookeeper.s: tests\/test_zookeeper.cc.s$/;"	t
thread	sylar/sylar/db/redis.h	/^        FoxThread* thread;$/;"	m	struct:sylar::FoxRedis::Ctx	typeref:typename:FoxThread *	access:public
thread	sylar/sylar/db/redis.h	/^        FoxThread* thread;$/;"	m	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:FoxThread *	access:public
thread	sylar/sylar/scheduler.h	/^        int thread;$/;"	m	struct:sylar::Scheduler::FiberAndThread	typeref:typename:int	access:public
thread_cb	sylar/sylar/db/fox_thread.cc	/^void FoxThread::thread_cb() {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:()
thread_cb	sylar/sylar/db/fox_thread.h	/^    void thread_cb();$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:private	signature:()
tickle	sylar/sylar/iomanager.cc	/^void IOManager::tickle() {$/;"	f	class:sylar::IOManager	typeref:typename:void	signature:()
tickle	sylar/sylar/iomanager.h	/^    void tickle() override;$/;"	p	class:sylar::IOManager	typeref:typename:void	access:protected	signature:()
tickle	sylar/sylar/scheduler.cc	/^void Scheduler::tickle() {$/;"	f	class:sylar::Scheduler	typeref:typename:void	signature:()
tickle	sylar/sylar/scheduler.h	/^    virtual void tickle();$/;"	p	class:sylar::Scheduler	typeref:typename:void	access:protected	signature:()
time_t_to_mysql_time	sylar/sylar/db/mysql.cc	/^bool time_t_to_mysql_time(const time_t& ts, MYSQL_TIME& mt) {$/;"	f	namespace:sylar	typeref:typename:bool	signature:(const time_t & ts,MYSQL_TIME & mt)
time_t_to_mysql_time	sylar/sylar/db/mysql.h	/^bool time_t_to_mysql_time(const time_t& ts, MYSQL_TIME& mt);$/;"	p	namespace:sylar	typeref:typename:bool	signature:(const time_t & ts,MYSQL_TIME & mt)
timed	sylar/sylar/streams/async_socket_stream.h	/^        bool timed;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:bool	access:public
timeout	sylar/sylar/db/redis.h	/^        bool timeout;$/;"	m	struct:sylar::FoxRedis::Ctx	typeref:typename:bool	access:public
timeout	sylar/sylar/db/redis.h	/^        bool timeout;$/;"	m	struct:sylar::FoxRedisCluster::Ctx	typeref:typename:bool	access:public
timeout	sylar/sylar/streams/async_socket_stream.h	/^        uint32_t timeout;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:uint32_t	access:public
timeout	sylar/sylar/tcp_server.h	/^    int timeout = 1000 * 2 * 60;$/;"	m	struct:sylar::TcpServerConf	typeref:typename:int	access:public
timer	sylar/sylar/streams/async_socket_stream.h	/^        Timer::ptr timer;$/;"	m	struct:sylar::AsyncSocketStream::Ctx	typeref:typename:Timer::ptr	access:public
timer	sylar/tests/test_daemon.cc	/^sylar::Timer::ptr timer;$/;"	v	typeref:typename:sylar::Timer::ptr
timer_info	sylar/sylar/hook.cc	/^struct timer_info {$/;"	s	file:
timer_info::cancelled	sylar/sylar/hook.cc	/^    int cancelled = 0;$/;"	m	struct:timer_info	typeref:typename:int	file:	access:public
toByteArray	sylar/sylar/protocol.cc	/^ByteArray::ptr Message::toByteArray() {$/;"	f	class:sylar::Message	typeref:typename:ByteArray::ptr	signature:()
toByteArray	sylar/sylar/protocol.h	/^    virtual ByteArray::ptr toByteArray();$/;"	p	class:sylar::Message	typeref:typename:ByteArray::ptr	access:public	signature:()
toHexString	sylar/sylar/bytearray.cc	/^std::string ByteArray::toHexString() const {$/;"	f	class:sylar::ByteArray	typeref:typename:std::string	signature:() const
toHexString	sylar/sylar/bytearray.h	/^    std::string toHexString() const;$/;"	p	class:sylar::ByteArray	typeref:typename:std::string	access:public	signature:() const
toStatusString	sylar/sylar/ds/lru_cache.h	/^    std::string toStatusString() {$/;"	f	class:sylar::ds::HashLruCache	typeref:typename:std::string	access:public	signature:()
toStatusString	sylar/sylar/ds/lru_cache.h	/^    std::string toStatusString() {$/;"	f	class:sylar::ds::LruCache	typeref:typename:std::string	access:public	signature:()
toStatusString	sylar/sylar/ds/timed_cache.h	/^    std::string toStatusString() {$/;"	f	class:sylar::ds::HashTimedCache	typeref:typename:std::string	access:public	signature:()
toStatusString	sylar/sylar/ds/timed_cache.h	/^    std::string toStatusString() {$/;"	f	class:sylar::ds::TimedCache	typeref:typename:std::string	access:public	signature:()
toStatusString	sylar/sylar/ds/timed_lru_cache.h	/^    std::string toStatusString() {$/;"	f	class:sylar::ds::HashTimedLruCache	typeref:typename:std::string	access:public	signature:()
toStatusString	sylar/sylar/ds/timed_lru_cache.h	/^    std::string toStatusString() {$/;"	f	class:sylar::ds::TimedLruCache	typeref:typename:std::string	access:public	signature:()
toString	sylar/sylar/address.cc	/^std::string Address::toString() const {$/;"	f	class:sylar::Address	typeref:typename:std::string	signature:() const
toString	sylar/sylar/address.h	/^    std::string toString() const;$/;"	p	class:sylar::Address	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/bytearray.cc	/^std::string ByteArray::toString() const {$/;"	f	class:sylar::ByteArray	typeref:typename:std::string	signature:() const
toString	sylar/sylar/bytearray.h	/^    std::string toString() const;$/;"	p	class:sylar::ByteArray	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/config.h	/^    std::string toString() override {$/;"	f	class:sylar::ConfigVar	typeref:typename:std::string	access:public	signature:()
toString	sylar/sylar/config.h	/^    virtual std::string toString() = 0;$/;"	p	class:sylar::ConfigVarBase	typeref:typename:std::string	access:public	signature:()
toString	sylar/sylar/daemon.cc	/^std::string ProcessInfo::toString() const {$/;"	f	class:sylar::ProcessInfo	typeref:typename:std::string	signature:() const
toString	sylar/sylar/daemon.h	/^    std::string toString() const;$/;"	p	struct:sylar::ProcessInfo	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/ds/bitmap.cc	/^std::string Bitmap::toString() const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:std::string	signature:() const
toString	sylar/sylar/ds/bitmap.h	/^    std::string toString() const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/ds/cache_status.h	/^    std::string toString() const {$/;"	f	class:sylar::ds::CacheStatus	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/ds/roaring.hh	/^    std::string toString() const {$/;"	f	class:Roaring	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/ds/roaring.hh	/^    std::string toString() const {$/;"	f	class:Roaring64Map	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/ds/roaring_bitmap.cc	/^std::string RoaringBitmap::toString() const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:std::string	signature:() const
toString	sylar/sylar/ds/roaring_bitmap.h	/^    std::string toString() const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/email/email.cc	/^std::string EMailEntity::toString() const {$/;"	f	class:sylar::EMailEntity	typeref:typename:std::string	signature:() const
toString	sylar/sylar/email/email.h	/^    std::string toString() const;$/;"	p	class:sylar::EMailEntity	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/http/http.cc	/^std::string HttpRequest::toString() const {$/;"	f	class:sylar::http::HttpRequest	typeref:typename:std::string	signature:() const
toString	sylar/sylar/http/http.cc	/^std::string HttpResponse::toString() const {$/;"	f	class:sylar::http::HttpResponse	typeref:typename:std::string	signature:() const
toString	sylar/sylar/http/http.h	/^    std::string toString() const;$/;"	p	class:sylar::http::HttpRequest	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/http/http.h	/^    std::string toString() const;$/;"	p	class:sylar::http::HttpResponse	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/http/http_connection.cc	/^std::string HttpResult::toString() const {$/;"	f	class:sylar::http::HttpResult	typeref:typename:std::string	signature:() const
toString	sylar/sylar/http/http_connection.h	/^    std::string toString() const;$/;"	p	struct:sylar::http::HttpResult	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/http/ws_session.cc	/^std::string WSFrameHead::toString() const {$/;"	f	class:sylar::http::WSFrameHead	typeref:typename:std::string	signature:() const
toString	sylar/sylar/http/ws_session.h	/^    std::string toString() const;$/;"	p	struct:sylar::http::WSFrameHead	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/ns/ns_protocol.cc	/^std::string NSDomain::toString(const std::string& prefix) {$/;"	f	class:sylar::ns::NSDomain	typeref:typename:std::string	signature:(const std::string & prefix)
toString	sylar/sylar/ns/ns_protocol.cc	/^std::string NSDomainSet::toString(const std::string& prefix) {$/;"	f	class:sylar::ns::NSDomainSet	typeref:typename:std::string	signature:(const std::string & prefix)
toString	sylar/sylar/ns/ns_protocol.cc	/^std::string NSNode::toString(const std::string& prefix) {$/;"	f	class:sylar::ns::NSNode	typeref:typename:std::string	signature:(const std::string & prefix)
toString	sylar/sylar/ns/ns_protocol.cc	/^std::string NSNodeSet::toString(const std::string& prefix) {$/;"	f	class:sylar::ns::NSNodeSet	typeref:typename:std::string	signature:(const std::string & prefix)
toString	sylar/sylar/ns/ns_protocol.h	/^    std::string toString(const std::string& prefix = "");$/;"	p	class:sylar::ns::NSDomain	typeref:typename:std::string	access:public	signature:(const std::string & prefix="")
toString	sylar/sylar/ns/ns_protocol.h	/^    std::string toString(const std::string& prefix = "");$/;"	p	class:sylar::ns::NSDomainSet	typeref:typename:std::string	access:public	signature:(const std::string & prefix="")
toString	sylar/sylar/ns/ns_protocol.h	/^    std::string toString(const std::string& prefix = "");$/;"	p	class:sylar::ns::NSNode	typeref:typename:std::string	access:public	signature:(const std::string & prefix="")
toString	sylar/sylar/ns/ns_protocol.h	/^    std::string toString(const std::string& prefix = "");$/;"	p	class:sylar::ns::NSNodeSet	typeref:typename:std::string	access:public	signature:(const std::string & prefix="")
toString	sylar/sylar/protocol.h	/^    virtual std::string toString() const = 0;$/;"	p	class:sylar::Message	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/rock/rock_protocol.cc	/^std::string RockNotify::toString() const {$/;"	f	class:sylar::RockNotify	typeref:typename:std::string	signature:() const
toString	sylar/sylar/rock/rock_protocol.cc	/^std::string RockRequest::toString() const {$/;"	f	class:sylar::RockRequest	typeref:typename:std::string	signature:() const
toString	sylar/sylar/rock/rock_protocol.cc	/^std::string RockResponse::toString() const {$/;"	f	class:sylar::RockResponse	typeref:typename:std::string	signature:() const
toString	sylar/sylar/rock/rock_protocol.h	/^    virtual std::string toString() const override;$/;"	p	class:sylar::RockNotify	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/rock/rock_protocol.h	/^    virtual std::string toString() const override;$/;"	p	class:sylar::RockRequest	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/rock/rock_protocol.h	/^    virtual std::string toString() const override;$/;"	p	class:sylar::RockResponse	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/rock/rock_stream.cc	/^std::string RockResult::toString() const {$/;"	f	class:sylar::RockResult	typeref:typename:std::string	signature:() const
toString	sylar/sylar/rock/rock_stream.h	/^   std::string toString() const;$/;"	p	struct:sylar::RockResult	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/socket.cc	/^std::string Socket::toString() const {$/;"	f	class:sylar::Socket	typeref:typename:std::string	signature:() const
toString	sylar/sylar/socket.h	/^    virtual std::string toString() const;$/;"	p	class:sylar::Socket	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/streams/load_balance.cc	/^std::string HolderStats::toString() {$/;"	f	class:sylar::HolderStats	typeref:typename:std::string	signature:()
toString	sylar/sylar/streams/load_balance.cc	/^std::string LoadBalanceItem::toString() {$/;"	f	class:sylar::LoadBalanceItem	typeref:typename:std::string	signature:()
toString	sylar/sylar/streams/load_balance.h	/^    std::string toString();$/;"	p	class:sylar::HolderStats	typeref:typename:std::string	access:public	signature:()
toString	sylar/sylar/streams/load_balance.h	/^    std::string toString();$/;"	p	class:sylar::LoadBalanceItem	typeref:typename:std::string	access:public	signature:()
toString	sylar/sylar/streams/service_discovery.cc	/^std::string ServiceItemInfo::toString() const {$/;"	f	class:sylar::ServiceItemInfo	typeref:typename:std::string	signature:() const
toString	sylar/sylar/streams/service_discovery.h	/^    std::string toString() const;$/;"	p	class:sylar::ServiceItemInfo	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/tcp_server.cc	/^std::string TcpServer::toString(const std::string& prefix) {$/;"	f	class:sylar::TcpServer	typeref:typename:std::string	signature:(const std::string & prefix)
toString	sylar/sylar/tcp_server.h	/^    virtual std::string toString(const std::string& prefix = "");$/;"	p	class:sylar::TcpServer	typeref:typename:std::string	access:public	signature:(const std::string & prefix="")
toString	sylar/sylar/uri.h	/^    std::string toString() const;$/;"	p	class:sylar::Uri	typeref:typename:std::string	access:public	signature:() const
toString	sylar/sylar/uri.rl.cc	/^std::string Uri::toString() const {$/;"	f	class:sylar::Uri	typeref:typename:std::string	signature:() const
toString	sylar/tests/test_config.cc	/^    std::string toString() const {$/;"	f	class:Person	typeref:typename:std::string	file:	access:public	signature:() const
toUint32Array	sylar/sylar/ds/roaring.hh	/^    void toUint32Array(uint32_t *ans) const {$/;"	f	class:Roaring	typeref:typename:void	access:public	signature:(uint32_t * ans) const
toUint64Array	sylar/sylar/ds/roaring.hh	/^    void toUint64Array(uint64_t *ans) const {$/;"	f	class:Roaring64Map	typeref:typename:void	access:public	signature:(uint64_t * ans) const
toYamlString	sylar/sylar/log.cc	/^std::string FileLogAppender::toYamlString() {$/;"	f	class:sylar::FileLogAppender	typeref:typename:std::string	signature:()
toYamlString	sylar/sylar/log.cc	/^std::string Logger::toYamlString() {$/;"	f	class:sylar::Logger	typeref:typename:std::string	signature:()
toYamlString	sylar/sylar/log.cc	/^std::string LoggerManager::toYamlString() {$/;"	f	class:sylar::LoggerManager	typeref:typename:std::string	signature:()
toYamlString	sylar/sylar/log.cc	/^std::string StdoutLogAppender::toYamlString() {$/;"	f	class:sylar::StdoutLogAppender	typeref:typename:std::string	signature:()
toYamlString	sylar/sylar/log.h	/^    std::string toYamlString() override;$/;"	p	class:sylar::FileLogAppender	typeref:typename:std::string	access:public	signature:()
toYamlString	sylar/sylar/log.h	/^    std::string toYamlString() override;$/;"	p	class:sylar::StdoutLogAppender	typeref:typename:std::string	access:public	signature:()
toYamlString	sylar/sylar/log.h	/^    std::string toYamlString();$/;"	p	class:sylar::Logger	typeref:typename:std::string	access:public	signature:()
toYamlString	sylar/sylar/log.h	/^    std::string toYamlString();$/;"	p	class:sylar::LoggerManager	typeref:typename:std::string	access:public	signature:()
toYamlString	sylar/sylar/log.h	/^    virtual std::string toYamlString() = 0;$/;"	p	class:sylar::LogAppender	typeref:typename:std::string	access:public	signature:()
to_hex	sylar/tests/test_crypto.cc	/^std::string to_hex(const std::string& str) {$/;"	f	typeref:typename:std::string	signature:(const std::string & str)
triggerEvent	sylar/sylar/iomanager.cc	/^void IOManager::FdContext::triggerEvent(IOManager::Event event) {$/;"	f	class:sylar::IOManager::FdContext	typeref:typename:void	signature:(IOManager::Event event)
triggerEvent	sylar/sylar/iomanager.h	/^        void triggerEvent(Event event);$/;"	p	struct:sylar::IOManager::FdContext	typeref:typename:void	access:public	signature:(Event event)
tryWait	sylar/sylar/mutex.cc	/^bool FiberSemaphore::tryWait() {$/;"	f	class:sylar::FiberSemaphore	typeref:typename:bool	signature:()
tryWait	sylar/sylar/mutex.h	/^    bool tryWait();$/;"	p	class:sylar::FiberSemaphore	typeref:typename:bool	access:public	signature:()
ts	sylar/sylar/db/mysql.h	/^    time_t ts;$/;"	m	struct:sylar::MySQLTime	typeref:typename:time_t	access:public
ts	sylar/sylar/ds/timed_cache.h	/^        uint64_t ts;$/;"	m	struct:sylar::ds::TimedCache::Item	typeref:typename:uint64_t	access:public
ts	sylar/sylar/ds/timed_lru_cache.h	/^        uint64_t ts;$/;"	m	struct:sylar::ds::TimedLruCache::Item	typeref:typename:uint64_t	access:public
tv	sylar/sylar/socket.cc	/^    struct timeval tv{int(v \/ 1000), int(v % 1000 * 1000)};$/;"	s	function:sylar::Socket::setRecvTimeout	file:
tv	sylar/sylar/socket.cc	/^    struct timeval tv{int(v \/ 1000), int(v % 1000 * 1000)};$/;"	s	function:sylar::Socket::setSendTimeout	file:
type	sylar/examples/echo_server.cc	/^int type = 1;$/;"	v	typeref:typename:int
type	sylar/sylar/db/mysql.h	/^        enum_field_types type;$/;"	m	struct:sylar::MySQLStmtRes::Data	typeref:typename:enum_field_types	access:public
type	sylar/sylar/log.cc	/^    int type = 0; \/\/1 File, 2 Stdout$/;"	m	struct:sylar::LogAppenderDefine	typeref:typename:int	file:	access:public
type	sylar/sylar/tcp_server.h	/^    std::string type = "http";$/;"	m	struct:sylar::TcpServerConf	typeref:typename:std::string	access:public
type	sylar/tests/test_nameserver.cc	/^int type = 0;$/;"	v	typeref:typename:int
type_of_iterator	sylar/sylar/ds/roaring.hh	/^    typedef Roaring64MapSetBitForwardIterator type_of_iterator;$/;"	t	class:Roaring64MapSetBitForwardIterator	typeref:typename:Roaring64MapSetBitForwardIterator	access:public
type_of_iterator	sylar/sylar/ds/roaring.hh	/^    typedef Roaring64MapSetBitReverseIterator type_of_iterator;$/;"	t	class:Roaring64MapSetBitReverseIterator	typeref:typename:Roaring64MapSetBitReverseIterator	access:public
type_of_iterator	sylar/sylar/ds/roaring.hh	/^    typedef RoaringSetBitForwardIterator type_of_iterator;$/;"	t	class:RoaringSetBitForwardIterator	typeref:typename:RoaringSetBitForwardIterator	access:public
type_of_iterator	sylar/sylar/ds/roaring.hh	/^    typedef RoaringSetBitReverseIterator type_of_iterator;$/;"	t	class:RoaringSetBitReverseIterator	typeref:typename:RoaringSetBitReverseIterator	access:public
typecode	sylar/sylar/ds/roaring.h	/^    uint8_t typecode;  \/\/ should be:$/;"	m	struct:roaring_uint32_iterator_s	typeref:typename:uint8_t	access:public
typecode	sylar/sylar/ds/roaring.h	/^    uint8_t typecode;$/;"	m	struct:shared_container_s	typeref:typename:uint8_t	access:public
typecodes	sylar/sylar/ds/roaring.h	/^    uint8_t *typecodes;$/;"	m	struct:roaring_array_s	typeref:typename:uint8_t *	access:public
uint16_compare	sylar/sylar/ds/roaring.c	/^static int uint16_compare(const void *a, const void *b) {$/;"	f	typeref:typename:int	file:	signature:(const void * a,const void * b)
uncompress	sylar/sylar/ds/bitmap.cc	/^Bitmap::ptr Bitmap::uncompress() const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:Bitmap::ptr	signature:() const
uncompress	sylar/sylar/ds/bitmap.h	/^    Bitmap::ptr uncompress() const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:Bitmap::ptr	access:public	signature:() const
uncompress	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::ptr RoaringBitmap::uncompress() const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap::ptr	signature:() const
uncompress	sylar/sylar/ds/roaring_bitmap.h	/^    RoaringBitmap::ptr uncompress() const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:RoaringBitmap::ptr	access:public	signature:() const
uninit	sylar/sylar/ns/ns_client.cc	/^void NSClient::uninit() {$/;"	f	class:sylar::ns::NSClient	typeref:typename:void	signature:()
uninit	sylar/sylar/ns/ns_client.h	/^    void uninit();$/;"	p	class:sylar::ns::NSClient	typeref:typename:void	access:public	signature:()
union_uint16	sylar/sylar/ds/roaring.c	/^size_t union_uint16(const uint16_t *set_1, size_t size_1, const uint16_t *set_2,$/;"	f	typeref:typename:size_t	signature:(const uint16_t * set_1,size_t size_1,const uint16_t * set_2,size_t size_2,uint16_t * buffer)
union_uint16	sylar/sylar/ds/roaring.h	/^size_t union_uint16(const uint16_t *set_1, size_t size_1, const uint16_t *set_2,$/;"	p	typeref:typename:size_t	signature:(const uint16_t * set_1,size_t size_1,const uint16_t * set_2,size_t size_2,uint16_t * buffer)
union_uint32	sylar/sylar/ds/roaring.c	/^size_t union_uint32(const uint32_t *set_1, size_t size_1, const uint32_t *set_2,$/;"	f	typeref:typename:size_t	signature:(const uint32_t * set_1,size_t size_1,const uint32_t * set_2,size_t size_2,uint32_t * buffer)
union_uint32	sylar/sylar/ds/roaring.h	/^size_t union_uint32(const uint32_t *set_1, size_t size_1, const uint32_t *set_2,$/;"	p	typeref:typename:size_t	signature:(const uint32_t * set_1,size_t size_1,const uint32_t * set_2,size_t size_2,uint32_t * buffer)
union_uint32_card	sylar/sylar/ds/roaring.c	/^size_t union_uint32_card(const uint32_t *set_1, size_t size_1,$/;"	f	typeref:typename:size_t	signature:(const uint32_t * set_1,size_t size_1,const uint32_t * set_2,size_t size_2)
union_uint32_card	sylar/sylar/ds/roaring.h	/^size_t union_uint32_card(const uint32_t *set_1, size_t size_1,$/;"	p	typeref:typename:size_t	signature:(const uint32_t * set_1,size_t size_1,const uint32_t * set_2,size_t size_2)
union_vector16	sylar/sylar/ds/roaring.c	/^uint32_t union_vector16(const uint16_t *__restrict__ array1, uint32_t length1,$/;"	f	typeref:typename:uint32_t	signature:(const uint16_t * __restrict__ array1,uint32_t length1,const uint16_t * __restrict__ array2,uint32_t length2,uint16_t * __restrict__ output)
union_vector16	sylar/sylar/ds/roaring.h	/^uint32_t union_vector16(const uint16_t *__restrict__ set_1, uint32_t size_1,$/;"	p	typeref:typename:uint32_t	signature:(const uint16_t * __restrict__ set_1,uint32_t size_1,const uint16_t * __restrict__ set_2,uint32_t size_2,uint16_t * __restrict__ buffer)
uniqshuf	sylar/sylar/ds/roaring.c	/^static uint8_t uniqshuf[] = {$/;"	v	typeref:typename:uint8_t[]	file:
unique	sylar/sylar/ds/roaring.c	/^static inline uint32_t unique(uint16_t *out, uint32_t len) {$/;"	f	typeref:typename:uint32_t	file:	signature:(uint16_t * out,uint32_t len)
unique_xor	sylar/sylar/ds/roaring.c	/^static inline uint32_t unique_xor(uint16_t *out, uint32_t len) {$/;"	f	typeref:typename:uint32_t	file:	signature:(uint16_t * out,uint32_t len)
uniteBytes	sylar/sylar/ds/roaring.hh	/^    static uint64_t uniteBytes(const uint32_t highBytes,$/;"	f	class:Roaring64Map	typeref:typename:uint64_t	access:private	signature:(const uint32_t highBytes,const uint32_t lowBytes)
unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::Node	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::NodeInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::QueryRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::QueryResponse	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
unknown_fields	sylar/sylar/ns/ns_protobuf.pb.h	/^  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {$/;"	f	class:sylar::ns::RegisterRequest	typeref:typename:const::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &	access:public	signature:() const
unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	class:sylar::CASLock	typeref:typename:void	access:public	signature:()
unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	class:sylar::Mutex	typeref:typename:void	access:public	signature:()
unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	class:sylar::RWMutex	typeref:typename:void	access:public	signature:()
unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	class:sylar::Spinlock	typeref:typename:void	access:public	signature:()
unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	struct:sylar::ReadScopedLockImpl	typeref:typename:void	access:public	signature:()
unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	struct:sylar::ScopedLockImpl	typeref:typename:void	access:public	signature:()
unlock	sylar/sylar/mutex.h	/^    void unlock() {$/;"	f	struct:sylar::WriteScopedLockImpl	typeref:typename:void	access:public	signature:()
unlock	sylar/sylar/mutex.h	/^    void unlock() {}$/;"	f	class:sylar::NullMutex	typeref:typename:void	access:public	signature:()
unlock	sylar/sylar/mutex.h	/^    void unlock() {}$/;"	f	class:sylar::NullRWMutex	typeref:typename:void	access:public	signature:()
unsafe_arena_release_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline ::sylar::ns::Node* RegisterInfo::unsafe_arena_release_node() {$/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:::sylar::ns::Node *	signature:()
unsafe_arena_set_allocated_node	sylar/sylar/ns/ns_protobuf.pb.h	/^  void unsafe_arena_set_allocated_node($/;"	p	class:sylar::ns::RegisterInfo	typeref:typename:void	access:public	signature:(::sylar::ns::Node * node)
unsafe_arena_set_allocated_node	sylar/sylar/ns/ns_protobuf.pb.h	/^inline void RegisterInfo::unsafe_arena_set_allocated_node($/;"	f	class:sylar::ns::RegisterInfo	typeref:typename:void	signature:(::sylar::ns::Node * node)
unsetThis	sylar/sylar/db/fox_thread.cc	/^void FoxThread::unsetThis() {$/;"	f	class:sylar::FoxThread	typeref:typename:void	signature:()
unsetThis	sylar/sylar/db/fox_thread.h	/^    void unsetThis();$/;"	p	class:sylar::FoxThread	typeref:typename:void	access:public	signature:()
update	sylar/sylar/ds/dict.h	/^    uint64_t update(const char* str) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:(const char * str)
update	sylar/sylar/ds/dict.h	/^    uint64_t update(const char* str, const uint32_t& size) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:(const char * str,const uint32_t & size)
update	sylar/sylar/ds/dict.h	/^    uint64_t update(const std::string& str) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:uint64_t	access:public	signature:(const std::string & str)
update	sylar/sylar/streams/load_balance.cc	/^void LoadBalance::update(const std::unordered_map<uint64_t, LoadBalanceItem::ptr>& adds$/;"	f	class:sylar::LoadBalance	typeref:typename:void	signature:(const std::unordered_map<uint64_t,LoadBalanceItem::ptr> & adds,std::unordered_map<uint64_t,LoadBalanceItem::ptr> & dels)
update	sylar/sylar/streams/load_balance.h	/^    void update(const std::unordered_map<uint64_t, LoadBalanceItem::ptr>& adds$/;"	p	class:sylar::LoadBalance	typeref:typename:void	access:public	signature:(const std::unordered_map<uint64_t,LoadBalanceItem::ptr> & adds,std::unordered_map<uint64_t,LoadBalanceItem::ptr> & dels)
updates	sylar/sylar/ns/ns_protobuf.pb.h	/^      updates() const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> &	access:public	signature:() const
updates	sylar/sylar/ns/ns_protobuf.pb.h	/^  const ::sylar::ns::NodeInfo& updates(int index) const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	access:public	signature:(int index) const
updates	sylar/sylar/ns/ns_protobuf.pb.h	/^NotifyMessage::updates() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sylar::ns::NodeInfo> &	signature:() const
updates	sylar/sylar/ns/ns_protobuf.pb.h	/^inline const ::sylar::ns::NodeInfo& NotifyMessage::updates(int index) const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:const::sylar::ns::NodeInfo &	signature:(int index) const
updates	sylar/sylar/ns/ns_protobuf.proto	/^    repeated NodeInfo updates = 2;$/;"	f
updates_size	sylar/sylar/ns/ns_protobuf.pb.h	/^  int updates_size() const;$/;"	p	class:sylar::ns::NotifyMessage	typeref:typename:int	access:public	signature:() const
updates_size	sylar/sylar/ns/ns_protobuf.pb.h	/^inline int NotifyMessage::updates_size() const {$/;"	f	class:sylar::ns::NotifyMessage	typeref:typename:int	signature:() const
upperValue	sylar/sylar/ds/util.cc	/^uint32_t PrimeGenerator::upperValue(uint32_t v, uint32_t skip) {$/;"	f	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	signature:(uint32_t v,uint32_t skip)
upperValue	sylar/sylar/ds/util.h	/^    uint32_t upperValue(uint32_t v, uint32_t skip = 0);$/;"	p	class:sylar::ds::PrimeGenerator	typeref:typename:uint32_t	access:public	signature:(uint32_t v,uint32_t skip=0)
uri_chars	sylar/sylar/util.cc	/^static const char uri_chars[256] = {$/;"	v	namespace:sylar	typeref:typename:const char[256]	file:
uri_parser_en_main	sylar/sylar/uri.rl.cc	/^static const int uri_parser_en_main = 451;$/;"	v	namespace:sylar	typeref:typename:const int	file:
uri_parser_error	sylar/sylar/uri.rl.cc	/^static const int uri_parser_error = 0;$/;"	v	namespace:sylar	typeref:typename:const int	file:
uri_parser_first_final	sylar/sylar/uri.rl.cc	/^static const int uri_parser_first_final = 451;$/;"	v	namespace:sylar	typeref:typename:const int	file:
uri_parser_start	sylar/sylar/uri.rl.cc	/^static const int uri_parser_start = 451;$/;"	v	namespace:sylar	typeref:typename:const int	file:
uri_relaxed	sylar/sylar/http/http11_parser.h	/^  int uri_relaxed;$/;"	m	struct:http_parser	typeref:typename:int	access:public
use	sylar/sylar/db/mysql.cc	/^bool MySQL::use(const std::string& dbname) {$/;"	f	class:sylar::MySQL	typeref:typename:bool	signature:(const std::string & dbname)
use	sylar/sylar/db/mysql.h	/^    bool use(const std::string& dbname);$/;"	p	class:sylar::MySQL	typeref:typename:bool	access:public	signature:(const std::string & dbname)
used	sylar/sylar/rock/rock_stream.h	/^   int32_t used;$/;"	m	struct:sylar::RockResult	typeref:typename:int32_t	access:public
usleep	sylar/sylar/hook.cc	/^int usleep(useconds_t usec) {$/;"	f	typeref:typename:int	signature:(useconds_t usec)
usleep_fun	sylar/sylar/hook.h	/^typedef int (*usleep_fun)(useconds_t usec);$/;"	t	typeref:typename:int (*)(useconds_t usec)
val	sylar/sylar/ds/dict.h	/^        V* val;$/;"	m	struct:sylar::ds::Dict::Node	typeref:typename:V *	access:public
val	sylar/sylar/ds/hash_map.h	/^        V val;$/;"	m	struct:sylar::ds::HashMap::Node	typeref:typename:V	access:public
val	sylar/sylar/ds/hash_multimap.h	/^        V* val;$/;"	m	struct:sylar::ds::HashMultimap::Node	typeref:typename:V *	access:public
val	sylar/sylar/ds/timed_cache.h	/^        mutable V val;$/;"	m	struct:sylar::ds::TimedCache::Item	typeref:typename:V	access:public
val	sylar/sylar/ds/timed_lru_cache.h	/^        mutable V val;$/;"	m	struct:sylar::ds::TimedLruCache::Item	typeref:typename:V	access:public
value	sylar/sylar/ds/roaring.h	/^    uint16_t value;$/;"	m	struct:rle16_s	typeref:typename:uint16_t	access:public
value_type	sylar/sylar/ds/hash_map.h	/^    typedef Pair<K, V> value_type;$/;"	t	class:sylar::ds::HashMap	typeref:typename:Pair<K,V>	access:public
value_type	sylar/sylar/ds/roaring.hh	/^    typedef uint32_t value_type;$/;"	t	class:RoaringSetBitForwardIterator	typeref:typename:uint32_t	access:public
value_type	sylar/sylar/ds/roaring.hh	/^    typedef uint32_t value_type;$/;"	t	class:RoaringSetBitReverseIterator	typeref:typename:uint32_t	access:public
value_type	sylar/sylar/ds/roaring.hh	/^    typedef uint64_t value_type;$/;"	t	class:Roaring64MapSetBitForwardIterator	typeref:typename:uint64_t	access:public
value_type	sylar/sylar/ds/roaring.hh	/^    typedef uint64_t value_type;$/;"	t	class:Roaring64MapSetBitReverseIterator	typeref:typename:uint64_t	access:public
value_type	sylar/sylar/ds/timed_lru_cache.h	/^    typedef typename list_type::iterator value_type;$/;"	t	class:sylar::ds::TimedLruCache	typeref:typename:list_type::iterator	access:public
version	sylar/sylar/rock/rock_protocol.h	/^    uint8_t version;$/;"	m	struct:sylar::RockMsgHeader	typeref:typename:uint8_t	access:public
vid	sylar/tests/test_array.cc	/^    uint32_t vid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
vid	sylar/tests/test_dict.cc	/^    uint32_t vid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
vid	sylar/tests/test_hashmap.cc	/^    uint32_t vid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
vid	sylar/tests/test_hashmultimap.cc	/^    uint32_t vid;$/;"	m	struct:PidVid	typeref:typename:uint32_t	file:	access:public
volatile	build/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
vs	sylar/tests/test_bitmap.cc	/^std::vector<sylar::ds::Bitmap::ptr> vs;$/;"	v	typeref:typename:std::vector<sylar::ds::Bitmap::ptr>
vs2	sylar/tests/test_bitmap.cc	/^std::vector<sylar::ds::Bitmap::ptr> vs2;$/;"	v	typeref:typename:std::vector<sylar::ds::Bitmap::ptr>
vs3	sylar/tests/test_bitmap.cc	/^std::vector<sylar::ds::RoaringBitmap::ptr> vs3;$/;"	v	typeref:typename:std::vector<sylar::ds::RoaringBitmap::ptr>
wait	sylar/sylar/mutex.cc	/^void FiberSemaphore::wait() {$/;"	f	class:sylar::FiberSemaphore	typeref:typename:void	signature:()
wait	sylar/sylar/mutex.cc	/^void Semaphore::wait() {$/;"	f	class:sylar::Semaphore	typeref:typename:void	signature:()
wait	sylar/sylar/mutex.h	/^    void wait();$/;"	p	class:sylar::FiberSemaphore	typeref:typename:void	access:public	signature:()
wait	sylar/sylar/mutex.h	/^    void wait();$/;"	p	class:sylar::Semaphore	typeref:typename:void	access:public	signature:()
waitAll	sylar/sylar/worker.cc	/^void WorkerGroup::waitAll() {$/;"	f	class:sylar::WorkerGroup	typeref:typename:void	signature:()
waitAll	sylar/sylar/worker.h	/^    void waitAll();$/;"	p	class:sylar::WorkerGroup	typeref:typename:void	access:public	signature:()
waitFiber	sylar/sylar/streams/async_socket_stream.cc	/^bool AsyncSocketStream::waitFiber() {$/;"	f	class:sylar::AsyncSocketStream	typeref:typename:bool	signature:()
waitFiber	sylar/sylar/streams/async_socket_stream.h	/^    bool waitFiber();$/;"	p	class:sylar::AsyncSocketStream	typeref:typename:bool	access:protected	signature:()
warn	sylar/sylar/log.cc	/^void Logger::warn(LogEvent::ptr event) {$/;"	f	class:sylar::Logger	typeref:typename:void	signature:(LogEvent::ptr event)
warn	sylar/sylar/log.h	/^    void warn(LogEvent::ptr event);$/;"	p	class:sylar::Logger	typeref:typename:void	access:public	signature:(LogEvent::ptr event)
watcher_callback	sylar/sylar/zk_client.h	/^    typedef std::function<void(int type, int stat, const std::string& path, ZKClient::ptr)> watc/;"	t	class:sylar::ZKClient	access:public
watcher_callback2	sylar/sylar/zk_client.h	/^    typedef std::function<void(int type, int stat, const std::string& path)> watcher_callback2;$/;"	t	class:sylar::ZKClient	access:private
wcallback	sylar/sylar/ds/hash_map.h	/^    typedef std::function<bool(const K& k, V& v)> wcallback;$/;"	t	class:sylar::ds::HashMap	access:public
wcallback	sylar/sylar/ds/hash_multimap.h	/^    typedef std::function<bool(const K& k, V* v, int)> wcallback;$/;"	t	class:sylar::ds::HashMultimap	access:public
weak_ptr	sylar/sylar/socket.h	/^    typedef std::weak_ptr<Socket> weak_ptr;$/;"	t	class:sylar::Socket	typeref:typename:std::weak_ptr<Socket>	access:public
weight	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t weight() const;$/;"	p	class:sylar::ns::Node	typeref:typename:uint32_t	access:public	signature:() const
weight	sylar/sylar/ns/ns_protobuf.pb.h	/^inline uint32_t Node::weight() const {$/;"	f	class:sylar::ns::Node	typeref:typename:uint32_t	signature:() const
weight	sylar/sylar/ns/ns_protobuf.proto	/^    optional uint32 weight = 3; \/\/权重$/;"	f
weight_	sylar/sylar/ns/ns_protobuf.pb.h	/^  uint32_t weight_;$/;"	m	class:sylar::ns::Node	typeref:typename:uint32_t	access:private
wforeach	sylar/sylar/ds/hash_map.h	/^    void wforeach(wcallback cb) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:void	access:public	signature:(wcallback cb)
wforeach	sylar/sylar/ds/hash_multimap.h	/^    void wforeach(wcallback cb) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:void	access:public	signature:(wcallback cb)
worker	sylar/samples/my_http_server.cc	/^sylar::IOManager::ptr worker;$/;"	v	typeref:typename:sylar::IOManager::ptr
worker	sylar/tests/test_http_server.cc	/^sylar::IOManager::ptr worker;$/;"	v	typeref:typename:sylar::IOManager::ptr
wrapcb	sylar/sylar/db/fox_thread.cc	/^void FoxThreadPool::wrapcb(std::shared_ptr<FoxThread> thr, callback cb) {$/;"	f	class:sylar::FoxThreadPool	typeref:typename:void	signature:(std::shared_ptr<FoxThread> thr,callback cb)
wrapcb	sylar/sylar/db/fox_thread.h	/^    void wrapcb(std::shared_ptr<FoxThread>, callback cb);$/;"	p	class:sylar::FoxThreadPool	typeref:typename:void	access:private	signature:(std::shared_ptr<FoxThread>,callback cb)
write	sylar/sylar/bytearray.cc	/^void ByteArray::write(const void* buf, size_t size) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(const void * buf,size_t size)
write	sylar/sylar/bytearray.h	/^    void write(const void* buf, size_t size);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(const void * buf,size_t size)
write	sylar/sylar/ds/roaring.hh	/^    size_t write(char *buf, bool portable = true) const {$/;"	f	class:Roaring	typeref:typename:size_t	access:public	signature:(char * buf,bool portable=true) const
write	sylar/sylar/ds/roaring.hh	/^    size_t write(char *buf, bool portable = true) const {$/;"	f	class:Roaring64Map	typeref:typename:size_t	access:public	signature:(char * buf,bool portable=true) const
write	sylar/sylar/hook.cc	/^ssize_t write(int fd, const void *buf, size_t count) {$/;"	f	typeref:typename:ssize_t	signature:(int fd,const void * buf,size_t count)
write	sylar/sylar/iomanager.h	/^        EventContext write;$/;"	m	struct:sylar::IOManager::FdContext	typeref:typename:EventContext	access:public
write	sylar/sylar/stream.h	/^    virtual int write(ByteArray::ptr ba, size_t length) = 0;$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
write	sylar/sylar/stream.h	/^    virtual int write(const void* buffer, size_t length) = 0;$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(const void * buffer,size_t length)
write	sylar/sylar/streams/socket_stream.cc	/^int SocketStream::write(ByteArray::ptr ba, size_t length) {$/;"	f	class:sylar::SocketStream	typeref:typename:int	signature:(ByteArray::ptr ba,size_t length)
write	sylar/sylar/streams/socket_stream.cc	/^int SocketStream::write(const void* buffer, size_t length) {$/;"	f	class:sylar::SocketStream	typeref:typename:int	signature:(const void * buffer,size_t length)
write	sylar/sylar/streams/socket_stream.h	/^    virtual int write(ByteArray::ptr ba, size_t length) override;$/;"	p	class:sylar::SocketStream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
write	sylar/sylar/streams/socket_stream.h	/^    virtual int write(const void* buffer, size_t length) override;$/;"	p	class:sylar::SocketStream	typeref:typename:int	access:public	signature:(const void * buffer,size_t length)
write	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::write(ByteArray::ptr ba, size_t length) {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(ByteArray::ptr ba,size_t length)
write	sylar/sylar/streams/zlib_stream.cc	/^int ZlibStream::write(const void* buffer, size_t length) {$/;"	f	class:sylar::ZlibStream	typeref:typename:int	signature:(const void * buffer,size_t length)
write	sylar/sylar/streams/zlib_stream.h	/^    virtual int write(ByteArray::ptr ba, size_t length) override;$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
write	sylar/sylar/streams/zlib_stream.h	/^    virtual int write(const void* buffer, size_t length) override;$/;"	p	class:sylar::ZlibStream	typeref:typename:int	access:public	signature:(const void * buffer,size_t length)
writeDouble	sylar/sylar/bytearray.cc	/^void ByteArray::writeDouble (double value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(double value)
writeDouble	sylar/sylar/bytearray.h	/^    void writeDouble (double value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(double value)
writeFint16	sylar/sylar/bytearray.cc	/^void ByteArray::writeFint16 (int16_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(int16_t value)
writeFint16	sylar/sylar/bytearray.h	/^    void writeFint16 (int16_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(int16_t value)
writeFint32	sylar/sylar/bytearray.cc	/^void ByteArray::writeFint32 (int32_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(int32_t value)
writeFint32	sylar/sylar/bytearray.h	/^    void writeFint32 (int32_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(int32_t value)
writeFint64	sylar/sylar/bytearray.cc	/^void ByteArray::writeFint64 (int64_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(int64_t value)
writeFint64	sylar/sylar/bytearray.h	/^    void writeFint64 (int64_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(int64_t value)
writeFint8	sylar/sylar/bytearray.cc	/^void ByteArray::writeFint8  (int8_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(int8_t value)
writeFint8	sylar/sylar/bytearray.h	/^    void writeFint8  (int8_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(int8_t value)
writeFixSize	sylar/sylar/stream.cc	/^int Stream::writeFixSize(ByteArray::ptr ba, size_t length) {$/;"	f	class:sylar::Stream	typeref:typename:int	signature:(ByteArray::ptr ba,size_t length)
writeFixSize	sylar/sylar/stream.cc	/^int Stream::writeFixSize(const void* buffer, size_t length) {$/;"	f	class:sylar::Stream	typeref:typename:int	signature:(const void * buffer,size_t length)
writeFixSize	sylar/sylar/stream.h	/^    virtual int writeFixSize(ByteArray::ptr ba, size_t length);$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(ByteArray::ptr ba,size_t length)
writeFixSize	sylar/sylar/stream.h	/^    virtual int writeFixSize(const void* buffer, size_t length);$/;"	p	class:sylar::Stream	typeref:typename:int	access:public	signature:(const void * buffer,size_t length)
writeFloat	sylar/sylar/bytearray.cc	/^void ByteArray::writeFloat  (float value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(float value)
writeFloat	sylar/sylar/bytearray.h	/^    void writeFloat  (float value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(float value)
writeFuint16	sylar/sylar/bytearray.cc	/^void ByteArray::writeFuint16(uint16_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(uint16_t value)
writeFuint16	sylar/sylar/bytearray.h	/^    void writeFuint16(uint16_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(uint16_t value)
writeFuint32	sylar/sylar/bytearray.cc	/^void ByteArray::writeFuint32(uint32_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(uint32_t value)
writeFuint32	sylar/sylar/bytearray.h	/^    void writeFuint32(uint32_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(uint32_t value)
writeFuint64	sylar/sylar/bytearray.cc	/^void ByteArray::writeFuint64(uint64_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(uint64_t value)
writeFuint64	sylar/sylar/bytearray.h	/^    void writeFuint64(uint64_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(uint64_t value)
writeFuint8	sylar/sylar/bytearray.cc	/^void ByteArray::writeFuint8 (uint8_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(uint8_t value)
writeFuint8	sylar/sylar/bytearray.h	/^    void writeFuint8 (uint8_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(uint8_t value)
writeInt32	sylar/sylar/bytearray.cc	/^void ByteArray::writeInt32  (int32_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(int32_t value)
writeInt32	sylar/sylar/bytearray.h	/^    void writeInt32  (int32_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(int32_t value)
writeInt64	sylar/sylar/bytearray.cc	/^void ByteArray::writeInt64  (int64_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(int64_t value)
writeInt64	sylar/sylar/bytearray.h	/^    void writeInt64  (int64_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(int64_t value)
writeStringF16	sylar/sylar/bytearray.cc	/^void ByteArray::writeStringF16(const std::string& value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(const std::string & value)
writeStringF16	sylar/sylar/bytearray.h	/^    void writeStringF16(const std::string& value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(const std::string & value)
writeStringF32	sylar/sylar/bytearray.cc	/^void ByteArray::writeStringF32(const std::string& value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(const std::string & value)
writeStringF32	sylar/sylar/bytearray.h	/^    void writeStringF32(const std::string& value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(const std::string & value)
writeStringF64	sylar/sylar/bytearray.cc	/^void ByteArray::writeStringF64(const std::string& value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(const std::string & value)
writeStringF64	sylar/sylar/bytearray.h	/^    void writeStringF64(const std::string& value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(const std::string & value)
writeStringVint	sylar/sylar/bytearray.cc	/^void ByteArray::writeStringVint(const std::string& value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(const std::string & value)
writeStringVint	sylar/sylar/bytearray.h	/^    void writeStringVint(const std::string& value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(const std::string & value)
writeStringWithoutLength	sylar/sylar/bytearray.cc	/^void ByteArray::writeStringWithoutLength(const std::string& value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(const std::string & value)
writeStringWithoutLength	sylar/sylar/bytearray.h	/^    void writeStringWithoutLength(const std::string& value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(const std::string & value)
writeTo	sylar/sylar/ds/array.h	/^    bool writeTo(std::ostream& os, uint64_t speed = -1) {$/;"	f	class:sylar::ds::Array	typeref:typename:bool	access:public	signature:(std::ostream & os,uint64_t speed=-1)
writeTo	sylar/sylar/ds/bitmap.cc	/^void Bitmap::writeTo(sylar::ByteArray::ptr ba) const {$/;"	f	class:sylar::ds::Bitmap	typeref:typename:void	signature:(sylar::ByteArray::ptr ba) const
writeTo	sylar/sylar/ds/bitmap.h	/^    void writeTo(sylar::ByteArray::ptr ba) const;$/;"	p	class:sylar::ds::Bitmap	typeref:typename:void	access:public	signature:(sylar::ByteArray::ptr ba) const
writeTo	sylar/sylar/ds/dict.h	/^    bool writeTo(std::ostream& os, uint64_t speed = -1) {$/;"	f	class:sylar::ds::Dict	typeref:typename:bool	access:public	signature:(std::ostream & os,uint64_t speed=-1)
writeTo	sylar/sylar/ds/dict.h	/^    bool writeTo(std::ostream& os, uint64_t speed = -1) {$/;"	f	class:sylar::ds::StringDict	typeref:typename:bool	access:public	signature:(std::ostream & os,uint64_t speed=-1)
writeTo	sylar/sylar/ds/hash_map.h	/^    bool writeTo(std::ostream& os, uint64_t speed = -1) {$/;"	f	class:sylar::ds::HashMap	typeref:typename:bool	access:public	signature:(std::ostream & os,uint64_t speed=-1)
writeTo	sylar/sylar/ds/hash_multimap.h	/^    bool writeTo(std::ostream& os, uint64_t speed = -1) {$/;"	f	class:sylar::ds::HashMultimap	typeref:typename:bool	access:public	signature:(std::ostream & os,uint64_t speed=-1)
writeTo	sylar/sylar/ds/roaring_bitmap.cc	/^void RoaringBitmap::writeTo(sylar::ByteArray::ptr ba) const {$/;"	f	class:sylar::ds::RoaringBitmap	typeref:typename:void	signature:(sylar::ByteArray::ptr ba) const
writeTo	sylar/sylar/ds/roaring_bitmap.h	/^    void writeTo(sylar::ByteArray::ptr ba) const;$/;"	p	class:sylar::ds::RoaringBitmap	typeref:typename:void	access:public	signature:(sylar::ByteArray::ptr ba) const
writeToFile	sylar/sylar/bytearray.cc	/^bool ByteArray::writeToFile(const std::string& name) const {$/;"	f	class:sylar::ByteArray	typeref:typename:bool	signature:(const std::string & name) const
writeToFile	sylar/sylar/bytearray.h	/^    bool writeToFile(const std::string& name) const;$/;"	p	class:sylar::ByteArray	typeref:typename:bool	access:public	signature:(const std::string & name) const
writeUint32	sylar/sylar/bytearray.cc	/^void ByteArray::writeUint32 (uint32_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(uint32_t value)
writeUint32	sylar/sylar/bytearray.h	/^    void writeUint32 (uint32_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(uint32_t value)
writeUint64	sylar/sylar/bytearray.cc	/^void ByteArray::writeUint64 (uint64_t value) {$/;"	f	class:sylar::ByteArray	typeref:typename:void	signature:(uint64_t value)
writeUint64	sylar/sylar/bytearray.h	/^    void writeUint64 (uint64_t value);$/;"	p	class:sylar::ByteArray	typeref:typename:void	access:public	signature:(uint64_t value)
write_fun	sylar/sylar/hook.h	/^typedef ssize_t (*write_fun)(int fd, const void *buf, size_t count);$/;"	t	typeref:typename:ssize_t (*)(int fd,const void * buf,size_t count)
write_to_file	sylar/tests/test_bitmap.cc	/^void write_to_file(const std::string& name) {$/;"	f	typeref:typename:void	signature:(const std::string & name)
writev	sylar/sylar/hook.cc	/^ssize_t writev(int fd, const struct iovec *iov, int iovcnt) {$/;"	f	typeref:typename:ssize_t	signature:(int fd,const struct iovec * iov,int iovcnt)
writev_fun	sylar/sylar/hook.h	/^typedef ssize_t (*writev_fun)(int fd, const struct iovec *iov, int iovcnt);$/;"	t	typeref:typename:ssize_t (*)(int fd,const struct iovec * iov,int iovcnt)
wrlock	sylar/sylar/mutex.h	/^    void wrlock() {$/;"	f	class:sylar::RWMutex	typeref:typename:void	access:public	signature:()
wrlock	sylar/sylar/mutex.h	/^    void wrlock() {}$/;"	f	class:sylar::NullRWMutex	typeref:typename:void	access:public	signature:()
x_compress	sylar/tests/test_bitmap.cc	/^void x_compress() {$/;"	f	typeref:typename:void	signature:()
x_uncompress	sylar/tests/test_bitmap.cc	/^void x_uncompress() {$/;"	f	typeref:typename:void	signature:()
xdigit_chars	sylar/sylar/util.cc	/^static const char xdigit_chars[256] = {$/;"	v	namespace:sylar	typeref:typename:const char[256]	file:
xml_sent	sylar/sylar/http/http11_parser.h	/^  int xml_sent;$/;"	m	struct:http_parser	typeref:typename:int	access:public
xorFetch	sylar/sylar/util.h	/^    static T xorFetch(volatile T& t, S v) {$/;"	f	class:sylar::Atomic	typeref:typename:T	access:public	signature:(volatile T & t,S v)
xorStruct	sylar/sylar/util/hash_util.cc	/^    xorStruct(char value) : m_value(value) {}$/;"	f	struct:sylar::xorStruct	file:	access:public	signature:(char value)
xorStruct	sylar/sylar/util/hash_util.cc	/^struct xorStruct {$/;"	s	namespace:sylar	file:
xor_cardinality	sylar/sylar/ds/roaring.hh	/^    uint64_t xor_cardinality(const Roaring &r) const {$/;"	f	class:Roaring	typeref:typename:uint64_t	access:public	signature:(const Roaring & r) const
xor_uint16	sylar/sylar/ds/roaring.c	/^int32_t xor_uint16(const uint16_t *array_1, int32_t card_1,$/;"	f	typeref:typename:int32_t	signature:(const uint16_t * array_1,int32_t card_1,const uint16_t * array_2,int32_t card_2,uint16_t * out)
xor_uint16	sylar/sylar/ds/roaring.h	/^int32_t xor_uint16(const uint16_t *array_1, int32_t card_1,$/;"	p	typeref:typename:int32_t	signature:(const uint16_t * array_1,int32_t card_1,const uint16_t * array_2,int32_t card_2,uint16_t * out)
xor_vector16	sylar/sylar/ds/roaring.c	/^uint32_t xor_vector16(const uint16_t *__restrict__ array1, uint32_t length1,$/;"	f	typeref:typename:uint32_t	signature:(const uint16_t * __restrict__ array1,uint32_t length1,const uint16_t * __restrict__ array2,uint32_t length2,uint16_t * __restrict__ output)
xor_vector16	sylar/sylar/ds/roaring.h	/^uint32_t xor_vector16(const uint16_t *__restrict__ array1, uint32_t length1,$/;"	p	typeref:typename:uint32_t	signature:(const uint16_t * __restrict__ array1,uint32_t length1,const uint16_t * __restrict__ array2,uint32_t length2,uint16_t * __restrict__ output)
zksd	sylar/tests/test_service_discovery.cc	/^sylar::ZKServiceDiscovery::ptr zksd(new sylar::ZKServiceDiscovery("127.0.0.1:21812"));$/;"	v	typeref:typename:sylar::ZKServiceDiscovery::ptr
~A	sylar/tests/test_module.cc	/^    ~A() {$/;"	f	class:A	file:	access:public	signature:()
~Address	sylar/sylar/address.h	/^    virtual ~Address() {}$/;"	f	class:sylar::Address	access:public	signature:()
~Array	sylar/sylar/ds/array.h	/^    ~Array() {$/;"	f	class:sylar::ds::Array	access:public	signature:()
~AsyncSocketStreamManager	sylar/sylar/streams/async_socket_stream.h	/^    virtual ~AsyncSocketStreamManager() {}$/;"	f	class:sylar::AsyncSocketStreamManager	access:public	signature:()
~Bitmap	sylar/sylar/ds/bitmap.cc	/^Bitmap::~Bitmap() {$/;"	f	class:sylar::ds::Bitmap	signature:()
~Bitmap	sylar/sylar/ds/bitmap.h	/^    ~Bitmap();$/;"	p	class:sylar::ds::Bitmap	access:public	signature:()
~ByteArray	sylar/sylar/bytearray.cc	/^ByteArray::~ByteArray() {$/;"	f	class:sylar::ByteArray	signature:()
~ByteArray	sylar/sylar/bytearray.h	/^    ~ByteArray();$/;"	p	class:sylar::ByteArray	access:public	signature:()
~CASLock	sylar/sylar/mutex.h	/^    ~CASLock() {$/;"	f	class:sylar::CASLock	access:public	signature:()
~ConfigVarBase	sylar/sylar/config.h	/^    virtual ~ConfigVarBase() {}$/;"	f	class:sylar::ConfigVarBase	access:public	signature:()
~Ctx	sylar/sylar/db/redis.cc	/^FoxRedis::Ctx::~Ctx() {$/;"	f	class:sylar::FoxRedis::Ctx	signature:()
~Ctx	sylar/sylar/db/redis.cc	/^FoxRedisCluster::Ctx::~Ctx() {$/;"	f	class:sylar::FoxRedisCluster::Ctx	signature:()
~Ctx	sylar/sylar/db/redis.h	/^        ~Ctx();$/;"	p	struct:sylar::FoxRedis::Ctx	access:public	signature:()
~Ctx	sylar/sylar/db/redis.h	/^        ~Ctx();$/;"	p	struct:sylar::FoxRedisCluster::Ctx	access:public	signature:()
~Ctx	sylar/sylar/streams/async_socket_stream.h	/^        virtual ~Ctx() {}$/;"	f	struct:sylar::AsyncSocketStream::Ctx	access:public	signature:()
~Data	sylar/sylar/db/mysql.cc	/^MySQLStmtRes::Data::~Data() {$/;"	f	class:sylar::MySQLStmtRes::Data	signature:()
~Data	sylar/sylar/db/mysql.h	/^        ~Data();$/;"	p	struct:sylar::MySQLStmtRes::Data	access:public	signature:()
~Dict	sylar/sylar/ds/dict.h	/^    ~Dict() {$/;"	f	class:sylar::ds::Dict	access:public	signature:()
~FdCtx	sylar/sylar/fd_manager.cc	/^FdCtx::~FdCtx() {$/;"	f	class:sylar::FdCtx	signature:()
~FdCtx	sylar/sylar/fd_manager.h	/^    ~FdCtx();$/;"	p	class:sylar::FdCtx	access:public	signature:()
~Fiber	sylar/sylar/fiber.cc	/^Fiber::~Fiber() {$/;"	f	class:sylar::Fiber	signature:()
~Fiber	sylar/sylar/fiber.h	/^    ~Fiber();$/;"	p	class:sylar::Fiber	access:public	signature:()
~FiberSemaphore	sylar/sylar/mutex.cc	/^FiberSemaphore::~FiberSemaphore() {$/;"	f	class:sylar::FiberSemaphore	signature:()
~FiberSemaphore	sylar/sylar/mutex.h	/^    ~FiberSemaphore();$/;"	p	class:sylar::FiberSemaphore	access:public	signature:()
~FormatItem	sylar/sylar/log.h	/^        virtual ~FormatItem() {}$/;"	f	class:sylar::LogFormatter::FormatItem	access:public	signature:()
~FoxRedis	sylar/sylar/db/redis.cc	/^FoxRedis::~FoxRedis() {$/;"	f	class:sylar::FoxRedis	signature:()
~FoxRedis	sylar/sylar/db/redis.h	/^    ~FoxRedis();$/;"	p	class:sylar::FoxRedis	access:public	signature:()
~FoxRedisCluster	sylar/sylar/db/redis.cc	/^FoxRedisCluster::~FoxRedisCluster() {$/;"	f	class:sylar::FoxRedisCluster	signature:()
~FoxRedisCluster	sylar/sylar/db/redis.h	/^    ~FoxRedisCluster();$/;"	p	class:sylar::FoxRedisCluster	access:public	signature:()
~FoxThread	sylar/sylar/db/fox_thread.cc	/^FoxThread::~FoxThread() {$/;"	f	class:sylar::FoxThread	signature:()
~FoxThread	sylar/sylar/db/fox_thread.h	/^    ~FoxThread();$/;"	p	class:sylar::FoxThread	access:public	signature:()
~FoxThreadPool	sylar/sylar/db/fox_thread.cc	/^FoxThreadPool::~FoxThreadPool() {$/;"	f	class:sylar::FoxThreadPool	signature:()
~FoxThreadPool	sylar/sylar/db/fox_thread.h	/^    ~FoxThreadPool();$/;"	p	class:sylar::FoxThreadPool	access:public	signature:()
~HashLruCache	sylar/sylar/ds/lru_cache.h	/^    ~HashLruCache() {$/;"	f	class:sylar::ds::HashLruCache	access:public	signature:()
~HashMap	sylar/sylar/ds/hash_map.h	/^    ~HashMap() {$/;"	f	class:sylar::ds::HashMap	access:public	signature:()
~HashMultimap	sylar/sylar/ds/hash_multimap.h	/^    ~HashMultimap() {$/;"	f	class:sylar::ds::HashMultimap	access:public	signature:()
~HashTimedCache	sylar/sylar/ds/timed_cache.h	/^    ~HashTimedCache() {$/;"	f	class:sylar::ds::HashTimedCache	access:public	signature:()
~HashTimedLruCache	sylar/sylar/ds/timed_lru_cache.h	/^    ~HashTimedLruCache() {$/;"	f	class:sylar::ds::HashTimedLruCache	access:public	signature:()
~HttpConnection	sylar/sylar/http/http_connection.cc	/^HttpConnection::~HttpConnection() {$/;"	f	class:sylar::http::HttpConnection	signature:()
~HttpConnection	sylar/sylar/http/http_connection.h	/^    ~HttpConnection();$/;"	p	class:sylar::http::HttpConnection	access:public	signature:()
~IDB	sylar/sylar/db/db.h	/^    virtual ~IDB() {}$/;"	f	class:sylar::IDB	access:public	signature:()
~IFoxThread	sylar/sylar/db/fox_thread.h	/^    virtual ~IFoxThread(){};$/;"	f	class:sylar::IFoxThread	access:public	signature:()
~ILoadBalance	sylar/sylar/streams/load_balance.h	/^    virtual ~ILoadBalance() {}$/;"	f	class:sylar::ILoadBalance	access:public	signature:()
~IOManager	sylar/sylar/iomanager.cc	/^IOManager::~IOManager() {$/;"	f	class:sylar::IOManager	signature:()
~IOManager	sylar/sylar/iomanager.h	/^    ~IOManager();$/;"	p	class:sylar::IOManager	access:public	signature:()
~IRedis	sylar/sylar/db/redis.h	/^    virtual ~IRedis() {}$/;"	f	class:sylar::IRedis	access:public	signature:()
~ISQLData	sylar/sylar/db/db.h	/^    virtual ~ISQLData() {}$/;"	f	class:sylar::ISQLData	access:public	signature:()
~ISQLQuery	sylar/sylar/db/db.h	/^    virtual ~ISQLQuery() {}$/;"	f	class:sylar::ISQLQuery	access:public	signature:()
~ISQLUpdate	sylar/sylar/db/db.h	/^    virtual ~ISQLUpdate() {}$/;"	f	class:sylar::ISQLUpdate	access:public	signature:()
~IServiceDiscovery	sylar/sylar/streams/service_discovery.h	/^    virtual ~IServiceDiscovery() { }$/;"	f	class:sylar::IServiceDiscovery	access:public	signature:()
~IServletCreator	sylar/sylar/http/servlet.h	/^    virtual ~IServletCreator() {}$/;"	f	class:sylar::http::IServletCreator	access:public	signature:()
~IStmt	sylar/sylar/db/db.h	/^    virtual ~IStmt(){}$/;"	f	class:sylar::IStmt	access:public	signature:()
~ISyncRedis	sylar/sylar/db/redis.h	/^    virtual ~ISyncRedis() {}$/;"	f	class:sylar::ISyncRedis	access:public	signature:()
~ITransaction	sylar/sylar/db/db.h	/^    virtual ~ITransaction() {};$/;"	f	class:sylar::ITransaction	access:public	signature:()
~LoadBalanceItem	sylar/sylar/streams/load_balance.h	/^    virtual ~LoadBalanceItem() {}$/;"	f	class:sylar::LoadBalanceItem	access:public	signature:()
~LogAppender	sylar/sylar/log.h	/^    virtual ~LogAppender() {}$/;"	f	class:sylar::LogAppender	access:public	signature:()
~LogEventWrap	sylar/sylar/log.cc	/^LogEventWrap::~LogEventWrap() {$/;"	f	class:sylar::LogEventWrap	signature:()
~LogEventWrap	sylar/sylar/log.h	/^    ~LogEventWrap();$/;"	p	class:sylar::LogEventWrap	access:public	signature:()
~LruCache	sylar/sylar/ds/lru_cache.h	/^    ~LruCache() {$/;"	f	class:sylar::ds::LruCache	access:public	signature:()
~Message	sylar/sylar/protocol.h	/^    virtual ~Message() {}$/;"	f	class:sylar::Message	access:public	signature:()
~MessageDecoder	sylar/sylar/protocol.h	/^    virtual ~MessageDecoder() {}$/;"	f	class:sylar::MessageDecoder	access:public	signature:()
~Module	sylar/sylar/module.h	/^    virtual ~Module() {}$/;"	f	class:sylar::Module	access:public	signature:()
~Mutex	sylar/sylar/mutex.h	/^    ~Mutex() {$/;"	f	class:sylar::Mutex	access:public	signature:()
~MySQLManager	sylar/sylar/db/mysql.cc	/^MySQLManager::~MySQLManager() {$/;"	f	class:sylar::MySQLManager	signature:()
~MySQLManager	sylar/sylar/db/mysql.h	/^    ~MySQLManager();$/;"	p	class:sylar::MySQLManager	access:public	signature:()
~MySQLStmt	sylar/sylar/db/mysql.cc	/^MySQLStmt::~MySQLStmt() {$/;"	f	class:sylar::MySQLStmt	signature:()
~MySQLStmt	sylar/sylar/db/mysql.h	/^    ~MySQLStmt();$/;"	p	class:sylar::MySQLStmt	access:public	signature:()
~MySQLStmtRes	sylar/sylar/db/mysql.cc	/^MySQLStmtRes::~MySQLStmtRes() {$/;"	f	class:sylar::MySQLStmtRes	signature:()
~MySQLStmtRes	sylar/sylar/db/mysql.h	/^    ~MySQLStmtRes();$/;"	p	class:sylar::MySQLStmtRes	access:public	signature:()
~MySQLThreadIniter	sylar/sylar/db/mysql.cc	/^        ~MySQLThreadIniter() {$/;"	f	struct:sylar::__anond5d4ef180110::MySQLThreadIniter	file:	access:public	signature:()
~MySQLTransaction	sylar/sylar/db/mysql.cc	/^MySQLTransaction::~MySQLTransaction() {$/;"	f	class:sylar::MySQLTransaction	signature:()
~MySQLTransaction	sylar/sylar/db/mysql.h	/^    ~MySQLTransaction();$/;"	p	class:sylar::MySQLTransaction	access:public	signature:()
~NSClient	sylar/sylar/ns/ns_client.cc	/^NSClient::~NSClient() {$/;"	f	class:sylar::ns::NSClient	signature:()
~NSClient	sylar/sylar/ns/ns_client.h	/^    ~NSClient();$/;"	p	class:sylar::ns::NSClient	access:public	signature:()
~Node	sylar/sylar/bytearray.cc	/^ByteArray::Node::~Node() {$/;"	f	class:sylar::ByteArray::Node	signature:()
~Node	sylar/sylar/bytearray.h	/^        ~Node();$/;"	p	struct:sylar::ByteArray::Node	access:public	signature:()
~Node	sylar/sylar/ns/ns_protobuf.pb.cc	/^Node::~Node() {$/;"	f	class:sylar::ns::Node	signature:()
~NodeDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~NodeDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::NodeDefaultTypeInternal	file:	access:public	signature:()
~NodeInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^NodeInfo::~NodeInfo() {$/;"	f	class:sylar::ns::NodeInfo	signature:()
~NodeInfoDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~NodeInfoDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::NodeInfoDefaultTypeInternal	file:	access:public	signature:()
~Noncopyable	sylar/sylar/noncopyable.h	/^    ~Noncopyable() = default;$/;"	p	class:sylar::Noncopyable	access:public	signature:()
~NotifyMessage	sylar/sylar/ns/ns_protobuf.pb.cc	/^NotifyMessage::~NotifyMessage() {$/;"	f	class:sylar::ns::NotifyMessage	signature:()
~NotifyMessageDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~NotifyMessageDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::NotifyMessageDefaultTypeInternal	file:	access:public	signature:()
~NullMutex	sylar/sylar/mutex.h	/^    ~NullMutex() {}$/;"	f	class:sylar::NullMutex	access:public	signature:()
~NullRWMutex	sylar/sylar/mutex.h	/^    ~NullRWMutex() {}$/;"	f	class:sylar::NullRWMutex	access:public	signature:()
~QueryRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^QueryRequest::~QueryRequest() {$/;"	f	class:sylar::ns::QueryRequest	signature:()
~QueryRequestDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~QueryRequestDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::QueryRequestDefaultTypeInternal	file:	access:public	signature:()
~QueryResponse	sylar/sylar/ns/ns_protobuf.pb.cc	/^QueryResponse::~QueryResponse() {$/;"	f	class:sylar::ns::QueryResponse	signature:()
~QueryResponseDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~QueryResponseDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::QueryResponseDefaultTypeInternal	file:	access:public	signature:()
~RSACipher	sylar/sylar/util/crypto_util.cc	/^RSACipher::~RSACipher() {$/;"	f	class:sylar::RSACipher	signature:()
~RSACipher	sylar/sylar/util/crypto_util.h	/^    ~RSACipher();$/;"	p	class:sylar::RSACipher	access:public	signature:()
~RWMutex	sylar/sylar/mutex.h	/^    ~RWMutex() {$/;"	f	class:sylar::RWMutex	access:public	signature:()
~ReadScopedLockImpl	sylar/sylar/mutex.h	/^    ~ReadScopedLockImpl() {$/;"	f	struct:sylar::ReadScopedLockImpl	access:public	signature:()
~RegisterInfo	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterInfo::~RegisterInfo() {$/;"	f	class:sylar::ns::RegisterInfo	signature:()
~RegisterInfoDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~RegisterInfoDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::RegisterInfoDefaultTypeInternal	file:	access:public	signature:()
~RegisterRequest	sylar/sylar/ns/ns_protobuf.pb.cc	/^RegisterRequest::~RegisterRequest() {$/;"	f	class:sylar::ns::RegisterRequest	signature:()
~RegisterRequestDefaultTypeInternal	sylar/sylar/ns/ns_protobuf.pb.cc	/^  ~RegisterRequestDefaultTypeInternal() {}$/;"	f	struct:sylar::ns::RegisterRequestDefaultTypeInternal	file:	access:public	signature:()
~Roaring	sylar/sylar/ds/roaring.hh	/^    ~Roaring() { ra_clear(&roaring.high_low_container); }$/;"	f	class:Roaring	access:public	signature:()
~RoaringBitmap	sylar/sylar/ds/roaring_bitmap.cc	/^RoaringBitmap::~RoaringBitmap() {$/;"	f	class:sylar::ds::RoaringBitmap	signature:()
~RoaringBitmap	sylar/sylar/ds/roaring_bitmap.h	/^    ~RoaringBitmap();$/;"	p	class:sylar::ds::RoaringBitmap	access:public	signature:()
~RockBody	sylar/sylar/rock/rock_protocol.h	/^    virtual ~RockBody(){}$/;"	f	class:sylar::RockBody	access:public	signature:()
~RockStream	sylar/sylar/rock/rock_stream.cc	/^RockStream::~RockStream() {$/;"	f	class:sylar::RockStream	signature:()
~RockStream	sylar/sylar/rock/rock_stream.h	/^    ~RockStream();$/;"	p	class:sylar::RockStream	access:public	signature:()
~SDLoadBalance	sylar/sylar/streams/load_balance.h	/^    virtual ~SDLoadBalance() {}$/;"	f	class:sylar::SDLoadBalance	access:public	signature:()
~SQLite3	sylar/sylar/db/sqlite3.cc	/^SQLite3::~SQLite3() {$/;"	f	class:sylar::SQLite3	signature:()
~SQLite3	sylar/sylar/db/sqlite3.h	/^    ~SQLite3();$/;"	p	class:sylar::SQLite3	access:public	signature:()
~SQLite3Manager	sylar/sylar/db/sqlite3.cc	/^SQLite3Manager::~SQLite3Manager() {$/;"	f	class:sylar::SQLite3Manager	signature:()
~SQLite3Manager	sylar/sylar/db/sqlite3.h	/^    ~SQLite3Manager();$/;"	p	class:sylar::SQLite3Manager	access:public	signature:()
~SQLite3Stmt	sylar/sylar/db/sqlite3.cc	/^SQLite3Stmt::~SQLite3Stmt() {$/;"	f	class:sylar::SQLite3Stmt	signature:()
~SQLite3Stmt	sylar/sylar/db/sqlite3.h	/^    ~SQLite3Stmt();$/;"	p	class:sylar::SQLite3Stmt	access:public	signature:()
~SQLite3Transaction	sylar/sylar/db/sqlite3.cc	/^SQLite3Transaction::~SQLite3Transaction() {$/;"	f	class:sylar::SQLite3Transaction	signature:()
~SQLite3Transaction	sylar/sylar/db/sqlite3.h	/^    ~SQLite3Transaction();$/;"	p	class:sylar::SQLite3Transaction	access:public	signature:()
~Scheduler	sylar/sylar/scheduler.cc	/^Scheduler::~Scheduler() {$/;"	f	class:sylar::Scheduler	signature:()
~Scheduler	sylar/sylar/scheduler.h	/^    virtual ~Scheduler();$/;"	p	class:sylar::Scheduler	access:public	signature:()
~SchedulerSwitcher	sylar/sylar/scheduler.cc	/^SchedulerSwitcher::~SchedulerSwitcher() {$/;"	f	class:sylar::SchedulerSwitcher	signature:()
~SchedulerSwitcher	sylar/sylar/scheduler.h	/^    ~SchedulerSwitcher();$/;"	p	class:sylar::SchedulerSwitcher	access:public	signature:()
~ScopedLockImpl	sylar/sylar/mutex.h	/^    ~ScopedLockImpl() {$/;"	f	struct:sylar::ScopedLockImpl	access:public	signature:()
~Semaphore	sylar/sylar/mutex.cc	/^Semaphore::~Semaphore() {$/;"	f	class:sylar::Semaphore	signature:()
~Semaphore	sylar/sylar/mutex.h	/^    ~Semaphore();$/;"	p	class:sylar::Semaphore	access:public	signature:()
~SendCtx	sylar/sylar/streams/async_socket_stream.h	/^        virtual ~SendCtx() {}$/;"	f	struct:sylar::AsyncSocketStream::SendCtx	access:public	signature:()
~Servlet	sylar/sylar/http/servlet.h	/^    virtual ~Servlet() {}$/;"	f	class:sylar::http::Servlet	access:public	signature:()
~Socket	sylar/sylar/socket.cc	/^Socket::~Socket() {$/;"	f	class:sylar::Socket	signature:()
~Socket	sylar/sylar/socket.h	/^    virtual ~Socket();$/;"	p	class:sylar::Socket	access:public	signature:()
~SocketStream	sylar/sylar/streams/socket_stream.cc	/^SocketStream::~SocketStream() {$/;"	f	class:sylar::SocketStream	signature:()
~SocketStream	sylar/sylar/streams/socket_stream.h	/^    ~SocketStream();$/;"	p	class:sylar::SocketStream	access:public	signature:()
~Spinlock	sylar/sylar/mutex.h	/^    ~Spinlock() {$/;"	f	class:sylar::Spinlock	access:public	signature:()
~Stream	sylar/sylar/stream.h	/^    virtual ~Stream() {}$/;"	f	class:sylar::Stream	access:public	signature:()
~TcpServer	sylar/sylar/tcp_server.cc	/^TcpServer::~TcpServer() {$/;"	f	class:sylar::TcpServer	signature:()
~TcpServer	sylar/sylar/tcp_server.h	/^    virtual ~TcpServer();$/;"	p	class:sylar::TcpServer	access:public	signature:()
~Thread	sylar/sylar/thread.cc	/^Thread::~Thread() {$/;"	f	class:sylar::Thread	signature:()
~Thread	sylar/sylar/thread.h	/^    ~Thread();$/;"	p	class:sylar::Thread	access:public	signature:()
~TimedCache	sylar/sylar/ds/timed_cache.h	/^    ~TimedCache() {$/;"	f	class:sylar::ds::TimedCache	access:public	signature:()
~TimedLruCache	sylar/sylar/ds/timed_lru_cache.h	/^    ~TimedLruCache() {$/;"	f	class:sylar::ds::TimedLruCache	access:public	signature:()
~TimerManager	sylar/sylar/timer.cc	/^TimerManager::~TimerManager() {$/;"	f	class:sylar::TimerManager	signature:()
~TimerManager	sylar/sylar/timer.h	/^    virtual ~TimerManager();$/;"	p	class:sylar::TimerManager	access:public	signature:()
~WSServlet	sylar/sylar/http/ws_servlet.h	/^    virtual ~WSServlet() {}$/;"	f	class:sylar::http::WSServlet	access:public	signature:()
~WorkerGroup	sylar/sylar/worker.cc	/^WorkerGroup::~WorkerGroup() {$/;"	f	class:sylar::WorkerGroup	signature:()
~WorkerGroup	sylar/sylar/worker.h	/^    ~WorkerGroup();$/;"	p	class:sylar::WorkerGroup	access:public	signature:()
~WriteScopedLockImpl	sylar/sylar/mutex.h	/^    ~WriteScopedLockImpl() {$/;"	f	struct:sylar::WriteScopedLockImpl	access:public	signature:()
~ZKClient	sylar/sylar/zk_client.cc	/^ZKClient::~ZKClient() {$/;"	f	class:sylar::ZKClient	signature:()
~ZKClient	sylar/sylar/zk_client.h	/^    ~ZKClient();$/;"	p	class:sylar::ZKClient	access:public	signature:()
~ZlibStream	sylar/sylar/streams/zlib_stream.cc	/^ZlibStream::~ZlibStream() {$/;"	f	class:sylar::ZlibStream	signature:()
~ZlibStream	sylar/sylar/streams/zlib_stream.h	/^    ~ZlibStream();$/;"	p	class:sylar::ZlibStream	access:public	signature:()
~iterator_base	sylar/sylar/ds/bitmap.h	/^        virtual ~iterator_base() {}$/;"	f	class:sylar::ds::Bitmap::iterator_base	access:public	signature:()
完整编译项目需要配置	sylar/README.md	/^### 完整编译项目需要配置$/;"	S
